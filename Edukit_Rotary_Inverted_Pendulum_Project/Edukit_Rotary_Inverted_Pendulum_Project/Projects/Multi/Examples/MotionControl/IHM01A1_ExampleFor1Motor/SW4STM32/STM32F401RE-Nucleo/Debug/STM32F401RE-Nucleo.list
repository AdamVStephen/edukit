
STM32F401RE-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011528  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001428  080116c8  080116c8  000216c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012af0  08012af0  00022af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08012af8  08012af8  00022af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012b00  08012b00  00022b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000850  20000000  08012b04  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007b34  20000850  08013354  00030850  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20008384  08013354  00038384  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030850  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030880  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014c85  00000000  00000000  000308c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002a3a  00000000  00000000  00045548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001478  00000000  00000000  00047f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000ff4  00000000  00000000  00049400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000470c  00000000  00000000  0004a3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000144bb  00000000  00000000  0004eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000955d1  00000000  00000000  00062fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007144  00000000  00000000  000f858c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000dc  00000000  00000000  000ff6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000850 	.word	0x20000850
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080116b0 	.word	0x080116b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000854 	.word	0x20000854
 80001dc:	080116b0 	.word	0x080116b0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <L6474_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6474_AttachErrorHandler(void (*callback)(uint16_t))
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <L6474_AttachErrorHandler+0x1c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000870 	.word	0x20000870

08001040 <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <L6474_AttachFlagInterrupt+0x1c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2000086c 	.word	0x2000086c

08001060 <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	21a8      	movs	r1, #168	; 0xa8
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fb16 	bl	80026a0 <L6474_SendCommand>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	21b8      	movs	r1, #184	; 0xb8
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fb08 	bl	80026a0 <L6474_SendCommand>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80010a8:	4b71      	ldr	r3, [pc, #452]	; (8001270 <L6474_CmdGetParam+0x1d8>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	3b01      	subs	r3, #1
 80010b6:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 80010b8:	2300      	movs	r3, #0
 80010ba:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 80010bc:	4b6d      	ldr	r3, [pc, #436]	; (8001274 <L6474_CmdGetParam+0x1dc>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80010c2:	7cbb      	ldrb	r3, [r7, #18]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <L6474_CmdGetParam+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80010c8:	f002 fa0e 	bl	80034e8 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e02b      	b.n	800112e <L6474_CmdGetParam+0x96>
    {
      spiTxBursts[0][i] = L6474_NOP;
 80010d6:	4a68      	ldr	r2, [pc, #416]	; (8001278 <L6474_CmdGetParam+0x1e0>)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	4413      	add	r3, r2
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 80010e0:	4a65      	ldr	r2, [pc, #404]	; (8001278 <L6474_CmdGetParam+0x1e0>)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	4413      	add	r3, r2
 80010e6:	3303      	adds	r3, #3
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80010ec:	4a62      	ldr	r2, [pc, #392]	; (8001278 <L6474_CmdGetParam+0x1e0>)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	4413      	add	r3, r2
 80010f2:	3306      	adds	r3, #6
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80010f8:	4a5f      	ldr	r2, [pc, #380]	; (8001278 <L6474_CmdGetParam+0x1e0>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	4413      	add	r3, r2
 80010fe:	3309      	adds	r3, #9
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 8001104:	4a5d      	ldr	r2, [pc, #372]	; (800127c <L6474_CmdGetParam+0x1e4>)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	3303      	adds	r3, #3
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 8001110:	4a5a      	ldr	r2, [pc, #360]	; (800127c <L6474_CmdGetParam+0x1e4>)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	4413      	add	r3, r2
 8001116:	3306      	adds	r3, #6
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 800111c:	4a57      	ldr	r2, [pc, #348]	; (800127c <L6474_CmdGetParam+0x1e4>)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	4413      	add	r3, r2
 8001122:	3309      	adds	r3, #9
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3301      	adds	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	4b50      	ldr	r3, [pc, #320]	; (8001270 <L6474_CmdGetParam+0x1d8>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	4293      	cmp	r3, r2
 800113a:	d3cc      	bcc.n	80010d6 <L6474_CmdGetParam+0x3e>
    }
    switch (param)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	3b01      	subs	r3, #1
 8001140:	2b18      	cmp	r3, #24
 8001142:	d84d      	bhi.n	80011e0 <L6474_CmdGetParam+0x148>
 8001144:	a201      	add	r2, pc, #4	; (adr r2, 800114c <L6474_CmdGetParam+0xb4>)
 8001146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114a:	bf00      	nop
 800114c:	080011b1 	.word	0x080011b1
 8001150:	080011c7 	.word	0x080011c7
 8001154:	080011b1 	.word	0x080011b1
 8001158:	080011e1 	.word	0x080011e1
 800115c:	080011e1 	.word	0x080011e1
 8001160:	080011e1 	.word	0x080011e1
 8001164:	080011e1 	.word	0x080011e1
 8001168:	080011e1 	.word	0x080011e1
 800116c:	080011e1 	.word	0x080011e1
 8001170:	080011e1 	.word	0x080011e1
 8001174:	080011e1 	.word	0x080011e1
 8001178:	080011e1 	.word	0x080011e1
 800117c:	080011e1 	.word	0x080011e1
 8001180:	080011e1 	.word	0x080011e1
 8001184:	080011e1 	.word	0x080011e1
 8001188:	080011e1 	.word	0x080011e1
 800118c:	080011e1 	.word	0x080011e1
 8001190:	080011e1 	.word	0x080011e1
 8001194:	080011e1 	.word	0x080011e1
 8001198:	080011e1 	.word	0x080011e1
 800119c:	080011e1 	.word	0x080011e1
 80011a0:	080011e1 	.word	0x080011e1
 80011a4:	080011e1 	.word	0x080011e1
 80011a8:	080011c7 	.word	0x080011c7
 80011ac:	080011c7 	.word	0x080011c7
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	7c7b      	ldrb	r3, [r7, #17]
 80011b6:	f042 0220 	orr.w	r2, r2, #32
 80011ba:	b2d1      	uxtb	r1, r2
 80011bc:	4a2e      	ldr	r2, [pc, #184]	; (8001278 <L6474_CmdGetParam+0x1e0>)
 80011be:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 80011c0:	2303      	movs	r3, #3
 80011c2:	74fb      	strb	r3, [r7, #19]
        break;
 80011c4:	e018      	b.n	80011f8 <L6474_CmdGetParam+0x160>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	7c7b      	ldrb	r3, [r7, #17]
 80011cc:	f042 0220 	orr.w	r2, r2, #32
 80011d0:	b2d1      	uxtb	r1, r2
 80011d2:	4a29      	ldr	r2, [pc, #164]	; (8001278 <L6474_CmdGetParam+0x1e0>)
 80011d4:	4413      	add	r3, r2
 80011d6:	460a      	mov	r2, r1
 80011d8:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 80011da:	2302      	movs	r3, #2
 80011dc:	74fb      	strb	r3, [r7, #19]
        break;
 80011de:	e00b      	b.n	80011f8 <L6474_CmdGetParam+0x160>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	7c7b      	ldrb	r3, [r7, #17]
 80011e6:	f042 0220 	orr.w	r2, r2, #32
 80011ea:	b2d1      	uxtb	r1, r2
 80011ec:	4a22      	ldr	r2, [pc, #136]	; (8001278 <L6474_CmdGetParam+0x1e0>)
 80011ee:	4413      	add	r3, r2
 80011f0:	460a      	mov	r2, r1
 80011f2:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80011f8:	f002 f96d 	bl	80034d6 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80011fc:	2301      	movs	r3, #1
 80011fe:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <L6474_CmdGetParam+0x1dc>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	f47f af58 	bne.w	80010bc <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 800120c:	7cfb      	ldrb	r3, [r7, #19]
 800120e:	f1c3 0303 	rsb	r3, r3, #3
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	e011      	b.n	800123a <L6474_CmdGetParam+0x1a2>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	4a16      	ldr	r2, [pc, #88]	; (8001278 <L6474_CmdGetParam+0x1e0>)
 8001220:	1898      	adds	r0, r3, r2
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	4a14      	ldr	r2, [pc, #80]	; (800127c <L6474_CmdGetParam+0x1e4>)
 800122c:	4413      	add	r3, r2
 800122e:	4619      	mov	r1, r3
 8001230:	f002 f920 	bl	8003474 <L6474_WriteBytes>
       i++)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
       i < L6474_CMD_ARG_MAX_NB_BYTES;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2b03      	cmp	r3, #3
 800123e:	d9ea      	bls.n	8001216 <L6474_CmdGetParam+0x17e>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001240:	7c7b      	ldrb	r3, [r7, #17]
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <L6474_CmdGetParam+0x1e4>)
 8001244:	4413      	add	r3, r2
 8001246:	78db      	ldrb	r3, [r3, #3]
 8001248:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 800124a:	7c7a      	ldrb	r2, [r7, #17]
 800124c:	490b      	ldr	r1, [pc, #44]	; (800127c <L6474_CmdGetParam+0x1e4>)
 800124e:	440a      	add	r2, r1
 8001250:	7992      	ldrb	r2, [r2, #6]
 8001252:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001254:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 8001256:	7c7a      	ldrb	r2, [r7, #17]
 8001258:	4908      	ldr	r1, [pc, #32]	; (800127c <L6474_CmdGetParam+0x1e4>)
 800125a:	440a      	add	r2, r1
 800125c:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800125e:	4313      	orrs	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001262:	f002 f941 	bl	80034e8 <L6474_Board_EnableIrq>
    
  return (spiRxData);
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000874 	.word	0x20000874
 8001274:	20000890 	.word	0x20000890
 8001278:	20000878 	.word	0x20000878
 800127c:	20000884 	.word	0x20000884

08001280 <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800128a:	4b3c      	ldr	r3, [pc, #240]	; (800137c <L6474_CmdGetStatus+0xfc>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	3b01      	subs	r3, #1
 8001298:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 800129a:	2300      	movs	r3, #0
 800129c:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 800129e:	4b38      	ldr	r3, [pc, #224]	; (8001380 <L6474_CmdGetStatus+0x100>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80012aa:	f002 f91d 	bl	80034e8 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e01f      	b.n	80012f8 <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 80012b8:	4a32      	ldr	r2, [pc, #200]	; (8001384 <L6474_CmdGetStatus+0x104>)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 80012c2:	4a30      	ldr	r2, [pc, #192]	; (8001384 <L6474_CmdGetStatus+0x104>)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	3303      	adds	r3, #3
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 80012ce:	4a2d      	ldr	r2, [pc, #180]	; (8001384 <L6474_CmdGetStatus+0x104>)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4413      	add	r3, r2
 80012d4:	3306      	adds	r3, #6
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 80012da:	4a2b      	ldr	r2, [pc, #172]	; (8001388 <L6474_CmdGetStatus+0x108>)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	3303      	adds	r3, #3
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 80012e6:	4a28      	ldr	r2, [pc, #160]	; (8001388 <L6474_CmdGetStatus+0x108>)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4413      	add	r3, r2
 80012ec:	3306      	adds	r3, #6
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	3301      	adds	r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	4b20      	ldr	r3, [pc, #128]	; (800137c <L6474_CmdGetStatus+0xfc>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4293      	cmp	r3, r2
 8001304:	d3d8      	bcc.n	80012b8 <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 8001306:	7abb      	ldrb	r3, [r7, #10]
 8001308:	4a1e      	ldr	r2, [pc, #120]	; (8001384 <L6474_CmdGetStatus+0x104>)
 800130a:	21d0      	movs	r1, #208	; 0xd0
 800130c:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 800130e:	f002 f8e2 	bl	80034d6 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001312:	2301      	movs	r3, #1
 8001314:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <L6474_CmdGetStatus+0x100>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1be      	bne.n	800129e <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e011      	b.n	800134a <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	4a15      	ldr	r2, [pc, #84]	; (8001384 <L6474_CmdGetStatus+0x104>)
 8001330:	1898      	adds	r0, r3, r2
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4613      	mov	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	4413      	add	r3, r2
 800133a:	4a13      	ldr	r2, [pc, #76]	; (8001388 <L6474_CmdGetStatus+0x108>)
 800133c:	4413      	add	r3, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f002 f898 	bl	8003474 <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d9ea      	bls.n	8001326 <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001350:	7abb      	ldrb	r3, [r7, #10]
 8001352:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <L6474_CmdGetStatus+0x108>)
 8001354:	4413      	add	r3, r2
 8001356:	78db      	ldrb	r3, [r3, #3]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	7abb      	ldrb	r3, [r7, #10]
 800135e:	490a      	ldr	r1, [pc, #40]	; (8001388 <L6474_CmdGetStatus+0x108>)
 8001360:	440b      	add	r3, r1
 8001362:	799b      	ldrb	r3, [r3, #6]
 8001364:	b21b      	sxth	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b21b      	sxth	r3, r3
 800136a:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800136c:	f002 f8bc 	bl	80034e8 <L6474_Board_EnableIrq>
  
  return (status);
 8001370:	893b      	ldrh	r3, [r7, #8]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000874 	.word	0x20000874
 8001380:	20000890 	.word	0x20000890
 8001384:	20000878 	.word	0x20000878
 8001388:	20000884 	.word	0x20000884

0800138c <L6474_CmdNop>:
 * @brief  Issues the Nop command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdNop(uint8_t deviceId)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_NOP);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f001 f980 	bl	80026a0 <L6474_SendCommand>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80013ba:	4b69      	ldr	r3, [pc, #420]	; (8001560 <L6474_CmdSetParam+0x1b8>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	3b01      	subs	r3, #1
 80013c8:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 80013ca:	2300      	movs	r3, #0
 80013cc:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 80013ce:	4b65      	ldr	r3, [pc, #404]	; (8001564 <L6474_CmdSetParam+0x1bc>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80013d4:	7cbb      	ldrb	r3, [r7, #18]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80013da:	f002 f885 	bl	80034e8 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80013de:	2300      	movs	r3, #0
 80013e0:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	e019      	b.n	800141c <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 80013e8:	4a5f      	ldr	r2, [pc, #380]	; (8001568 <L6474_CmdSetParam+0x1c0>)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	4413      	add	r3, r2
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 80013f2:	4a5d      	ldr	r2, [pc, #372]	; (8001568 <L6474_CmdSetParam+0x1c0>)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	4413      	add	r3, r2
 80013f8:	3303      	adds	r3, #3
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80013fe:	4a5a      	ldr	r2, [pc, #360]	; (8001568 <L6474_CmdSetParam+0x1c0>)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	4413      	add	r3, r2
 8001404:	3306      	adds	r3, #6
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 800140a:	4a57      	ldr	r2, [pc, #348]	; (8001568 <L6474_CmdSetParam+0x1c0>)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	4413      	add	r3, r2
 8001410:	3309      	adds	r3, #9
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	4b50      	ldr	r3, [pc, #320]	; (8001560 <L6474_CmdSetParam+0x1b8>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	4293      	cmp	r3, r2
 8001428:	d3de      	bcc.n	80013e8 <L6474_CmdSetParam+0x40>
    }
    switch (param)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	3b01      	subs	r3, #1
 800142e:	2b17      	cmp	r3, #23
 8001430:	d85c      	bhi.n	80014ec <L6474_CmdSetParam+0x144>
 8001432:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <L6474_CmdSetParam+0x90>)
 8001434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001438:	08001499 	.word	0x08001499
 800143c:	080014c9 	.word	0x080014c9
 8001440:	08001499 	.word	0x08001499
 8001444:	080014ed 	.word	0x080014ed
 8001448:	080014ed 	.word	0x080014ed
 800144c:	080014ed 	.word	0x080014ed
 8001450:	080014ed 	.word	0x080014ed
 8001454:	080014ed 	.word	0x080014ed
 8001458:	080014ed 	.word	0x080014ed
 800145c:	080014ed 	.word	0x080014ed
 8001460:	080014ed 	.word	0x080014ed
 8001464:	080014ed 	.word	0x080014ed
 8001468:	080014ed 	.word	0x080014ed
 800146c:	080014ed 	.word	0x080014ed
 8001470:	080014ed 	.word	0x080014ed
 8001474:	080014ed 	.word	0x080014ed
 8001478:	080014ed 	.word	0x080014ed
 800147c:	080014ed 	.word	0x080014ed
 8001480:	080014ed 	.word	0x080014ed
 8001484:	080014ed 	.word	0x080014ed
 8001488:	080014ed 	.word	0x080014ed
 800148c:	080014ed 	.word	0x080014ed
 8001490:	080014ed 	.word	0x080014ed
 8001494:	080014c9 	.word	0x080014c9
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 8001498:	7c7b      	ldrb	r3, [r7, #17]
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	b2d1      	uxtb	r1, r2
 800149e:	4a32      	ldr	r2, [pc, #200]	; (8001568 <L6474_CmdSetParam+0x1c0>)
 80014a0:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	0c1a      	lsrs	r2, r3, #16
 80014a6:	7c7b      	ldrb	r3, [r7, #17]
 80014a8:	b2d1      	uxtb	r1, r2
 80014aa:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <L6474_CmdSetParam+0x1c0>)
 80014ac:	4413      	add	r3, r2
 80014ae:	460a      	mov	r2, r1
 80014b0:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	0a1a      	lsrs	r2, r3, #8
 80014b6:	7c7b      	ldrb	r3, [r7, #17]
 80014b8:	b2d1      	uxtb	r1, r2
 80014ba:	4a2b      	ldr	r2, [pc, #172]	; (8001568 <L6474_CmdSetParam+0x1c0>)
 80014bc:	4413      	add	r3, r2
 80014be:	460a      	mov	r2, r1
 80014c0:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 80014c2:	2303      	movs	r3, #3
 80014c4:	74fb      	strb	r3, [r7, #19]
        break;
 80014c6:	e01a      	b.n	80014fe <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 80014c8:	7c7b      	ldrb	r3, [r7, #17]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	b2d1      	uxtb	r1, r2
 80014ce:	4a26      	ldr	r2, [pc, #152]	; (8001568 <L6474_CmdSetParam+0x1c0>)
 80014d0:	4413      	add	r3, r2
 80014d2:	460a      	mov	r2, r1
 80014d4:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	0a1a      	lsrs	r2, r3, #8
 80014da:	7c7b      	ldrb	r3, [r7, #17]
 80014dc:	b2d1      	uxtb	r1, r2
 80014de:	4a22      	ldr	r2, [pc, #136]	; (8001568 <L6474_CmdSetParam+0x1c0>)
 80014e0:	4413      	add	r3, r2
 80014e2:	460a      	mov	r2, r1
 80014e4:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 80014e6:	2302      	movs	r3, #2
 80014e8:	74fb      	strb	r3, [r7, #19]
        break;
 80014ea:	e008      	b.n	80014fe <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 80014ec:	7c7b      	ldrb	r3, [r7, #17]
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	b2d1      	uxtb	r1, r2
 80014f2:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <L6474_CmdSetParam+0x1c0>)
 80014f4:	4413      	add	r3, r2
 80014f6:	460a      	mov	r2, r1
 80014f8:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80014fa:	2301      	movs	r3, #1
 80014fc:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80014fe:	7c7b      	ldrb	r3, [r7, #17]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	b2d1      	uxtb	r1, r2
 8001504:	4a18      	ldr	r2, [pc, #96]	; (8001568 <L6474_CmdSetParam+0x1c0>)
 8001506:	4413      	add	r3, r2
 8001508:	460a      	mov	r2, r1
 800150a:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 800150c:	f001 ffe3 	bl	80034d6 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001510:	2301      	movs	r3, #1
 8001512:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <L6474_CmdSetParam+0x1bc>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	f47f af57 	bne.w	80013ce <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001520:	7cfb      	ldrb	r3, [r7, #19]
 8001522:	f1c3 0303 	rsb	r3, r3, #3
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e011      	b.n	800154e <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <L6474_CmdSetParam+0x1c0>)
 8001534:	1898      	adds	r0, r3, r2
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <L6474_CmdSetParam+0x1c4>)
 8001540:	4413      	add	r3, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f001 ff96 	bl	8003474 <L6474_WriteBytes>
       i++)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3301      	adds	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
       i < L6474_CMD_ARG_MAX_NB_BYTES;
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b03      	cmp	r3, #3
 8001552:	d9ea      	bls.n	800152a <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001554:	f001 ffc8 	bl	80034e8 <L6474_Board_EnableIrq>
}
 8001558:	bf00      	nop
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000874 	.word	0x20000874
 8001564:	20000890 	.word	0x20000890
 8001568:	20000878 	.word	0x20000878
 800156c:	20000884 	.word	0x20000884

08001570 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 8001578:	4b22      	ldr	r3, [pc, #136]	; (8001604 <L6474_Init+0x94>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f001 ffbc 	bl	80034fc <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 8001584:	f002 f9e0 	bl	8003948 <L6474_Board_SpiInit>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 800158e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001592:	f001 f859 	bl	8002648 <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <L6474_Init+0x94>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	f002 f8fd 	bl	800379c <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <L6474_Init+0x94>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 f979 	bl	80038a0 <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 80015ae:	2001      	movs	r0, #1
 80015b0:	f001 ff86 	bl	80034c0 <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <L6474_Init+0x94>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 f963 	bl	800288c <L6474_SetDeviceParamsToPredefinedValues>
 80015c6:	e006      	b.n	80015d6 <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <L6474_Init+0x94>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f001 f8b7 	bl	8002744 <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <L6474_Init+0x94>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fd3f 	bl	8001060 <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <L6474_Init+0x94>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fe49 	bl	8001280 <L6474_CmdGetStatus>

  l6474DriverInstance++;
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <L6474_Init+0x94>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	4b03      	ldr	r3, [pc, #12]	; (8001604 <L6474_Init+0x94>)
 80015f8:	801a      	strh	r2, [r3, #0]
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000892 	.word	0x20000892

08001608 <L6474_GetAcceleration>:
 * @brief Returns the acceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t L6474_GetAcceleration(uint8_t deviceId)
{                                                  
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].acceleration);
 8001612:	79fa      	ldrb	r2, [r7, #7]
 8001614:	4907      	ldr	r1, [pc, #28]	; (8001634 <L6474_GetAcceleration+0x2c>)
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	3318      	adds	r3, #24
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
}            
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000894 	.word	0x20000894

08001638 <L6474_GetAnalogValue>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param L6474 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
float L6474_GetAnalogValue(uint8_t deviceId, uint32_t param)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue = L6474_CmdGetParam(deviceId, param);
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	6839      	ldr	r1, [r7, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fd25 	bl	8001098 <L6474_CmdGetParam>
 800164e:	60b8      	str	r0, [r7, #8]
  float value;
  switch (param)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	3b01      	subs	r3, #1
 8001654:	2b12      	cmp	r3, #18
 8001656:	d84b      	bhi.n	80016f0 <L6474_GetAnalogValue+0xb8>
 8001658:	a201      	add	r2, pc, #4	; (adr r2, 8001660 <L6474_GetAnalogValue+0x28>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	080016ad 	.word	0x080016ad
 8001664:	080016f1 	.word	0x080016f1
 8001668:	080016ad 	.word	0x080016ad
 800166c:	080016f1 	.word	0x080016f1
 8001670:	080016f1 	.word	0x080016f1
 8001674:	080016f1 	.word	0x080016f1
 8001678:	080016f1 	.word	0x080016f1
 800167c:	080016f1 	.word	0x080016f1
 8001680:	080016c1 	.word	0x080016c1
 8001684:	080016f1 	.word	0x080016f1
 8001688:	080016f1 	.word	0x080016f1
 800168c:	080016f1 	.word	0x080016f1
 8001690:	080016f1 	.word	0x080016f1
 8001694:	080016f1 	.word	0x080016f1
 8001698:	080016e1 	.word	0x080016e1
 800169c:	080016e1 	.word	0x080016e1
 80016a0:	080016f1 	.word	0x080016f1
 80016a4:	080016f1 	.word	0x080016f1
 80016a8:	080016d1 	.word	0x080016d1
  {
    case L6474_ABS_POS:
    case L6474_MARK:
      value = (float) L6474_ConvertPosition(registerValue);
 80016ac:	68b8      	ldr	r0, [r7, #8]
 80016ae:	f000 ffab 	bl	8002608 <L6474_ConvertPosition>
 80016b2:	ee07 0a90 	vmov	s15, r0
 80016b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ba:	edc7 7a03 	vstr	s15, [r7, #12]
      break;
 80016be:	e01e      	b.n	80016fe <L6474_GetAnalogValue+0xc6>
    case L6474_TVAL:
      value = L6474_Tval_Par_to_Current(registerValue);    
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	f001 fe89 	bl	80033dc <L6474_Tval_Par_to_Current>
 80016ca:	ed87 0a03 	vstr	s0, [r7, #12]
      break;
 80016ce:	e016      	b.n	80016fe <L6474_GetAnalogValue+0xc6>
    case L6474_OCD_TH:
      value = L6474_Ocd_Par_to_Th(registerValue);    
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 fe45 	bl	8003364 <L6474_Ocd_Par_to_Th>
 80016da:	ed87 0a03 	vstr	s0, [r7, #12]
      break;      
 80016de:	e00e      	b.n	80016fe <L6474_GetAnalogValue+0xc6>
    case L6474_TON_MIN:
    case L6474_TOFF_MIN:
      value = L6474_Tmin_Par_to_Time(registerValue);
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	4618      	mov	r0, r3
 80016e6:	f001 fe91 	bl	800340c <L6474_Tmin_Par_to_Time>
 80016ea:	ed87 0a03 	vstr	s0, [r7, #12]
      break;          
 80016ee:	e006      	b.n	80016fe <L6474_GetAnalogValue+0xc6>
    default:
      value = (float) registerValue;
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016fa:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  return value;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	ee07 3a90 	vmov	s15, r3
}
 8001704:	eeb0 0a67 	vmov.f32	s0, s15
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop

08001710 <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 800171a:	79fa      	ldrb	r2, [r7, #7]
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <L6474_GetCurrentSpeed+0x2c>)
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	440b      	add	r3, r1
 8001728:	3320      	adds	r3, #32
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	b29b      	uxth	r3, r3
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000894 	.word	0x20000894

08001740 <L6474_GetDeceleration>:
 * @brief Returns the deceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t L6474_GetDeceleration(uint8_t deviceId)
{                                                  
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].deceleration);
 800174a:	79fa      	ldrb	r2, [r7, #7]
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <L6474_GetDeceleration+0x2c>)
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	331a      	adds	r3, #26
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	b29b      	uxth	r3, r3
}          
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000894 	.word	0x20000894

08001770 <L6474_GetDeviceState>:
 * @brief Returns the device state
 * @param[in] deviceId (from 0 to 2)
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t L6474_GetDeviceState(uint8_t deviceId)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].motionState;
 800177a:	79fa      	ldrb	r2, [r7, #7]
 800177c:	4907      	ldr	r1, [pc, #28]	; (800179c <L6474_GetDeviceState+0x2c>)
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	440b      	add	r3, r1
 8001788:	3324      	adds	r3, #36	; 0x24
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b2db      	uxtb	r3, r3
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000894 	.word	0x20000894

080017a0 <L6474_GetDirection>:
 * @brief Get the motor current direction
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t L6474_GetDirection(uint8_t deviceId)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].direction;
 80017aa:	79fa      	ldrb	r2, [r7, #7]
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <L6474_GetDirection+0x2c>)
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	3323      	adds	r3, #35	; 0x23
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000894 	.word	0x20000894

080017d0 <L6474_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval L6474_FW_VERSION
 **********************************************************/
uint32_t L6474_GetFwVersion(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return (L6474_FW_VERSION);
 80017d4:	f44f 3385 	mov.w	r3, #68096	; 0x10a00
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <L6474_GetMotorHandle>:
/******************************************************//**
 * @brief  Return motor handle (pointer to the L6474 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* L6474_GetMotorHandle(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return (&l6474Drv);
 80017e8:	4b02      	ldr	r3, [pc, #8]	; (80017f4 <L6474_GetMotorHandle+0x10>)
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	20000000 	.word	0x20000000

080017f8 <L6474_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t L6474_GetMark(uint8_t deviceId)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2103      	movs	r1, #3
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fc46 	bl	8001098 <L6474_CmdGetParam>
 800180c:	4603      	mov	r3, r0
 800180e:	4618      	mov	r0, r3
 8001810:	f000 fefa 	bl	8002608 <L6474_ConvertPosition>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <L6474_GetMaxSpeed>:
 * @brief  Returns the max speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval maxSpeed in pps
 **********************************************************/
uint16_t L6474_GetMaxSpeed(uint8_t deviceId)
{                                                  
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].maxSpeed);
 800182a:	79fa      	ldrb	r2, [r7, #7]
 800182c:	4907      	ldr	r1, [pc, #28]	; (800184c <L6474_GetMaxSpeed+0x2c>)
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	331c      	adds	r3, #28
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	b29b      	uxth	r3, r3
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000894 	.word	0x20000894

08001850 <L6474_GetMinSpeed>:
 * @brief  Returns the min speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval minSpeed in pps
 **********************************************************/
uint16_t L6474_GetMinSpeed(uint8_t deviceId)
{                                                  
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].minSpeed);
 800185a:	79fa      	ldrb	r2, [r7, #7]
 800185c:	4907      	ldr	r1, [pc, #28]	; (800187c <L6474_GetMinSpeed+0x2c>)
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	331e      	adds	r3, #30
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
}                                                     
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000894 	.word	0x20000894

08001880 <L6474_GetNbDevices>:
/******************************************************//**
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t L6474_GetNbDevices(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return (numberOfDevices);
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <L6474_GetNbDevices+0x14>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	20000874 	.word	0x20000874

08001898 <L6474_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t L6474_GetPosition(uint8_t deviceId)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2101      	movs	r1, #1
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fbf6 	bl	8001098 <L6474_CmdGetParam>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 feaa 	bl	8002608 <L6474_ConvertPosition>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <L6474_GetStepMode>:
 * @brief Get the motor step mode
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t L6474_GetStepMode(uint8_t deviceId)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  motorStepMode_t stepMode;
  uint8_t stepSelValue;
  
  /* Get STEP_SEL field of step mode register  */
  stepSelValue = (uint8_t)((0x07 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE))|0x08) ;
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2116      	movs	r1, #22
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fbe2 	bl	8001098 <L6474_CmdGetParam>
 80018d4:	4603      	mov	r3, r0
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	73bb      	strb	r3, [r7, #14]
  
   switch (stepSelValue)
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	3b08      	subs	r3, #8
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d81c      	bhi.n	8001926 <L6474_GetStepMode+0x66>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <L6474_GetStepMode+0x34>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001909 	.word	0x08001909
 80018f8:	0800190f 	.word	0x0800190f
 80018fc:	08001915 	.word	0x08001915
 8001900:	0800191b 	.word	0x0800191b
 8001904:	08001921 	.word	0x08001921
  {
    case L6474_STEP_SEL_1:
      stepMode = STEP_MODE_FULL;
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]
      break;
 800190c:	e00e      	b.n	800192c <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_2:
      stepMode = STEP_MODE_HALF;
 800190e:	2301      	movs	r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
      break;    
 8001912:	e00b      	b.n	800192c <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_4:
      stepMode = STEP_MODE_1_4;
 8001914:	2302      	movs	r3, #2
 8001916:	73fb      	strb	r3, [r7, #15]
      break;        
 8001918:	e008      	b.n	800192c <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_8:
      stepMode = STEP_MODE_1_8;
 800191a:	2303      	movs	r3, #3
 800191c:	73fb      	strb	r3, [r7, #15]
      break;       
 800191e:	e005      	b.n	800192c <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_16:
      stepMode = STEP_MODE_1_16;
 8001920:	2304      	movs	r3, #4
 8001922:	73fb      	strb	r3, [r7, #15]
      break;
 8001924:	e002      	b.n	800192c <L6474_GetStepMode+0x6c>
    default:
      stepMode = STEP_MODE_UNKNOW;
 8001926:	23fe      	movs	r3, #254	; 0xfe
 8001928:	73fb      	strb	r3, [r7, #15]
      break;       
 800192a:	bf00      	nop
  }
  
  return stepMode;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop

08001938 <L6474_GetStopMode>:
 * @brief Get the selected stop mode
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t L6474_GetStopMode(uint8_t deviceId)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].stopMode;
 8001942:	79fa      	ldrb	r2, [r7, #7]
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <L6474_GetStopMode+0x2c>)
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	3325      	adds	r3, #37	; 0x25
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b2db      	uxtb	r3, r3
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000894 	.word	0x20000894

08001968 <L6474_GoHome>:
 * @brief  Requests the motor to move to the home position (ABS_POSITION = 0)
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoHome(uint8_t deviceId)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  L6474_GoTo(deviceId, 0);
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f81e 	bl	80019b8 <L6474_GoTo>
} 
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <L6474_GoMark>:
 * @brief  Requests the motor to move to the mark position 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoMark(uint8_t deviceId)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  uint32_t mark;

  mark = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2103      	movs	r1, #3
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fb80 	bl	8001098 <L6474_CmdGetParam>
 8001998:	4603      	mov	r3, r0
 800199a:	4618      	mov	r0, r3
 800199c:	f000 fe34 	bl	8002608 <L6474_ConvertPosition>
 80019a0:	4603      	mov	r3, r0
 80019a2:	60fb      	str	r3, [r7, #12]
  L6474_GoTo(deviceId,mark);  
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f804 	bl	80019b8 <L6474_GoTo>
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <L6474_GoTo>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void L6474_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	71fb      	strb	r3, [r7, #7]
  motorDir_t direction;
  int32_t steps;
  
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80019c4:	79fa      	ldrb	r2, [r7, #7]
 80019c6:	493a      	ldr	r1, [pc, #232]	; (8001ab0 <L6474_GoTo+0xf8>)
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	440b      	add	r3, r1
 80019d2:	3324      	adds	r3, #36	; 0x24
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d003      	beq.n	80019e4 <L6474_GoTo+0x2c>
  {
    L6474_HardStop(deviceId);
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f868 	bl	8001ab4 <L6474_HardStop>
  }

  /* Get current position */
  devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2101      	movs	r1, #1
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fb55 	bl	8001098 <L6474_CmdGetParam>
 80019ee:	4603      	mov	r3, r0
 80019f0:	79fc      	ldrb	r4, [r7, #7]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fe08 	bl	8002608 <L6474_ConvertPosition>
 80019f8:	4602      	mov	r2, r0
 80019fa:	492d      	ldr	r1, [pc, #180]	; (8001ab0 <L6474_GoTo+0xf8>)
 80019fc:	4623      	mov	r3, r4
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4423      	add	r3, r4
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	440b      	add	r3, r1
 8001a06:	3304      	adds	r3, #4
 8001a08:	601a      	str	r2, [r3, #0]
  
  /* Compute the number of steps to perform */
  steps = targetPosition - devicePrm[deviceId].currentPosition;
 8001a0a:	79fa      	ldrb	r2, [r7, #7]
 8001a0c:	4928      	ldr	r1, [pc, #160]	; (8001ab0 <L6474_GoTo+0xf8>)
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	440b      	add	r3, r1
 8001a18:	3304      	adds	r3, #4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	60bb      	str	r3, [r7, #8]
  //steps *= 2; // account for PWM clock divider
  
  if (steps >= 0) 
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0c      	blt.n	8001a42 <L6474_GoTo+0x8a>
  {
    devicePrm[deviceId].stepsToTake = steps;
 8001a28:	79fa      	ldrb	r2, [r7, #7]
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	4820      	ldr	r0, [pc, #128]	; (8001ab0 <L6474_GoTo+0xf8>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4403      	add	r3, r0
 8001a38:	3314      	adds	r3, #20
 8001a3a:	6019      	str	r1, [r3, #0]
    direction = FORWARD;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	e00d      	b.n	8001a5e <L6474_GoTo+0xa6>
    
  } 
  else 
  {
    devicePrm[deviceId].stepsToTake = -steps;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	425b      	negs	r3, r3
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	4919      	ldr	r1, [pc, #100]	; (8001ab0 <L6474_GoTo+0xf8>)
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	440b      	add	r3, r1
 8001a56:	3314      	adds	r3, #20
 8001a58:	6018      	str	r0, [r3, #0]
    direction = BACKWARD;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73fb      	strb	r3, [r7, #15]
  }
  
  if (steps != 0) 
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d021      	beq.n	8001aa8 <L6474_GoTo+0xf0>
  {
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001a64:	79fa      	ldrb	r2, [r7, #7]
 8001a66:	4912      	ldr	r1, [pc, #72]	; (8001ab0 <L6474_GoTo+0xf8>)
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	3322      	adds	r3, #34	; 0x22
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
        
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fb48 	bl	8002114 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, devicePrm[deviceId].stepsToTake);
 8001a84:	79fa      	ldrb	r2, [r7, #7]
 8001a86:	490a      	ldr	r1, [pc, #40]	; (8001ab0 <L6474_GoTo+0xf8>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	3314      	adds	r3, #20
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fcf6 	bl	800248c <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 f908 	bl	8002cb8 <L6474_StartMovement>
  }  
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	20000894 	.word	0x20000894

08001ab4 <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 8001abe:	79fa      	ldrb	r2, [r7, #7]
 8001ac0:	4920      	ldr	r1, [pc, #128]	; (8001b44 <L6474_HardStop+0x90>)
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	3325      	adds	r3, #37	; 0x25
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d12d      	bne.n	8001b32 <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f001 feb7 	bl	800384c <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 8001ade:	79fa      	ldrb	r2, [r7, #7]
 8001ae0:	4918      	ldr	r1, [pc, #96]	; (8001b44 <L6474_HardStop+0x90>)
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	440b      	add	r3, r1
 8001aec:	3324      	adds	r3, #36	; 0x24
 8001aee:	2208      	movs	r2, #8
 8001af0:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 8001af2:	79fa      	ldrb	r2, [r7, #7]
 8001af4:	4913      	ldr	r1, [pc, #76]	; (8001b44 <L6474_HardStop+0x90>)
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	440b      	add	r3, r1
 8001b00:	3322      	adds	r3, #34	; 0x22
 8001b02:	2203      	movs	r2, #3
 8001b04:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001b06:	79fa      	ldrb	r2, [r7, #7]
 8001b08:	490e      	ldr	r1, [pc, #56]	; (8001b44 <L6474_HardStop+0x90>)
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	440b      	add	r3, r1
 8001b14:	3314      	adds	r3, #20
 8001b16:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b1a:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 8001b1c:	79fa      	ldrb	r2, [r7, #7]
 8001b1e:	4909      	ldr	r1, [pc, #36]	; (8001b44 <L6474_HardStop+0x90>)
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	440b      	add	r3, r1
 8001b2a:	3320      	adds	r3, #32
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 8001b30:	e003      	b.n	8001b3a <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 f807 	bl	8001b48 <L6474_HizStop>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000894 	.word	0x20000894

08001b48 <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fe79 	bl	800384c <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fa7f 	bl	8001060 <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 8001b62:	79fa      	ldrb	r2, [r7, #7]
 8001b64:	4915      	ldr	r1, [pc, #84]	; (8001bbc <L6474_HizStop+0x74>)
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	440b      	add	r3, r1
 8001b70:	3324      	adds	r3, #36	; 0x24
 8001b72:	2208      	movs	r2, #8
 8001b74:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001b76:	79fa      	ldrb	r2, [r7, #7]
 8001b78:	4910      	ldr	r1, [pc, #64]	; (8001bbc <L6474_HizStop+0x74>)
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	3322      	adds	r3, #34	; 0x22
 8001b86:	2203      	movs	r2, #3
 8001b88:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001b8a:	79fa      	ldrb	r2, [r7, #7]
 8001b8c:	490b      	ldr	r1, [pc, #44]	; (8001bbc <L6474_HizStop+0x74>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	3314      	adds	r3, #20
 8001b9a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b9e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8001ba0:	79fa      	ldrb	r2, [r7, #7]
 8001ba2:	4906      	ldr	r1, [pc, #24]	; (8001bbc <L6474_HizStop+0x74>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	3320      	adds	r3, #32
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	801a      	strh	r2, [r3, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000894 	.word	0x20000894

08001bc0 <L6474_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void L6474_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	603a      	str	r2, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001bd0:	79fa      	ldrb	r2, [r7, #7]
 8001bd2:	4926      	ldr	r1, [pc, #152]	; (8001c6c <L6474_Move+0xac>)
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	3324      	adds	r3, #36	; 0x24
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d003      	beq.n	8001bf0 <L6474_Move+0x30>
  {
    L6474_HardStop(deviceId);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff62 	bl	8001ab4 <L6474_HardStop>
  }
  
  if (stepCount != 0) 
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d035      	beq.n	8001c62 <L6474_Move+0xa2>
  {
    //stepCount *= 2; // account for PWM clock divider

    devicePrm[deviceId].stepsToTake = stepCount;
 8001bf6:	79fa      	ldrb	r2, [r7, #7]
 8001bf8:	491c      	ldr	r1, [pc, #112]	; (8001c6c <L6474_Move+0xac>)
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	3314      	adds	r3, #20
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	601a      	str	r2, [r3, #0]
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001c0a:	79fa      	ldrb	r2, [r7, #7]
 8001c0c:	4917      	ldr	r1, [pc, #92]	; (8001c6c <L6474_Move+0xac>)
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	3322      	adds	r3, #34	; 0x22
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
    
    devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	2101      	movs	r1, #1
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fa38 	bl	8001098 <L6474_CmdGetParam>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	79fc      	ldrb	r4, [r7, #7]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 fceb 	bl	8002608 <L6474_ConvertPosition>
 8001c32:	4602      	mov	r2, r0
 8001c34:	490d      	ldr	r1, [pc, #52]	; (8001c6c <L6474_Move+0xac>)
 8001c36:	4623      	mov	r3, r4
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4423      	add	r3, r4
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	440b      	add	r3, r1
 8001c40:	3304      	adds	r3, #4
 8001c42:	601a      	str	r2, [r3, #0]
    
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001c44:	79ba      	ldrb	r2, [r7, #6]
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fa62 	bl	8002114 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, stepCount);
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	6839      	ldr	r1, [r7, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fc19 	bl	800248c <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f001 f82b 	bl	8002cb8 <L6474_StartMovement>
  }  
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd90      	pop	{r4, r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000894 	.word	0x20000894

08001c70 <L6474_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the l6474 Driver Instance
 **********************************************************/
uint16_t L6474_ReadId(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return(l6474DriverInstance);
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <L6474_ReadId+0x14>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000892 	.word	0x20000892

08001c88 <L6474_ReadStatusRegister>:
 * @retval Status register valued
 * @note The status register flags are not cleared 
 * at the difference with L6474CmdGetStatus()
 **********************************************************/
uint16_t L6474_ReadStatusRegister(uint8_t deviceId)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
  return (L6474_CmdGetParam(deviceId,L6474_STATUS));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	2119      	movs	r1, #25
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f9fe 	bl	8001098 <L6474_CmdGetParam>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b29b      	uxth	r3, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <L6474_ReleaseReset>:
/******************************************************//**
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @retval None
 **********************************************************/
void L6474_ReleaseReset(uint8_t deviceId)
{ 
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  L6474_Board_ReleaseReset(deviceId); 
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 fdf3 	bl	80038a0 <L6474_Board_ReleaseReset>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <L6474_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Reset(uint8_t deviceId)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71fb      	strb	r3, [r7, #7]
  L6474_Board_Reset(deviceId); 
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f001 fdf8 	bl	80038c4 <L6474_Board_Reset>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <L6474_ResetAllDevices>:
/******************************************************//**
 * @brief Resets all L6474 devices
 * @retval None
 **********************************************************/
void L6474_ResetAllDevices(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 	uint8_t loop;
 	
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	71fb      	strb	r3, [r7, #7]
 8001ce6:	e014      	b.n	8001d12 <L6474_ResetAllDevices+0x36>
 	{
   	/* Stop movement and disable power stage*/
  	L6474_HizStop(loop);
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff2c 	bl	8001b48 <L6474_HizStop>
    L6474_Reset(loop);
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ffe5 	bl	8001cc2 <L6474_Reset>
    L6474_Board_Delay(1); // Reset pin must be forced low for at least 10us
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f001 fbe1 	bl	80034c0 <L6474_Board_Delay>
    L6474_Board_ReleaseReset(loop);
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f001 fdcd 	bl	80038a0 <L6474_Board_ReleaseReset>
    L6474_Board_Delay(1); 
 8001d06:	2001      	movs	r0, #1
 8001d08:	f001 fbda 	bl	80034c0 <L6474_Board_Delay>
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	71fb      	strb	r3, [r7, #7]
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <L6474_ResetAllDevices+0x4c>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	79fa      	ldrb	r2, [r7, #7]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d3e4      	bcc.n	8001ce8 <L6474_ResetAllDevices+0xc>
  }
}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000874 	.word	0x20000874

08001d2c <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	460a      	mov	r2, r1
 8001d36:	71fb      	strb	r3, [r7, #7]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001d3c:	79fa      	ldrb	r2, [r7, #7]
 8001d3e:	4913      	ldr	r1, [pc, #76]	; (8001d8c <L6474_Run+0x60>)
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	3324      	adds	r3, #36	; 0x24
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d003      	beq.n	8001d5c <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff feac 	bl	8001ab4 <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 8001d5c:	79ba      	ldrb	r2, [r7, #6]
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f9d6 	bl	8002114 <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001d68:	79fa      	ldrb	r2, [r7, #7]
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <L6474_Run+0x60>)
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	3322      	adds	r3, #34	; 0x22
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 ff9a 	bl	8002cb8 <L6474_StartMovement>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000894 	.word	0x20000894

08001d90 <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	460a      	mov	r2, r1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 8001da0:	79bb      	ldrb	r3, [r7, #6]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d816      	bhi.n	8001dd4 <L6474_SelectStepMode+0x44>
 8001da6:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <L6474_SelectStepMode+0x1c>)
 8001da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dac:	08001dbd 	.word	0x08001dbd
 8001db0:	08001dc3 	.word	0x08001dc3
 8001db4:	08001dc9 	.word	0x08001dc9
 8001db8:	08001dcf 	.word	0x08001dcf
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc0:	e00b      	b.n	8001dda <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 8001dc2:	2309      	movs	r3, #9
 8001dc4:	73fb      	strb	r3, [r7, #15]
      break;    
 8001dc6:	e008      	b.n	8001dda <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 8001dc8:	230a      	movs	r3, #10
 8001dca:	73fb      	strb	r3, [r7, #15]
      break;        
 8001dcc:	e005      	b.n	8001dda <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 8001dce:	230b      	movs	r3, #11
 8001dd0:	73fb      	strb	r3, [r7, #15]
      break;       
 8001dd2:	e002      	b.n	8001dda <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8001dd4:	230c      	movs	r3, #12
 8001dd6:	73fb      	strb	r3, [r7, #15]
      break;       
 8001dd8:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff feb3 	bl	8001b48 <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2116      	movs	r1, #22
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f956 	bl	8001098 <L6474_CmdGetParam>
 8001dec:	4603      	mov	r3, r0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f023 0307 	bic.w	r3, r3, #7
 8001df4:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 8001df6:	7bba      	ldrb	r2, [r7, #14]
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	2116      	movs	r1, #22
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff facf 	bl	80013a8 <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2101      	movs	r1, #1
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fac9 	bl	80013a8 <L6474_CmdSetParam>
  
  return (1);
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <L6474_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	460a      	mov	r2, r1
 8001e2a:	71fb      	strb	r3, [r7, #7]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 8001e34:	88bb      	ldrh	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d023      	beq.n	8001e82 <L6474_SetAcceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001e3a:	79fa      	ldrb	r2, [r7, #7]
 8001e3c:	4914      	ldr	r1, [pc, #80]	; (8001e90 <L6474_SetAcceleration+0x70>)
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	440b      	add	r3, r1
 8001e48:	3324      	adds	r3, #36	; 0x24
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d00b      	beq.n	8001e6a <L6474_SetAcceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001e52:	79fa      	ldrb	r2, [r7, #7]
 8001e54:	490e      	ldr	r1, [pc, #56]	; (8001e90 <L6474_SetAcceleration+0x70>)
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	3322      	adds	r3, #34	; 0x22
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10b      	bne.n	8001e82 <L6474_SetAcceleration+0x62>
  {
    devicePrm[deviceId].acceleration = newAcc;
 8001e6a:	79fa      	ldrb	r2, [r7, #7]
 8001e6c:	4908      	ldr	r1, [pc, #32]	; (8001e90 <L6474_SetAcceleration+0x70>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	3318      	adds	r3, #24
 8001e7a:	88ba      	ldrh	r2, [r7, #4]
 8001e7c:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
  }    
  return cmdExecuted;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
}            
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	20000894 	.word	0x20000894

08001e94 <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001ea8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb4:	d508      	bpl.n	8001ec8 <L6474_SetAnalogValue+0x34>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d005      	beq.n	8001ec8 <L6474_SetAnalogValue+0x34>
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d002      	beq.n	8001ec8 <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	74fb      	strb	r3, [r7, #19]
 8001ec6:	e0d9      	b.n	800207c <L6474_SetAnalogValue+0x1e8>
  }
  else
  {
    switch (param)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	2b12      	cmp	r3, #18
 8001ece:	f200 80ca 	bhi.w	8002066 <L6474_SetAnalogValue+0x1d2>
 8001ed2:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <L6474_SetAnalogValue+0x44>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001f8b 	.word	0x08001f8b
 8001edc:	08001f25 	.word	0x08001f25
 8001ee0:	08001f8b 	.word	0x08001f8b
 8001ee4:	08002067 	.word	0x08002067
 8001ee8:	08002067 	.word	0x08002067
 8001eec:	08002067 	.word	0x08002067
 8001ef0:	08002067 	.word	0x08002067
 8001ef4:	08002067 	.word	0x08002067
 8001ef8:	08001ff5 	.word	0x08001ff5
 8001efc:	08002067 	.word	0x08002067
 8001f00:	08002067 	.word	0x08002067
 8001f04:	08002067 	.word	0x08002067
 8001f08:	08002067 	.word	0x08002067
 8001f0c:	08002067 	.word	0x08002067
 8001f10:	08002041 	.word	0x08002041
 8001f14:	08002041 	.word	0x08002041
 8001f18:	08002067 	.word	0x08002067
 8001f1c:	08002067 	.word	0x08002067
 8001f20:	0800201b 	.word	0x0800201b
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 8001f24:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	d021      	beq.n	8001f76 <L6474_SetAnalogValue+0xe2>
 8001f32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f36:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002088 <L6474_SetAnalogValue+0x1f4>
 8001f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f42:	dc15      	bgt.n	8001f70 <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 8001f44:	2116      	movs	r1, #22
 8001f46:	2000      	movs	r0, #0
 8001f48:	f7ff f8a6 	bl	8001098 <L6474_CmdGetParam>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	2201      	movs	r2, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 8001f62:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6e:	d502      	bpl.n	8001f76 <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001f74:	e079      	b.n	800206a <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001f76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f7e:	ee17 3a90 	vmov	r3, s15
 8001f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f86:	617b      	str	r3, [r7, #20]
        break;
 8001f88:	e06f      	b.n	800206a <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 8001f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f8e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800208c <L6474_SetAnalogValue+0x1f8>
 8001f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9a:	db27      	blt.n	8001fec <L6474_SetAnalogValue+0x158>
 8001f9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fa0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002090 <L6474_SetAnalogValue+0x1fc>
 8001fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fac:	d81e      	bhi.n	8001fec <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 8001fae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fba:	db09      	blt.n	8001fd0 <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 8001fbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc4:	ee17 3a90 	vmov	r3, s15
 8001fc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001fcc:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001fce:	e010      	b.n	8001ff2 <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001fd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fd4:	eef1 7a67 	vneg.f32	s15, s15
 8001fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fdc:	ee17 3a90 	vmov	r3, s15
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001fea:	e002      	b.n	8001ff2 <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	74fb      	strb	r3, [r7, #19]
        }
        break;
 8001ff0:	e03b      	b.n	800206a <L6474_SetAnalogValue+0x1d6>
 8001ff2:	e03a      	b.n	800206a <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 8001ff4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ff8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002094 <L6474_SetAnalogValue+0x200>
 8001ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002004:	dd02      	ble.n	800200c <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 8002006:	2300      	movs	r3, #0
 8002008:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 800200a:	e02e      	b.n	800206a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 800200c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002010:	f001 f9c0 	bl	8003394 <L6474_Tval_Current_to_Par>
 8002014:	4603      	mov	r3, r0
 8002016:	617b      	str	r3, [r7, #20]
        break;
 8002018:	e027      	b.n	800206a <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 800201a:	edd7 7a01 	vldr	s15, [r7, #4]
 800201e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002098 <L6474_SetAnalogValue+0x204>
 8002022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202a:	dd02      	ble.n	8002032 <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 800202c:	2300      	movs	r3, #0
 800202e:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 8002030:	e01b      	b.n	800206a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 8002032:	ed97 0a01 	vldr	s0, [r7, #4]
 8002036:	f001 f971 	bl	800331c <L6474_Ocd_Th_to_Par>
 800203a:	4603      	mov	r3, r0
 800203c:	617b      	str	r3, [r7, #20]
        break;
 800203e:	e014      	b.n	800206a <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 8002040:	edd7 7a01 	vldr	s15, [r7, #4]
 8002044:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800209c <L6474_SetAnalogValue+0x208>
 8002048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002050:	dd02      	ble.n	8002058 <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 8002052:	2300      	movs	r3, #0
 8002054:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8002056:	e008      	b.n	800206a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8002058:	ed97 0a01 	vldr	s0, [r7, #4]
 800205c:	f001 f9ec 	bl	8003438 <L6474_Tmin_Time_to_Par>
 8002060:	4603      	mov	r3, r0
 8002062:	617b      	str	r3, [r7, #20]
        break;    
 8002064:	e001      	b.n	800206a <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8002066:	2300      	movs	r3, #0
 8002068:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 800206a:	7cfb      	ldrb	r3, [r7, #19]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f996 	bl	80013a8 <L6474_CmdSetParam>
    }
  }
  return result;
 800207c:	7cfb      	ldrb	r3, [r7, #19]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	43ff8000 	.word	0x43ff8000
 800208c:	ca000000 	.word	0xca000000
 8002090:	49fffff8 	.word	0x49fffff8
 8002094:	457a0000 	.word	0x457a0000
 8002098:	45bb8000 	.word	0x45bb8000
 800209c:	42800000 	.word	0x42800000

080020a0 <L6474_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	460a      	mov	r2, r1
 80020aa:	71fb      	strb	r3, [r7, #7]
 80020ac:	4613      	mov	r3, r2
 80020ae:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&& 
 80020b4:	88bb      	ldrh	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d023      	beq.n	8002102 <L6474_SetDeceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80020ba:	79fa      	ldrb	r2, [r7, #7]
 80020bc:	4914      	ldr	r1, [pc, #80]	; (8002110 <L6474_SetDeceleration+0x70>)
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	3324      	adds	r3, #36	; 0x24
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&& 
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d00b      	beq.n	80020ea <L6474_SetDeceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 80020d2:	79fa      	ldrb	r2, [r7, #7]
 80020d4:	490e      	ldr	r1, [pc, #56]	; (8002110 <L6474_SetDeceleration+0x70>)
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	3322      	adds	r3, #34	; 0x22
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10b      	bne.n	8002102 <L6474_SetDeceleration+0x62>
  {
    devicePrm[deviceId].deceleration = newDec;
 80020ea:	79fa      	ldrb	r2, [r7, #7]
 80020ec:	4908      	ldr	r1, [pc, #32]	; (8002110 <L6474_SetDeceleration+0x70>)
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	440b      	add	r3, r1
 80020f8:	331a      	adds	r3, #26
 80020fa:	88ba      	ldrh	r2, [r7, #4]
 80020fc:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
  }      
  return cmdExecuted;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
}        
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	20000894 	.word	0x20000894

08002114 <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	460a      	mov	r2, r1
 800211e:	71fb      	strb	r3, [r7, #7]
 8002120:	4613      	mov	r3, r2
 8002122:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 8002124:	79fa      	ldrb	r2, [r7, #7]
 8002126:	490f      	ldr	r1, [pc, #60]	; (8002164 <L6474_SetDirection+0x50>)
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	3324      	adds	r3, #36	; 0x24
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b08      	cmp	r3, #8
 800213a:	d10f      	bne.n	800215c <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 800213c:	79fa      	ldrb	r2, [r7, #7]
 800213e:	4909      	ldr	r1, [pc, #36]	; (8002164 <L6474_SetDirection+0x50>)
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	3323      	adds	r3, #35	; 0x23
 800214c:	79ba      	ldrb	r2, [r7, #6]
 800214e:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 8002150:	79ba      	ldrb	r2, [r7, #6]
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f001 fbc6 	bl	80038e8 <L6474_Board_SetDirectionGpio>
  }
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000894 	.word	0x20000894

08002168 <L6474_SetHome>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new home position
 * @retval None
 **********************************************************/
void L6474_SetHome(uint8_t deviceId, int32_t homePos)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	6039      	str	r1, [r7, #0]
 8002172:	71fb      	strb	r3, [r7, #7]
  int32_t absHomePos = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS)) - homePos;
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	2101      	movs	r1, #1
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe ff8d 	bl	8001098 <L6474_CmdGetParam>
 800217e:	4603      	mov	r3, r0
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fa41 	bl	8002608 <L6474_ConvertPosition>
 8002186:	4602      	mov	r2, r0
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	60bb      	str	r3, [r7, #8]
  uint32_t registerValue;
  
  if (absHomePos >= 0)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	db04      	blt.n	800219e <L6474_SetHome+0x36>
  {
    registerValue = ((uint32_t) absHomePos)& L6474_ABS_POS_VALUE_MASK;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e005      	b.n	80021aa <L6474_SetHome+0x42>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-absHomePos))& L6474_ABS_POS_VALUE_MASK) + 1;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80021a6:	3301      	adds	r3, #1
 80021a8:	60fb      	str	r3, [r7, #12]
  }
 
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, registerValue);
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	2101      	movs	r1, #1
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff f8f9 	bl	80013a8 <L6474_CmdSetParam>
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <L6474_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool L6474_SetNbDevices(uint8_t nbDevices)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d807      	bhi.n	80021e0 <L6474_SetNbDevices+0x20>
  {
    l6474DriverInstance = 0;
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <L6474_SetNbDevices+0x30>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	801a      	strh	r2, [r3, #0]
    numberOfDevices = nbDevices;
 80021d6:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <L6474_SetNbDevices+0x34>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	7013      	strb	r3, [r2, #0]
    return TRUE;
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <L6474_SetNbDevices+0x22>
  }
  else
  {
    return FALSE;
 80021e0:	2300      	movs	r3, #0
  }
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000892 	.word	0x20000892
 80021f4:	20000874 	.word	0x20000874

080021f8 <L6474_SetMark>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new Mark position
 * @retval None
 **********************************************************/
void L6474_SetMark(uint8_t deviceId, int32_t markPos)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue;
  if (markPos >= 0)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db04      	blt.n	8002214 <L6474_SetMark+0x1c>
  {
    registerValue = ((uint32_t) markPos)& L6474_ABS_POS_VALUE_MASK;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	e005      	b.n	8002220 <L6474_SetMark+0x28>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-markPos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	3b01      	subs	r3, #1
 8002218:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800221c:	3301      	adds	r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
  }
  
  L6474_CmdSetParam(deviceId,L6474_MARK, registerValue);
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	2103      	movs	r1, #3
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff f8be 	bl	80013a8 <L6474_CmdSetParam>
}
 800222c:	bf00      	nop
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	460a      	mov	r2, r1
 800223e:	71fb      	strb	r3, [r7, #7]
 8002240:	4613      	mov	r3, r2
 8002242:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 8002248:	88bb      	ldrh	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d035      	beq.n	80022ba <L6474_SetMaxSpeed+0x86>
 800224e:	88bb      	ldrh	r3, [r7, #4]
 8002250:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002254:	4293      	cmp	r3, r2
 8002256:	d830      	bhi.n	80022ba <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8002258:	79fa      	ldrb	r2, [r7, #7]
 800225a:	491b      	ldr	r1, [pc, #108]	; (80022c8 <L6474_SetMaxSpeed+0x94>)
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	331e      	adds	r3, #30
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 800226c:	88ba      	ldrh	r2, [r7, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	d323      	bcc.n	80022ba <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8002272:	79fa      	ldrb	r2, [r7, #7]
 8002274:	4914      	ldr	r1, [pc, #80]	; (80022c8 <L6474_SetMaxSpeed+0x94>)
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	3324      	adds	r3, #36	; 0x24
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8002286:	2b08      	cmp	r3, #8
 8002288:	d00b      	beq.n	80022a2 <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 800228a:	79fa      	ldrb	r2, [r7, #7]
 800228c:	490e      	ldr	r1, [pc, #56]	; (80022c8 <L6474_SetMaxSpeed+0x94>)
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	3322      	adds	r3, #34	; 0x22
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10b      	bne.n	80022ba <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 80022a2:	79fa      	ldrb	r2, [r7, #7]
 80022a4:	4908      	ldr	r1, [pc, #32]	; (80022c8 <L6474_SetMaxSpeed+0x94>)
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	331c      	adds	r3, #28
 80022b2:	88ba      	ldrh	r2, [r7, #4]
 80022b4:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	20000894 	.word	0x20000894

080022cc <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	460a      	mov	r2, r1
 80022d6:	71fb      	strb	r3, [r7, #7]
 80022d8:	4613      	mov	r3, r2
 80022da:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 80022e0:	88bb      	ldrh	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d035      	beq.n	8002352 <L6474_SetMinSpeed+0x86>
 80022e6:	88bb      	ldrh	r3, [r7, #4]
 80022e8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d830      	bhi.n	8002352 <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 80022f0:	79fa      	ldrb	r2, [r7, #7]
 80022f2:	491b      	ldr	r1, [pc, #108]	; (8002360 <L6474_SetMinSpeed+0x94>)
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	331c      	adds	r3, #28
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 8002304:	88ba      	ldrh	r2, [r7, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	d823      	bhi.n	8002352 <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800230a:	79fa      	ldrb	r2, [r7, #7]
 800230c:	4914      	ldr	r1, [pc, #80]	; (8002360 <L6474_SetMinSpeed+0x94>)
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	3324      	adds	r3, #36	; 0x24
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 800231e:	2b08      	cmp	r3, #8
 8002320:	d00b      	beq.n	800233a <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8002322:	79fa      	ldrb	r2, [r7, #7]
 8002324:	490e      	ldr	r1, [pc, #56]	; (8002360 <L6474_SetMinSpeed+0x94>)
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	3322      	adds	r3, #34	; 0x22
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10b      	bne.n	8002352 <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 800233a:	79fa      	ldrb	r2, [r7, #7]
 800233c:	4908      	ldr	r1, [pc, #32]	; (8002360 <L6474_SetMinSpeed+0x94>)
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	440b      	add	r3, r1
 8002348:	331e      	adds	r3, #30
 800234a:	88ba      	ldrh	r2, [r7, #4]
 800234c:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 800234e:	2301      	movs	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 8002352:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	20000894 	.word	0x20000894

08002364 <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	460a      	mov	r2, r1
 800236e:	71fb      	strb	r3, [r7, #7]
 8002370:	4613      	mov	r3, r2
 8002372:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 8002374:	79fa      	ldrb	r2, [r7, #7]
 8002376:	4907      	ldr	r1, [pc, #28]	; (8002394 <L6474_SetStopMode+0x30>)
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	3325      	adds	r3, #37	; 0x25
 8002384:	79ba      	ldrb	r2, [r7, #6]
 8002386:	701a      	strb	r2, [r3, #0]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	20000894 	.word	0x20000894

08002398 <L6474_SoftStop>:
 * @param[in] deviceId (from 0 to 2)
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool L6474_SoftStop(uint8_t deviceId)
{	
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
  bool cmdExecuted = FALSE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
  if (devicePrm[deviceId].motionState != INACTIVE)
 80023a6:	79fa      	ldrb	r2, [r7, #7]
 80023a8:	490e      	ldr	r1, [pc, #56]	; (80023e4 <L6474_SoftStop+0x4c>)
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	3324      	adds	r3, #36	; 0x24
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d00b      	beq.n	80023d6 <L6474_SoftStop+0x3e>
  {
    devicePrm[deviceId].commandExecuted = SOFT_STOP_CMD;
 80023be:	79fa      	ldrb	r2, [r7, #7]
 80023c0:	4908      	ldr	r1, [pc, #32]	; (80023e4 <L6474_SoftStop+0x4c>)
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	440b      	add	r3, r1
 80023cc:	3322      	adds	r3, #34	; 0x22
 80023ce:	2202      	movs	r2, #2
 80023d0:	701a      	strb	r2, [r3, #0]
    cmdExecuted = TRUE;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	20000894 	.word	0x20000894

080023e8 <L6474_WaitWhileActive>:
 * @brief  Locks until the device state becomes Inactive
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_WaitWhileActive(uint8_t deviceId)
 {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (L6474_GetDeviceState(deviceId) != INACTIVE);
 80023f2:	bf00      	nop
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff f9ba 	bl	8001770 <L6474_GetDeviceState>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d1f8      	bne.n	80023f4 <L6474_WaitWhileActive+0xc>
}
 8002402:	bf00      	nop
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	460a      	mov	r2, r1
 8002416:	71fb      	strb	r3, [r7, #7]
 8002418:	4613      	mov	r3, r2
 800241a:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 800241c:	88bb      	ldrh	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 8002422:	2301      	movs	r3, #1
 8002424:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 8002426:	88bb      	ldrh	r3, [r7, #4]
 8002428:	f649 4240 	movw	r2, #40000	; 0x9c40
 800242c:	4293      	cmp	r3, r2
 800242e:	d902      	bls.n	8002436 <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 8002430:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002434:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 8002436:	79fa      	ldrb	r2, [r7, #7]
 8002438:	4913      	ldr	r1, [pc, #76]	; (8002488 <L6474_ApplySpeed+0x7c>)
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	440b      	add	r3, r1
 8002444:	3320      	adds	r3, #32
 8002446:	88ba      	ldrh	r2, [r7, #4]
 8002448:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d010      	beq.n	8002472 <L6474_ApplySpeed+0x66>
 8002450:	2b02      	cmp	r3, #2
 8002452:	dc13      	bgt.n	800247c <L6474_ApplySpeed+0x70>
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <L6474_ApplySpeed+0x52>
 8002458:	2b01      	cmp	r3, #1
 800245a:	d005      	beq.n	8002468 <L6474_ApplySpeed+0x5c>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 800245c:	e00e      	b.n	800247c <L6474_ApplySpeed+0x70>
      L6474_Board_Pwm1SetFreq(newSpeed);
 800245e:	88bb      	ldrh	r3, [r7, #4]
 8002460:	4618      	mov	r0, r3
 8002462:	f001 f925 	bl	80036b0 <L6474_Board_Pwm1SetFreq>
      break;
 8002466:	e00a      	b.n	800247e <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm2SetFreq(newSpeed);
 8002468:	88bb      	ldrh	r3, [r7, #4]
 800246a:	4618      	mov	r0, r3
 800246c:	f001 f946 	bl	80036fc <L6474_Board_Pwm2SetFreq>
      break;
 8002470:	e005      	b.n	800247e <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm3SetFreq(newSpeed);
 8002472:	88bb      	ldrh	r3, [r7, #4]
 8002474:	4618      	mov	r0, r3
 8002476:	f001 f969 	bl	800374c <L6474_Board_Pwm3SetFreq>
      break;
 800247a:	e000      	b.n	800247e <L6474_ApplySpeed+0x72>
      break; //ignore error
 800247c:	bf00      	nop
  }
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000894 	.word	0x20000894

0800248c <L6474_ComputeSpeedProfile>:
 * speed.
 * Else, a triangular move is performed (no steady phase: the maximum speed is never
 * reached.
 **********************************************************/
void L6474_ComputeSpeedProfile(uint8_t deviceId, uint32_t nbSteps)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	71fb      	strb	r3, [r7, #7]
  uint32_t reqAccSteps; 
	uint32_t reqDecSteps;
   
  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = devicePrm[deviceId].minSpeed;
 8002498:	79fa      	ldrb	r2, [r7, #7]
 800249a:	495a      	ldr	r1, [pc, #360]	; (8002604 <L6474_ComputeSpeedProfile+0x178>)
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	331e      	adds	r3, #30
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (devicePrm[deviceId].maxSpeed - minSpeed);
 80024ac:	79fa      	ldrb	r2, [r7, #7]
 80024ae:	4955      	ldr	r1, [pc, #340]	; (8002604 <L6474_ComputeSpeedProfile+0x178>)
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	440b      	add	r3, r1
 80024ba:	331c      	adds	r3, #28
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	8b7b      	ldrh	r3, [r7, #26]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (devicePrm[deviceId].maxSpeed + minSpeed);
 80024c8:	79fa      	ldrb	r2, [r7, #7]
 80024ca:	494e      	ldr	r1, [pc, #312]	; (8002604 <L6474_ComputeSpeedProfile+0x178>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	440b      	add	r3, r1
 80024d6:	331c      	adds	r3, #28
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	8b7b      	ldrh	r3, [r7, #26]
 80024e0:	4413      	add	r3, r2
 80024e2:	461a      	mov	r2, r3
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)devicePrm[deviceId].acceleration;
 80024f0:	79fa      	ldrb	r2, [r7, #7]
 80024f2:	4944      	ldr	r1, [pc, #272]	; (8002604 <L6474_ComputeSpeedProfile+0x178>)
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	3318      	adds	r3, #24
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	461a      	mov	r2, r3
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fbb3 f3f2 	udiv	r3, r3, r2
 800250c:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	085b      	lsrs	r3, r3, #1
 8002512:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)devicePrm[deviceId].deceleration;
 8002514:	79fa      	ldrb	r2, [r7, #7]
 8002516:	493b      	ldr	r1, [pc, #236]	; (8002604 <L6474_ComputeSpeedProfile+0x178>)
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	440b      	add	r3, r1
 8002522:	331a      	adds	r3, #26
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	b29b      	uxth	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002530:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	617b      	str	r3, [r7, #20]

	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	4413      	add	r3, r2
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d242      	bcs.n	80025ca <L6474_ComputeSpeedProfile+0x13e>
	{	
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = devicePrm[deviceId].deceleration;
 8002544:	79fa      	ldrb	r2, [r7, #7]
 8002546:	492f      	ldr	r1, [pc, #188]	; (8002604 <L6474_ComputeSpeedProfile+0x178>)
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	331a      	adds	r3, #26
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	613b      	str	r3, [r7, #16]
    uint32_t acc = devicePrm[deviceId].acceleration;
 800255a:	79fa      	ldrb	r2, [r7, #7]
 800255c:	4929      	ldr	r1, [pc, #164]	; (8002604 <L6474_ComputeSpeedProfile+0x178>)
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	3318      	adds	r3, #24
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	60fb      	str	r3, [r7, #12]
    
    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	fb03 f202 	mul.w	r2, r3, r2
 8002578:	68f9      	ldr	r1, [r7, #12]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	440b      	add	r3, r1
 800257e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002582:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d908      	bls.n	800259c <L6474_ComputeSpeedProfile+0x110>
    {
      reqAccSteps = reqDecSteps - 1;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3b01      	subs	r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d104      	bne.n	80025a0 <L6474_ComputeSpeedProfile+0x114>
      {
        reqAccSteps = 1;
 8002596:	2301      	movs	r3, #1
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	e001      	b.n	80025a0 <L6474_ComputeSpeedProfile+0x114>
      }      
    }
    else
    {
      reqAccSteps = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
    }
    devicePrm[deviceId].endAccPos = reqAccSteps;
 80025a0:	79fa      	ldrb	r2, [r7, #7]
 80025a2:	4918      	ldr	r1, [pc, #96]	; (8002604 <L6474_ComputeSpeedProfile+0x178>)
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	3308      	adds	r3, #8
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = reqDecSteps;
 80025b4:	79fa      	ldrb	r2, [r7, #7]
 80025b6:	4913      	ldr	r1, [pc, #76]	; (8002604 <L6474_ComputeSpeedProfile+0x178>)
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	3310      	adds	r3, #16
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	601a      	str	r2, [r3, #0]
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    devicePrm[deviceId].endAccPos = reqAccSteps;
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
	}
}
 80025c8:	e016      	b.n	80025f8 <L6474_ComputeSpeedProfile+0x16c>
    devicePrm[deviceId].endAccPos = reqAccSteps;
 80025ca:	79fa      	ldrb	r2, [r7, #7]
 80025cc:	490d      	ldr	r1, [pc, #52]	; (8002604 <L6474_ComputeSpeedProfile+0x178>)
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	3308      	adds	r3, #8
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	79fa      	ldrb	r2, [r7, #7]
 80025e6:	1e59      	subs	r1, r3, #1
 80025e8:	4806      	ldr	r0, [pc, #24]	; (8002604 <L6474_ComputeSpeedProfile+0x178>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4403      	add	r3, r0
 80025f4:	3310      	adds	r3, #16
 80025f6:	6019      	str	r1, [r3, #0]
}
 80025f8:	bf00      	nop
 80025fa:	3724      	adds	r7, #36	; 0x24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	20000894 	.word	0x20000894

08002608 <L6474_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t L6474_ConvertPosition(uint32_t abs_position_reg)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK) 
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00d      	beq.n	8002636 <L6474_ConvertPosition+0x2e>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	43db      	mvns	r3, r3
 800261e:	607b      	str	r3, [r7, #4]
    abs_position_reg += 1;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3301      	adds	r3, #1
 8002624:	607b      	str	r3, [r7, #4]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800262c:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	425b      	negs	r3, r3
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	e001      	b.n	800263a <L6474_ConvertPosition+0x32>
  } 
  else 
  {
    operation_result = (int32_t) abs_position_reg;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	60fb      	str	r3, [r7, #12]
  }
  return operation_result;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <L6474_ErrorHandler+0x28>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <L6474_ErrorHandler+0x28>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	88fa      	ldrh	r2, [r7, #6]
 8002660:	4610      	mov	r0, r2
 8002662:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8002664:	e000      	b.n	8002668 <L6474_ErrorHandler+0x20>
    while(1)
 8002666:	e7fe      	b.n	8002666 <L6474_ErrorHandler+0x1e>
}
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000870 	.word	0x20000870

08002674 <L6474_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6474_FlagInterruptHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <L6474_FlagInterruptHandler+0x24>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <L6474_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <L6474_FlagInterruptHandler+0x28>)
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <L6474_FlagInterruptHandler+0x24>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <L6474_FlagInterruptHandler+0x28>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
  }
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000086c 	.word	0x2000086c
 800269c:	20000891 	.word	0x20000891

080026a0 <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	460a      	mov	r2, r1
 80026aa:	71fb      	strb	r3, [r7, #7]
 80026ac:	4613      	mov	r3, r2
 80026ae:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <L6474_SendCommand+0x90>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 80026c0:	2300      	movs	r3, #0
 80026c2:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <L6474_SendCommand+0x94>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80026ca:	7afb      	ldrb	r3, [r7, #11]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80026d0:	f000 ff0a 	bl	80034e8 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e008      	b.n	80026f0 <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 80026de:	4a16      	ldr	r2, [pc, #88]	; (8002738 <L6474_SendCommand+0x98>)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	3309      	adds	r3, #9
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3301      	adds	r3, #1
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <L6474_SendCommand+0x90>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d3ef      	bcc.n	80026de <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 80026fe:	7abb      	ldrb	r3, [r7, #10]
 8002700:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <L6474_SendCommand+0x98>)
 8002702:	4413      	add	r3, r2
 8002704:	79ba      	ldrb	r2, [r7, #6]
 8002706:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8002708:	f000 fee5 	bl	80034d6 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 800270c:	2301      	movs	r3, #1
 800270e:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <L6474_SendCommand+0x94>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1d4      	bne.n	80026c4 <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 800271a:	4908      	ldr	r1, [pc, #32]	; (800273c <L6474_SendCommand+0x9c>)
 800271c:	4808      	ldr	r0, [pc, #32]	; (8002740 <L6474_SendCommand+0xa0>)
 800271e:	f000 fea9 	bl	8003474 <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8002722:	f000 fee1 	bl	80034e8 <L6474_Board_EnableIrq>
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000874 	.word	0x20000874
 8002734:	20000890 	.word	0x20000890
 8002738:	20000878 	.word	0x20000878
 800273c:	2000088d 	.word	0x2000088d
 8002740:	20000881 	.word	0x20000881

08002744 <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 8002750:	79fa      	ldrb	r2, [r7, #7]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	8818      	ldrh	r0, [r3, #0]
 8002756:	494c      	ldr	r1, [pc, #304]	; (8002888 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	440b      	add	r3, r1
 8002762:	3318      	adds	r3, #24
 8002764:	4602      	mov	r2, r0
 8002766:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 8002768:	79fa      	ldrb	r2, [r7, #7]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	8858      	ldrh	r0, [r3, #2]
 800276e:	4946      	ldr	r1, [pc, #280]	; (8002888 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	331a      	adds	r3, #26
 800277c:	4602      	mov	r2, r0
 800277e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 8002780:	79fa      	ldrb	r2, [r7, #7]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	8898      	ldrh	r0, [r3, #4]
 8002786:	4940      	ldr	r1, [pc, #256]	; (8002888 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	440b      	add	r3, r1
 8002792:	331c      	adds	r3, #28
 8002794:	4602      	mov	r2, r0
 8002796:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 8002798:	79fa      	ldrb	r2, [r7, #7]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	88d8      	ldrh	r0, [r3, #6]
 800279e:	493a      	ldr	r1, [pc, #232]	; (8002888 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	331e      	adds	r3, #30
 80027ac:	4602      	mov	r2, r0
 80027ae:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80027b0:	79fa      	ldrb	r2, [r7, #7]
 80027b2:	4935      	ldr	r1, [pc, #212]	; (8002888 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80027c2:	79fa      	ldrb	r2, [r7, #7]
 80027c4:	4930      	ldr	r1, [pc, #192]	; (8002888 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	3304      	adds	r3, #4
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 80027d6:	79fa      	ldrb	r2, [r7, #7]
 80027d8:	492b      	ldr	r1, [pc, #172]	; (8002888 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	440b      	add	r3, r1
 80027e4:	3308      	adds	r3, #8
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80027ea:	79fa      	ldrb	r2, [r7, #7]
 80027ec:	4926      	ldr	r1, [pc, #152]	; (8002888 <L6474_SetDeviceParamsToGivenValues+0x144>)
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	440b      	add	r3, r1
 80027f8:	330c      	adds	r3, #12
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 80027fe:	79fa      	ldrb	r2, [r7, #7]
 8002800:	4921      	ldr	r1, [pc, #132]	; (8002888 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	440b      	add	r3, r1
 800280c:	3310      	adds	r3, #16
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8002812:	79fa      	ldrb	r2, [r7, #7]
 8002814:	491c      	ldr	r1, [pc, #112]	; (8002888 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	440b      	add	r3, r1
 8002820:	3314      	adds	r3, #20
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002826:	79fa      	ldrb	r2, [r7, #7]
 8002828:	4917      	ldr	r1, [pc, #92]	; (8002888 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	3320      	adds	r3, #32
 8002836:	2200      	movs	r2, #0
 8002838:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 800283a:	79fa      	ldrb	r2, [r7, #7]
 800283c:	4912      	ldr	r1, [pc, #72]	; (8002888 <L6474_SetDeviceParamsToGivenValues+0x144>)
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	3322      	adds	r3, #34	; 0x22
 800284a:	2203      	movs	r2, #3
 800284c:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 800284e:	79fa      	ldrb	r2, [r7, #7]
 8002850:	490d      	ldr	r1, [pc, #52]	; (8002888 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	3323      	adds	r3, #35	; 0x23
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 8002862:	79fa      	ldrb	r2, [r7, #7]
 8002864:	4908      	ldr	r1, [pc, #32]	; (8002888 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	3324      	adds	r3, #36	; 0x24
 8002872:	2208      	movs	r2, #8
 8002874:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	6839      	ldr	r1, [r7, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f8a4 	bl	80029c8 <L6474_SetRegisterToGivenValues>
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000894 	.word	0x20000894

0800288c <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 8002896:	79fa      	ldrb	r2, [r7, #7]
 8002898:	494a      	ldr	r1, [pc, #296]	; (80029c4 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	3318      	adds	r3, #24
 80028a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028aa:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 80028ac:	79fa      	ldrb	r2, [r7, #7]
 80028ae:	4945      	ldr	r1, [pc, #276]	; (80029c4 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	440b      	add	r3, r1
 80028ba:	331a      	adds	r3, #26
 80028bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c0:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 80028c2:	79fa      	ldrb	r2, [r7, #7]
 80028c4:	493f      	ldr	r1, [pc, #252]	; (80029c4 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	331c      	adds	r3, #28
 80028d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80028d6:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 80028d8:	79fa      	ldrb	r2, [r7, #7]
 80028da:	493a      	ldr	r1, [pc, #232]	; (80029c4 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	331e      	adds	r3, #30
 80028e8:	2264      	movs	r2, #100	; 0x64
 80028ea:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80028ec:	79fa      	ldrb	r2, [r7, #7]
 80028ee:	4935      	ldr	r1, [pc, #212]	; (80029c4 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	440b      	add	r3, r1
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80028fe:	79fa      	ldrb	r2, [r7, #7]
 8002900:	4930      	ldr	r1, [pc, #192]	; (80029c4 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	3304      	adds	r3, #4
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 8002912:	79fa      	ldrb	r2, [r7, #7]
 8002914:	492b      	ldr	r1, [pc, #172]	; (80029c4 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	440b      	add	r3, r1
 8002920:	3308      	adds	r3, #8
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002926:	79fa      	ldrb	r2, [r7, #7]
 8002928:	4926      	ldr	r1, [pc, #152]	; (80029c4 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	440b      	add	r3, r1
 8002934:	330c      	adds	r3, #12
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 800293a:	79fa      	ldrb	r2, [r7, #7]
 800293c:	4921      	ldr	r1, [pc, #132]	; (80029c4 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	3310      	adds	r3, #16
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 800294e:	79fa      	ldrb	r2, [r7, #7]
 8002950:	491c      	ldr	r1, [pc, #112]	; (80029c4 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	3314      	adds	r3, #20
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002962:	79fa      	ldrb	r2, [r7, #7]
 8002964:	4917      	ldr	r1, [pc, #92]	; (80029c4 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	440b      	add	r3, r1
 8002970:	3320      	adds	r3, #32
 8002972:	2200      	movs	r2, #0
 8002974:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8002976:	79fa      	ldrb	r2, [r7, #7]
 8002978:	4912      	ldr	r1, [pc, #72]	; (80029c4 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	3322      	adds	r3, #34	; 0x22
 8002986:	2203      	movs	r2, #3
 8002988:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 800298a:	79fa      	ldrb	r2, [r7, #7]
 800298c:	490d      	ldr	r1, [pc, #52]	; (80029c4 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	440b      	add	r3, r1
 8002998:	3323      	adds	r3, #35	; 0x23
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 800299e:	79fa      	ldrb	r2, [r7, #7]
 80029a0:	4908      	ldr	r1, [pc, #32]	; (80029c4 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	3324      	adds	r3, #36	; 0x24
 80029ae:	2208      	movs	r2, #8
 80029b0:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f883 	bl	8002ac0 <L6474_SetRegisterToPredefinedValues>

}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000894 	.word	0x20000894

080029c8 <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	2200      	movs	r2, #0
 80029d8:	2101      	movs	r1, #1
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fce4 	bl	80013a8 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2102      	movs	r1, #2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fcde 	bl	80013a8 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	2200      	movs	r2, #0
 80029f0:	2103      	movs	r1, #3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fcd8 	bl	80013a8 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	eeb0 0a67 	vmov.f32	s0, s15
 8002a04:	2109      	movs	r1, #9
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fa44 	bl	8001e94 <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 8002a14:	4313      	orrs	r3, r2
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	210e      	movs	r1, #14
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fcc2 	bl	80013a8 <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a30:	210f      	movs	r1, #15
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fa2e 	bl	8001e94 <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	eeb0 0a67 	vmov.f32	s0, s15
 8002a44:	2110      	movs	r1, #16
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fa24 	bl	8001e94 <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	eeb0 0a67 	vmov.f32	s0, s15
 8002a58:	2113      	movs	r1, #19
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fa1a 	bl	8001e94 <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2116      	movs	r1, #22
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe fc98 	bl	80013a8 <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	2117      	movs	r1, #23
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe fc91 	bl	80013a8 <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	7c5b      	ldrb	r3, [r3, #17]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8002aa2:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 8002aa8:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 8002aaa:	461a      	mov	r2, r3
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	2118      	movs	r1, #24
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe fc79 	bl	80013a8 <L6474_CmdSetParam>
  
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	2200      	movs	r2, #0
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe fc69 	bl	80013a8 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2102      	movs	r1, #2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe fc63 	bl	80013a8 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2103      	movs	r1, #3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fc5d 	bl	80013a8 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	f000 8094 	beq.w	8002c1e <L6474_SetRegisterToPredefinedValues+0x15e>
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	f300 80d7 	bgt.w	8002caa <L6474_SetRegisterToPredefinedValues+0x1ea>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <L6474_SetRegisterToPredefinedValues+0x46>
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d046      	beq.n	8002b92 <L6474_SetRegisterToPredefinedValues+0xd2>
#endif         
      break;
#endif      
    default: ;
  }
}
 8002b04:	e0d1      	b.n	8002caa <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 8002b06:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002cb4 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002b0a:	f000 fc43 	bl	8003394 <L6474_Tval_Current_to_Par>
 8002b0e:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002b10:	461a      	mov	r2, r3
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	2109      	movs	r1, #9
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe fc46 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	2235      	movs	r2, #53	; 0x35
 8002b20:	210e      	movs	r1, #14
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe fc40 	bl	80013a8 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 8002b28:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002b2c:	f000 fc84 	bl	8003438 <L6474_Tmin_Time_to_Par>
 8002b30:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002b32:	461a      	mov	r2, r3
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	210f      	movs	r1, #15
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe fc35 	bl	80013a8 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 8002b3e:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002b42:	f000 fc79 	bl	8003438 <L6474_Tmin_Time_to_Par>
 8002b46:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002b48:	461a      	mov	r2, r3
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	2110      	movs	r1, #16
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fc2a 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	2205      	movs	r2, #5
 8002b58:	2113      	movs	r1, #19
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fc24 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	228c      	movs	r2, #140	; 0x8c
 8002b64:	2116      	movs	r1, #22
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fc1e 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	22cf      	movs	r2, #207	; 0xcf
 8002b70:	2117      	movs	r1, #23
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fc18 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002b7e:	2118      	movs	r1, #24
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fc11 	bl	80013a8 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fbea 	bl	8002364 <L6474_SetStopMode>
      break;
 8002b90:	e08b      	b.n	8002caa <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 8002b92:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8002cb4 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002b96:	f000 fbfd 	bl	8003394 <L6474_Tval_Current_to_Par>
 8002b9a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	2109      	movs	r1, #9
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fc00 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	2235      	movs	r2, #53	; 0x35
 8002bac:	210e      	movs	r1, #14
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe fbfa 	bl	80013a8 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 8002bb4:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002bb8:	f000 fc3e 	bl	8003438 <L6474_Tmin_Time_to_Par>
 8002bbc:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	210f      	movs	r1, #15
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe fbef 	bl	80013a8 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 8002bca:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002bce:	f000 fc33 	bl	8003438 <L6474_Tmin_Time_to_Par>
 8002bd2:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	2110      	movs	r1, #16
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe fbe4 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2205      	movs	r2, #5
 8002be4:	2113      	movs	r1, #19
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fbde 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	228c      	movs	r2, #140	; 0x8c
 8002bf0:	2116      	movs	r1, #22
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fbd8 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	22cf      	movs	r2, #207	; 0xcf
 8002bfc:	2117      	movs	r1, #23
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe fbd2 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002c0a:	2118      	movs	r1, #24
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe fbcb 	bl	80013a8 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fba4 	bl	8002364 <L6474_SetStopMode>
      break;
 8002c1c:	e045      	b.n	8002caa <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 8002c1e:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002cb4 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002c22:	f000 fbb7 	bl	8003394 <L6474_Tval_Current_to_Par>
 8002c26:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002c28:	461a      	mov	r2, r3
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	2109      	movs	r1, #9
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fbba 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	2235      	movs	r2, #53	; 0x35
 8002c38:	210e      	movs	r1, #14
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe fbb4 	bl	80013a8 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 8002c40:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002c44:	f000 fbf8 	bl	8003438 <L6474_Tmin_Time_to_Par>
 8002c48:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	210f      	movs	r1, #15
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe fba9 	bl	80013a8 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 8002c56:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002c5a:	f000 fbed 	bl	8003438 <L6474_Tmin_Time_to_Par>
 8002c5e:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002c60:	461a      	mov	r2, r3
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	2110      	movs	r1, #16
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fb9e 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2205      	movs	r2, #5
 8002c70:	2113      	movs	r1, #19
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fb98 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	228c      	movs	r2, #140	; 0x8c
 8002c7c:	2116      	movs	r1, #22
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fb92 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	22cf      	movs	r2, #207	; 0xcf
 8002c88:	2117      	movs	r1, #23
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fb8c 	bl	80013a8 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002c96:	2118      	movs	r1, #24
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe fb85 	bl	80013a8 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fb5e 	bl	8002364 <L6474_SetStopMode>
      break;
 8002ca8:	bf00      	nop
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	44480000 	.word	0x44480000

08002cb8 <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe f9d9 	bl	800107c <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 8002cca:	79fa      	ldrb	r2, [r7, #7]
 8002ccc:	4922      	ldr	r1, [pc, #136]	; (8002d58 <L6474_StartMovement+0xa0>)
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3308      	adds	r3, #8
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 8002ce0:	79fa      	ldrb	r2, [r7, #7]
 8002ce2:	491d      	ldr	r1, [pc, #116]	; (8002d58 <L6474_StartMovement+0xa0>)
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	3324      	adds	r3, #36	; 0x24
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	e009      	b.n	8002d0a <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 8002cf6:	79fa      	ldrb	r2, [r7, #7]
 8002cf8:	4917      	ldr	r1, [pc, #92]	; (8002d58 <L6474_StartMovement+0xa0>)
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	440b      	add	r3, r1
 8002d04:	3324      	adds	r3, #36	; 0x24
 8002d06:	2202      	movs	r2, #2
 8002d08:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 8002d0a:	79fa      	ldrb	r2, [r7, #7]
 8002d0c:	4912      	ldr	r1, [pc, #72]	; (8002d58 <L6474_StartMovement+0xa0>)
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002d1c:	79fa      	ldrb	r2, [r7, #7]
 8002d1e:	490e      	ldr	r1, [pc, #56]	; (8002d58 <L6474_StartMovement+0xa0>)
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	440b      	add	r3, r1
 8002d2a:	330c      	adds	r3, #12
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 8002d30:	79fa      	ldrb	r2, [r7, #7]
 8002d32:	4909      	ldr	r1, [pc, #36]	; (8002d58 <L6474_StartMovement+0xa0>)
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	440b      	add	r3, r1
 8002d3e:	331e      	adds	r3, #30
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fb5f 	bl	800240c <L6474_ApplySpeed>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000894 	.word	0x20000894

08002d5c <L6474_StepClockHandler>:
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void L6474_StepClockHandler(uint8_t deviceId)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08c      	sub	sp, #48	; 0x30
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
  /* Set isr flag */
  isrFlag = TRUE;
 8002d66:	4b96      	ldr	r3, [pc, #600]	; (8002fc0 <L6474_StepClockHandler+0x264>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]
  
  /* Incrementation of the relative position */
  devicePrm[deviceId].relativePos++;
 8002d6c:	79fa      	ldrb	r2, [r7, #7]
 8002d6e:	4995      	ldr	r1, [pc, #596]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	440b      	add	r3, r1
 8002d7a:	330c      	adds	r3, #12
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	1c59      	adds	r1, r3, #1
 8002d80:	4890      	ldr	r0, [pc, #576]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4403      	add	r3, r0
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	6019      	str	r1, [r3, #0]

  switch (devicePrm[deviceId].motionState) 
 8002d90:	79fa      	ldrb	r2, [r7, #7]
 8002d92:	498c      	ldr	r1, [pc, #560]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3324      	adds	r3, #36	; 0x24
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	f000 810f 	beq.w	8002fc8 <L6474_StepClockHandler+0x26c>
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	f300 82a4 	bgt.w	80032f8 <L6474_StepClockHandler+0x59c>
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <L6474_StepClockHandler+0x60>
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	f000 819b 	beq.w	80030f0 <L6474_StepClockHandler+0x394>
      }
      break;
    }
    default: 
    {
      break;
 8002dba:	e29d      	b.n	80032f8 <L6474_StepClockHandler+0x59c>
        uint32_t relPos = devicePrm[deviceId].relativePos;
 8002dbc:	79fa      	ldrb	r2, [r7, #7]
 8002dbe:	4981      	ldr	r1, [pc, #516]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	330c      	adds	r3, #12
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = devicePrm[deviceId].endAccPos;
 8002dd0:	79fa      	ldrb	r2, [r7, #7]
 8002dd2:	497c      	ldr	r1, [pc, #496]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	3308      	adds	r3, #8
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	613b      	str	r3, [r7, #16]
        uint16_t speed = devicePrm[deviceId].speed;
 8002de4:	79fa      	ldrb	r2, [r7, #7]
 8002de6:	4977      	ldr	r1, [pc, #476]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	3320      	adds	r3, #32
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t acc = ((uint32_t)devicePrm[deviceId].acceleration << 16);
 8002df8:	79fa      	ldrb	r2, [r7, #7]
 8002dfa:	4972      	ldr	r1, [pc, #456]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	3318      	adds	r3, #24
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	041b      	lsls	r3, r3, #16
 8002e0e:	60fb      	str	r3, [r7, #12]
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002e10:	79fa      	ldrb	r2, [r7, #7]
 8002e12:	496c      	ldr	r1, [pc, #432]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3322      	adds	r3, #34	; 0x22
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d017      	beq.n	8002e58 <L6474_StepClockHandler+0xfc>
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002e28:	79fa      	ldrb	r2, [r7, #7]
 8002e2a:	4966      	ldr	r1, [pc, #408]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	440b      	add	r3, r1
 8002e36:	3322      	adds	r3, #34	; 0x22
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	b2db      	uxtb	r3, r3
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01f      	beq.n	8002e80 <L6474_StepClockHandler+0x124>
             (relPos == devicePrm[deviceId].startDecPos)))
 8002e40:	79fa      	ldrb	r2, [r7, #7]
 8002e42:	4960      	ldr	r1, [pc, #384]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	440b      	add	r3, r1
 8002e4e:	3310      	adds	r3, #16
 8002e50:	681b      	ldr	r3, [r3, #0]
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d113      	bne.n	8002e80 <L6474_StepClockHandler+0x124>
          devicePrm[deviceId].motionState = DECELERATING;
 8002e58:	79fa      	ldrb	r2, [r7, #7]
 8002e5a:	495a      	ldr	r1, [pc, #360]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	440b      	add	r3, r1
 8002e66:	3324      	adds	r3, #36	; 0x24
 8002e68:	2202      	movs	r2, #2
 8002e6a:	701a      	strb	r2, [r3, #0]
          devicePrm[deviceId].accu = 0;
 8002e6c:	79fa      	ldrb	r2, [r7, #7]
 8002e6e:	4955      	ldr	r1, [pc, #340]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e09e      	b.n	8002fbe <L6474_StepClockHandler+0x262>
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002e80:	79fa      	ldrb	r2, [r7, #7]
 8002e82:	4950      	ldr	r1, [pc, #320]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	331c      	adds	r3, #28
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d20f      	bcs.n	8002eba <L6474_StepClockHandler+0x15e>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002e9a:	79fa      	ldrb	r2, [r7, #7]
 8002e9c:	4949      	ldr	r1, [pc, #292]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3322      	adds	r3, #34	; 0x22
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	b2db      	uxtb	r3, r3
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00e      	beq.n	8002ed0 <L6474_StepClockHandler+0x174>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d10a      	bne.n	8002ed0 <L6474_StepClockHandler+0x174>
          devicePrm[deviceId].motionState = STEADY;
 8002eba:	79fa      	ldrb	r2, [r7, #7]
 8002ebc:	4941      	ldr	r1, [pc, #260]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3324      	adds	r3, #36	; 0x24
 8002eca:	2203      	movs	r2, #3
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	e076      	b.n	8002fbe <L6474_StepClockHandler+0x262>
          bool speedUpdated = FALSE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          if (speed == 0) speed =1;
 8002ed6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <L6474_StepClockHandler+0x184>
 8002edc:	2301      	movs	r3, #1
 8002ede:	85fb      	strh	r3, [r7, #46]	; 0x2e
          devicePrm[deviceId].accu += acc / speed;
 8002ee0:	79fa      	ldrb	r2, [r7, #7]
 8002ee2:	4938      	ldr	r1, [pc, #224]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	440b      	add	r3, r1
 8002eee:	6819      	ldr	r1, [r3, #0]
 8002ef0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef8:	79fa      	ldrb	r2, [r7, #7]
 8002efa:	4419      	add	r1, r3
 8002efc:	4831      	ldr	r0, [pc, #196]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4403      	add	r3, r0
 8002f08:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002f0a:	e017      	b.n	8002f3c <L6474_StepClockHandler+0x1e0>
            devicePrm[deviceId].accu -= (0X10000L);
 8002f0c:	79fa      	ldrb	r2, [r7, #7]
 8002f0e:	492d      	ldr	r1, [pc, #180]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	440b      	add	r3, r1
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	79fa      	ldrb	r2, [r7, #7]
 8002f1e:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002f22:	4828      	ldr	r0, [pc, #160]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4403      	add	r3, r0
 8002f2e:	6019      	str	r1, [r3, #0]
            speed +=1;
 8002f30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f32:	3301      	adds	r3, #1
 8002f34:	85fb      	strh	r3, [r7, #46]	; 0x2e
            speedUpdated = TRUE;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002f3c:	79fa      	ldrb	r2, [r7, #7]
 8002f3e:	4921      	ldr	r1, [pc, #132]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	440b      	add	r3, r1
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f50:	d2dc      	bcs.n	8002f0c <L6474_StepClockHandler+0x1b0>
          if (speedUpdated)
 8002f52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 81d0 	beq.w	80032fc <L6474_StepClockHandler+0x5a0>
            if (speed > devicePrm[deviceId].maxSpeed)
 8002f5c:	79fa      	ldrb	r2, [r7, #7]
 8002f5e:	4919      	ldr	r1, [pc, #100]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	331c      	adds	r3, #28
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d909      	bls.n	8002f8a <L6474_StepClockHandler+0x22e>
              speed = devicePrm[deviceId].maxSpeed;
 8002f76:	79fa      	ldrb	r2, [r7, #7]
 8002f78:	4912      	ldr	r1, [pc, #72]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	440b      	add	r3, r1
 8002f84:	331c      	adds	r3, #28
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	85fb      	strh	r3, [r7, #46]	; 0x2e
            devicePrm[deviceId].speed = speed;
 8002f8a:	79fa      	ldrb	r2, [r7, #7]
 8002f8c:	490d      	ldr	r1, [pc, #52]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002f8e:	4613      	mov	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	440b      	add	r3, r1
 8002f98:	3320      	adds	r3, #32
 8002f9a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f9c:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002f9e:	79fa      	ldrb	r2, [r7, #7]
 8002fa0:	4908      	ldr	r1, [pc, #32]	; (8002fc4 <L6474_StepClockHandler+0x268>)
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	440b      	add	r3, r1
 8002fac:	3320      	adds	r3, #32
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fa28 	bl	800240c <L6474_ApplySpeed>
        break;
 8002fbc:	e19e      	b.n	80032fc <L6474_StepClockHandler+0x5a0>
 8002fbe:	e19d      	b.n	80032fc <L6474_StepClockHandler+0x5a0>
 8002fc0:	20000891 	.word	0x20000891
 8002fc4:	20000894 	.word	0x20000894
      uint16_t maxSpeed = devicePrm[deviceId].maxSpeed;
 8002fc8:	79fa      	ldrb	r2, [r7, #7]
 8002fca:	499c      	ldr	r1, [pc, #624]	; (800323c <L6474_StepClockHandler+0x4e0>)
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	440b      	add	r3, r1
 8002fd6:	331c      	adds	r3, #28
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	84fb      	strh	r3, [r7, #38]	; 0x26
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002fdc:	79fa      	ldrb	r2, [r7, #7]
 8002fde:	4997      	ldr	r1, [pc, #604]	; (800323c <L6474_StepClockHandler+0x4e0>)
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	330c      	adds	r3, #12
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	623b      	str	r3, [r7, #32]
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002ff0:	79fa      	ldrb	r2, [r7, #7]
 8002ff2:	4992      	ldr	r1, [pc, #584]	; (800323c <L6474_StepClockHandler+0x4e0>)
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3322      	adds	r3, #34	; 0x22
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d030      	beq.n	800306a <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8003008:	79fa      	ldrb	r2, [r7, #7]
 800300a:	498c      	ldr	r1, [pc, #560]	; (800323c <L6474_StepClockHandler+0x4e0>)
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	440b      	add	r3, r1
 8003016:	3322      	adds	r3, #34	; 0x22
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	b2db      	uxtb	r3, r3
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00b      	beq.n	8003038 <L6474_StepClockHandler+0x2dc>
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8003020:	79fa      	ldrb	r2, [r7, #7]
 8003022:	4986      	ldr	r1, [pc, #536]	; (800323c <L6474_StepClockHandler+0x4e0>)
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	440b      	add	r3, r1
 800302e:	3310      	adds	r3, #16
 8003030:	681b      	ldr	r3, [r3, #0]
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8003032:	6a3a      	ldr	r2, [r7, #32]
 8003034:	429a      	cmp	r2, r3
 8003036:	d218      	bcs.n	800306a <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8003038:	79fa      	ldrb	r2, [r7, #7]
 800303a:	4980      	ldr	r1, [pc, #512]	; (800323c <L6474_StepClockHandler+0x4e0>)
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	3322      	adds	r3, #34	; 0x22
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b2db      	uxtb	r3, r3
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 800304c:	2b00      	cmp	r3, #0
 800304e:	d120      	bne.n	8003092 <L6474_StepClockHandler+0x336>
            (devicePrm[deviceId].speed > maxSpeed)))
 8003050:	79fa      	ldrb	r2, [r7, #7]
 8003052:	497a      	ldr	r1, [pc, #488]	; (800323c <L6474_StepClockHandler+0x4e0>)
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	440b      	add	r3, r1
 800305e:	3320      	adds	r3, #32
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8003064:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003066:	429a      	cmp	r2, r3
 8003068:	d213      	bcs.n	8003092 <L6474_StepClockHandler+0x336>
        devicePrm[deviceId].motionState = DECELERATING;
 800306a:	79fa      	ldrb	r2, [r7, #7]
 800306c:	4973      	ldr	r1, [pc, #460]	; (800323c <L6474_StepClockHandler+0x4e0>)
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	3324      	adds	r3, #36	; 0x24
 800307a:	2202      	movs	r2, #2
 800307c:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 800307e:	79fa      	ldrb	r2, [r7, #7]
 8003080:	496e      	ldr	r1, [pc, #440]	; (800323c <L6474_StepClockHandler+0x4e0>)
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	440b      	add	r3, r1
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
      break;
 8003090:	e136      	b.n	8003300 <L6474_StepClockHandler+0x5a4>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8003092:	79fa      	ldrb	r2, [r7, #7]
 8003094:	4969      	ldr	r1, [pc, #420]	; (800323c <L6474_StepClockHandler+0x4e0>)
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	440b      	add	r3, r1
 80030a0:	3322      	adds	r3, #34	; 0x22
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 812a 	bne.w	8003300 <L6474_StepClockHandler+0x5a4>
               (devicePrm[deviceId].speed < maxSpeed))
 80030ac:	79fa      	ldrb	r2, [r7, #7]
 80030ae:	4963      	ldr	r1, [pc, #396]	; (800323c <L6474_StepClockHandler+0x4e0>)
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3320      	adds	r3, #32
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 80030c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80030c2:	429a      	cmp	r2, r3
 80030c4:	f240 811c 	bls.w	8003300 <L6474_StepClockHandler+0x5a4>
        devicePrm[deviceId].motionState = ACCELERATING;
 80030c8:	79fa      	ldrb	r2, [r7, #7]
 80030ca:	495c      	ldr	r1, [pc, #368]	; (800323c <L6474_StepClockHandler+0x4e0>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3324      	adds	r3, #36	; 0x24
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 80030dc:	79fa      	ldrb	r2, [r7, #7]
 80030de:	4957      	ldr	r1, [pc, #348]	; (800323c <L6474_StepClockHandler+0x4e0>)
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
      break;
 80030ee:	e107      	b.n	8003300 <L6474_StepClockHandler+0x5a4>
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 80030f0:	79fa      	ldrb	r2, [r7, #7]
 80030f2:	4952      	ldr	r1, [pc, #328]	; (800323c <L6474_StepClockHandler+0x4e0>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	440b      	add	r3, r1
 80030fe:	330c      	adds	r3, #12
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	61fb      	str	r3, [r7, #28]
      uint16_t speed = devicePrm[deviceId].speed;
 8003104:	79fa      	ldrb	r2, [r7, #7]
 8003106:	494d      	ldr	r1, [pc, #308]	; (800323c <L6474_StepClockHandler+0x4e0>)
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	3320      	adds	r3, #32
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	857b      	strh	r3, [r7, #42]	; 0x2a
      uint32_t deceleration = ((uint32_t)devicePrm[deviceId].deceleration << 16);
 8003118:	79fa      	ldrb	r2, [r7, #7]
 800311a:	4948      	ldr	r1, [pc, #288]	; (800323c <L6474_StepClockHandler+0x4e0>)
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	440b      	add	r3, r1
 8003126:	331a      	adds	r3, #26
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	041b      	lsls	r3, r3, #16
 800312e:	61bb      	str	r3, [r7, #24]
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8003130:	79fa      	ldrb	r2, [r7, #7]
 8003132:	4942      	ldr	r1, [pc, #264]	; (800323c <L6474_StepClockHandler+0x4e0>)
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	440b      	add	r3, r1
 800313e:	3322      	adds	r3, #34	; 0x22
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d10c      	bne.n	8003162 <L6474_StepClockHandler+0x406>
 8003148:	79fa      	ldrb	r2, [r7, #7]
 800314a:	493c      	ldr	r1, [pc, #240]	; (800323c <L6474_StepClockHandler+0x4e0>)
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	440b      	add	r3, r1
 8003156:	331e      	adds	r3, #30
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800315e:	429a      	cmp	r2, r3
 8003160:	d917      	bls.n	8003192 <L6474_StepClockHandler+0x436>
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8003162:	79fa      	ldrb	r2, [r7, #7]
 8003164:	4935      	ldr	r1, [pc, #212]	; (800323c <L6474_StepClockHandler+0x4e0>)
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	440b      	add	r3, r1
 8003170:	3322      	adds	r3, #34	; 0x22
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8003176:	2b00      	cmp	r3, #0
 8003178:	d010      	beq.n	800319c <L6474_StepClockHandler+0x440>
           (relativePos >= devicePrm[deviceId].stepsToTake)))
 800317a:	79fa      	ldrb	r2, [r7, #7]
 800317c:	492f      	ldr	r1, [pc, #188]	; (800323c <L6474_StepClockHandler+0x4e0>)
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	440b      	add	r3, r1
 8003188:	3314      	adds	r3, #20
 800318a:	681b      	ldr	r3, [r3, #0]
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	429a      	cmp	r2, r3
 8003190:	d304      	bcc.n	800319c <L6474_StepClockHandler+0x440>
        L6474_HardStop(deviceId);
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	4618      	mov	r0, r3
 8003196:	f7fe fc8d 	bl	8001ab4 <L6474_HardStop>
 800319a:	e0ac      	b.n	80032f6 <L6474_StepClockHandler+0x59a>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 800319c:	79fa      	ldrb	r2, [r7, #7]
 800319e:	4927      	ldr	r1, [pc, #156]	; (800323c <L6474_StepClockHandler+0x4e0>)
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	440b      	add	r3, r1
 80031aa:	3322      	adds	r3, #34	; 0x22
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d117      	bne.n	80031e4 <L6474_StepClockHandler+0x488>
               (speed <= devicePrm[deviceId].maxSpeed))
 80031b4:	79fa      	ldrb	r2, [r7, #7]
 80031b6:	4921      	ldr	r1, [pc, #132]	; (800323c <L6474_StepClockHandler+0x4e0>)
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	331c      	adds	r3, #28
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 80031c8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d80a      	bhi.n	80031e4 <L6474_StepClockHandler+0x488>
        devicePrm[deviceId].motionState = STEADY;
 80031ce:	79fa      	ldrb	r2, [r7, #7]
 80031d0:	491a      	ldr	r1, [pc, #104]	; (800323c <L6474_StepClockHandler+0x4e0>)
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	440b      	add	r3, r1
 80031dc:	3324      	adds	r3, #36	; 0x24
 80031de:	2203      	movs	r2, #3
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e088      	b.n	80032f6 <L6474_StepClockHandler+0x59a>
        if (speed > devicePrm[deviceId].minSpeed)
 80031e4:	79fa      	ldrb	r2, [r7, #7]
 80031e6:	4915      	ldr	r1, [pc, #84]	; (800323c <L6474_StepClockHandler+0x4e0>)
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	440b      	add	r3, r1
 80031f2:	331e      	adds	r3, #30
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80031fa:	429a      	cmp	r2, r3
 80031fc:	f240 8082 	bls.w	8003304 <L6474_StepClockHandler+0x5a8>
          bool speedUpdated = FALSE;
 8003200:	2300      	movs	r3, #0
 8003202:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          if (speed == 0) speed =1;
 8003206:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <L6474_StepClockHandler+0x4b4>
 800320c:	2301      	movs	r3, #1
 800320e:	857b      	strh	r3, [r7, #42]	; 0x2a
          devicePrm[deviceId].accu += deceleration / speed;
 8003210:	79fa      	ldrb	r2, [r7, #7]
 8003212:	490a      	ldr	r1, [pc, #40]	; (800323c <L6474_StepClockHandler+0x4e0>)
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	79fa      	ldrb	r2, [r7, #7]
 800322a:	4419      	add	r1, r3
 800322c:	4803      	ldr	r0, [pc, #12]	; (800323c <L6474_StepClockHandler+0x4e0>)
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4403      	add	r3, r0
 8003238:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 800323a:	e01c      	b.n	8003276 <L6474_StepClockHandler+0x51a>
 800323c:	20000894 	.word	0x20000894
            devicePrm[deviceId].accu -= (0X10000L);
 8003240:	79fa      	ldrb	r2, [r7, #7]
 8003242:	4934      	ldr	r1, [pc, #208]	; (8003314 <L6474_StepClockHandler+0x5b8>)
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	79fa      	ldrb	r2, [r7, #7]
 8003252:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8003256:	482f      	ldr	r0, [pc, #188]	; (8003314 <L6474_StepClockHandler+0x5b8>)
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4403      	add	r3, r0
 8003262:	6019      	str	r1, [r3, #0]
            if (speed > 1)
 8003264:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003266:	2b01      	cmp	r3, #1
 8003268:	d902      	bls.n	8003270 <L6474_StepClockHandler+0x514>
              speed -=1;
 800326a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800326c:	3b01      	subs	r3, #1
 800326e:	857b      	strh	r3, [r7, #42]	; 0x2a
            speedUpdated = TRUE;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          while (devicePrm[deviceId].accu >= (0X10000L))
 8003276:	79fa      	ldrb	r2, [r7, #7]
 8003278:	4926      	ldr	r1, [pc, #152]	; (8003314 <L6474_StepClockHandler+0x5b8>)
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	440b      	add	r3, r1
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328a:	d2d9      	bcs.n	8003240 <L6474_StepClockHandler+0x4e4>
          if (speedUpdated)
 800328c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003290:	2b00      	cmp	r3, #0
 8003292:	d037      	beq.n	8003304 <L6474_StepClockHandler+0x5a8>
            if (speed < devicePrm[deviceId].minSpeed)
 8003294:	79fa      	ldrb	r2, [r7, #7]
 8003296:	491f      	ldr	r1, [pc, #124]	; (8003314 <L6474_StepClockHandler+0x5b8>)
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	440b      	add	r3, r1
 80032a2:	331e      	adds	r3, #30
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d209      	bcs.n	80032c2 <L6474_StepClockHandler+0x566>
              speed = devicePrm[deviceId].minSpeed;
 80032ae:	79fa      	ldrb	r2, [r7, #7]
 80032b0:	4918      	ldr	r1, [pc, #96]	; (8003314 <L6474_StepClockHandler+0x5b8>)
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	331e      	adds	r3, #30
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	857b      	strh	r3, [r7, #42]	; 0x2a
            devicePrm[deviceId].speed = speed;
 80032c2:	79fa      	ldrb	r2, [r7, #7]
 80032c4:	4913      	ldr	r1, [pc, #76]	; (8003314 <L6474_StepClockHandler+0x5b8>)
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	3320      	adds	r3, #32
 80032d2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80032d4:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 80032d6:	79fa      	ldrb	r2, [r7, #7]
 80032d8:	490e      	ldr	r1, [pc, #56]	; (8003314 <L6474_StepClockHandler+0x5b8>)
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	3320      	adds	r3, #32
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff f88c 	bl	800240c <L6474_ApplySpeed>
      break;
 80032f4:	e006      	b.n	8003304 <L6474_StepClockHandler+0x5a8>
 80032f6:	e005      	b.n	8003304 <L6474_StepClockHandler+0x5a8>
      break;
 80032f8:	bf00      	nop
 80032fa:	e004      	b.n	8003306 <L6474_StepClockHandler+0x5aa>
        break;
 80032fc:	bf00      	nop
 80032fe:	e002      	b.n	8003306 <L6474_StepClockHandler+0x5aa>
      break;
 8003300:	bf00      	nop
 8003302:	e000      	b.n	8003306 <L6474_StepClockHandler+0x5aa>
      break;
 8003304:	bf00      	nop
    }
  }  
  /* Set isr flag */
  isrFlag = FALSE;
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <L6474_StepClockHandler+0x5bc>)
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
}
 800330c:	bf00      	nop
 800330e:	3730      	adds	r7, #48	; 0x30
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000894 	.word	0x20000894
 8003318:	20000891 	.word	0x20000891

0800331c <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 8003326:	edd7 7a01 	vldr	s15, [r7, #4]
 800332a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800335c <L6474_Ocd_Th_to_Par+0x40>
 800332e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003332:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003360 <L6474_Ocd_Th_to_Par+0x44>
 8003336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800333a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800333e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003346:	edc7 7a00 	vstr	s15, [r7]
 800334a:	783b      	ldrb	r3, [r7, #0]
 800334c:	b2db      	uxtb	r3, r3
}
 800334e:	4618      	mov	r0, r3
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	43bb8000 	.word	0x43bb8000
 8003360:	3b2eb80f 	.word	0x3b2eb80f

08003364 <L6474_Ocd_Par_to_Th>:
 * @brief Converts  OCD_TH register values in mA 
 * @param[in] Par OCD regiser value
 * @retval mA
 **********************************************************/
inline float L6474_Ocd_Par_to_Th(uint8_t Par)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1))*375.f);
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	3301      	adds	r3, #1
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800337a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003390 <L6474_Ocd_Par_to_Th+0x2c>
 800337e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003382:	eeb0 0a67 	vmov.f32	s0, s15
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	43bb8000 	.word	0x43bb8000

08003394 <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 800339e:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80033d4 <L6474_Tval_Current_to_Par+0x40>
 80033a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033aa:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80033d8 <L6474_Tval_Current_to_Par+0x44>
 80033ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80033b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033be:	edc7 7a00 	vstr	s15, [r7]
 80033c2:	783b      	ldrb	r3, [r7, #0]
 80033c4:	b2db      	uxtb	r3, r3
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	41fa0000 	.word	0x41fa0000
 80033d8:	3d03126f 	.word	0x3d03126f

080033dc <L6474_Tval_Par_to_Current>:
 * @brief Converts  TVAL register values in mA 
 * @param[in] Par TVAL regiser value
 * @retval mA
 **********************************************************/
inline float L6474_Tval_Par_to_Current(uint8_t Par)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1))*31.25f);
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	3301      	adds	r3, #1
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033f2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003408 <L6474_Tval_Par_to_Current+0x2c>
 80033f6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80033fa:	eeb0 0a67 	vmov.f32	s0, s15
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	41fa0000 	.word	0x41fa0000

0800340c <L6474_Tmin_Par_to_Time>:
 * @brief Convert TON/TOFF values in time (us)
 * @param[in] Par Values from TON_MIN/TOFF_MIN 
 * @retval time in us
 **********************************************************/
inline float L6474_Tmin_Par_to_Time(uint8_t Par)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1)) * 0.5f);
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	3301      	adds	r3, #1
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003422:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003426:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800342a:	eeb0 0a67 	vmov.f32	s0, s15
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 8003442:	edd7 7a01 	vldr	s15, [r7, #4]
 8003446:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800344a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800344e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003452:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003456:	ee77 7a87 	vadd.f32	s15, s15, s14
 800345a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800345e:	edc7 7a00 	vstr	s15, [r7]
 8003462:	783b      	ldrb	r3, [r7, #0]
 8003464:	b2db      	uxtb	r3, r3
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <L6474_WriteBytes+0x40>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	6839      	ldr	r1, [r7, #0]
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fa95 	bl	80039b8 <L6474_Board_SpiWriteBytes>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 8003494:	f248 0001 	movw	r0, #32769	; 0x8001
 8003498:	f7ff f8d6 	bl	8002648 <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <L6474_WriteBytes+0x44>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <L6474_WriteBytes+0x48>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]
  }
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000874 	.word	0x20000874
 80034b8:	20000891 	.word	0x20000891
 80034bc:	20000890 	.word	0x20000890

080034c0 <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 ff1f 	bl	800430c <HAL_Delay>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034da:	b672      	cpsid	i
}
 80034dc:	bf00      	nop
  __disable_irq();
}
 80034de:	bf00      	nop
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80034ec:	b662      	cpsie	i
}
 80034ee:	bf00      	nop
  __enable_irq();
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	; 0x28
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d165      	bne.n	80035d8 <L6474_Board_GpioInit+0xdc>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	4b4f      	ldr	r3, [pc, #316]	; (8003650 <L6474_Board_GpioInit+0x154>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	4a4e      	ldr	r2, [pc, #312]	; (8003650 <L6474_Board_GpioInit+0x154>)
 8003516:	f043 0304 	orr.w	r3, r3, #4
 800351a:	6313      	str	r3, [r2, #48]	; 0x30
 800351c:	4b4c      	ldr	r3, [pc, #304]	; (8003650 <L6474_Board_GpioInit+0x154>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	4b48      	ldr	r3, [pc, #288]	; (8003650 <L6474_Board_GpioInit+0x154>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	4a47      	ldr	r2, [pc, #284]	; (8003650 <L6474_Board_GpioInit+0x154>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6313      	str	r3, [r2, #48]	; 0x30
 8003538:	4b45      	ldr	r3, [pc, #276]	; (8003650 <L6474_Board_GpioInit+0x154>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 8003544:	2300      	movs	r3, #0
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	4b41      	ldr	r3, [pc, #260]	; (8003650 <L6474_Board_GpioInit+0x154>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	4a40      	ldr	r2, [pc, #256]	; (8003650 <L6474_Board_GpioInit+0x154>)
 800354e:	f043 0302 	orr.w	r3, r3, #2
 8003552:	6313      	str	r3, [r2, #48]	; 0x30
 8003554:	4b3e      	ldr	r3, [pc, #248]	; (8003650 <L6474_Board_GpioInit+0x154>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8003560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003566:	4b3b      	ldr	r3, [pc, #236]	; (8003654 <L6474_Board_GpioInit+0x158>)
 8003568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800356a:	2301      	movs	r3, #1
 800356c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800356e:	2301      	movs	r3, #1
 8003570:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 8003572:	f107 0314 	add.w	r3, r7, #20
 8003576:	4619      	mov	r1, r3
 8003578:	4837      	ldr	r0, [pc, #220]	; (8003658 <L6474_Board_GpioInit+0x15c>)
 800357a:	f001 fb71 	bl	8004c60 <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	2105      	movs	r1, #5
 8003582:	2028      	movs	r0, #40	; 0x28
 8003584:	f000 ffbd 	bl	8004502 <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 8003588:	2028      	movs	r0, #40	; 0x28
 800358a:	f000 ffd6 	bl	800453a <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 800358e:	2340      	movs	r3, #64	; 0x40
 8003590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003592:	2301      	movs	r3, #1
 8003594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800359a:	2301      	movs	r3, #1
 800359c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 800359e:	f107 0314 	add.w	r3, r7, #20
 80035a2:	4619      	mov	r1, r3
 80035a4:	482d      	ldr	r0, [pc, #180]	; (800365c <L6474_Board_GpioInit+0x160>)
 80035a6:	f001 fb5b 	bl	8004c60 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 80035aa:	2201      	movs	r2, #1
 80035ac:	2140      	movs	r1, #64	; 0x40
 80035ae:	482b      	ldr	r0, [pc, #172]	; (800365c <L6474_Board_GpioInit+0x160>)
 80035b0:	f001 fcda 	bl	8004f68 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 80035b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ba:	2301      	movs	r3, #1
 80035bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80035c2:	2301      	movs	r3, #1
 80035c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 80035c6:	f107 0314 	add.w	r3, r7, #20
 80035ca:	4619      	mov	r1, r3
 80035cc:	4822      	ldr	r0, [pc, #136]	; (8003658 <L6474_Board_GpioInit+0x15c>)
 80035ce:	f001 fb47 	bl	8004c60 <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 80035d2:	2000      	movs	r0, #0
 80035d4:	f000 f976 	bl	80038c4 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d025      	beq.n	800362a <L6474_Board_GpioInit+0x12e>
 80035de:	2b02      	cmp	r3, #2
 80035e0:	dc32      	bgt.n	8003648 <L6474_Board_GpioInit+0x14c>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <L6474_Board_GpioInit+0xf0>
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d010      	beq.n	800360c <L6474_Board_GpioInit+0x110>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 80035ea:	e02d      	b.n	8003648 <L6474_Board_GpioInit+0x14c>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 80035ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035f0:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035f2:	2301      	movs	r3, #1
 80035f4:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80035fa:	2301      	movs	r3, #1
 80035fc:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	4619      	mov	r1, r3
 8003604:	4814      	ldr	r0, [pc, #80]	; (8003658 <L6474_Board_GpioInit+0x15c>)
 8003606:	f001 fb2b 	bl	8004c60 <HAL_GPIO_Init>
      break;
 800360a:	e01d      	b.n	8003648 <L6474_Board_GpioInit+0x14c>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 800360c:	2320      	movs	r3, #32
 800360e:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003610:	2301      	movs	r3, #1
 8003612:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003618:	2301      	movs	r3, #1
 800361a:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	4619      	mov	r1, r3
 8003622:	480e      	ldr	r0, [pc, #56]	; (800365c <L6474_Board_GpioInit+0x160>)
 8003624:	f001 fb1c 	bl	8004c60 <HAL_GPIO_Init>
      break;
 8003628:	e00e      	b.n	8003648 <L6474_Board_GpioInit+0x14c>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 800362a:	2310      	movs	r3, #16
 800362c:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800362e:	2301      	movs	r3, #1
 8003630:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003636:	2301      	movs	r3, #1
 8003638:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 800363a:	f107 0314 	add.w	r3, r7, #20
 800363e:	4619      	mov	r1, r3
 8003640:	4806      	ldr	r0, [pc, #24]	; (800365c <L6474_Board_GpioInit+0x160>)
 8003642:	f001 fb0d 	bl	8004c60 <HAL_GPIO_Init>
        break;
 8003646:	bf00      	nop
}
 8003648:	bf00      	nop
 800364a:	3728      	adds	r7, #40	; 0x28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	10210000 	.word	0x10210000
 8003658:	40020000 	.word	0x40020000
 800365c:	40020400 	.word	0x40020400

08003660 <L6474_Board_Pwm1GetCounter>:

/******************************************************//**
 * @brief  Returns the current value of the counter used by PWM1, used by device 0
 * @retval the counter value
 **********************************************************/
uint32_t L6474_Board_Pwm1GetCounter() {
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
	return hTimPwm1.Instance->CNT;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <L6474_Board_Pwm1GetCounter+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800366a:	4618      	mov	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	20000964 	.word	0x20000964

08003678 <L6474_Board_Pwm1SetPeriod>:
 * @brief  Sets the period of PWM1 used by device 0
 * @param[in] period in counter increments
 * @retval None
 **********************************************************/
void L6474_Board_Pwm1SetPeriod(uint32_t period)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SetAutoreload(&hTimPwm1, period-1);
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <L6474_Board_Pwm1SetPeriod+0x34>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	3a01      	subs	r2, #1
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3b01      	subs	r3, #1
 800368e:	4a07      	ldr	r2, [pc, #28]	; (80036ac <L6474_Board_Pwm1SetPeriod+0x34>)
 8003690:	60d3      	str	r3, [r2, #12]
//  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
  if (hTimPwm1.Instance->CCER == 0) { // Check if a capture compare channel has not been enabled yet
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <L6474_Board_Pwm1SetPeriod+0x34>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d103      	bne.n	80036a4 <L6474_Board_Pwm1SetPeriod+0x2c>
	  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 800369c:	2104      	movs	r1, #4
 800369e:	4803      	ldr	r0, [pc, #12]	; (80036ac <L6474_Board_Pwm1SetPeriod+0x34>)
 80036a0:	f002 fc3c 	bl	8005f1c <HAL_TIM_PWM_Start_IT>
  }
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000964 	.word	0x20000964

080036b0 <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 80036ba:	f001 ffb9 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 80036be:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 80036c0:	88fb      	ldrh	r3, [r7, #6]
 80036c2:	029b      	lsls	r3, r3, #10
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 80036ce:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <L6474_Board_Pwm1SetFreq+0x48>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80036d6:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <L6474_Board_Pwm1SetFreq+0x48>)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	60d3      	str	r3, [r2, #12]
//  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
  if (hTimPwm1.Instance->CCER == 0) { // Check if a capture compare channel has not been enabled yet
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <L6474_Board_Pwm1SetFreq+0x48>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d103      	bne.n	80036ee <L6474_Board_Pwm1SetFreq+0x3e>
	  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 80036e6:	2104      	movs	r1, #4
 80036e8:	4803      	ldr	r0, [pc, #12]	; (80036f8 <L6474_Board_Pwm1SetFreq+0x48>)
 80036ea:	f002 fc17 	bl	8005f1c <HAL_TIM_PWM_Start_IT>
  }
}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000964 	.word	0x20000964

080036fc <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003706:	f001 ff93 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 800370a:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	029b      	lsls	r3, r3, #10
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <L6474_Board_Pwm2SetFreq+0x4c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	62da      	str	r2, [r3, #44]	; 0x2c
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <L6474_Board_Pwm2SetFreq+0x4c>)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 8003728:	4b07      	ldr	r3, [pc, #28]	; (8003748 <L6474_Board_Pwm2SetFreq+0x4c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3334      	adds	r3, #52	; 0x34
 800372e:	3304      	adds	r3, #4
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	0852      	lsrs	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8003736:	2104      	movs	r1, #4
 8003738:	4803      	ldr	r0, [pc, #12]	; (8003748 <L6474_Board_Pwm2SetFreq+0x4c>)
 800373a:	f002 fbef 	bl	8005f1c <HAL_TIM_PWM_Start_IT>
}
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	200009a0 	.word	0x200009a0

0800374c <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8003756:	f001 ff6b 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 800375a:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	02db      	lsls	r3, r3, #11
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	fbb2 f3f3 	udiv	r3, r2, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <L6474_Board_Pwm3SetFreq+0x4c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	62da      	str	r2, [r3, #44]	; 0x2c
 8003772:	4a09      	ldr	r2, [pc, #36]	; (8003798 <L6474_Board_Pwm3SetFreq+0x4c>)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <L6474_Board_Pwm3SetFreq+0x4c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3334      	adds	r3, #52	; 0x34
 800377e:	3308      	adds	r3, #8
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	0852      	lsrs	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 8003786:	2108      	movs	r1, #8
 8003788:	4803      	ldr	r0, [pc, #12]	; (8003798 <L6474_Board_Pwm3SetFreq+0x4c>)
 800378a:	f002 fbc7 	bl	8005f1c <HAL_TIM_PWM_Start_IT>
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	200009dc 	.word	0x200009dc

0800379c <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08e      	sub	sp, #56	; 0x38
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d00a      	beq.n	80037c2 <L6474_Board_PwmInit+0x26>
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d010      	beq.n	80037d2 <L6474_Board_PwmInit+0x36>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 80037b0:	4b21      	ldr	r3, [pc, #132]	; (8003838 <L6474_Board_PwmInit+0x9c>)
 80037b2:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 80037b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037ba:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 80037bc:	2304      	movs	r3, #4
 80037be:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 80037c0:	e00f      	b.n	80037e2 <L6474_Board_PwmInit+0x46>
    case  1:
      pHTim = &hTimPwm2;
 80037c2:	4b1e      	ldr	r3, [pc, #120]	; (800383c <L6474_Board_PwmInit+0xa0>)
 80037c4:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 80037c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c8:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <L6474_Board_PwmInit+0xa4>)
 80037ca:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 80037cc:	2304      	movs	r3, #4
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037d0:	e007      	b.n	80037e2 <L6474_Board_PwmInit+0x46>


    case 2:
      pHTim = &hTimPwm3;
 80037d2:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <L6474_Board_PwmInit+0xa8>)
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 80037d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d8:	4a1b      	ldr	r2, [pc, #108]	; (8003848 <L6474_Board_PwmInit+0xac>)
 80037da:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 80037dc:	2308      	movs	r3, #8
 80037de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80037e0:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 80037e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80037e8:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 80037ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ec:	2200      	movs	r2, #0
 80037ee:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f2:	2200      	movs	r2, #0
 80037f4:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 80037f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037f8:	f002 fb18 	bl	8005e2c <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037fc:	2360      	movs	r3, #96	; 0x60
 80037fe:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003804:	2300      	movs	r3, #0
 8003806:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 800380c:	f107 0314 	add.w	r3, r7, #20
 8003810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003812:	4619      	mov	r1, r3
 8003814:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003816:	f002 fdc5 	bl	80063a4 <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8003822:	f107 030c 	add.w	r3, r7, #12
 8003826:	4619      	mov	r1, r3
 8003828:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800382a:	f003 f8e9 	bl	8006a00 <HAL_TIMEx_MasterConfigSynchronization>
}
 800382e:	bf00      	nop
 8003830:	3738      	adds	r7, #56	; 0x38
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000964 	.word	0x20000964
 800383c:	200009a0 	.word	0x200009a0
 8003840:	40000400 	.word	0x40000400
 8003844:	200009dc 	.word	0x200009dc
 8003848:	40000800 	.word	0x40000800

0800384c <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d010      	beq.n	800387e <L6474_Board_PwmStop+0x32>
 800385c:	2b02      	cmp	r3, #2
 800385e:	dc13      	bgt.n	8003888 <L6474_Board_PwmStop+0x3c>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <L6474_Board_PwmStop+0x1e>
 8003864:	2b01      	cmp	r3, #1
 8003866:	d005      	beq.n	8003874 <L6474_Board_PwmStop+0x28>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 8003868:	e00e      	b.n	8003888 <L6474_Board_PwmStop+0x3c>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 800386a:	2104      	movs	r1, #4
 800386c:	4809      	ldr	r0, [pc, #36]	; (8003894 <L6474_Board_PwmStop+0x48>)
 800386e:	f002 fb09 	bl	8005e84 <HAL_TIM_PWM_Stop>
      break;
 8003872:	e00a      	b.n	800388a <L6474_Board_PwmStop+0x3e>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8003874:	2104      	movs	r1, #4
 8003876:	4808      	ldr	r0, [pc, #32]	; (8003898 <L6474_Board_PwmStop+0x4c>)
 8003878:	f002 fb04 	bl	8005e84 <HAL_TIM_PWM_Stop>
      break;
 800387c:	e005      	b.n	800388a <L6474_Board_PwmStop+0x3e>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 800387e:	2108      	movs	r1, #8
 8003880:	4806      	ldr	r0, [pc, #24]	; (800389c <L6474_Board_PwmStop+0x50>)
 8003882:	f002 faff 	bl	8005e84 <HAL_TIM_PWM_Stop>
      break;
 8003886:	e000      	b.n	800388a <L6474_Board_PwmStop+0x3e>
      break;//ignore error
 8003888:	bf00      	nop
  }
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000964 	.word	0x20000964
 8003898:	200009a0 	.word	0x200009a0
 800389c:	200009dc 	.word	0x200009dc

080038a0 <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_SET); 
 80038aa:	2201      	movs	r2, #1
 80038ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038b0:	4803      	ldr	r0, [pc, #12]	; (80038c0 <L6474_Board_ReleaseReset+0x20>)
 80038b2:	f001 fb59 	bl	8004f68 <HAL_GPIO_WritePin>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40020000 	.word	0x40020000

080038c4 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_RESET); 
 80038ce:	2200      	movs	r2, #0
 80038d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038d4:	4803      	ldr	r0, [pc, #12]	; (80038e4 <L6474_Board_Reset+0x20>)
 80038d6:	f001 fb47 	bl	8004f68 <HAL_GPIO_WritePin>
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40020000 	.word	0x40020000

080038e8 <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	460a      	mov	r2, r1
 80038f2:	71fb      	strb	r3, [r7, #7]
 80038f4:	4613      	mov	r3, r2
 80038f6:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d006      	beq.n	800390c <L6474_Board_SetDirectionGpio+0x24>
 80038fe:	2b02      	cmp	r3, #2
 8003900:	dc1a      	bgt.n	8003938 <L6474_Board_SetDirectionGpio+0x50>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d010      	beq.n	8003928 <L6474_Board_SetDirectionGpio+0x40>
 8003906:	2b01      	cmp	r3, #1
 8003908:	d007      	beq.n	800391a <L6474_Board_SetDirectionGpio+0x32>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 800390a:	e015      	b.n	8003938 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 800390c:	79bb      	ldrb	r3, [r7, #6]
 800390e:	461a      	mov	r2, r3
 8003910:	2110      	movs	r1, #16
 8003912:	480b      	ldr	r0, [pc, #44]	; (8003940 <L6474_Board_SetDirectionGpio+0x58>)
 8003914:	f001 fb28 	bl	8004f68 <HAL_GPIO_WritePin>
      break;
 8003918:	e00e      	b.n	8003938 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 800391a:	79bb      	ldrb	r3, [r7, #6]
 800391c:	461a      	mov	r2, r3
 800391e:	2120      	movs	r1, #32
 8003920:	4807      	ldr	r0, [pc, #28]	; (8003940 <L6474_Board_SetDirectionGpio+0x58>)
 8003922:	f001 fb21 	bl	8004f68 <HAL_GPIO_WritePin>
      break;
 8003926:	e007      	b.n	8003938 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 8003928:	79bb      	ldrb	r3, [r7, #6]
 800392a:	461a      	mov	r2, r3
 800392c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003930:	4804      	ldr	r0, [pc, #16]	; (8003944 <L6474_Board_SetDirectionGpio+0x5c>)
 8003932:	f001 fb19 	bl	8004f68 <HAL_GPIO_WritePin>
      break;
 8003936:	bf00      	nop
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40020400 	.word	0x40020400
 8003944:	40020000 	.word	0x40020000

08003948 <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 800394e:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <L6474_Board_SpiInit+0x68>)
 8003950:	4a18      	ldr	r2, [pc, #96]	; (80039b4 <L6474_Board_SpiInit+0x6c>)
 8003952:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8003954:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <L6474_Board_SpiInit+0x68>)
 8003956:	2220      	movs	r2, #32
 8003958:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 800395a:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <L6474_Board_SpiInit+0x68>)
 800395c:	2200      	movs	r2, #0
 800395e:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8003960:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <L6474_Board_SpiInit+0x68>)
 8003962:	2201      	movs	r2, #1
 8003964:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8003966:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <L6474_Board_SpiInit+0x68>)
 8003968:	2202      	movs	r2, #2
 800396a:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 800396c:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <L6474_Board_SpiInit+0x68>)
 800396e:	2200      	movs	r2, #0
 8003970:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8003972:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <L6474_Board_SpiInit+0x68>)
 8003974:	2207      	movs	r2, #7
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8003978:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <L6474_Board_SpiInit+0x68>)
 800397a:	2200      	movs	r2, #0
 800397c:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <L6474_Board_SpiInit+0x68>)
 8003980:	2200      	movs	r2, #0
 8003982:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <L6474_Board_SpiInit+0x68>)
 8003986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800398a:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 800398c:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <L6474_Board_SpiInit+0x68>)
 800398e:	2200      	movs	r2, #0
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8003992:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <L6474_Board_SpiInit+0x68>)
 8003994:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003998:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 800399a:	4805      	ldr	r0, [pc, #20]	; (80039b0 <L6474_Board_SpiInit+0x68>)
 800399c:	f001 ff42 	bl	8005824 <HAL_SPI_Init>
 80039a0:	4603      	mov	r3, r0
 80039a2:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 80039a4:	79fb      	ldrb	r3, [r7, #7]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	2000090c 	.word	0x2000090c
 80039b4:	40013000 	.word	0x40013000

080039b8 <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	4613      	mov	r3, r2
 80039c4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 80039c6:	2200      	movs	r2, #0
 80039c8:	2140      	movs	r1, #64	; 0x40
 80039ca:	4816      	ldr	r0, [pc, #88]	; (8003a24 <L6474_Board_SpiWriteBytes+0x6c>)
 80039cc:	f001 facc 	bl	8004f68 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	e016      	b.n	8003a04 <L6474_Board_SpiWriteBytes+0x4c>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 80039d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	2301      	movs	r3, #1
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	68f9      	ldr	r1, [r7, #12]
 80039e2:	4811      	ldr	r0, [pc, #68]	; (8003a28 <L6474_Board_SpiWriteBytes+0x70>)
 80039e4:	f001 ff89 	bl	80058fa <HAL_SPI_TransmitReceive>
 80039e8:	4603      	mov	r3, r0
 80039ea:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10d      	bne.n	8003a0e <L6474_Board_SpiWriteBytes+0x56>
    {
      break;
    }
    pByteToTransmit++;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3301      	adds	r3, #1
 80039f6:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	3301      	adds	r3, #1
 80039fc:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	3301      	adds	r3, #1
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d3e4      	bcc.n	80039d6 <L6474_Board_SpiWriteBytes+0x1e>
 8003a0c:	e000      	b.n	8003a10 <L6474_Board_SpiWriteBytes+0x58>
      break;
 8003a0e:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003a10:	2201      	movs	r2, #1
 8003a12:	2140      	movs	r1, #64	; 0x40
 8003a14:	4803      	ldr	r0, [pc, #12]	; (8003a24 <L6474_Board_SpiWriteBytes+0x6c>)
 8003a16:	f001 faa7 	bl	8004f68 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 8003a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40020400 	.word	0x40020400
 8003a28:	2000090c 	.word	0x2000090c

08003a2c <l647x_GetMotorHandle>:
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	2300      	movs	r3, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	2300      	movs	r3, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <Powerstep01_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	2300      	movs	r3, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <L6206_GetMotorHandle>:
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	2300      	movs	r3, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	2300      	movs	r3, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	2300      	movs	r3, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	2300      	movs	r3, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <BSP_MotorControl_AttachErrorHandler+0x26>
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <BSP_MotorControl_AttachErrorHandler+0x26>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 8003ab6:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
 8003ac0:	e004      	b.n	8003acc <BSP_MotorControl_AttachErrorHandler+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8003ac2:	f640 0002 	movw	r0, #2050	; 0x802
 8003ac6:	f000 f825 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }
}
 8003aca:	bf00      	nop
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000a18 	.word	0x20000a18

08003ad8 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 8003af2:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	4798      	blx	r3
 8003afc:	e004      	b.n	8003b08 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8003afe:	f640 0003 	movw	r0, #2051	; 0x803
 8003b02:	f000 f807 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000a18 	.word	0x20000a18

08003b14 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <BSP_MotorControl_ErrorHandler+0x38>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <BSP_MotorControl_ErrorHandler+0x2e>
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <BSP_MotorControl_ErrorHandler+0x38>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <BSP_MotorControl_ErrorHandler+0x38>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8003b40:	e000      	b.n	8003b44 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 8003b42:	e7fe      	b.n	8003b42 <BSP_MotorControl_ErrorHandler+0x2e>
}
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000a18 	.word	0x20000a18

08003b50 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	6039      	str	r1, [r7, #0]
 8003b5a:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <BSP_MotorControl_Init+0x3c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <BSP_MotorControl_Init+0x2a>
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <BSP_MotorControl_Init+0x3c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <BSP_MotorControl_Init+0x2a>
  {
    motorDrvHandle->Init(initDeviceParameters);
 8003b6e:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <BSP_MotorControl_Init+0x3c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6838      	ldr	r0, [r7, #0]
 8003b76:	4798      	blx	r3
 8003b78:	e004      	b.n	8003b84 <BSP_MotorControl_Init+0x34>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 8003b7a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b7e:	f7ff ffc9 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	20000a18 	.word	0x20000a18

08003b90 <BSP_MotorControl_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void BSP_MotorControl_FlagInterruptHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  if ((motorDrvHandle != 0)&&(motorDrvHandle->FlagInterruptHandler != 0))
 8003b94:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d009      	beq.n	8003bb0 <BSP_MotorControl_FlagInterruptHandler+0x20>
 8003b9c:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <BSP_MotorControl_FlagInterruptHandler+0x20>
  {
    motorDrvHandle->FlagInterruptHandler();
 8003ba6:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	4798      	blx	r3
 8003bae:	e004      	b.n	8003bba <BSP_MotorControl_FlagInterruptHandler+0x2a>
  }    
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(5);
 8003bb0:	f640 0005 	movw	r0, #2053	; 0x805
 8003bb4:	f7ff ffae 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000a18 	.word	0x20000a18

08003bc4 <BSP_MotorControl_GetAcceleration>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t BSP_MotorControl_GetAcceleration(uint8_t deviceId)
{                                                  
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
  uint16_t acceleration = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	81fb      	strh	r3, [r7, #14]

  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetAcceleration != 0))
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <BSP_MotorControl_GetAcceleration+0x44>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00d      	beq.n	8003bf6 <BSP_MotorControl_GetAcceleration+0x32>
 8003bda:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <BSP_MotorControl_GetAcceleration+0x44>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <BSP_MotorControl_GetAcceleration+0x32>
  {
    acceleration = motorDrvHandle->GetAcceleration(deviceId);
 8003be4:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <BSP_MotorControl_GetAcceleration+0x44>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	79fa      	ldrb	r2, [r7, #7]
 8003bec:	4610      	mov	r0, r2
 8003bee:	4798      	blx	r3
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	81fb      	strh	r3, [r7, #14]
 8003bf4:	e003      	b.n	8003bfe <BSP_MotorControl_GetAcceleration+0x3a>
  }      
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(6);
 8003bf6:	f640 0006 	movw	r0, #2054	; 0x806
 8003bfa:	f7ff ff8b 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }  
  return(acceleration);    
 8003bfe:	89fb      	ldrh	r3, [r7, #14]
}            
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000a18 	.word	0x20000a18

08003c0c <BSP_MotorControl_GetCurrentSpeed>:
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval Speed in pps for stepper motor
 *               in % for Brush DC motor (0-100)   
 **********************************************************/
uint16_t BSP_MotorControl_GetCurrentSpeed(uint8_t deviceId)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
  uint16_t currentSpeed = 0;
 8003c16:	2300      	movs	r3, #0
 8003c18:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetCurrentSpeed != 0))
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <BSP_MotorControl_GetCurrentSpeed+0x44>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <BSP_MotorControl_GetCurrentSpeed+0x32>
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <BSP_MotorControl_GetCurrentSpeed+0x44>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <BSP_MotorControl_GetCurrentSpeed+0x32>
  {
    currentSpeed = motorDrvHandle->GetCurrentSpeed(deviceId);
 8003c2c:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <BSP_MotorControl_GetCurrentSpeed+0x44>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	79fa      	ldrb	r2, [r7, #7]
 8003c34:	4610      	mov	r0, r2
 8003c36:	4798      	blx	r3
 8003c38:	4603      	mov	r3, r0
 8003c3a:	81fb      	strh	r3, [r7, #14]
 8003c3c:	e003      	b.n	8003c46 <BSP_MotorControl_GetCurrentSpeed+0x3a>
  }      
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(7);
 8003c3e:	f640 0007 	movw	r0, #2055	; 0x807
 8003c42:	f7ff ff67 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }  
  return(currentSpeed); 
 8003c46:	89fb      	ldrh	r3, [r7, #14]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000a18 	.word	0x20000a18

08003c54 <BSP_MotorControl_GetDeceleration>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t BSP_MotorControl_GetDeceleration(uint8_t deviceId)
{                                                  
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
  uint16_t deceleration = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	81fb      	strh	r3, [r7, #14]

  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeceleration != 0))
 8003c62:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <BSP_MotorControl_GetDeceleration+0x44>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <BSP_MotorControl_GetDeceleration+0x32>
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <BSP_MotorControl_GetDeceleration+0x44>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <BSP_MotorControl_GetDeceleration+0x32>
  {
    deceleration = motorDrvHandle->GetDeceleration(deviceId);
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <BSP_MotorControl_GetDeceleration+0x44>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	79fa      	ldrb	r2, [r7, #7]
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4798      	blx	r3
 8003c80:	4603      	mov	r3, r0
 8003c82:	81fb      	strh	r3, [r7, #14]
 8003c84:	e003      	b.n	8003c8e <BSP_MotorControl_GetDeceleration+0x3a>
  }      
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(8);
 8003c86:	f640 0008 	movw	r0, #2056	; 0x808
 8003c8a:	f7ff ff43 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }  
  return(deceleration);   
 8003c8e:	89fb      	ldrh	r3, [r7, #14]
}          
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000a18 	.word	0x20000a18

08003c9c <BSP_MotorControl_GetDeviceState>:
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval State ACCELERATING, DECELERATING, STEADY or INACTIVE for stepper motor,
                 STEADY or INACTIVE for Brush DC motor
 **********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	71fb      	strb	r3, [r7, #7]
  motorState_t state = INACTIVE;
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	73fb      	strb	r3, [r7, #15]

  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeviceState != 0))
 8003caa:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <BSP_MotorControl_GetDeviceState+0x44>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <BSP_MotorControl_GetDeviceState+0x32>
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <BSP_MotorControl_GetDeviceState+0x44>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <BSP_MotorControl_GetDeviceState+0x32>
  {
    state = motorDrvHandle->GetDeviceState(deviceId);
 8003cbc:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <BSP_MotorControl_GetDeviceState+0x44>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	79fa      	ldrb	r2, [r7, #7]
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	4798      	blx	r3
 8003cc8:	4603      	mov	r3, r0
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	e003      	b.n	8003cd6 <BSP_MotorControl_GetDeviceState+0x3a>
  }      
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
 8003cce:	f640 0009 	movw	r0, #2057	; 0x809
 8003cd2:	f7ff ff1f 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }  
  return(state);   
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000a18 	.word	0x20000a18

08003ce4 <BSP_MotorControl_GetPosition>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t BSP_MotorControl_GetPosition(uint8_t deviceId)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	71fb      	strb	r3, [r7, #7]
  int32_t pos = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
  
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetPosition != 0))
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <BSP_MotorControl_GetPosition+0x44>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00c      	beq.n	8003d14 <BSP_MotorControl_GetPosition+0x30>
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <BSP_MotorControl_GetPosition+0x44>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <BSP_MotorControl_GetPosition+0x30>
  {
    pos = motorDrvHandle->GetPosition(deviceId);
 8003d04:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <BSP_MotorControl_GetPosition+0x44>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	79fa      	ldrb	r2, [r7, #7]
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4798      	blx	r3
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	e003      	b.n	8003d1c <BSP_MotorControl_GetPosition+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(14);
 8003d14:	f640 000e 	movw	r0, #2062	; 0x80e
 8003d18:	f7ff fefc 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }      
  return(pos);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000a18 	.word	0x20000a18

08003d2c <BSP_MotorControl_GoTo>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void BSP_MotorControl_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	6039      	str	r1, [r7, #0]
 8003d36:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GoTo != 0))
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <BSP_MotorControl_GoTo+0x40>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00c      	beq.n	8003d5a <BSP_MotorControl_GoTo+0x2e>
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <BSP_MotorControl_GoTo+0x40>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <BSP_MotorControl_GoTo+0x2e>
  {
    motorDrvHandle->GoTo(deviceId, targetPosition);
 8003d4a:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <BSP_MotorControl_GoTo+0x40>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	79fa      	ldrb	r2, [r7, #7]
 8003d52:	6839      	ldr	r1, [r7, #0]
 8003d54:	4610      	mov	r0, r2
 8003d56:	4798      	blx	r3
 8003d58:	e004      	b.n	8003d64 <BSP_MotorControl_GoTo+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(17);
 8003d5a:	f640 0011 	movw	r0, #2065	; 0x811
 8003d5e:	f7ff fed9 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }      
}
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000a18 	.word	0x20000a18

08003d70 <BSP_MotorControl_HardStop>:
 *            For L6208: dummy parameter for compatibility with motor.h
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval None
 **********************************************************/
void BSP_MotorControl_HardStop(uint8_t deviceId) 
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->HardStop != 0))
 8003d7a:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <BSP_MotorControl_HardStop+0x3c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <BSP_MotorControl_HardStop+0x2a>
 8003d82:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <BSP_MotorControl_HardStop+0x3c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d006      	beq.n	8003d9a <BSP_MotorControl_HardStop+0x2a>
  {
    motorDrvHandle->HardStop(deviceId);
 8003d8c:	4b07      	ldr	r3, [pc, #28]	; (8003dac <BSP_MotorControl_HardStop+0x3c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d92:	79fa      	ldrb	r2, [r7, #7]
 8003d94:	4610      	mov	r0, r2
 8003d96:	4798      	blx	r3
 8003d98:	e004      	b.n	8003da4 <BSP_MotorControl_HardStop+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(18);
 8003d9a:	f640 0012 	movw	r0, #2066	; 0x812
 8003d9e:	f7ff feb9 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }      
}
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000a18 	.word	0x20000a18

08003db0 <BSP_MotorControl_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void BSP_MotorControl_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	603a      	str	r2, [r7, #0]
 8003dba:	71fb      	strb	r3, [r7, #7]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	71bb      	strb	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Move != 0))
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <BSP_MotorControl_Move+0x44>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00c      	beq.n	8003de2 <BSP_MotorControl_Move+0x32>
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <BSP_MotorControl_Move+0x44>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <BSP_MotorControl_Move+0x32>
  {
    motorDrvHandle->Move(deviceId, direction, stepCount);
 8003dd2:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <BSP_MotorControl_Move+0x44>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd8:	79b9      	ldrb	r1, [r7, #6]
 8003dda:	79f8      	ldrb	r0, [r7, #7]
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	4798      	blx	r3
 8003de0:	e004      	b.n	8003dec <BSP_MotorControl_Move+0x3c>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(19);
 8003de2:	f640 0013 	movw	r0, #2067	; 0x813
 8003de6:	f7ff fe95 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }      
}
 8003dea:	bf00      	nop
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000a18 	.word	0x20000a18

08003df8 <BSP_MotorControl_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	460a      	mov	r2, r1
 8003e02:	71fb      	strb	r3, [r7, #7]
 8003e04:	4613      	mov	r3, r2
 8003e06:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetAcceleration != 0))
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <BSP_MotorControl_SetAcceleration+0x4c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00e      	beq.n	8003e32 <BSP_MotorControl_SetAcceleration+0x3a>
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <BSP_MotorControl_SetAcceleration+0x4c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d009      	beq.n	8003e32 <BSP_MotorControl_SetAcceleration+0x3a>
  {
    status = motorDrvHandle->SetAcceleration(deviceId, newAcc);
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <BSP_MotorControl_SetAcceleration+0x4c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	88b9      	ldrh	r1, [r7, #4]
 8003e26:	79fa      	ldrb	r2, [r7, #7]
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4798      	blx	r3
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	73fb      	strb	r3, [r7, #15]
 8003e30:	e003      	b.n	8003e3a <BSP_MotorControl_SetAcceleration+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(22);
 8003e32:	f640 0016 	movw	r0, #2070	; 0x816
 8003e36:	f7ff fe6d 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
}            
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20000a18 	.word	0x20000a18

08003e48 <BSP_MotorControl_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	460a      	mov	r2, r1
 8003e52:	71fb      	strb	r3, [r7, #7]
 8003e54:	4613      	mov	r3, r2
 8003e56:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetDeceleration != 0))
 8003e5c:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <BSP_MotorControl_SetDeceleration+0x4c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <BSP_MotorControl_SetDeceleration+0x3a>
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <BSP_MotorControl_SetDeceleration+0x4c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <BSP_MotorControl_SetDeceleration+0x3a>
  {
    status = motorDrvHandle->SetDeceleration(deviceId, newDec);
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <BSP_MotorControl_SetDeceleration+0x4c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	88b9      	ldrh	r1, [r7, #4]
 8003e76:	79fa      	ldrb	r2, [r7, #7]
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4798      	blx	r3
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	73fb      	strb	r3, [r7, #15]
 8003e80:	e003      	b.n	8003e8a <BSP_MotorControl_SetDeceleration+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(23);
 8003e82:	f640 0017 	movw	r0, #2071	; 0x817
 8003e86:	f7ff fe45 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }        
  return (status);
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
}        
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000a18 	.word	0x20000a18

08003e98 <BSP_MotorControl_SetHome>:
 * @param[in] homePosition new absolute home position 
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_SetHome(uint8_t deviceId, int32_t homePosition)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	6039      	str	r1, [r7, #0]
 8003ea2:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetHome != 0))
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <BSP_MotorControl_SetHome+0x40>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00c      	beq.n	8003ec6 <BSP_MotorControl_SetHome+0x2e>
 8003eac:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <BSP_MotorControl_SetHome+0x40>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <BSP_MotorControl_SetHome+0x2e>
  {
    motorDrvHandle->SetHome(deviceId, homePosition);
 8003eb6:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <BSP_MotorControl_SetHome+0x40>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebc:	79fa      	ldrb	r2, [r7, #7]
 8003ebe:	6839      	ldr	r1, [r7, #0]
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4798      	blx	r3
 8003ec4:	e004      	b.n	8003ed0 <BSP_MotorControl_SetHome+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(24);
 8003ec6:	f640 0018 	movw	r0, #2072	; 0x818
 8003eca:	f7ff fe23 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }        
}
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000a18 	.word	0x20000a18

08003edc <BSP_MotorControl_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note For a stepper motor, the command is not performed if the device 
 * is executing a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	460a      	mov	r2, r1
 8003ee6:	71fb      	strb	r3, [r7, #7]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 8003ef0:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <BSP_MotorControl_SetMaxSpeed+0x3a>
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <BSP_MotorControl_SetMaxSpeed+0x3a>
  {
    status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f08:	88b9      	ldrh	r1, [r7, #4]
 8003f0a:	79fa      	ldrb	r2, [r7, #7]
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4798      	blx	r3
 8003f10:	4603      	mov	r3, r0
 8003f12:	73fb      	strb	r3, [r7, #15]
 8003f14:	e003      	b.n	8003f1e <BSP_MotorControl_SetMaxSpeed+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
 8003f16:	f640 001a 	movw	r0, #2074	; 0x81a
 8003f1a:	f7ff fdfb 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }     
  return (status);  
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20000a18 	.word	0x20000a18

08003f2c <BSP_MotorControl_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	460a      	mov	r2, r1
 8003f36:	71fb      	strb	r3, [r7, #7]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMinSpeed != 0))
 8003f40:	4b0d      	ldr	r3, [pc, #52]	; (8003f78 <BSP_MotorControl_SetMinSpeed+0x4c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00e      	beq.n	8003f66 <BSP_MotorControl_SetMinSpeed+0x3a>
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <BSP_MotorControl_SetMinSpeed+0x4c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <BSP_MotorControl_SetMinSpeed+0x3a>
  {
    status = motorDrvHandle->SetMinSpeed(deviceId, newMinSpeed);
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <BSP_MotorControl_SetMinSpeed+0x4c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f58:	88b9      	ldrh	r1, [r7, #4]
 8003f5a:	79fa      	ldrb	r2, [r7, #7]
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4798      	blx	r3
 8003f60:	4603      	mov	r3, r0
 8003f62:	73fb      	strb	r3, [r7, #15]
 8003f64:	e003      	b.n	8003f6e <BSP_MotorControl_SetMinSpeed+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(27);
 8003f66:	f640 001b 	movw	r0, #2075	; 0x81b
 8003f6a:	f7ff fdd3 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }     
  
  return (status);  
 8003f6e:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000a18 	.word	0x20000a18

08003f7c <BSP_MotorControl_SoftStop>:
 *            motorId  from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool BSP_MotorControl_SoftStop(uint8_t deviceId)
{	
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
  bool status = FALSE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SoftStop != 0))
 8003f8a:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <BSP_MotorControl_SoftStop+0x44>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00d      	beq.n	8003fae <BSP_MotorControl_SoftStop+0x32>
 8003f92:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <BSP_MotorControl_SoftStop+0x44>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <BSP_MotorControl_SoftStop+0x32>
  {
    status = motorDrvHandle->SoftStop(deviceId);
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <BSP_MotorControl_SoftStop+0x44>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa2:	79fa      	ldrb	r2, [r7, #7]
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4798      	blx	r3
 8003fa8:	4603      	mov	r3, r0
 8003faa:	73fb      	strb	r3, [r7, #15]
 8003fac:	e003      	b.n	8003fb6 <BSP_MotorControl_SoftStop+0x3a>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(28);
 8003fae:	f640 001c 	movw	r0, #2076	; 0x81c
 8003fb2:	f7ff fdaf 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }    
  return (status);  
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000a18 	.word	0x20000a18

08003fc4 <BSP_MotorControl_StepClockHandler>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void BSP_MotorControl_StepClockHandler(uint8_t deviceId)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->StepClockHandler != 0))
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <BSP_MotorControl_StepClockHandler+0x3c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00b      	beq.n	8003fee <BSP_MotorControl_StepClockHandler+0x2a>
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <BSP_MotorControl_StepClockHandler+0x3c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d006      	beq.n	8003fee <BSP_MotorControl_StepClockHandler+0x2a>
  {
    motorDrvHandle->StepClockHandler(deviceId);
 8003fe0:	4b07      	ldr	r3, [pc, #28]	; (8004000 <BSP_MotorControl_StepClockHandler+0x3c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe6:	79fa      	ldrb	r2, [r7, #7]
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4798      	blx	r3
 8003fec:	e004      	b.n	8003ff8 <BSP_MotorControl_StepClockHandler+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(29);
 8003fee:	f640 001d 	movw	r0, #2077	; 0x81d
 8003ff2:	f7ff fd8f 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }   
}
 8003ff6:	bf00      	nop
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000a18 	.word	0x20000a18

08004004 <BSP_MotorControl_WaitWhileActive>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_WaitWhileActive(uint8_t deviceId)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->WaitWhileActive != 0))
 800400e:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <BSP_MotorControl_WaitWhileActive+0x3c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <BSP_MotorControl_WaitWhileActive+0x2a>
 8004016:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <BSP_MotorControl_WaitWhileActive+0x3c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800401c:	2b00      	cmp	r3, #0
 800401e:	d006      	beq.n	800402e <BSP_MotorControl_WaitWhileActive+0x2a>
  {
    motorDrvHandle->WaitWhileActive(deviceId);
 8004020:	4b07      	ldr	r3, [pc, #28]	; (8004040 <BSP_MotorControl_WaitWhileActive+0x3c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004026:	79fa      	ldrb	r2, [r7, #7]
 8004028:	4610      	mov	r0, r2
 800402a:	4798      	blx	r3
 800402c:	e004      	b.n	8004038 <BSP_MotorControl_WaitWhileActive+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(30);
 800402e:	f640 001e 	movw	r0, #2078	; 0x81e
 8004032:	f7ff fd6f 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }    
}
 8004036:	bf00      	nop
 8004038:	bf00      	nop
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20000a18 	.word	0x20000a18

08004044 <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 8004052:	4b0e      	ldr	r3, [pc, #56]	; (800408c <BSP_MotorControl_CmdGetStatus+0x48>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00f      	beq.n	800407a <BSP_MotorControl_CmdGetStatus+0x36>
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <BSP_MotorControl_CmdGetStatus+0x48>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <BSP_MotorControl_CmdGetStatus+0x48>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	79fa      	ldrb	r2, [r7, #7]
 8004070:	4610      	mov	r0, r2
 8004072:	4798      	blx	r3
 8004074:	4603      	mov	r3, r0
 8004076:	81fb      	strh	r3, [r7, #14]
 8004078:	e003      	b.n	8004082 <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 800407a:	f640 0022 	movw	r0, #2082	; 0x822
 800407e:	f7ff fd49 	bl	8003b14 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 8004082:	89fb      	ldrh	r3, [r7, #14]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000a18 	.word	0x20000a18

08004090 <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	460a      	mov	r2, r1
 800409a:	80fb      	strh	r3, [r7, #6]
 800409c:	4613      	mov	r3, r2
 800409e:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 80040a0:	4a40      	ldr	r2, [pc, #256]	; (80041a4 <BSP_MotorControl_SetNbDevices+0x114>)
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	8013      	strh	r3, [r2, #0]
  bool status = FALSE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	f641 124a 	movw	r2, #6474	; 0x194a
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d105      	bne.n	80040c0 <BSP_MotorControl_SetNbDevices+0x30>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 80040b4:	f7fd fb96 	bl	80017e4 <L6474_GetMotorHandle>
 80040b8:	4603      	mov	r3, r0
 80040ba:	4a3b      	ldr	r2, [pc, #236]	; (80041a8 <BSP_MotorControl_SetNbDevices+0x118>)
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e055      	b.n	800416c <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d105      	bne.n	80040d2 <BSP_MotorControl_SetNbDevices+0x42>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 80040c6:	f7ff fcc1 	bl	8003a4c <Powerstep01_GetMotorHandle>
 80040ca:	4603      	mov	r3, r0
 80040cc:	4a36      	ldr	r2, [pc, #216]	; (80041a8 <BSP_MotorControl_SetNbDevices+0x118>)
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	e04c      	b.n	800416c <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	f641 023e 	movw	r2, #6206	; 0x183e
 80040d8:	4293      	cmp	r3, r2
 80040da:	d105      	bne.n	80040e8 <BSP_MotorControl_SetNbDevices+0x58>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 80040dc:	f7ff fcbe 	bl	8003a5c <L6206_GetMotorHandle>
 80040e0:	4603      	mov	r3, r0
 80040e2:	4a31      	ldr	r2, [pc, #196]	; (80041a8 <BSP_MotorControl_SetNbDevices+0x118>)
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	e041      	b.n	800416c <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 80040e8:	88fb      	ldrh	r3, [r7, #6]
 80040ea:	f5b3 5fc2 	cmp.w	r3, #6208	; 0x1840
 80040ee:	d105      	bne.n	80040fc <BSP_MotorControl_SetNbDevices+0x6c>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 80040f0:	f7ff fcbc 	bl	8003a6c <L6208_GetMotorHandle>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <BSP_MotorControl_SetNbDevices+0x118>)
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e037      	b.n	800416c <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	2bdc      	cmp	r3, #220	; 0xdc
 8004100:	d105      	bne.n	800410e <BSP_MotorControl_SetNbDevices+0x7e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 8004102:	f7ff fcbb 	bl	8003a7c <Stspin220_GetMotorHandle>
 8004106:	4603      	mov	r3, r0
 8004108:	4a27      	ldr	r2, [pc, #156]	; (80041a8 <BSP_MotorControl_SetNbDevices+0x118>)
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	e02e      	b.n	800416c <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	f641 1246 	movw	r2, #6470	; 0x1946
 8004114:	4293      	cmp	r3, r2
 8004116:	d004      	beq.n	8004122 <BSP_MotorControl_SetNbDevices+0x92>
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	f641 1248 	movw	r2, #6472	; 0x1948
 800411e:	4293      	cmp	r3, r2
 8004120:	d105      	bne.n	800412e <BSP_MotorControl_SetNbDevices+0x9e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 8004122:	f7ff fc83 	bl	8003a2c <l647x_GetMotorHandle>
 8004126:	4603      	mov	r3, r0
 8004128:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <BSP_MotorControl_SetNbDevices+0x118>)
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	e01e      	b.n	800416c <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	f641 1250 	movw	r2, #6480	; 0x1950
 8004134:	4293      	cmp	r3, r2
 8004136:	d004      	beq.n	8004142 <BSP_MotorControl_SetNbDevices+0xb2>
 8004138:	88fb      	ldrh	r3, [r7, #6]
 800413a:	f641 1252 	movw	r2, #6482	; 0x1952
 800413e:	4293      	cmp	r3, r2
 8004140:	d105      	bne.n	800414e <BSP_MotorControl_SetNbDevices+0xbe>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 8004142:	f7ff fc7b 	bl	8003a3c <l648x_GetMotorHandle>
 8004146:	4603      	mov	r3, r0
 8004148:	4a17      	ldr	r2, [pc, #92]	; (80041a8 <BSP_MotorControl_SetNbDevices+0x118>)
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	e00e      	b.n	800416c <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	2bf0      	cmp	r3, #240	; 0xf0
 8004152:	d002      	beq.n	800415a <BSP_MotorControl_SetNbDevices+0xca>
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	2bfa      	cmp	r3, #250	; 0xfa
 8004158:	d105      	bne.n	8004166 <BSP_MotorControl_SetNbDevices+0xd6>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 800415a:	f7ff fc97 	bl	8003a8c <Stspin240_250_GetMotorHandle>
 800415e:	4603      	mov	r3, r0
 8004160:	4a11      	ldr	r2, [pc, #68]	; (80041a8 <BSP_MotorControl_SetNbDevices+0x118>)
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	e002      	b.n	800416c <BSP_MotorControl_SetNbDevices+0xdc>
  }  
  else
  {
    motorDrvHandle = 0;
 8004166:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <BSP_MotorControl_SetNbDevices+0x118>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <BSP_MotorControl_SetNbDevices+0x118>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d011      	beq.n	8004198 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <BSP_MotorControl_SetNbDevices+0x118>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
  if ((motorDrvHandle != 0)&&
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00b      	beq.n	8004198 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8004180:	797b      	ldrb	r3, [r7, #5]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <BSP_MotorControl_SetNbDevices+0x108>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <BSP_MotorControl_SetNbDevices+0x118>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800418e:	797a      	ldrb	r2, [r7, #5]
 8004190:	4610      	mov	r0, r2
 8004192:	4798      	blx	r3
 8004194:	4603      	mov	r3, r0
 8004196:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8004198:	7bfb      	ldrb	r3, [r7, #15]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000a1c 	.word	0x20000a1c
 80041a8:	20000a18 	.word	0x20000a18

080041ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041b0:	4b16      	ldr	r3, [pc, #88]	; (800420c <SystemInit+0x60>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	4a15      	ldr	r2, [pc, #84]	; (800420c <SystemInit+0x60>)
 80041b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <SystemInit+0x64>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a12      	ldr	r2, [pc, #72]	; (8004210 <SystemInit+0x64>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80041cc:	4b10      	ldr	r3, [pc, #64]	; (8004210 <SystemInit+0x64>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80041d2:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <SystemInit+0x64>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a0e      	ldr	r2, [pc, #56]	; (8004210 <SystemInit+0x64>)
 80041d8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80041dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <SystemInit+0x64>)
 80041e4:	4a0b      	ldr	r2, [pc, #44]	; (8004214 <SystemInit+0x68>)
 80041e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80041e8:	4b09      	ldr	r3, [pc, #36]	; (8004210 <SystemInit+0x64>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a08      	ldr	r2, [pc, #32]	; (8004210 <SystemInit+0x64>)
 80041ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <SystemInit+0x64>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041fa:	4b04      	ldr	r3, [pc, #16]	; (800420c <SystemInit+0x60>)
 80041fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004200:	609a      	str	r2, [r3, #8]
#endif
}
 8004202:	bf00      	nop
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	e000ed00 	.word	0xe000ed00
 8004210:	40023800 	.word	0x40023800
 8004214:	24003010 	.word	0x24003010

08004218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800421c:	4b0e      	ldr	r3, [pc, #56]	; (8004258 <HAL_Init+0x40>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a0d      	ldr	r2, [pc, #52]	; (8004258 <HAL_Init+0x40>)
 8004222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <HAL_Init+0x40>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <HAL_Init+0x40>)
 800422e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <HAL_Init+0x40>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a07      	ldr	r2, [pc, #28]	; (8004258 <HAL_Init+0x40>)
 800423a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004240:	2003      	movs	r0, #3
 8004242:	f000 f953 	bl	80044ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004246:	200f      	movs	r0, #15
 8004248:	f000 f810 	bl	800426c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800424c:	f000 f806 	bl	800425c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40023c00 	.word	0x40023c00

0800425c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004274:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <HAL_InitTick+0x54>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <HAL_InitTick+0x58>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	4619      	mov	r1, r3
 800427e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004282:	fbb3 f3f1 	udiv	r3, r3, r1
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f963 	bl	8004556 <HAL_SYSTICK_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e00e      	b.n	80042b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b0f      	cmp	r3, #15
 800429e:	d80a      	bhi.n	80042b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042a0:	2200      	movs	r2, #0
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	f000 f92b 	bl	8004502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042ac:	4a06      	ldr	r2, [pc, #24]	; (80042c8 <HAL_InitTick+0x5c>)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e000      	b.n	80042b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000164 	.word	0x20000164
 80042c4:	2000016c 	.word	0x2000016c
 80042c8:	20000168 	.word	0x20000168

080042cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <HAL_IncTick+0x20>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <HAL_IncTick+0x24>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4413      	add	r3, r2
 80042dc:	4a04      	ldr	r2, [pc, #16]	; (80042f0 <HAL_IncTick+0x24>)
 80042de:	6013      	str	r3, [r2, #0]
}
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	2000016c 	.word	0x2000016c
 80042f0:	20000a20 	.word	0x20000a20

080042f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return uwTick;
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_GetTick+0x14>)
 80042fa:	681b      	ldr	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000a20 	.word	0x20000a20

0800430c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004314:	f7ff ffee 	bl	80042f4 <HAL_GetTick>
 8004318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d005      	beq.n	8004332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004326:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <HAL_Delay+0x44>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004332:	bf00      	nop
 8004334:	f7ff ffde 	bl	80042f4 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	429a      	cmp	r2, r3
 8004342:	d8f7      	bhi.n	8004334 <HAL_Delay+0x28>
  {
  }
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	2000016c 	.word	0x2000016c

08004354 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <NVIC_SetPriorityGrouping+0x44>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004370:	4013      	ands	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800437c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004386:	4a04      	ldr	r2, [pc, #16]	; (8004398 <NVIC_SetPriorityGrouping+0x44>)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	60d3      	str	r3, [r2, #12]
}
 800438c:	bf00      	nop
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <NVIC_GetPriorityGrouping+0x18>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	0a1b      	lsrs	r3, r3, #8
 80043a6:	f003 0307 	and.w	r3, r3, #7
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	e000ed00 	.word	0xe000ed00

080043b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	f003 021f 	and.w	r2, r3, #31
 80043c8:	4907      	ldr	r1, [pc, #28]	; (80043e8 <NVIC_EnableIRQ+0x30>)
 80043ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	2001      	movs	r0, #1
 80043d2:	fa00 f202 	lsl.w	r2, r0, r2
 80043d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	e000e100 	.word	0xe000e100

080043ec <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	6039      	str	r1, [r7, #0]
 80043f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80043f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	da0b      	bge.n	8004418 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	490c      	ldr	r1, [pc, #48]	; (8004438 <NVIC_SetPriority+0x4c>)
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	3b04      	subs	r3, #4
 800440e:	0112      	lsls	r2, r2, #4
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	440b      	add	r3, r1
 8004414:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004416:	e009      	b.n	800442c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	b2da      	uxtb	r2, r3
 800441c:	4907      	ldr	r1, [pc, #28]	; (800443c <NVIC_SetPriority+0x50>)
 800441e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004422:	0112      	lsls	r2, r2, #4
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	440b      	add	r3, r1
 8004428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	e000ed00 	.word	0xe000ed00
 800443c:	e000e100 	.word	0xe000e100

08004440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004440:	b480      	push	{r7}
 8004442:	b089      	sub	sp, #36	; 0x24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f1c3 0307 	rsb	r3, r3, #7
 800445a:	2b04      	cmp	r3, #4
 800445c:	bf28      	it	cs
 800445e:	2304      	movcs	r3, #4
 8004460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	3304      	adds	r3, #4
 8004466:	2b06      	cmp	r3, #6
 8004468:	d902      	bls.n	8004470 <NVIC_EncodePriority+0x30>
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	3b03      	subs	r3, #3
 800446e:	e000      	b.n	8004472 <NVIC_EncodePriority+0x32>
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004474:	f04f 32ff 	mov.w	r2, #4294967295
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43da      	mvns	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	401a      	ands	r2, r3
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004488:	f04f 31ff 	mov.w	r1, #4294967295
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	fa01 f303 	lsl.w	r3, r1, r3
 8004492:	43d9      	mvns	r1, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004498:	4313      	orrs	r3, r2
         );
}
 800449a:	4618      	mov	r0, r3
 800449c:	3724      	adds	r7, #36	; 0x24
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044b8:	d301      	bcc.n	80044be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ba:	2301      	movs	r3, #1
 80044bc:	e00f      	b.n	80044de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044be:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <SysTick_Config+0x40>)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044c6:	210f      	movs	r1, #15
 80044c8:	f04f 30ff 	mov.w	r0, #4294967295
 80044cc:	f7ff ff8e 	bl	80043ec <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <SysTick_Config+0x40>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044d6:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <SysTick_Config+0x40>)
 80044d8:	2207      	movs	r2, #7
 80044da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	e000e010 	.word	0xe000e010

080044ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff ff2d 	bl	8004354 <NVIC_SetPriorityGrouping>
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004502:	b580      	push	{r7, lr}
 8004504:	b086      	sub	sp, #24
 8004506:	af00      	add	r7, sp, #0
 8004508:	4603      	mov	r3, r0
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004514:	f7ff ff42 	bl	800439c <NVIC_GetPriorityGrouping>
 8004518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	6978      	ldr	r0, [r7, #20]
 8004520:	f7ff ff8e 	bl	8004440 <NVIC_EncodePriority>
 8004524:	4602      	mov	r2, r0
 8004526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800452a:	4611      	mov	r1, r2
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff ff5d 	bl	80043ec <NVIC_SetPriority>
}
 8004532:	bf00      	nop
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	4603      	mov	r3, r0
 8004542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff ff35 	bl	80043b8 <NVIC_EnableIRQ>
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff ffa2 	bl	80044a8 <SysTick_Config>
 8004564:	4603      	mov	r3, r0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800457c:	f7ff feba 	bl	80042f4 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e099      	b.n	80046c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ac:	e00f      	b.n	80045ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045ae:	f7ff fea1 	bl	80042f4 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b05      	cmp	r3, #5
 80045ba:	d908      	bls.n	80045ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2203      	movs	r2, #3
 80045c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e078      	b.n	80046c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e8      	bne.n	80045ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4b38      	ldr	r3, [pc, #224]	; (80046c8 <HAL_DMA_Init+0x158>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	2b04      	cmp	r3, #4
 8004626:	d107      	bne.n	8004638 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004630:	4313      	orrs	r3, r2
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f023 0307 	bic.w	r3, r3, #7
 800464e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	2b04      	cmp	r3, #4
 8004660:	d117      	bne.n	8004692 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00e      	beq.n	8004692 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fa77 	bl	8004b68 <DMA_CheckFifoParam>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2240      	movs	r2, #64	; 0x40
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800468e:	2301      	movs	r3, #1
 8004690:	e016      	b.n	80046c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fa2e 	bl	8004afc <DMA_CalcBaseAndBitshift>
 80046a0:	4603      	mov	r3, r0
 80046a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a8:	223f      	movs	r2, #63	; 0x3f
 80046aa:	409a      	lsls	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	f010803f 	.word	0xf010803f

080046cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
 80046d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_DMA_Start_IT+0x26>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e048      	b.n	8004784 <HAL_DMA_Start_IT+0xb8>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b01      	cmp	r3, #1
 8004704:	d137      	bne.n	8004776 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f9c0 	bl	8004aa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004724:	223f      	movs	r2, #63	; 0x3f
 8004726:	409a      	lsls	r2, r3
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0216 	orr.w	r2, r2, #22
 800473a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800474a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d007      	beq.n	8004764 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0208 	orr.w	r2, r2, #8
 8004762:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e005      	b.n	8004782 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800477e:	2302      	movs	r3, #2
 8004780:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004782:	7dfb      	ldrb	r3, [r7, #23]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004798:	4b8e      	ldr	r3, [pc, #568]	; (80049d4 <HAL_DMA_IRQHandler+0x248>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a8e      	ldr	r2, [pc, #568]	; (80049d8 <HAL_DMA_IRQHandler+0x24c>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	0a9b      	lsrs	r3, r3, #10
 80047a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b6:	2208      	movs	r2, #8
 80047b8:	409a      	lsls	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4013      	ands	r3, r2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01a      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d013      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0204 	bic.w	r2, r2, #4
 80047de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e4:	2208      	movs	r2, #8
 80047e6:	409a      	lsls	r2, r3
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f0:	f043 0201 	orr.w	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047fc:	2201      	movs	r2, #1
 80047fe:	409a      	lsls	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d012      	beq.n	800482e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481a:	2201      	movs	r2, #1
 800481c:	409a      	lsls	r2, r3
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	f043 0202 	orr.w	r2, r3, #2
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	2204      	movs	r2, #4
 8004834:	409a      	lsls	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4013      	ands	r3, r2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d012      	beq.n	8004864 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00b      	beq.n	8004864 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004850:	2204      	movs	r2, #4
 8004852:	409a      	lsls	r2, r3
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	f043 0204 	orr.w	r2, r3, #4
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004868:	2210      	movs	r2, #16
 800486a:	409a      	lsls	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d043      	beq.n	80048fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d03c      	beq.n	80048fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004886:	2210      	movs	r2, #16
 8004888:	409a      	lsls	r2, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d018      	beq.n	80048ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d108      	bne.n	80048bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d024      	beq.n	80048fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
 80048ba:	e01f      	b.n	80048fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01b      	beq.n	80048fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	4798      	blx	r3
 80048cc:	e016      	b.n	80048fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d107      	bne.n	80048ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0208 	bic.w	r2, r2, #8
 80048ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004900:	2220      	movs	r2, #32
 8004902:	409a      	lsls	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 808f 	beq.w	8004a2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8087 	beq.w	8004a2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004922:	2220      	movs	r2, #32
 8004924:	409a      	lsls	r2, r3
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b05      	cmp	r3, #5
 8004934:	d136      	bne.n	80049a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0216 	bic.w	r2, r2, #22
 8004944:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004954:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <HAL_DMA_IRQHandler+0x1da>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0208 	bic.w	r2, r2, #8
 8004974:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497a:	223f      	movs	r2, #63	; 0x3f
 800497c:	409a      	lsls	r2, r3
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004996:	2b00      	cmp	r3, #0
 8004998:	d07e      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	4798      	blx	r3
        }
        return;
 80049a2:	e079      	b.n	8004a98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01d      	beq.n	80049ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10d      	bne.n	80049dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d031      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	4798      	blx	r3
 80049d0:	e02c      	b.n	8004a2c <HAL_DMA_IRQHandler+0x2a0>
 80049d2:	bf00      	nop
 80049d4:	20000164 	.word	0x20000164
 80049d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d023      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
 80049ec:	e01e      	b.n	8004a2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10f      	bne.n	8004a1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0210 	bic.w	r2, r2, #16
 8004a0a:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d032      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d022      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2205      	movs	r2, #5
 8004a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d307      	bcc.n	8004a74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f2      	bne.n	8004a58 <HAL_DMA_IRQHandler+0x2cc>
 8004a72:	e000      	b.n	8004a76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a74:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	4798      	blx	r3
 8004a96:	e000      	b.n	8004a9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a98:	bf00      	nop
    }
  }
}
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004abc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d108      	bne.n	8004ae0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ade:	e007      	b.n	8004af0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	60da      	str	r2, [r3, #12]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	3b10      	subs	r3, #16
 8004b0c:	4a14      	ldr	r2, [pc, #80]	; (8004b60 <DMA_CalcBaseAndBitshift+0x64>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	091b      	lsrs	r3, r3, #4
 8004b14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b16:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <DMA_CalcBaseAndBitshift+0x68>)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d909      	bls.n	8004b3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b32:	f023 0303 	bic.w	r3, r3, #3
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	659a      	str	r2, [r3, #88]	; 0x58
 8004b3c:	e007      	b.n	8004b4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b46:	f023 0303 	bic.w	r3, r3, #3
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	aaaaaaab 	.word	0xaaaaaaab
 8004b64:	080116e0 	.word	0x080116e0

08004b68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d11f      	bne.n	8004bc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d856      	bhi.n	8004c36 <DMA_CheckFifoParam+0xce>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <DMA_CheckFifoParam+0x28>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004bb3 	.word	0x08004bb3
 8004b98:	08004ba1 	.word	0x08004ba1
 8004b9c:	08004c37 	.word	0x08004c37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d046      	beq.n	8004c3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb0:	e043      	b.n	8004c3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bba:	d140      	bne.n	8004c3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bc0:	e03d      	b.n	8004c3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bca:	d121      	bne.n	8004c10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d837      	bhi.n	8004c42 <DMA_CheckFifoParam+0xda>
 8004bd2:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <DMA_CheckFifoParam+0x70>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004bef 	.word	0x08004bef
 8004be0:	08004be9 	.word	0x08004be9
 8004be4:	08004c01 	.word	0x08004c01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
      break;
 8004bec:	e030      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d025      	beq.n	8004c46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bfe:	e022      	b.n	8004c46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c08:	d11f      	bne.n	8004c4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c0e:	e01c      	b.n	8004c4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d903      	bls.n	8004c1e <DMA_CheckFifoParam+0xb6>
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d003      	beq.n	8004c24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c1c:	e018      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
      break;
 8004c22:	e015      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00e      	beq.n	8004c4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      break;
 8004c34:	e00b      	b.n	8004c4e <DMA_CheckFifoParam+0xe6>
      break;
 8004c36:	bf00      	nop
 8004c38:	e00a      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      break;
 8004c3a:	bf00      	nop
 8004c3c:	e008      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e006      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      break;
 8004c42:	bf00      	nop
 8004c44:	e004      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      break;
 8004c46:	bf00      	nop
 8004c48:	e002      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c4a:	bf00      	nop
 8004c4c:	e000      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      break;
 8004c4e:	bf00      	nop
    }
  } 
  
  return status; 
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop

08004c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b089      	sub	sp, #36	; 0x24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	e159      	b.n	8004f30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	f040 8148 	bne.w	8004f2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d003      	beq.n	8004caa <HAL_GPIO_Init+0x4a>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b12      	cmp	r3, #18
 8004ca8:	d123      	bne.n	8004cf2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	08da      	lsrs	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3208      	adds	r2, #8
 8004cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	08da      	lsrs	r2, r3, #3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3208      	adds	r2, #8
 8004cec:	69b9      	ldr	r1, [r7, #24]
 8004cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4013      	ands	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 0203 	and.w	r2, r3, #3
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d00b      	beq.n	8004d46 <HAL_GPIO_Init+0xe6>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d007      	beq.n	8004d46 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d3a:	2b11      	cmp	r3, #17
 8004d3c:	d003      	beq.n	8004d46 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b12      	cmp	r3, #18
 8004d44:	d130      	bne.n	8004da8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	2203      	movs	r2, #3
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43db      	mvns	r3, r3
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43db      	mvns	r3, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	f003 0201 	and.w	r2, r3, #1
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	2203      	movs	r2, #3
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	43db      	mvns	r3, r3
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80a2 	beq.w	8004f2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	4b57      	ldr	r3, [pc, #348]	; (8004f48 <HAL_GPIO_Init+0x2e8>)
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	4a56      	ldr	r2, [pc, #344]	; (8004f48 <HAL_GPIO_Init+0x2e8>)
 8004df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004df4:	6453      	str	r3, [r2, #68]	; 0x44
 8004df6:	4b54      	ldr	r3, [pc, #336]	; (8004f48 <HAL_GPIO_Init+0x2e8>)
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e02:	4a52      	ldr	r2, [pc, #328]	; (8004f4c <HAL_GPIO_Init+0x2ec>)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	089b      	lsrs	r3, r3, #2
 8004e08:	3302      	adds	r3, #2
 8004e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	220f      	movs	r2, #15
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4013      	ands	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a49      	ldr	r2, [pc, #292]	; (8004f50 <HAL_GPIO_Init+0x2f0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d019      	beq.n	8004e62 <HAL_GPIO_Init+0x202>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a48      	ldr	r2, [pc, #288]	; (8004f54 <HAL_GPIO_Init+0x2f4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_GPIO_Init+0x1fe>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a47      	ldr	r2, [pc, #284]	; (8004f58 <HAL_GPIO_Init+0x2f8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00d      	beq.n	8004e5a <HAL_GPIO_Init+0x1fa>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a46      	ldr	r2, [pc, #280]	; (8004f5c <HAL_GPIO_Init+0x2fc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <HAL_GPIO_Init+0x1f6>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a45      	ldr	r2, [pc, #276]	; (8004f60 <HAL_GPIO_Init+0x300>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d101      	bne.n	8004e52 <HAL_GPIO_Init+0x1f2>
 8004e4e:	2304      	movs	r3, #4
 8004e50:	e008      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e52:	2307      	movs	r3, #7
 8004e54:	e006      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e56:	2303      	movs	r3, #3
 8004e58:	e004      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e002      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e62:	2300      	movs	r3, #0
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	f002 0203 	and.w	r2, r2, #3
 8004e6a:	0092      	lsls	r2, r2, #2
 8004e6c:	4093      	lsls	r3, r2
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e74:	4935      	ldr	r1, [pc, #212]	; (8004f4c <HAL_GPIO_Init+0x2ec>)
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	089b      	lsrs	r3, r3, #2
 8004e7a:	3302      	adds	r3, #2
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e82:	4b38      	ldr	r3, [pc, #224]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ea6:	4a2f      	ldr	r2, [pc, #188]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004eac:	4b2d      	ldr	r3, [pc, #180]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ed0:	4a24      	ldr	r2, [pc, #144]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ed6:	4b23      	ldr	r3, [pc, #140]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004efa:	4a1a      	ldr	r2, [pc, #104]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f00:	4b18      	ldr	r3, [pc, #96]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f24:	4a0f      	ldr	r2, [pc, #60]	; (8004f64 <HAL_GPIO_Init+0x304>)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	61fb      	str	r3, [r7, #28]
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	2b0f      	cmp	r3, #15
 8004f34:	f67f aea2 	bls.w	8004c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3724      	adds	r7, #36	; 0x24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	40013800 	.word	0x40013800
 8004f50:	40020000 	.word	0x40020000
 8004f54:	40020400 	.word	0x40020400
 8004f58:	40020800 	.word	0x40020800
 8004f5c:	40020c00 	.word	0x40020c00
 8004f60:	40021000 	.word	0x40021000
 8004f64:	40013c00 	.word	0x40013c00

08004f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
 8004f74:	4613      	mov	r3, r2
 8004f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f78:	787b      	ldrb	r3, [r7, #1]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f7e:	887a      	ldrh	r2, [r7, #2]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f84:	e003      	b.n	8004f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f86:	887b      	ldrh	r3, [r7, #2]
 8004f88:	041a      	lsls	r2, r3, #16
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	619a      	str	r2, [r3, #24]
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	887b      	ldrh	r3, [r7, #2]
 8004fac:	405a      	eors	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	615a      	str	r2, [r3, #20]
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
	...

08004fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004fca:	4b08      	ldr	r3, [pc, #32]	; (8004fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fcc:	695a      	ldr	r2, [r3, #20]
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d006      	beq.n	8004fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fd6:	4a05      	ldr	r2, [pc, #20]	; (8004fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fdc:	88fb      	ldrh	r3, [r7, #6]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f005 f982 	bl	800a2e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fe4:	bf00      	nop
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40013c00 	.word	0x40013c00

08004ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e22a      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d075      	beq.n	80050fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800500e:	4b88      	ldr	r3, [pc, #544]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	2b04      	cmp	r3, #4
 8005018:	d00c      	beq.n	8005034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800501a:	4b85      	ldr	r3, [pc, #532]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005022:	2b08      	cmp	r3, #8
 8005024:	d112      	bne.n	800504c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005026:	4b82      	ldr	r3, [pc, #520]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005032:	d10b      	bne.n	800504c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005034:	4b7e      	ldr	r3, [pc, #504]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d05b      	beq.n	80050f8 <HAL_RCC_OscConfig+0x108>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d157      	bne.n	80050f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e205      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005054:	d106      	bne.n	8005064 <HAL_RCC_OscConfig+0x74>
 8005056:	4b76      	ldr	r3, [pc, #472]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a75      	ldr	r2, [pc, #468]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 800505c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	e01d      	b.n	80050a0 <HAL_RCC_OscConfig+0xb0>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800506c:	d10c      	bne.n	8005088 <HAL_RCC_OscConfig+0x98>
 800506e:	4b70      	ldr	r3, [pc, #448]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a6f      	ldr	r2, [pc, #444]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	4b6d      	ldr	r3, [pc, #436]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a6c      	ldr	r2, [pc, #432]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e00b      	b.n	80050a0 <HAL_RCC_OscConfig+0xb0>
 8005088:	4b69      	ldr	r3, [pc, #420]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a68      	ldr	r2, [pc, #416]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 800508e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	4b66      	ldr	r3, [pc, #408]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a65      	ldr	r2, [pc, #404]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 800509a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800509e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d013      	beq.n	80050d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a8:	f7ff f924 	bl	80042f4 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050b0:	f7ff f920 	bl	80042f4 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e1ca      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c2:	4b5b      	ldr	r3, [pc, #364]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0xc0>
 80050ce:	e014      	b.n	80050fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7ff f910 	bl	80042f4 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050d8:	f7ff f90c 	bl	80042f4 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e1b6      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ea:	4b51      	ldr	r3, [pc, #324]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <HAL_RCC_OscConfig+0xe8>
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d063      	beq.n	80051ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005106:	4b4a      	ldr	r3, [pc, #296]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00b      	beq.n	800512a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005112:	4b47      	ldr	r3, [pc, #284]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800511a:	2b08      	cmp	r3, #8
 800511c:	d11c      	bne.n	8005158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800511e:	4b44      	ldr	r3, [pc, #272]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d116      	bne.n	8005158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512a:	4b41      	ldr	r3, [pc, #260]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d005      	beq.n	8005142 <HAL_RCC_OscConfig+0x152>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d001      	beq.n	8005142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e18a      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005142:	4b3b      	ldr	r3, [pc, #236]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4937      	ldr	r1, [pc, #220]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005152:	4313      	orrs	r3, r2
 8005154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005156:	e03a      	b.n	80051ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d020      	beq.n	80051a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005160:	4b34      	ldr	r3, [pc, #208]	; (8005234 <HAL_RCC_OscConfig+0x244>)
 8005162:	2201      	movs	r2, #1
 8005164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005166:	f7ff f8c5 	bl	80042f4 <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800516e:	f7ff f8c1 	bl	80042f4 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e16b      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005180:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518c:	4b28      	ldr	r3, [pc, #160]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	4925      	ldr	r1, [pc, #148]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 800519c:	4313      	orrs	r3, r2
 800519e:	600b      	str	r3, [r1, #0]
 80051a0:	e015      	b.n	80051ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051a2:	4b24      	ldr	r3, [pc, #144]	; (8005234 <HAL_RCC_OscConfig+0x244>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7ff f8a4 	bl	80042f4 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051b0:	f7ff f8a0 	bl	80042f4 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e14a      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051c2:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d036      	beq.n	8005248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d016      	beq.n	8005210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051e2:	4b15      	ldr	r3, [pc, #84]	; (8005238 <HAL_RCC_OscConfig+0x248>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e8:	f7ff f884 	bl	80042f4 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051f0:	f7ff f880 	bl	80042f4 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e12a      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005202:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <HAL_RCC_OscConfig+0x240>)
 8005204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCC_OscConfig+0x200>
 800520e:	e01b      	b.n	8005248 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005210:	4b09      	ldr	r3, [pc, #36]	; (8005238 <HAL_RCC_OscConfig+0x248>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005216:	f7ff f86d 	bl	80042f4 <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800521c:	e00e      	b.n	800523c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800521e:	f7ff f869 	bl	80042f4 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d907      	bls.n	800523c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e113      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
 8005230:	40023800 	.word	0x40023800
 8005234:	42470000 	.word	0x42470000
 8005238:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800523c:	4b88      	ldr	r3, [pc, #544]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 800523e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1ea      	bne.n	800521e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 8097 	beq.w	8005384 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800525a:	4b81      	ldr	r3, [pc, #516]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10f      	bne.n	8005286 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	4b7d      	ldr	r3, [pc, #500]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	4a7c      	ldr	r2, [pc, #496]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 8005270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005274:	6413      	str	r3, [r2, #64]	; 0x40
 8005276:	4b7a      	ldr	r3, [pc, #488]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005282:	2301      	movs	r3, #1
 8005284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005286:	4b77      	ldr	r3, [pc, #476]	; (8005464 <HAL_RCC_OscConfig+0x474>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528e:	2b00      	cmp	r3, #0
 8005290:	d118      	bne.n	80052c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005292:	4b74      	ldr	r3, [pc, #464]	; (8005464 <HAL_RCC_OscConfig+0x474>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a73      	ldr	r2, [pc, #460]	; (8005464 <HAL_RCC_OscConfig+0x474>)
 8005298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800529c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800529e:	f7ff f829 	bl	80042f4 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a6:	f7ff f825 	bl	80042f4 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e0cf      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b8:	4b6a      	ldr	r3, [pc, #424]	; (8005464 <HAL_RCC_OscConfig+0x474>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0f0      	beq.n	80052a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d106      	bne.n	80052da <HAL_RCC_OscConfig+0x2ea>
 80052cc:	4b64      	ldr	r3, [pc, #400]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 80052ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d0:	4a63      	ldr	r2, [pc, #396]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	6713      	str	r3, [r2, #112]	; 0x70
 80052d8:	e01c      	b.n	8005314 <HAL_RCC_OscConfig+0x324>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b05      	cmp	r3, #5
 80052e0:	d10c      	bne.n	80052fc <HAL_RCC_OscConfig+0x30c>
 80052e2:	4b5f      	ldr	r3, [pc, #380]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e6:	4a5e      	ldr	r2, [pc, #376]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 80052e8:	f043 0304 	orr.w	r3, r3, #4
 80052ec:	6713      	str	r3, [r2, #112]	; 0x70
 80052ee:	4b5c      	ldr	r3, [pc, #368]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 80052f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f2:	4a5b      	ldr	r2, [pc, #364]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 80052f4:	f043 0301 	orr.w	r3, r3, #1
 80052f8:	6713      	str	r3, [r2, #112]	; 0x70
 80052fa:	e00b      	b.n	8005314 <HAL_RCC_OscConfig+0x324>
 80052fc:	4b58      	ldr	r3, [pc, #352]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 80052fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005300:	4a57      	ldr	r2, [pc, #348]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 8005302:	f023 0301 	bic.w	r3, r3, #1
 8005306:	6713      	str	r3, [r2, #112]	; 0x70
 8005308:	4b55      	ldr	r3, [pc, #340]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 800530a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530c:	4a54      	ldr	r2, [pc, #336]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 800530e:	f023 0304 	bic.w	r3, r3, #4
 8005312:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d015      	beq.n	8005348 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531c:	f7fe ffea 	bl	80042f4 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005322:	e00a      	b.n	800533a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005324:	f7fe ffe6 	bl	80042f4 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005332:	4293      	cmp	r3, r2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e08e      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800533a:	4b49      	ldr	r3, [pc, #292]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0ee      	beq.n	8005324 <HAL_RCC_OscConfig+0x334>
 8005346:	e014      	b.n	8005372 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005348:	f7fe ffd4 	bl	80042f4 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800534e:	e00a      	b.n	8005366 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005350:	f7fe ffd0 	bl	80042f4 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	; 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e078      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005366:	4b3e      	ldr	r3, [pc, #248]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 8005368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1ee      	bne.n	8005350 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005372:	7dfb      	ldrb	r3, [r7, #23]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d105      	bne.n	8005384 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005378:	4b39      	ldr	r3, [pc, #228]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	4a38      	ldr	r2, [pc, #224]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 800537e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005382:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d064      	beq.n	8005456 <HAL_RCC_OscConfig+0x466>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800538c:	4b34      	ldr	r3, [pc, #208]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 030c 	and.w	r3, r3, #12
 8005394:	2b08      	cmp	r3, #8
 8005396:	d05c      	beq.n	8005452 <HAL_RCC_OscConfig+0x462>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d141      	bne.n	8005424 <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a0:	4b31      	ldr	r3, [pc, #196]	; (8005468 <HAL_RCC_OscConfig+0x478>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a6:	f7fe ffa5 	bl	80042f4 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x3d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053ae:	f7fe ffa1 	bl	80042f4 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x3d0>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e04b      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c0:	4b27      	ldr	r3, [pc, #156]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f0      	bne.n	80053ae <HAL_RCC_OscConfig+0x3be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	431a      	orrs	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	019b      	lsls	r3, r3, #6
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	085b      	lsrs	r3, r3, #1
 80053e4:	3b01      	subs	r3, #1
 80053e6:	041b      	lsls	r3, r3, #16
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	061b      	lsls	r3, r3, #24
 80053f0:	491b      	ldr	r1, [pc, #108]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f6:	4b1c      	ldr	r3, [pc, #112]	; (8005468 <HAL_RCC_OscConfig+0x478>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fc:	f7fe ff7a 	bl	80042f4 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005404:	f7fe ff76 	bl	80042f4 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e020      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005416:	4b12      	ldr	r3, [pc, #72]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0x414>
 8005422:	e018      	b.n	8005456 <HAL_RCC_OscConfig+0x466>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005424:	4b10      	ldr	r3, [pc, #64]	; (8005468 <HAL_RCC_OscConfig+0x478>)
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542a:	f7fe ff63 	bl	80042f4 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005432:	f7fe ff5f 	bl	80042f4 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e009      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005444:	4b06      	ldr	r3, [pc, #24]	; (8005460 <HAL_RCC_OscConfig+0x470>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f0      	bne.n	8005432 <HAL_RCC_OscConfig+0x442>
 8005450:	e001      	b.n	8005456 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <HAL_RCC_OscConfig+0x468>
    }
  }
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40023800 	.word	0x40023800
 8005464:	40007000 	.word	0x40007000
 8005468:	42470060 	.word	0x42470060

0800546c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0ca      	b.n	8005616 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005480:	4b67      	ldr	r3, [pc, #412]	; (8005620 <HAL_RCC_ClockConfig+0x1b4>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d90c      	bls.n	80054a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548e:	4b64      	ldr	r3, [pc, #400]	; (8005620 <HAL_RCC_ClockConfig+0x1b4>)
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005496:	4b62      	ldr	r3, [pc, #392]	; (8005620 <HAL_RCC_ClockConfig+0x1b4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d001      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0b6      	b.n	8005616 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d020      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054c0:	4b58      	ldr	r3, [pc, #352]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	4a57      	ldr	r2, [pc, #348]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 80054c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054d8:	4b52      	ldr	r3, [pc, #328]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	4a51      	ldr	r2, [pc, #324]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 80054de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e4:	4b4f      	ldr	r3, [pc, #316]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	494c      	ldr	r1, [pc, #304]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d044      	beq.n	800558c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d107      	bne.n	800551a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550a:	4b46      	ldr	r3, [pc, #280]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d119      	bne.n	800554a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e07d      	b.n	8005616 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d003      	beq.n	800552a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005526:	2b03      	cmp	r3, #3
 8005528:	d107      	bne.n	800553a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800552a:	4b3e      	ldr	r3, [pc, #248]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e06d      	b.n	8005616 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800553a:	4b3a      	ldr	r3, [pc, #232]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e065      	b.n	8005616 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800554a:	4b36      	ldr	r3, [pc, #216]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f023 0203 	bic.w	r2, r3, #3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	4933      	ldr	r1, [pc, #204]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 8005558:	4313      	orrs	r3, r2
 800555a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800555c:	f7fe feca 	bl	80042f4 <HAL_GetTick>
 8005560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005562:	e00a      	b.n	800557a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005564:	f7fe fec6 	bl	80042f4 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e04d      	b.n	8005616 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557a:	4b2a      	ldr	r3, [pc, #168]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 020c 	and.w	r2, r3, #12
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	429a      	cmp	r2, r3
 800558a:	d1eb      	bne.n	8005564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800558c:	4b24      	ldr	r3, [pc, #144]	; (8005620 <HAL_RCC_ClockConfig+0x1b4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d20c      	bcs.n	80055b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559a:	4b21      	ldr	r3, [pc, #132]	; (8005620 <HAL_RCC_ClockConfig+0x1b4>)
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a2:	4b1f      	ldr	r3, [pc, #124]	; (8005620 <HAL_RCC_ClockConfig+0x1b4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d001      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e030      	b.n	8005616 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c0:	4b18      	ldr	r3, [pc, #96]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4915      	ldr	r1, [pc, #84]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d009      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055de:	4b11      	ldr	r3, [pc, #68]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	490d      	ldr	r1, [pc, #52]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055f2:	f000 f81d 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 80055f6:	4602      	mov	r2, r0
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	091b      	lsrs	r3, r3, #4
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	4909      	ldr	r1, [pc, #36]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 8005604:	5ccb      	ldrb	r3, [r1, r3]
 8005606:	fa22 f303 	lsr.w	r3, r2, r3
 800560a:	4a08      	ldr	r2, [pc, #32]	; (800562c <HAL_RCC_ClockConfig+0x1c0>)
 800560c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800560e:	200f      	movs	r0, #15
 8005610:	f7fe fe2c 	bl	800426c <HAL_InitTick>

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40023c00 	.word	0x40023c00
 8005624:	40023800 	.word	0x40023800
 8005628:	080116c8 	.word	0x080116c8
 800562c:	20000164 	.word	0x20000164

08005630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005634:	b090      	sub	sp, #64	; 0x40
 8005636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	637b      	str	r3, [r7, #52]	; 0x34
 800563c:	2300      	movs	r3, #0
 800563e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005640:	2300      	movs	r3, #0
 8005642:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005648:	4b59      	ldr	r3, [pc, #356]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 030c 	and.w	r3, r3, #12
 8005650:	2b08      	cmp	r3, #8
 8005652:	d00d      	beq.n	8005670 <HAL_RCC_GetSysClockFreq+0x40>
 8005654:	2b08      	cmp	r3, #8
 8005656:	f200 80a1 	bhi.w	800579c <HAL_RCC_GetSysClockFreq+0x16c>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_RCC_GetSysClockFreq+0x34>
 800565e:	2b04      	cmp	r3, #4
 8005660:	d003      	beq.n	800566a <HAL_RCC_GetSysClockFreq+0x3a>
 8005662:	e09b      	b.n	800579c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005664:	4b53      	ldr	r3, [pc, #332]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005666:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005668:	e09b      	b.n	80057a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800566a:	4b53      	ldr	r3, [pc, #332]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800566c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800566e:	e098      	b.n	80057a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005670:	4b4f      	ldr	r3, [pc, #316]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005678:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800567a:	4b4d      	ldr	r3, [pc, #308]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d028      	beq.n	80056d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005686:	4b4a      	ldr	r3, [pc, #296]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	099b      	lsrs	r3, r3, #6
 800568c:	2200      	movs	r2, #0
 800568e:	623b      	str	r3, [r7, #32]
 8005690:	627a      	str	r2, [r7, #36]	; 0x24
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005698:	2100      	movs	r1, #0
 800569a:	4b47      	ldr	r3, [pc, #284]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800569c:	fb03 f201 	mul.w	r2, r3, r1
 80056a0:	2300      	movs	r3, #0
 80056a2:	fb00 f303 	mul.w	r3, r0, r3
 80056a6:	4413      	add	r3, r2
 80056a8:	4a43      	ldr	r2, [pc, #268]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80056aa:	fba0 1202 	umull	r1, r2, r0, r2
 80056ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056b0:	460a      	mov	r2, r1
 80056b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80056b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056b6:	4413      	add	r3, r2
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056bc:	2200      	movs	r2, #0
 80056be:	61bb      	str	r3, [r7, #24]
 80056c0:	61fa      	str	r2, [r7, #28]
 80056c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80056ca:	f7fb faf5 	bl	8000cb8 <__aeabi_uldivmod>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4613      	mov	r3, r2
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d6:	e053      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d8:	4b35      	ldr	r3, [pc, #212]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	099b      	lsrs	r3, r3, #6
 80056de:	2200      	movs	r2, #0
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	617a      	str	r2, [r7, #20]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056ea:	f04f 0b00 	mov.w	fp, #0
 80056ee:	4652      	mov	r2, sl
 80056f0:	465b      	mov	r3, fp
 80056f2:	f04f 0000 	mov.w	r0, #0
 80056f6:	f04f 0100 	mov.w	r1, #0
 80056fa:	0159      	lsls	r1, r3, #5
 80056fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005700:	0150      	lsls	r0, r2, #5
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	ebb2 080a 	subs.w	r8, r2, sl
 800570a:	eb63 090b 	sbc.w	r9, r3, fp
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800571a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800571e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005722:	ebb2 0408 	subs.w	r4, r2, r8
 8005726:	eb63 0509 	sbc.w	r5, r3, r9
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	00eb      	lsls	r3, r5, #3
 8005734:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005738:	00e2      	lsls	r2, r4, #3
 800573a:	4614      	mov	r4, r2
 800573c:	461d      	mov	r5, r3
 800573e:	eb14 030a 	adds.w	r3, r4, sl
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	eb45 030b 	adc.w	r3, r5, fp
 8005748:	607b      	str	r3, [r7, #4]
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005756:	4629      	mov	r1, r5
 8005758:	028b      	lsls	r3, r1, #10
 800575a:	4621      	mov	r1, r4
 800575c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005760:	4621      	mov	r1, r4
 8005762:	028a      	lsls	r2, r1, #10
 8005764:	4610      	mov	r0, r2
 8005766:	4619      	mov	r1, r3
 8005768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576a:	2200      	movs	r2, #0
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	60fa      	str	r2, [r7, #12]
 8005770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005774:	f7fb faa0 	bl	8000cb8 <__aeabi_uldivmod>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4613      	mov	r3, r2
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	0c1b      	lsrs	r3, r3, #16
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	3301      	adds	r3, #1
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	fbb2 f3f3 	udiv	r3, r2, r3
 8005798:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800579a:	e002      	b.n	80057a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800579e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3740      	adds	r7, #64	; 0x40
 80057a8:	46bd      	mov	sp, r7
 80057aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ae:	bf00      	nop
 80057b0:	40023800 	.word	0x40023800
 80057b4:	00f42400 	.word	0x00f42400
 80057b8:	017d7840 	.word	0x017d7840

080057bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c0:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057c2:	681b      	ldr	r3, [r3, #0]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000164 	.word	0x20000164

080057d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057d8:	f7ff fff0 	bl	80057bc <HAL_RCC_GetHCLKFreq>
 80057dc:	4602      	mov	r2, r0
 80057de:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	0a9b      	lsrs	r3, r3, #10
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	4903      	ldr	r1, [pc, #12]	; (80057f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ea:	5ccb      	ldrb	r3, [r1, r3]
 80057ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40023800 	.word	0x40023800
 80057f8:	080116d8 	.word	0x080116d8

080057fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005800:	f7ff ffdc 	bl	80057bc <HAL_RCC_GetHCLKFreq>
 8005804:	4602      	mov	r2, r0
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	0b5b      	lsrs	r3, r3, #13
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	4903      	ldr	r1, [pc, #12]	; (8005820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005812:	5ccb      	ldrb	r3, [r1, r3]
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40023800 	.word	0x40023800
 8005820:	080116d8 	.word	0x080116d8

08005824 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e05d      	b.n	80058f2 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f004 fc0e 	bl	800a06c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005866:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	ea42 0103 	orr.w	r1, r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	0c1b      	lsrs	r3, r3, #16
 80058ae:	f003 0104 	and.w	r1, r3, #4
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c6:	d104      	bne.n	80058d2 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80058d0:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e0:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b08e      	sub	sp, #56	; 0x38
 80058fe:	af02      	add	r7, sp, #8
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
 800590c:	2300      	movs	r3, #0
 800590e:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8005918:	2301      	movs	r3, #1
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_SPI_TransmitReceive+0x36>
 800592c:	2302      	movs	r3, #2
 800592e:	e1f2      	b.n	8005d16 <HAL_SPI_TransmitReceive+0x41c>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005938:	f7fe fcdc 	bl	80042f4 <HAL_GetTick>
 800593c:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005944:	b2db      	uxtb	r3, r3
 8005946:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	2b01      	cmp	r3, #1
 8005952:	d00e      	beq.n	8005972 <HAL_SPI_TransmitReceive+0x78>
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800595a:	d106      	bne.n	800596a <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <HAL_SPI_TransmitReceive+0x70>
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	2b04      	cmp	r3, #4
 8005968:	d003      	beq.n	8005972 <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 800596a:	2302      	movs	r3, #2
 800596c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005970:	e1c7      	b.n	8005d02 <HAL_SPI_TransmitReceive+0x408>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <HAL_SPI_TransmitReceive+0x8a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <HAL_SPI_TransmitReceive+0x8a>
 800597e:	887b      	ldrh	r3, [r7, #2]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d103      	bne.n	800598c <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800598a:	e1ba      	b.n	8005d02 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	d103      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2205      	movs	r2, #5
 800599c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	887a      	ldrh	r2, [r7, #2]
 80059b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	887a      	ldrh	r2, [r7, #2]
 80059b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	887a      	ldrh	r2, [r7, #2]
 80059c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	887a      	ldrh	r2, [r7, #2]
 80059c8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059de:	d110      	bne.n	8005a02 <HAL_SPI_TransmitReceive+0x108>
  {
    SPI_RESET_CRC(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6819      	ldr	r1, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80059ee:	400b      	ands	r3, r1
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a00:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d007      	beq.n	8005a20 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a28:	f040 8084 	bne.w	8005b34 <HAL_SPI_TransmitReceive+0x23a>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d004      	beq.n	8005a3e <HAL_SPI_TransmitReceive+0x144>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d16f      	bne.n	8005b1e <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	881a      	ldrh	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	3302      	adds	r3, #2
 8005a4c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a5c:	e05f      	b.n	8005b1e <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d02e      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x1c8>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d029      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x1c8>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d122      	bne.n	8005ac2 <HAL_SPI_TransmitReceive+0x1c8>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	881a      	ldrh	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	3302      	adds	r3, #2
 8005a8a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b01      	subs	r3, #1
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10c      	bne.n	8005ac2 <HAL_SPI_TransmitReceive+0x1c8>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab0:	d107      	bne.n	8005ac2 <HAL_SPI_TransmitReceive+0x1c8>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ac0:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d018      	beq.n	8005afe <HAL_SPI_TransmitReceive+0x204>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d111      	bne.n	8005afe <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3302      	adds	r3, #2
 8005aea:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8005afa:	2301      	movs	r3, #1
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b04:	d00b      	beq.n	8005b1e <HAL_SPI_TransmitReceive+0x224>
 8005b06:	f7fe fbf5 	bl	80042f4 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d803      	bhi.n	8005b1e <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b1c:	e0f1      	b.n	8005d02 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d19a      	bne.n	8005a5e <HAL_SPI_TransmitReceive+0x164>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d195      	bne.n	8005a5e <HAL_SPI_TransmitReceive+0x164>
 8005b32:	e082      	b.n	8005c3a <HAL_SPI_TransmitReceive+0x340>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d004      	beq.n	8005b46 <HAL_SPI_TransmitReceive+0x24c>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d16f      	bne.n	8005c26 <HAL_SPI_TransmitReceive+0x32c>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	330c      	adds	r3, #12
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	7812      	ldrb	r2, [r2, #0]
 8005b50:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	3301      	adds	r3, #1
 8005b56:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b66:	e05e      	b.n	8005c26 <HAL_SPI_TransmitReceive+0x32c>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d02e      	beq.n	8005bcc <HAL_SPI_TransmitReceive+0x2d2>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d029      	beq.n	8005bcc <HAL_SPI_TransmitReceive+0x2d2>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d122      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x2d2>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	60ba      	str	r2, [r7, #8]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	320c      	adds	r2, #12
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10c      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x2d2>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bba:	d107      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x2d2>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bca:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d017      	beq.n	8005c06 <HAL_SPI_TransmitReceive+0x30c>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d110      	bne.n	8005c06 <HAL_SPI_TransmitReceive+0x30c>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68d9      	ldr	r1, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	b2ca      	uxtb	r2, r1
 8005bf2:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8005c02:	2301      	movs	r3, #1
 8005c04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8005c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d00b      	beq.n	8005c26 <HAL_SPI_TransmitReceive+0x32c>
 8005c0e:	f7fe fb71 	bl	80042f4 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d803      	bhi.n	8005c26 <HAL_SPI_TransmitReceive+0x32c>
      {
        errorcode = HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c24:	e06d      	b.n	8005d02 <HAL_SPI_TransmitReceive+0x408>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d19b      	bne.n	8005b68 <HAL_SPI_TransmitReceive+0x26e>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d196      	bne.n	8005b68 <HAL_SPI_TransmitReceive+0x26e>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c42:	d11a      	bne.n	8005c7a <HAL_SPI_TransmitReceive+0x380>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 f865 	bl	8005d1e <SPI_WaitFlagStateUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <HAL_SPI_TransmitReceive+0x374>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	f043 0202 	orr.w	r2, r3, #2
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8005c6c:	e049      	b.n	8005d02 <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 8005c78:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	d10d      	bne.n	8005ca4 <HAL_SPI_TransmitReceive+0x3aa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8c:	f043 0202 	orr.w	r2, r3, #2
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005c9c:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005caa:	2201      	movs	r2, #1
 8005cac:	2102      	movs	r1, #2
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f835 	bl	8005d1e <SPI_WaitFlagStateUntilTimeout>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_SPI_TransmitReceive+0x3c8>
  {
    errorcode = HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005cc0:	e01f      	b.n	8005d02 <HAL_SPI_TransmitReceive+0x408>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8005cc2:	69fa      	ldr	r2, [r7, #28]
 8005cc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 f892 	bl	8005df0 <SPI_CheckFlag_BSY>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d006      	beq.n	8005ce0 <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005cde:	e010      	b.n	8005d02 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10b      	bne.n	8005d00 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	e000      	b.n	8005d02 <HAL_SPI_TransmitReceive+0x408>
  }
  
error :
 8005d00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3730      	adds	r7, #48	; 0x30
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005d2c:	e04d      	b.n	8005dca <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d049      	beq.n	8005dca <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d007      	beq.n	8005d4c <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005d3c:	f7fe fada 	bl	80042f4 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d83e      	bhi.n	8005dca <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d5a:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d64:	d111      	bne.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0x6c>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d6e:	d004      	beq.n	8005d7a <SPI_WaitFlagStateUntilTimeout+0x5c>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d78:	d107      	bne.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d92:	d110      	bne.n	8005db6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6819      	ldr	r1, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005da2:	400b      	ands	r3, r1
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005db4:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e00e      	b.n	8005de8 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d101      	bne.n	8005dde <SPI_WaitFlagStateUntilTimeout+0xc0>
 8005dda:	2201      	movs	r2, #1
 8005ddc:	e000      	b.n	8005de0 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8005dde:	2200      	movs	r2, #0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d1a3      	bne.n	8005d2e <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2200      	movs	r2, #0
 8005e04:	2180      	movs	r1, #128	; 0x80
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f7ff ff89 	bl	8005d1e <SPI_WaitFlagStateUntilTimeout>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e16:	f043 0220 	orr.w	r2, r3, #32
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e000      	b.n	8005e24 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e01d      	b.n	8005e7a <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f004 f97a 	bl	800a14c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f000 fb88 	bl	8006580 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}  
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2200      	movs	r2, #0
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 fc64 	bl	8006764 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1d      	ldr	r2, [pc, #116]	; (8005f18 <HAL_TIM_PWM_Stop+0x94>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d117      	bne.n	8005ed6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6a1a      	ldr	r2, [r3, #32]
 8005eac:	f241 1311 	movw	r3, #4369	; 0x1111
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10f      	bne.n	8005ed6 <HAL_TIM_PWM_Stop+0x52>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6a1a      	ldr	r2, [r3, #32]
 8005ebc:	f240 4344 	movw	r3, #1092	; 0x444
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d107      	bne.n	8005ed6 <HAL_TIM_PWM_Stop+0x52>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6a1a      	ldr	r2, [r3, #32]
 8005edc:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10f      	bne.n	8005f06 <HAL_TIM_PWM_Stop+0x82>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6a1a      	ldr	r2, [r3, #32]
 8005eec:	f240 4344 	movw	r3, #1092	; 0x444
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d107      	bne.n	8005f06 <HAL_TIM_PWM_Stop+0x82>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0201 	bic.w	r2, r2, #1
 8005f04:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
} 
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40010000 	.word	0x40010000

08005f1c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b0c      	cmp	r3, #12
 8005f2a:	d841      	bhi.n	8005fb0 <HAL_TIM_PWM_Start_IT+0x94>
 8005f2c:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <HAL_TIM_PWM_Start_IT+0x18>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005f69 	.word	0x08005f69
 8005f38:	08005fb1 	.word	0x08005fb1
 8005f3c:	08005fb1 	.word	0x08005fb1
 8005f40:	08005fb1 	.word	0x08005fb1
 8005f44:	08005f7b 	.word	0x08005f7b
 8005f48:	08005fb1 	.word	0x08005fb1
 8005f4c:	08005fb1 	.word	0x08005fb1
 8005f50:	08005fb1 	.word	0x08005fb1
 8005f54:	08005f8d 	.word	0x08005f8d
 8005f58:	08005fb1 	.word	0x08005fb1
 8005f5c:	08005fb1 	.word	0x08005fb1
 8005f60:	08005fb1 	.word	0x08005fb1
 8005f64:	08005f9f 	.word	0x08005f9f
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0202 	orr.w	r2, r2, #2
 8005f76:	60da      	str	r2, [r3, #12]
    }
    break;
 8005f78:	e01b      	b.n	8005fb2 <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0204 	orr.w	r2, r2, #4
 8005f88:	60da      	str	r2, [r3, #12]
    }
    break;
 8005f8a:	e012      	b.n	8005fb2 <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0208 	orr.w	r2, r2, #8
 8005f9a:	60da      	str	r2, [r3, #12]
    }
    break;
 8005f9c:	e009      	b.n	8005fb2 <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0210 	orr.w	r2, r2, #16
 8005fac:	60da      	str	r2, [r3, #12]
    }
    break;
 8005fae:	e000      	b.n	8005fb2 <HAL_TIM_PWM_Start_IT+0x96>
    
    default:
    break;
 8005fb0:	bf00      	nop
  } 
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fbd2 	bl	8006764 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a0b      	ldr	r2, [pc, #44]	; (8005ff4 <HAL_TIM_PWM_Start_IT+0xd8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d107      	bne.n	8005fda <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0201 	orr.w	r2, r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
} 
 8005fec:	4618      	mov	r0, r3
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	40010000 	.word	0x40010000

08005ff8 <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	60fb      	str	r3, [r7, #12]
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e081      	b.n	800611c <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d106      	bne.n	8006032 <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f004 f8ef 	bl	800a210 <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2202      	movs	r2, #2
 8006036:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0207 	bic.w	r2, r2, #7
 8006048:	609a      	str	r2, [r3, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3304      	adds	r3, #4
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f000 fa93 	bl	8006580 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006082:	f023 0303 	bic.w	r3, r3, #3
 8006086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	4313      	orrs	r3, r2
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80060a0:	f023 030c 	bic.w	r3, r3, #12
 80060a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	4313      	orrs	r3, r2
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	011a      	lsls	r2, r3, #4
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	031b      	lsls	r3, r3, #12
 80060d0:	4313      	orrs	r3, r2
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80060de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80060e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	4313      	orrs	r3, r2
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d003      	beq.n	800613c <HAL_TIM_Encoder_Start+0x18>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b04      	cmp	r3, #4
 8006138:	d008      	beq.n	800614c <HAL_TIM_Encoder_Start+0x28>
 800613a:	e00f      	b.n	800615c <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2201      	movs	r2, #1
 8006142:	2100      	movs	r1, #0
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fb0d 	bl	8006764 <TIM_CCxChannelCmd>
      break; 
 800614a:	e016      	b.n	800617a <HAL_TIM_Encoder_Start+0x56>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2201      	movs	r2, #1
 8006152:	2104      	movs	r1, #4
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fb05 	bl	8006764 <TIM_CCxChannelCmd>
      break;
 800615a:	e00e      	b.n	800617a <HAL_TIM_Encoder_Start+0x56>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2201      	movs	r2, #1
 8006162:	2100      	movs	r1, #0
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fafd 	bl	8006764 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2201      	movs	r2, #1
 8006170:	2104      	movs	r1, #4
 8006172:	4618      	mov	r0, r3
 8006174:	f000 faf6 	bl	8006764 <TIM_CCxChannelCmd>
     break; 
 8006178:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f042 0201 	orr.w	r2, r2, #1
 8006188:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d122      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d11b      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0202 	mvn.w	r2, #2
 80061c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f9be 	bl	8006558 <HAL_TIM_IC_CaptureCallback>
 80061dc:	e005      	b.n	80061ea <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f9b0 	bl	8006544 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f003 ffe7 	bl	800a1b8 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d122      	bne.n	8006244 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b04      	cmp	r3, #4
 800620a:	d11b      	bne.n	8006244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0204 	mvn.w	r2, #4
 8006214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2202      	movs	r2, #2
 800621a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f994 	bl	8006558 <HAL_TIM_IC_CaptureCallback>
 8006230:	e005      	b.n	800623e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f986 	bl	8006544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f003 ffbd 	bl	800a1b8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b08      	cmp	r3, #8
 8006250:	d122      	bne.n	8006298 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b08      	cmp	r3, #8
 800625e:	d11b      	bne.n	8006298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0208 	mvn.w	r2, #8
 8006268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2204      	movs	r2, #4
 800626e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f96a 	bl	8006558 <HAL_TIM_IC_CaptureCallback>
 8006284:	e005      	b.n	8006292 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f95c 	bl	8006544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f003 ff93 	bl	800a1b8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b10      	cmp	r3, #16
 80062a4:	d122      	bne.n	80062ec <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d11b      	bne.n	80062ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0210 	mvn.w	r2, #16
 80062bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2208      	movs	r2, #8
 80062c2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f940 	bl	8006558 <HAL_TIM_IC_CaptureCallback>
 80062d8:	e005      	b.n	80062e6 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f932 	bl	8006544 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f003 ff69 	bl	800a1b8 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d10e      	bne.n	8006318 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b01      	cmp	r3, #1
 8006306:	d107      	bne.n	8006318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0201 	mvn.w	r2, #1
 8006310:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f90c 	bl	8006530 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006322:	2b80      	cmp	r3, #128	; 0x80
 8006324:	d10e      	bne.n	8006344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006330:	2b80      	cmp	r3, #128	; 0x80
 8006332:	d107      	bne.n	8006344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800633c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fbad 	bl	8006a9e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d10e      	bne.n	8006370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	d107      	bne.n	8006370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006368:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f8fe 	bl	800656c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b20      	cmp	r3, #32
 800637c:	d10e      	bne.n	800639c <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b20      	cmp	r3, #32
 800638a:	d107      	bne.n	800639c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0220 	mvn.w	r2, #32
 8006394:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fb77 	bl	8006a8a <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800639c:	bf00      	nop
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e0b4      	b.n	8006528 <HAL_TIM_PWM_ConfigChannel+0x184>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2202      	movs	r2, #2
 80063ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b0c      	cmp	r3, #12
 80063d2:	f200 809f 	bhi.w	8006514 <HAL_TIM_PWM_ConfigChannel+0x170>
 80063d6:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063dc:	08006411 	.word	0x08006411
 80063e0:	08006515 	.word	0x08006515
 80063e4:	08006515 	.word	0x08006515
 80063e8:	08006515 	.word	0x08006515
 80063ec:	08006451 	.word	0x08006451
 80063f0:	08006515 	.word	0x08006515
 80063f4:	08006515 	.word	0x08006515
 80063f8:	08006515 	.word	0x08006515
 80063fc:	08006493 	.word	0x08006493
 8006400:	08006515 	.word	0x08006515
 8006404:	08006515 	.word	0x08006515
 8006408:	08006515 	.word	0x08006515
 800640c:	080064d3 	.word	0x080064d3
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 f9c8 	bl	80067ac <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699a      	ldr	r2, [r3, #24]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0208 	orr.w	r2, r2, #8
 800642a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 0204 	bic.w	r2, r2, #4
 800643a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6999      	ldr	r1, [r3, #24]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	691a      	ldr	r2, [r3, #16]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	619a      	str	r2, [r3, #24]
    }
    break;
 800644e:	e062      	b.n	8006516 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68b9      	ldr	r1, [r7, #8]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f916 	bl	8006688 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800646a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699a      	ldr	r2, [r3, #24]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800647a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6999      	ldr	r1, [r3, #24]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	021a      	lsls	r2, r3, #8
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	619a      	str	r2, [r3, #24]
    }
    break;
 8006490:	e041      	b.n	8006516 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68b9      	ldr	r1, [r7, #8]
 8006498:	4618      	mov	r0, r3
 800649a:	f000 f9ef 	bl	800687c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69da      	ldr	r2, [r3, #28]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 0208 	orr.w	r2, r2, #8
 80064ac:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69da      	ldr	r2, [r3, #28]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0204 	bic.w	r2, r2, #4
 80064bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69d9      	ldr	r1, [r3, #28]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	691a      	ldr	r2, [r3, #16]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	61da      	str	r2, [r3, #28]
    }
    break;
 80064d0:	e021      	b.n	8006516 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fa3b 	bl	8006954 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ec:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69da      	ldr	r2, [r3, #28]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	69d9      	ldr	r1, [r3, #28]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	021a      	lsls	r2, r3, #8
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	61da      	str	r2, [r3, #28]
    }
    break;
 8006512:	e000      	b.n	8006516 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 8006514:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a35      	ldr	r2, [pc, #212]	; (800666c <TIM_Base_SetConfig+0xec>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00f      	beq.n	80065bc <TIM_Base_SetConfig+0x3c>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a2:	d00b      	beq.n	80065bc <TIM_Base_SetConfig+0x3c>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a32      	ldr	r2, [pc, #200]	; (8006670 <TIM_Base_SetConfig+0xf0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d007      	beq.n	80065bc <TIM_Base_SetConfig+0x3c>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a31      	ldr	r2, [pc, #196]	; (8006674 <TIM_Base_SetConfig+0xf4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d003      	beq.n	80065bc <TIM_Base_SetConfig+0x3c>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a30      	ldr	r2, [pc, #192]	; (8006678 <TIM_Base_SetConfig+0xf8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d101      	bne.n	80065c0 <TIM_Base_SetConfig+0x40>
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <TIM_Base_SetConfig+0x42>
 80065c0:	2300      	movs	r3, #0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d008      	beq.n	80065d8 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a24      	ldr	r2, [pc, #144]	; (800666c <TIM_Base_SetConfig+0xec>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d01b      	beq.n	8006618 <TIM_Base_SetConfig+0x98>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e6:	d017      	beq.n	8006618 <TIM_Base_SetConfig+0x98>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a21      	ldr	r2, [pc, #132]	; (8006670 <TIM_Base_SetConfig+0xf0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d013      	beq.n	8006618 <TIM_Base_SetConfig+0x98>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a20      	ldr	r2, [pc, #128]	; (8006674 <TIM_Base_SetConfig+0xf4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d00f      	beq.n	8006618 <TIM_Base_SetConfig+0x98>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a1f      	ldr	r2, [pc, #124]	; (8006678 <TIM_Base_SetConfig+0xf8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d00b      	beq.n	8006618 <TIM_Base_SetConfig+0x98>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a1e      	ldr	r2, [pc, #120]	; (800667c <TIM_Base_SetConfig+0xfc>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d007      	beq.n	8006618 <TIM_Base_SetConfig+0x98>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a1d      	ldr	r2, [pc, #116]	; (8006680 <TIM_Base_SetConfig+0x100>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_Base_SetConfig+0x98>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a1c      	ldr	r2, [pc, #112]	; (8006684 <TIM_Base_SetConfig+0x104>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d101      	bne.n	800661c <TIM_Base_SetConfig+0x9c>
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <TIM_Base_SetConfig+0x9e>
 800661c:	2300      	movs	r3, #0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d008      	beq.n	8006634 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a07      	ldr	r2, [pc, #28]	; (800666c <TIM_Base_SetConfig+0xec>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d103      	bne.n	800665a <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	615a      	str	r2, [r3, #20]
}
 8006660:	bf00      	nop
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	40010000 	.word	0x40010000
 8006670:	40000400 	.word	0x40000400
 8006674:	40000800 	.word	0x40000800
 8006678:	40000c00 	.word	0x40000c00
 800667c:	40014000 	.word	0x40014000
 8006680:	40014400 	.word	0x40014400
 8006684:	40014800 	.word	0x40014800

08006688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f023 0210 	bic.w	r2, r3, #16
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ca:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f023 0320 	bic.w	r3, r3, #32
 80066de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a1c      	ldr	r2, [pc, #112]	; (8006760 <TIM_OC2_SetConfig+0xd8>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d121      	bne.n	8006738 <TIM_OC2_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800670e:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006716:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800671e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40010000 	.word	0x40010000

08006764 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8006774:	2201      	movs	r2, #1
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	fa02 f303 	lsl.w	r3, r2, r3
 800677c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a1a      	ldr	r2, [r3, #32]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	43db      	mvns	r3, r3
 8006786:	401a      	ands	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6a1a      	ldr	r2, [r3, #32]
 8006790:	6879      	ldr	r1, [r7, #4]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	fa01 f303 	lsl.w	r3, r1, r3
 8006798:	431a      	orrs	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	621a      	str	r2, [r3, #32]
}
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 80067be:	2300      	movs	r3, #0
 80067c0:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f023 0201 	bic.w	r2, r3, #1
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0303 	bic.w	r3, r3, #3
 80067ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f023 0302 	bic.w	r3, r3, #2
 8006800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a1a      	ldr	r2, [pc, #104]	; (8006878 <TIM_OC1_SetConfig+0xcc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d11e      	bne.n	8006852 <TIM_OC1_SetConfig+0xa6>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f023 0308 	bic.w	r3, r3, #8
 800681a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f023 0304 	bic.w	r3, r3, #4
 800682c:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800683c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4313      	orrs	r3, r2
 8006850:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	621a      	str	r2, [r3, #32]
} 
 800686c:	bf00      	nop
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	40010000 	.word	0x40010000

0800687c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 800688e:	2300      	movs	r3, #0
 8006890:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0303 	bic.w	r3, r3, #3
 80068be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a1b      	ldr	r2, [pc, #108]	; (8006950 <TIM_OC3_SetConfig+0xd4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d121      	bne.n	800692a <TIM_OC3_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006900:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	011b      	lsls	r3, r3, #4
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	697a      	ldr	r2, [r7, #20]
 8006942:	621a      	str	r2, [r3, #32]
}
 8006944:	bf00      	nop
 8006946:	371c      	adds	r7, #28
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	40010000 	.word	0x40010000

08006954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006996:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069aa:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	031b      	lsls	r3, r3, #12
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a10      	ldr	r2, [pc, #64]	; (80069fc <TIM_OC4_SetConfig+0xa8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d109      	bne.n	80069d4 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	019b      	lsls	r3, r3, #6
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	621a      	str	r2, [r3, #32]
}
 80069ee:	bf00      	nop
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40010000 	.word	0x40010000

08006a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e032      	b.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006a36:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6859      	ldr	r1, [r3, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a58:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6899      	ldr	r1, [r3, #8]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
} 
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8006a92:	bf00      	nop
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e03f      	b.n	8006b44 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d106      	bne.n	8006ade <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f003 fbcb 	bl	800a274 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2224      	movs	r2, #36	; 0x24
 8006ae2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006af4:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa6a 	bl	8006fd0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691a      	ldr	r2, [r3, #16]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	695a      	ldr	r2, [r3, #20]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b1a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b2a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af02      	add	r7, sp, #8
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b20      	cmp	r3, #32
 8006b6a:	f040 8083 	bne.w	8006c74 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0)) 
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <HAL_UART_Transmit+0x2e>
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e07b      	b.n	8006c76 <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <HAL_UART_Transmit+0x40>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e074      	b.n	8006c76 <HAL_UART_Transmit+0x12a>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2221      	movs	r2, #33	; 0x21
 8006b9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006ba2:	f7fd fba7 	bl	80042f4 <HAL_GetTick>
 8006ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	88fa      	ldrh	r2, [r7, #6]
 8006bac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	88fa      	ldrh	r2, [r7, #6]
 8006bb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8006bb4:	e042      	b.n	8006c3c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bcc:	d122      	bne.n	8006c14 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2180      	movs	r1, #128	; 0x80
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f97b 	bl	8006ed4 <UART_WaitOnFlagUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d001      	beq.n	8006be8 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e046      	b.n	8006c76 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bfa:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d103      	bne.n	8006c0c <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	3302      	adds	r3, #2
 8006c08:	60bb      	str	r3, [r7, #8]
 8006c0a:	e017      	b.n	8006c3c <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	60bb      	str	r3, [r7, #8]
 8006c12:	e013      	b.n	8006c3c <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2180      	movs	r1, #128	; 0x80
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 f958 	bl	8006ed4 <UART_WaitOnFlagUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e023      	b.n	8006c76 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	60ba      	str	r2, [r7, #8]
 8006c34:	781a      	ldrb	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1b7      	bne.n	8006bb6 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2140      	movs	r1, #64	; 0x40
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f93f 	bl	8006ed4 <UART_WaitOnFlagUntilTimeout>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e00a      	b.n	8006c76 <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e000      	b.n	8006c76 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006c74:	2302      	movs	r3, #2
  }
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	d166      	bne.n	8006d68 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <HAL_UART_Receive_DMA+0x26>
 8006ca0:	88fb      	ldrh	r3, [r7, #6]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e05f      	b.n	8006d6a <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_UART_Receive_DMA+0x38>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e058      	b.n	8006d6a <HAL_UART_Receive_DMA+0xea>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	88fa      	ldrh	r2, [r7, #6]
 8006cca:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2222      	movs	r2, #34	; 0x22
 8006cd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cde:	4a25      	ldr	r2, [pc, #148]	; (8006d74 <HAL_UART_Receive_DMA+0xf4>)
 8006ce0:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce6:	4a24      	ldr	r2, [pc, #144]	; (8006d78 <HAL_UART_Receive_DMA+0xf8>)
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cee:	4a23      	ldr	r2, [pc, #140]	; (8006d7c <HAL_UART_Receive_DMA+0xfc>)
 8006cf0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 8006cfa:	f107 0308 	add.w	r3, r7, #8
 8006cfe:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	88fb      	ldrh	r3, [r7, #6]
 8006d12:	f7fd fcdb 	bl	80046cc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006d16:	2300      	movs	r3, #0
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	613b      	str	r3, [r7, #16]
 8006d2a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d42:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695a      	ldr	r2, [r3, #20]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0201 	orr.w	r2, r2, #1
 8006d52:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695a      	ldr	r2, [r3, #20]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d62:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	e000      	b.n	8006d6a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8006d68:	2302      	movs	r3, #2
  }
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	08006dbd 	.word	0x08006dbd
 8006d78:	08006e25 	.word	0x08006e25
 8006d7c:	08006e41 	.word	0x08006e41

08006d80 <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d11e      	bne.n	8006e16 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dec:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	695a      	ldr	r2, [r3, #20]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0201 	bic.w	r2, r2, #1
 8006dfc:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	695a      	ldr	r2, [r3, #20]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e0c:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f7ff ffb2 	bl	8006d80 <HAL_UART_RxCpltCallback>
}
 8006e1c:	bf00      	nop
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <UART_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e30:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f7ff ffae 	bl	8006d94 <HAL_UART_RxHalfCpltCallback>
}
 8006e38:	bf00      	nop
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e50:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	bf14      	ite	ne
 8006e60:	2301      	movne	r3, #1
 8006e62:	2300      	moveq	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b21      	cmp	r3, #33	; 0x21
 8006e72:	d108      	bne.n	8006e86 <UART_DMAError+0x46>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d005      	beq.n	8006e86 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006e80:	68b8      	ldr	r0, [r7, #8]
 8006e82:	f000 f871 	bl	8006f68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	bf14      	ite	ne
 8006e94:	2301      	movne	r3, #1
 8006e96:	2300      	moveq	r3, #0
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b22      	cmp	r3, #34	; 0x22
 8006ea6:	d108      	bne.n	8006eba <UART_DMAError+0x7a>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d005      	beq.n	8006eba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006eb4:	68b8      	ldr	r0, [r7, #8]
 8006eb6:	f000 f86d 	bl	8006f94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	f043 0210 	orr.w	r2, r3, #16
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8006ec6:	68b8      	ldr	r0, [r7, #8]
 8006ec8:	f7ff ff6e 	bl	8006da8 <HAL_UART_ErrorCallback>
}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8006ee4:	e02c      	b.n	8006f40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d028      	beq.n	8006f40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d007      	beq.n	8006f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ef4:	f7fd f9fe 	bl	80042f4 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	69ba      	ldr	r2, [r7, #24]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d21d      	bcs.n	8006f40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695a      	ldr	r2, [r3, #20]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0201 	bic.w	r2, r2, #1
 8006f22:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e00f      	b.n	8006f60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	4013      	ands	r3, r2
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	bf0c      	ite	eq
 8006f50:	2301      	moveq	r3, #1
 8006f52:	2300      	movne	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	461a      	mov	r2, r3
 8006f58:	79fb      	ldrb	r3, [r7, #7]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d0c3      	beq.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006f7e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006faa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695a      	ldr	r2, [r3, #20]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0201 	bic.w	r2, r2, #1
 8006fba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fd0:	b5b0      	push	{r4, r5, r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800700c:	f023 030c 	bic.w	r3, r3, #12
 8007010:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689a      	ldr	r2, [r3, #8]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	4313      	orrs	r3, r2
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007044:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4313      	orrs	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007060:	f040 80e4 	bne.w	800722c <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4aab      	ldr	r2, [pc, #684]	; (8007318 <UART_SetConfig+0x348>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d004      	beq.n	8007078 <UART_SetConfig+0xa8>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4aaa      	ldr	r2, [pc, #680]	; (800731c <UART_SetConfig+0x34c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d16c      	bne.n	8007152 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007078:	f7fe fbc0 	bl	80057fc <HAL_RCC_GetPCLK2Freq>
 800707c:	4602      	mov	r2, r0
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	009a      	lsls	r2, r3, #2
 8007086:	441a      	add	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007092:	4aa3      	ldr	r2, [pc, #652]	; (8007320 <UART_SetConfig+0x350>)
 8007094:	fba2 2303 	umull	r2, r3, r2, r3
 8007098:	095b      	lsrs	r3, r3, #5
 800709a:	011c      	lsls	r4, r3, #4
 800709c:	f7fe fbae 	bl	80057fc <HAL_RCC_GetPCLK2Freq>
 80070a0:	4602      	mov	r2, r0
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	009a      	lsls	r2, r3, #2
 80070aa:	441a      	add	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	005b      	lsls	r3, r3, #1
 80070b2:	fbb2 f5f3 	udiv	r5, r2, r3
 80070b6:	f7fe fba1 	bl	80057fc <HAL_RCC_GetPCLK2Freq>
 80070ba:	4602      	mov	r2, r0
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	009a      	lsls	r2, r3, #2
 80070c4:	441a      	add	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d0:	4a93      	ldr	r2, [pc, #588]	; (8007320 <UART_SetConfig+0x350>)
 80070d2:	fba2 2303 	umull	r2, r3, r2, r3
 80070d6:	095b      	lsrs	r3, r3, #5
 80070d8:	2264      	movs	r2, #100	; 0x64
 80070da:	fb02 f303 	mul.w	r3, r2, r3
 80070de:	1aeb      	subs	r3, r5, r3
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	3332      	adds	r3, #50	; 0x32
 80070e4:	4a8e      	ldr	r2, [pc, #568]	; (8007320 <UART_SetConfig+0x350>)
 80070e6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070f2:	441c      	add	r4, r3
 80070f4:	f7fe fb82 	bl	80057fc <HAL_RCC_GetPCLK2Freq>
 80070f8:	4602      	mov	r2, r0
 80070fa:	4613      	mov	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	009a      	lsls	r2, r3, #2
 8007102:	441a      	add	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	fbb2 f5f3 	udiv	r5, r2, r3
 800710e:	f7fe fb75 	bl	80057fc <HAL_RCC_GetPCLK2Freq>
 8007112:	4602      	mov	r2, r0
 8007114:	4613      	mov	r3, r2
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	009a      	lsls	r2, r3, #2
 800711c:	441a      	add	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	fbb2 f3f3 	udiv	r3, r2, r3
 8007128:	4a7d      	ldr	r2, [pc, #500]	; (8007320 <UART_SetConfig+0x350>)
 800712a:	fba2 2303 	umull	r2, r3, r2, r3
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	2264      	movs	r2, #100	; 0x64
 8007132:	fb02 f303 	mul.w	r3, r2, r3
 8007136:	1aeb      	subs	r3, r5, r3
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	3332      	adds	r3, #50	; 0x32
 800713c:	4a78      	ldr	r2, [pc, #480]	; (8007320 <UART_SetConfig+0x350>)
 800713e:	fba2 2303 	umull	r2, r3, r2, r3
 8007142:	095b      	lsrs	r3, r3, #5
 8007144:	f003 0207 	and.w	r2, r3, #7
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4422      	add	r2, r4
 800714e:	609a      	str	r2, [r3, #8]
 8007150:	e154      	b.n	80073fc <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007152:	f7fe fb3f 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 8007156:	4602      	mov	r2, r0
 8007158:	4613      	mov	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	009a      	lsls	r2, r3, #2
 8007160:	441a      	add	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	fbb2 f3f3 	udiv	r3, r2, r3
 800716c:	4a6c      	ldr	r2, [pc, #432]	; (8007320 <UART_SetConfig+0x350>)
 800716e:	fba2 2303 	umull	r2, r3, r2, r3
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	011c      	lsls	r4, r3, #4
 8007176:	f7fe fb2d 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 800717a:	4602      	mov	r2, r0
 800717c:	4613      	mov	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	009a      	lsls	r2, r3, #2
 8007184:	441a      	add	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	fbb2 f5f3 	udiv	r5, r2, r3
 8007190:	f7fe fb20 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 8007194:	4602      	mov	r2, r0
 8007196:	4613      	mov	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	009a      	lsls	r2, r3, #2
 800719e:	441a      	add	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071aa:	4a5d      	ldr	r2, [pc, #372]	; (8007320 <UART_SetConfig+0x350>)
 80071ac:	fba2 2303 	umull	r2, r3, r2, r3
 80071b0:	095b      	lsrs	r3, r3, #5
 80071b2:	2264      	movs	r2, #100	; 0x64
 80071b4:	fb02 f303 	mul.w	r3, r2, r3
 80071b8:	1aeb      	subs	r3, r5, r3
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	3332      	adds	r3, #50	; 0x32
 80071be:	4a58      	ldr	r2, [pc, #352]	; (8007320 <UART_SetConfig+0x350>)
 80071c0:	fba2 2303 	umull	r2, r3, r2, r3
 80071c4:	095b      	lsrs	r3, r3, #5
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80071cc:	441c      	add	r4, r3
 80071ce:	f7fe fb01 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 80071d2:	4602      	mov	r2, r0
 80071d4:	4613      	mov	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	009a      	lsls	r2, r3, #2
 80071dc:	441a      	add	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	fbb2 f5f3 	udiv	r5, r2, r3
 80071e8:	f7fe faf4 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 80071ec:	4602      	mov	r2, r0
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009a      	lsls	r2, r3, #2
 80071f6:	441a      	add	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007202:	4a47      	ldr	r2, [pc, #284]	; (8007320 <UART_SetConfig+0x350>)
 8007204:	fba2 2303 	umull	r2, r3, r2, r3
 8007208:	095b      	lsrs	r3, r3, #5
 800720a:	2264      	movs	r2, #100	; 0x64
 800720c:	fb02 f303 	mul.w	r3, r2, r3
 8007210:	1aeb      	subs	r3, r5, r3
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	3332      	adds	r3, #50	; 0x32
 8007216:	4a42      	ldr	r2, [pc, #264]	; (8007320 <UART_SetConfig+0x350>)
 8007218:	fba2 2303 	umull	r2, r3, r2, r3
 800721c:	095b      	lsrs	r3, r3, #5
 800721e:	f003 0207 	and.w	r2, r3, #7
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4422      	add	r2, r4
 8007228:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800722a:	e0e7      	b.n	80073fc <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a39      	ldr	r2, [pc, #228]	; (8007318 <UART_SetConfig+0x348>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d004      	beq.n	8007240 <UART_SetConfig+0x270>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a38      	ldr	r2, [pc, #224]	; (800731c <UART_SetConfig+0x34c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d171      	bne.n	8007324 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007240:	f7fe fadc 	bl	80057fc <HAL_RCC_GetPCLK2Freq>
 8007244:	4602      	mov	r2, r0
 8007246:	4613      	mov	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	009a      	lsls	r2, r3, #2
 800724e:	441a      	add	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	fbb2 f3f3 	udiv	r3, r2, r3
 800725a:	4a31      	ldr	r2, [pc, #196]	; (8007320 <UART_SetConfig+0x350>)
 800725c:	fba2 2303 	umull	r2, r3, r2, r3
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	011c      	lsls	r4, r3, #4
 8007264:	f7fe faca 	bl	80057fc <HAL_RCC_GetPCLK2Freq>
 8007268:	4602      	mov	r2, r0
 800726a:	4613      	mov	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	009a      	lsls	r2, r3, #2
 8007272:	441a      	add	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	fbb2 f5f3 	udiv	r5, r2, r3
 800727e:	f7fe fabd 	bl	80057fc <HAL_RCC_GetPCLK2Freq>
 8007282:	4602      	mov	r2, r0
 8007284:	4613      	mov	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	009a      	lsls	r2, r3, #2
 800728c:	441a      	add	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	fbb2 f3f3 	udiv	r3, r2, r3
 8007298:	4a21      	ldr	r2, [pc, #132]	; (8007320 <UART_SetConfig+0x350>)
 800729a:	fba2 2303 	umull	r2, r3, r2, r3
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	2264      	movs	r2, #100	; 0x64
 80072a2:	fb02 f303 	mul.w	r3, r2, r3
 80072a6:	1aeb      	subs	r3, r5, r3
 80072a8:	011b      	lsls	r3, r3, #4
 80072aa:	3332      	adds	r3, #50	; 0x32
 80072ac:	4a1c      	ldr	r2, [pc, #112]	; (8007320 <UART_SetConfig+0x350>)
 80072ae:	fba2 2303 	umull	r2, r3, r2, r3
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072b8:	441c      	add	r4, r3
 80072ba:	f7fe fa9f 	bl	80057fc <HAL_RCC_GetPCLK2Freq>
 80072be:	4602      	mov	r2, r0
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009a      	lsls	r2, r3, #2
 80072c8:	441a      	add	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	fbb2 f5f3 	udiv	r5, r2, r3
 80072d4:	f7fe fa92 	bl	80057fc <HAL_RCC_GetPCLK2Freq>
 80072d8:	4602      	mov	r2, r0
 80072da:	4613      	mov	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	009a      	lsls	r2, r3, #2
 80072e2:	441a      	add	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ee:	4a0c      	ldr	r2, [pc, #48]	; (8007320 <UART_SetConfig+0x350>)
 80072f0:	fba2 2303 	umull	r2, r3, r2, r3
 80072f4:	095b      	lsrs	r3, r3, #5
 80072f6:	2264      	movs	r2, #100	; 0x64
 80072f8:	fb02 f303 	mul.w	r3, r2, r3
 80072fc:	1aeb      	subs	r3, r5, r3
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	3332      	adds	r3, #50	; 0x32
 8007302:	4a07      	ldr	r2, [pc, #28]	; (8007320 <UART_SetConfig+0x350>)
 8007304:	fba2 2303 	umull	r2, r3, r2, r3
 8007308:	095b      	lsrs	r3, r3, #5
 800730a:	f003 020f 	and.w	r2, r3, #15
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4422      	add	r2, r4
 8007314:	609a      	str	r2, [r3, #8]
 8007316:	e071      	b.n	80073fc <UART_SetConfig+0x42c>
 8007318:	40011000 	.word	0x40011000
 800731c:	40011400 	.word	0x40011400
 8007320:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007324:	f7fe fa56 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 8007328:	4602      	mov	r2, r0
 800732a:	4613      	mov	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	009a      	lsls	r2, r3, #2
 8007332:	441a      	add	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	fbb2 f3f3 	udiv	r3, r2, r3
 800733e:	4a31      	ldr	r2, [pc, #196]	; (8007404 <UART_SetConfig+0x434>)
 8007340:	fba2 2303 	umull	r2, r3, r2, r3
 8007344:	095b      	lsrs	r3, r3, #5
 8007346:	011c      	lsls	r4, r3, #4
 8007348:	f7fe fa44 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 800734c:	4602      	mov	r2, r0
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009a      	lsls	r2, r3, #2
 8007356:	441a      	add	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	fbb2 f5f3 	udiv	r5, r2, r3
 8007362:	f7fe fa37 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 8007366:	4602      	mov	r2, r0
 8007368:	4613      	mov	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	009a      	lsls	r2, r3, #2
 8007370:	441a      	add	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	fbb2 f3f3 	udiv	r3, r2, r3
 800737c:	4a21      	ldr	r2, [pc, #132]	; (8007404 <UART_SetConfig+0x434>)
 800737e:	fba2 2303 	umull	r2, r3, r2, r3
 8007382:	095b      	lsrs	r3, r3, #5
 8007384:	2264      	movs	r2, #100	; 0x64
 8007386:	fb02 f303 	mul.w	r3, r2, r3
 800738a:	1aeb      	subs	r3, r5, r3
 800738c:	011b      	lsls	r3, r3, #4
 800738e:	3332      	adds	r3, #50	; 0x32
 8007390:	4a1c      	ldr	r2, [pc, #112]	; (8007404 <UART_SetConfig+0x434>)
 8007392:	fba2 2303 	umull	r2, r3, r2, r3
 8007396:	095b      	lsrs	r3, r3, #5
 8007398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800739c:	441c      	add	r4, r3
 800739e:	f7fe fa19 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 80073a2:	4602      	mov	r2, r0
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009a      	lsls	r2, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	fbb2 f5f3 	udiv	r5, r2, r3
 80073b8:	f7fe fa0c 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 80073bc:	4602      	mov	r2, r0
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009a      	lsls	r2, r3, #2
 80073c6:	441a      	add	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d2:	4a0c      	ldr	r2, [pc, #48]	; (8007404 <UART_SetConfig+0x434>)
 80073d4:	fba2 2303 	umull	r2, r3, r2, r3
 80073d8:	095b      	lsrs	r3, r3, #5
 80073da:	2264      	movs	r2, #100	; 0x64
 80073dc:	fb02 f303 	mul.w	r3, r2, r3
 80073e0:	1aeb      	subs	r3, r5, r3
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	3332      	adds	r3, #50	; 0x32
 80073e6:	4a07      	ldr	r2, [pc, #28]	; (8007404 <UART_SetConfig+0x434>)
 80073e8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ec:	095b      	lsrs	r3, r3, #5
 80073ee:	f003 020f 	and.w	r2, r3, #15
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4422      	add	r2, r4
 80073f8:	609a      	str	r2, [r3, #8]
}
 80073fa:	e7ff      	b.n	80073fc <UART_SetConfig+0x42c>
 80073fc:	bf00      	nop
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bdb0      	pop	{r4, r5, r7, pc}
 8007404:	51eb851f 	.word	0x51eb851f

08007408 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b094      	sub	sp, #80	; 0x50
 800740c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 800740e:	2300      	movs	r3, #0
 8007410:	60bb      	str	r3, [r7, #8]
 8007412:	4b2a      	ldr	r3, [pc, #168]	; (80074bc <SystemClock_Config+0xb4>)
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	4a29      	ldr	r2, [pc, #164]	; (80074bc <SystemClock_Config+0xb4>)
 8007418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800741c:	6413      	str	r3, [r2, #64]	; 0x40
 800741e:	4b27      	ldr	r3, [pc, #156]	; (80074bc <SystemClock_Config+0xb4>)
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007426:	60bb      	str	r3, [r7, #8]
 8007428:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800742a:	2300      	movs	r3, #0
 800742c:	607b      	str	r3, [r7, #4]
 800742e:	4b24      	ldr	r3, [pc, #144]	; (80074c0 <SystemClock_Config+0xb8>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007436:	4a22      	ldr	r2, [pc, #136]	; (80074c0 <SystemClock_Config+0xb8>)
 8007438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	4b20      	ldr	r3, [pc, #128]	; (80074c0 <SystemClock_Config+0xb8>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007446:	607b      	str	r3, [r7, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800744a:	2302      	movs	r3, #2
 800744c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800744e:	2301      	movs	r3, #1
 8007450:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8007452:	2310      	movs	r3, #16
 8007454:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007456:	2302      	movs	r3, #2
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800745a:	2300      	movs	r3, #0
 800745c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 800745e:	2310      	movs	r3, #16
 8007460:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007462:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007466:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8007468:	2304      	movs	r3, #4
 800746a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800746c:	2307      	movs	r3, #7
 800746e:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007470:	f107 030c 	add.w	r3, r7, #12
 8007474:	4618      	mov	r0, r3
 8007476:	f7fd fdbb 	bl	8004ff0 <HAL_RCC_OscConfig>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <SystemClock_Config+0x7e>
  {
    Error_Handler(0);
 8007480:	2000      	movs	r0, #0
 8007482:	f001 faf1 	bl	8008a68 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8007486:	230f      	movs	r3, #15
 8007488:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800748a:	2302      	movs	r3, #2
 800748c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800748e:	2300      	movs	r3, #0
 8007490:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8007492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8007498:	2300      	movs	r3, #0
 800749a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800749c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80074a0:	2102      	movs	r1, #2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fd ffe2 	bl	800546c <HAL_RCC_ClockConfig>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <SystemClock_Config+0xac>
  {
    Error_Handler(1);
 80074ae:	2001      	movs	r0, #1
 80074b0:	f001 fada 	bl	8008a68 <Error_Handler>
  }
}
 80074b4:	bf00      	nop
 80074b6:	3750      	adds	r7, #80	; 0x50
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	40023800 	.word	0x40023800
 80074c0:	40007000 	.word	0x40007000

080074c4 <NVIC_SystemReset>:
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80074c8:	f3bf 8f4f 	dsb	sy
}
 80074cc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80074ce:	4b07      	ldr	r3, [pc, #28]	; (80074ec <NVIC_SystemReset+0x28>)
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80074d6:	4905      	ldr	r1, [pc, #20]	; (80074ec <NVIC_SystemReset+0x28>)
 80074d8:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <NVIC_SystemReset+0x2c>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80074de:	f3bf 8f4f 	dsb	sy
}
 80074e2:	bf00      	nop
  __ASM volatile ("nop");
 80074e4:	bf00      	nop
}
 80074e6:	bf00      	nop
    __NOP();
 80074e8:	e7fc      	b.n	80074e4 <NVIC_SystemReset+0x20>
 80074ea:	bf00      	nop
 80074ec:	e000ed00 	.word	0xe000ed00
 80074f0:	05fa0004 	.word	0x05fa0004

080074f4 <Delay_Pulse>:
				"CMP R0, #0\n\t"\
				"BNE 1b \n\t" : : [loops] "r" (16*us) : "memory"\
		);\
} while(0)

int Delay_Pulse(){
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
	return desired_pwm_period == UINT32_MAX;
 80074f8:	4b06      	ldr	r3, [pc, #24]	; (8007514 <Delay_Pulse+0x20>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007500:	bf0c      	ite	eq
 8007502:	2301      	moveq	r3, #1
 8007504:	2300      	movne	r3, #0
 8007506:	b2db      	uxtb	r3, r3
}
 8007508:	4618      	mov	r0, r3
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	20000c64 	.word	0x20000c64

08007518 <Main_StepClockHandler>:

/*
 * PWM pulse (step) interrupt
 */
void Main_StepClockHandler() {
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
	/*
	 *  Stepper motor acceleration, speed, direction and position control developed by Ryan Nemiroff
	 */

	uint32_t desired_pwm_period_local = desired_pwm_period;
 800751e:	4b0a      	ldr	r3, [pc, #40]	; (8007548 <Main_StepClockHandler+0x30>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	607b      	str	r3, [r7, #4]

	/*
	 * Add time reporting
	 */

	clock_int_time = DWT->CYCCNT;
 8007524:	4b09      	ldr	r3, [pc, #36]	; (800754c <Main_StepClockHandler+0x34>)
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	4a09      	ldr	r2, [pc, #36]	; (8007550 <Main_StepClockHandler+0x38>)
 800752a:	6013      	str	r3, [r2, #0]

	if (desired_pwm_period_local != 0) {
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d005      	beq.n	800753e <Main_StepClockHandler+0x26>
		L6474_Board_Pwm1SetPeriod(desired_pwm_period_local);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7fc f8a0 	bl	8003678 <L6474_Board_Pwm1SetPeriod>
		current_pwm_period = desired_pwm_period_local;
 8007538:	4a06      	ldr	r2, [pc, #24]	; (8007554 <Main_StepClockHandler+0x3c>)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6013      	str	r3, [r2, #0]
	}
}
 800753e:	bf00      	nop
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000c64 	.word	0x20000c64
 800754c:	e0001000 	.word	0xe0001000
 8007550:	20000c5c 	.word	0x20000c5c
 8007554:	20000c68 	.word	0x20000c68

08007558 <DWT_Delay_until_cycle>:
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
}

__STATIC_INLINE void DWT_Delay_until_cycle(volatile uint32_t cycle)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
	while (DWT->CYCCNT < cycle);
 8007560:	bf00      	nop
 8007562:	4b06      	ldr	r3, [pc, #24]	; (800757c <DWT_Delay_until_cycle+0x24>)
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	429a      	cmp	r2, r3
 800756a:	d3fa      	bcc.n	8007562 <DWT_Delay_until_cycle+0xa>
}
 800756c:	bf00      	nop
 800756e:	bf00      	nop
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	e0001000 	.word	0xe0001000

08007580 <initialize>:
uint8_t  LOOP_BACK_gpioState;
uint32_t LOOP_BACK_L6474_Board_Pwm1Period;
uint8_t  LOOP_BACK_break_Control_Loop;


void initialize(){
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
	/* Initialize reset state indicating that reset has occurred */

	reset_state = 1;
 8007584:	4bae      	ldr	r3, [pc, #696]	; (8007840 <initialize+0x2c0>)
 8007586:	2201      	movs	r2, #1
 8007588:	601a      	str	r2, [r3, #0]

	/* Initialize and enable cycle counter */
	ITM->LAR = 0xC5ACCE55; 	// at address 0xE0001FB0
 800758a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800758e:	4aad      	ldr	r2, [pc, #692]	; (8007844 <initialize+0x2c4>)
 8007590:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // at address 0xE000EDFC, CoreDebug_DEMCR_TRCENA_Msk = 0x01000000
 8007594:	4bac      	ldr	r3, [pc, #688]	; (8007848 <initialize+0x2c8>)
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	4aab      	ldr	r2, [pc, #684]	; (8007848 <initialize+0x2c8>)
 800759a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800759e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= 1; 		// at address 0xE0001000
 80075a0:	4baa      	ldr	r3, [pc, #680]	; (800784c <initialize+0x2cc>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4aa9      	ldr	r2, [pc, #676]	; (800784c <initialize+0x2cc>)
 80075a6:	f043 0301 	orr.w	r3, r3, #1
 80075aa:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0; 		// at address 0xE0001004
 80075ac:	4ba7      	ldr	r3, [pc, #668]	; (800784c <initialize+0x2cc>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	605a      	str	r2, [r3, #4]

	/* initialize Integrator Mode time variables */
	apply_acc_start_time = 0;
 80075b2:	4ba7      	ldr	r3, [pc, #668]	; (8007850 <initialize+0x2d0>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
	clock_int_time = 0;
 80075b8:	4ba6      	ldr	r3, [pc, #664]	; (8007854 <initialize+0x2d4>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
	clock_int_tick = 0;
 80075be:	4ba6      	ldr	r3, [pc, #664]	; (8007858 <initialize+0x2d8>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]

	/* Initialize PWM period variables used by step interrupt */
	desired_pwm_period = 0;
 80075c4:	4ba5      	ldr	r3, [pc, #660]	; (800785c <initialize+0x2dc>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]
	current_pwm_period = 0;
 80075ca:	4ba5      	ldr	r3, [pc, #660]	; (8007860 <initialize+0x2e0>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]
	target_velocity_prescaled = 0;
 80075d0:	4ba4      	ldr	r3, [pc, #656]	; (8007864 <initialize+0x2e4>)
 80075d2:	f04f 0200 	mov.w	r2, #0
 80075d6:	601a      	str	r2, [r3, #0]


	LOOP_BACK_rotor_control_target_steps=0;
 80075d8:	4ba3      	ldr	r3, [pc, #652]	; (8007868 <initialize+0x2e8>)
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
	LOOP_BACK_gpioState=0;
 80075de:	4ba3      	ldr	r3, [pc, #652]	; (800786c <initialize+0x2ec>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	701a      	strb	r2, [r3, #0]
	LOOP_BACK_L6474_Board_Pwm1Period=0;
 80075e4:	4ba2      	ldr	r3, [pc, #648]	; (8007870 <initialize+0x2f0>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	601a      	str	r2, [r3, #0]
	LOOP_BACK_break_Control_Loop = 0;
 80075ea:	4ba2      	ldr	r3, [pc, #648]	; (8007874 <initialize+0x2f4>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	701a      	strb	r2, [r3, #0]

	/* Initialize default start mode and reporting mode */
	mode_index = 1;
 80075f0:	4ba1      	ldr	r3, [pc, #644]	; (8007878 <initialize+0x2f8>)
 80075f2:	2201      	movs	r2, #1
 80075f4:	601a      	str	r2, [r3, #0]
	report_mode = 1;
 80075f6:	4ba1      	ldr	r3, [pc, #644]	; (800787c <initialize+0x2fc>)
 80075f8:	2201      	movs	r2, #1
 80075fa:	601a      	str	r2, [r3, #0]

	/*Initialize serial read variables */
	RxBuffer_ReadIdx = 0;
 80075fc:	4ba0      	ldr	r3, [pc, #640]	; (8007880 <initialize+0x300>)
 80075fe:	2200      	movs	r2, #0
 8007600:	601a      	str	r2, [r3, #0]
	RxBuffer_WriteIdx = 0;
 8007602:	4ba0      	ldr	r3, [pc, #640]	; (8007884 <initialize+0x304>)
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]
	readBytes = 0;
 8007608:	4b9f      	ldr	r3, [pc, #636]	; (8007888 <initialize+0x308>)
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]

	/*Initialize encoder variables */
	encoder_position = 0;
 800760e:	4b9f      	ldr	r3, [pc, #636]	; (800788c <initialize+0x30c>)
 8007610:	f04f 0200 	mov.w	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
	encoder_position_down = 0;
 8007616:	4b9e      	ldr	r3, [pc, #632]	; (8007890 <initialize+0x310>)
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
	encoder_position_curr = 0;
 800761c:	4b9d      	ldr	r3, [pc, #628]	; (8007894 <initialize+0x314>)
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
	encoder_position_prev = 0;
 8007622:	4b9d      	ldr	r3, [pc, #628]	; (8007898 <initialize+0x318>)
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]
	angle_scale = ENCODER_READ_ANGLE_SCALE;
 8007628:	4b9c      	ldr	r3, [pc, #624]	; (800789c <initialize+0x31c>)
 800762a:	4a9d      	ldr	r2, [pc, #628]	; (80078a0 <initialize+0x320>)
 800762c:	601a      	str	r2, [r3, #0]

	/*Initialize rotor control variables */
	rotor_control_target_steps = 0;
 800762e:	4b9d      	ldr	r3, [pc, #628]	; (80078a4 <initialize+0x324>)
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
	rotor_control_target_steps_curr = 0;
 8007636:	4b9c      	ldr	r3, [pc, #624]	; (80078a8 <initialize+0x328>)
 8007638:	f04f 0200 	mov.w	r2, #0
 800763c:	601a      	str	r2, [r3, #0]
	rotor_control_target_steps_prev = 0;
 800763e:	4b9b      	ldr	r3, [pc, #620]	; (80078ac <initialize+0x32c>)
 8007640:	f04f 0200 	mov.w	r2, #0
 8007644:	601a      	str	r2, [r3, #0]

	/*Initialize rotor plant design transfer function computation variables */
	rotor_control_target_steps_filter_prev_2 = 0.0;
 8007646:	4b9a      	ldr	r3, [pc, #616]	; (80078b0 <initialize+0x330>)
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	601a      	str	r2, [r3, #0]
	rotor_control_target_steps_filter_prev_prev_2 = 0.0;
 800764e:	4b99      	ldr	r3, [pc, #612]	; (80078b4 <initialize+0x334>)
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
	rotor_control_target_steps_prev_prev = 0.0;
 8007656:	4b98      	ldr	r3, [pc, #608]	; (80078b8 <initialize+0x338>)
 8007658:	f04f 0200 	mov.w	r2, #0
 800765c:	601a      	str	r2, [r3, #0]

	/* Initialize LQR integral control variables */
	current_error_rotor_integral = 0;
 800765e:	4b97      	ldr	r3, [pc, #604]	; (80078bc <initialize+0x33c>)
 8007660:	f04f 0200 	mov.w	r2, #0
 8007664:	601a      	str	r2, [r3, #0]

	/*Initialize rotor tracking signal variables */
	enable_rotor_chirp = 0;
 8007666:	4b96      	ldr	r3, [pc, #600]	; (80078c0 <initialize+0x340>)
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]
	rotor_chirp_start_freq = ROTOR_CHIRP_START_FREQ;
 800766c:	4b95      	ldr	r3, [pc, #596]	; (80078c4 <initialize+0x344>)
 800766e:	4a96      	ldr	r2, [pc, #600]	; (80078c8 <initialize+0x348>)
 8007670:	601a      	str	r2, [r3, #0]
	rotor_chirp_end_freq = ROTOR_CHIRP_END_FREQ;
 8007672:	4b96      	ldr	r3, [pc, #600]	; (80078cc <initialize+0x34c>)
 8007674:	4a96      	ldr	r2, [pc, #600]	; (80078d0 <initialize+0x350>)
 8007676:	601a      	str	r2, [r3, #0]
	rotor_chirp_period = ROTOR_CHIRP_PERIOD;
 8007678:	4b96      	ldr	r3, [pc, #600]	; (80078d4 <initialize+0x354>)
 800767a:	4a97      	ldr	r2, [pc, #604]	; (80078d8 <initialize+0x358>)
 800767c:	601a      	str	r2, [r3, #0]
	enable_mod_sin_rotor_tracking = ENABLE_MOD_SIN_ROTOR_TRACKING;
 800767e:	4b97      	ldr	r3, [pc, #604]	; (80078dc <initialize+0x35c>)
 8007680:	2201      	movs	r2, #1
 8007682:	601a      	str	r2, [r3, #0]
	enable_rotor_position_step_response_cycle = ENABLE_ROTOR_POSITION_STEP_RESPONSE_CYCLE;
 8007684:	4b96      	ldr	r3, [pc, #600]	; (80078e0 <initialize+0x360>)
 8007686:	2201      	movs	r2, #1
 8007688:	601a      	str	r2, [r3, #0]
	disable_mod_sin_rotor_tracking = 0;
 800768a:	4b96      	ldr	r3, [pc, #600]	; (80078e4 <initialize+0x364>)
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]
	sine_drive_transition = 0;
 8007690:	4b95      	ldr	r3, [pc, #596]	; (80078e8 <initialize+0x368>)
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
	mod_sin_amplitude = MOD_SIN_AMPLITUDE;
 8007696:	4b95      	ldr	r3, [pc, #596]	; (80078ec <initialize+0x36c>)
 8007698:	4a95      	ldr	r2, [pc, #596]	; (80078f0 <initialize+0x370>)
 800769a:	601a      	str	r2, [r3, #0]
	rotor_control_sin_amplitude = MOD_SIN_AMPLITUDE;
 800769c:	4b95      	ldr	r3, [pc, #596]	; (80078f4 <initialize+0x374>)
 800769e:	4a94      	ldr	r2, [pc, #592]	; (80078f0 <initialize+0x370>)
 80076a0:	601a      	str	r2, [r3, #0]

	/*Initialize sensitivity function selection variables */
	enable_disturbance_rejection_step = 0;
 80076a2:	4b95      	ldr	r3, [pc, #596]	; (80078f8 <initialize+0x378>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	601a      	str	r2, [r3, #0]
	enable_noise_rejection_step = 0;
 80076a8:	4b94      	ldr	r3, [pc, #592]	; (80078fc <initialize+0x37c>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]
	enable_sensitivity_fnc_step = 0;
 80076ae:	4b94      	ldr	r3, [pc, #592]	; (8007900 <initialize+0x380>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	601a      	str	r2, [r3, #0]
	enable_pendulum_position_impulse_response_cycle = 0;
 80076b4:	4b93      	ldr	r3, [pc, #588]	; (8007904 <initialize+0x384>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	601a      	str	r2, [r3, #0]

	/*Initialize user adjustment variables */
	step_size = 0;
 80076ba:	4b93      	ldr	r3, [pc, #588]	; (8007908 <initialize+0x388>)
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]
	adjust_increment = 0.5;
 80076c0:	4b92      	ldr	r3, [pc, #584]	; (800790c <initialize+0x38c>)
 80076c2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80076c6:	601a      	str	r2, [r3, #0]

	/*Initialize adaptive mode state variables */
	mode_transition_state = 0;
 80076c8:	4b91      	ldr	r3, [pc, #580]	; (8007910 <initialize+0x390>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]
	transition_to_adaptive_mode = 0;
 80076ce:	4b91      	ldr	r3, [pc, #580]	; (8007914 <initialize+0x394>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]

	/*Initialize user interactive mode */
	char_mode_select = 0;
 80076d4:	4b90      	ldr	r3, [pc, #576]	; (8007918 <initialize+0x398>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]

	/* STM32xx HAL library initialization */
	HAL_Init();
 80076da:	f7fc fd9d 	bl	8004218 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80076de:	f7ff fe93 	bl	8007408 <SystemClock_Config>

	/* Default select_suspended_mode */
	select_suspended_mode = ENABLE_SUSPENDED_PENDULUM_CONTROL;
 80076e2:	4b8e      	ldr	r3, [pc, #568]	; (800791c <initialize+0x39c>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]

	//----- Initialize Motor Control Library
	/* Set the L6474 library to use 1 device */
	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_L6474, 1);
 80076e8:	2101      	movs	r1, #1
 80076ea:	f641 104a 	movw	r0, #6474	; 0x194a
 80076ee:	f7fc fccf 	bl	8004090 <BSP_MotorControl_SetNbDevices>
	/* Uncomment the call to BSP_MotorControl_Init below to initialize the      */
	/* device with the structure gL6474InitParams declared in the the main.c file */
	/* and comment the subsequent call having the NULL pointer                   */
	//BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474, NULL);

	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474, &gL6474InitParams);
 80076f2:	498b      	ldr	r1, [pc, #556]	; (8007920 <initialize+0x3a0>)
 80076f4:	f641 104a 	movw	r0, #6474	; 0x194a
 80076f8:	f7fc fa2a 	bl	8003b50 <BSP_MotorControl_Init>

	/* Initialize Timer and UART */
	MX_TIM3_Init();
 80076fc:	f001 f8ee 	bl	80088dc <MX_TIM3_Init>

	/* Initialize Pendulum Angle Encoder offset */
	encoder_position_init = 0;
 8007700:	4b88      	ldr	r3, [pc, #544]	; (8007924 <initialize+0x3a4>)
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8007706:	200a      	movs	r0, #10
 8007708:	f7fc fe00 	bl	800430c <HAL_Delay>
	/* Initialize UART communication port */
	MX_USART2_UART_Init();
 800770c:	f001 f92e 	bl	800896c <MX_USART2_UART_Init>

	/* Motor Range Initialization */
	HAL_Delay(1);
 8007710:	2001      	movs	r0, #1
 8007712:	f7fc fdfb 	bl	800430c <HAL_Delay>
	BSP_MotorControl_SetMaxSpeed(0, MAX_SPEED_UPPER_INIT);
 8007716:	f242 7110 	movw	r1, #10000	; 0x2710
 800771a:	2000      	movs	r0, #0
 800771c:	f7fc fbde 	bl	8003edc <BSP_MotorControl_SetMaxSpeed>
	HAL_Delay(1);
 8007720:	2001      	movs	r0, #1
 8007722:	f7fc fdf3 	bl	800430c <HAL_Delay>
	BSP_MotorControl_SetMinSpeed(0, MIN_SPEED_UPPER_INIT);
 8007726:	f242 7110 	movw	r1, #10000	; 0x2710
 800772a:	2000      	movs	r0, #0
 800772c:	f7fc fbfe 	bl	8003f2c <BSP_MotorControl_SetMinSpeed>
	HAL_Delay(1);
 8007730:	2001      	movs	r0, #1
 8007732:	f7fc fdeb 	bl	800430c <HAL_Delay>
	BSP_MotorControl_SetMaxSpeed(0, MAX_SPEED_LOWER_INIT);
 8007736:	211e      	movs	r1, #30
 8007738:	2000      	movs	r0, #0
 800773a:	f7fc fbcf 	bl	8003edc <BSP_MotorControl_SetMaxSpeed>
	HAL_Delay(1);
 800773e:	2001      	movs	r0, #1
 8007740:	f7fc fde4 	bl	800430c <HAL_Delay>
	BSP_MotorControl_SetMinSpeed(0, MIN_SPEED_LOWER_INIT);
 8007744:	211e      	movs	r1, #30
 8007746:	2000      	movs	r0, #0
 8007748:	f7fc fbf0 	bl	8003f2c <BSP_MotorControl_SetMinSpeed>
	HAL_Delay(1);
 800774c:	2001      	movs	r0, #1
 800774e:	f7fc fddd 	bl	800430c <HAL_Delay>
	BSP_MotorControl_SetAcceleration(0, MAX_ACCEL_UPPER_INIT);
 8007752:	f242 7110 	movw	r1, #10000	; 0x2710
 8007756:	2000      	movs	r0, #0
 8007758:	f7fc fb4e 	bl	8003df8 <BSP_MotorControl_SetAcceleration>
	HAL_Delay(1);
 800775c:	2001      	movs	r0, #1
 800775e:	f7fc fdd5 	bl	800430c <HAL_Delay>
	BSP_MotorControl_SetDeceleration(0, MAX_DECEL_UPPER_INIT);
 8007762:	f242 7110 	movw	r1, #10000	; 0x2710
 8007766:	2000      	movs	r0, #0
 8007768:	f7fc fb6e 	bl	8003e48 <BSP_MotorControl_SetDeceleration>
	HAL_Delay(1);
 800776c:	2001      	movs	r0, #1
 800776e:	f7fc fdcd 	bl	800430c <HAL_Delay>

	/* Default Starting Control Configuration */
	max_accel = MAX_ACCEL;
 8007772:	4b6d      	ldr	r3, [pc, #436]	; (8007928 <initialize+0x3a8>)
 8007774:	f241 7270 	movw	r2, #6000	; 0x1770
 8007778:	801a      	strh	r2, [r3, #0]
	max_decel = MAX_DECEL;
 800777a:	4b6c      	ldr	r3, [pc, #432]	; (800792c <initialize+0x3ac>)
 800777c:	f241 7270 	movw	r2, #6000	; 0x1770
 8007780:	801a      	strh	r2, [r3, #0]
	max_speed = MAX_SPEED_MODE_1;
 8007782:	4b6b      	ldr	r3, [pc, #428]	; (8007930 <initialize+0x3b0>)
 8007784:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007788:	801a      	strh	r2, [r3, #0]
	min_speed = MIN_SPEED_MODE_1;
 800778a:	4b6a      	ldr	r3, [pc, #424]	; (8007934 <initialize+0x3b4>)
 800778c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007790:	801a      	strh	r2, [r3, #0]
	HAL_Delay(1);
 8007792:	2001      	movs	r0, #1
 8007794:	f7fc fdba 	bl	800430c <HAL_Delay>
	BSP_MotorControl_SetMaxSpeed(0, max_speed);
 8007798:	4b65      	ldr	r3, [pc, #404]	; (8007930 <initialize+0x3b0>)
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	4619      	mov	r1, r3
 800779e:	2000      	movs	r0, #0
 80077a0:	f7fc fb9c 	bl	8003edc <BSP_MotorControl_SetMaxSpeed>
	HAL_Delay(1);
 80077a4:	2001      	movs	r0, #1
 80077a6:	f7fc fdb1 	bl	800430c <HAL_Delay>
	BSP_MotorControl_SetMinSpeed(0, min_speed);
 80077aa:	4b62      	ldr	r3, [pc, #392]	; (8007934 <initialize+0x3b4>)
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	4619      	mov	r1, r3
 80077b0:	2000      	movs	r0, #0
 80077b2:	f7fc fbbb 	bl	8003f2c <BSP_MotorControl_SetMinSpeed>
	HAL_Delay(1);
 80077b6:	2001      	movs	r0, #1
 80077b8:	f7fc fda8 	bl	800430c <HAL_Delay>
	BSP_MotorControl_SetAcceleration(0, max_accel);
 80077bc:	4b5a      	ldr	r3, [pc, #360]	; (8007928 <initialize+0x3a8>)
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	4619      	mov	r1, r3
 80077c2:	2000      	movs	r0, #0
 80077c4:	f7fc fb18 	bl	8003df8 <BSP_MotorControl_SetAcceleration>
	HAL_Delay(1);
 80077c8:	2001      	movs	r0, #1
 80077ca:	f7fc fd9f 	bl	800430c <HAL_Delay>
	BSP_MotorControl_SetDeceleration(0, max_decel);
 80077ce:	4b57      	ldr	r3, [pc, #348]	; (800792c <initialize+0x3ac>)
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	4619      	mov	r1, r3
 80077d4:	2000      	movs	r0, #0
 80077d6:	f7fc fb37 	bl	8003e48 <BSP_MotorControl_SetDeceleration>
	HAL_Delay(1);
 80077da:	2001      	movs	r0, #1
 80077dc:	f7fc fd96 	bl	800430c <HAL_Delay>

	/* Default torque current */
	torq_current_val = MAX_TORQUE_CONFIG;
 80077e0:	4b55      	ldr	r3, [pc, #340]	; (8007938 <initialize+0x3b8>)
 80077e2:	4a56      	ldr	r2, [pc, #344]	; (800793c <initialize+0x3bc>)
 80077e4:	601a      	str	r2, [r3, #0]
	L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 80077e6:	4b54      	ldr	r3, [pc, #336]	; (8007938 <initialize+0x3b8>)
 80077e8:	edd3 7a00 	vldr	s15, [r3]
 80077ec:	eeb0 0a67 	vmov.f32	s0, s15
 80077f0:	2109      	movs	r1, #9
 80077f2:	2000      	movs	r0, #0
 80077f4:	f7fa fb4e 	bl	8001e94 <L6474_SetAnalogValue>

	/* Default controller gains */
	proportional = PRIMARY_PROPORTIONAL_MODE_1;
 80077f8:	4b51      	ldr	r3, [pc, #324]	; (8007940 <initialize+0x3c0>)
 80077fa:	4a3d      	ldr	r2, [pc, #244]	; (80078f0 <initialize+0x370>)
 80077fc:	601a      	str	r2, [r3, #0]
	integral = PRIMARY_INTEGRAL_MODE_1;
 80077fe:	4b51      	ldr	r3, [pc, #324]	; (8007944 <initialize+0x3c4>)
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	601a      	str	r2, [r3, #0]
	derivative = PRIMARY_DERIVATIVE_MODE_1;
 8007806:	4b50      	ldr	r3, [pc, #320]	; (8007948 <initialize+0x3c8>)
 8007808:	4a50      	ldr	r2, [pc, #320]	; (800794c <initialize+0x3cc>)
 800780a:	601a      	str	r2, [r3, #0]
	rotor_p_gain = SECONDARY_PROPORTIONAL_MODE_1;
 800780c:	4b50      	ldr	r3, [pc, #320]	; (8007950 <initialize+0x3d0>)
 800780e:	4a30      	ldr	r2, [pc, #192]	; (80078d0 <initialize+0x350>)
 8007810:	601a      	str	r2, [r3, #0]
	rotor_i_gain = SECONDARY_INTEGRAL_MODE_1;
 8007812:	4b50      	ldr	r3, [pc, #320]	; (8007954 <initialize+0x3d4>)
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	601a      	str	r2, [r3, #0]
	rotor_d_gain = SECONDARY_DERIVATIVE_MODE_1;
 800781a:	4b4f      	ldr	r3, [pc, #316]	; (8007958 <initialize+0x3d8>)
 800781c:	4a4f      	ldr	r2, [pc, #316]	; (800795c <initialize+0x3dc>)
 800781e:	601a      	str	r2, [r3, #0]

	/* Enable State Feedback mode and Integral Action Compensator by default and set
	 * precompensation factor to unity
	 */
	enable_state_feedback = 1;
 8007820:	4b4f      	ldr	r3, [pc, #316]	; (8007960 <initialize+0x3e0>)
 8007822:	2201      	movs	r2, #1
 8007824:	601a      	str	r2, [r3, #0]
	integral_compensator_gain = 0;
 8007826:	4b4f      	ldr	r3, [pc, #316]	; (8007964 <initialize+0x3e4>)
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
	feedforward_gain = 1;
 800782e:	4b4e      	ldr	r3, [pc, #312]	; (8007968 <initialize+0x3e8>)
 8007830:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007834:	601a      	str	r2, [r3, #0]

	/* Disable adaptive_mode by default */
	enable_adaptive_mode = 0;
 8007836:	4b4d      	ldr	r3, [pc, #308]	; (800796c <initialize+0x3ec>)
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]

	/* DMA Buffer declarations */
	/* Start DMA just once because it's configured in "circular" mode */
	HAL_UART_Receive_DMA(&huart2, RxBuffer, UART_RX_BUFFER_SIZE);
 800783c:	22c8      	movs	r2, #200	; 0xc8
 800783e:	e097      	b.n	8007970 <initialize+0x3f0>
 8007840:	2000804c 	.word	0x2000804c
 8007844:	c5acce55 	.word	0xc5acce55
 8007848:	e000edf0 	.word	0xe000edf0
 800784c:	e0001000 	.word	0xe0001000
 8007850:	20000c58 	.word	0x20000c58
 8007854:	20000c5c 	.word	0x20000c5c
 8007858:	20000c60 	.word	0x20000c60
 800785c:	20000c64 	.word	0x20000c64
 8007860:	20000c68 	.word	0x20000c68
 8007864:	20000c6c 	.word	0x20000c6c
 8007868:	20008064 	.word	0x20008064
 800786c:	20008068 	.word	0x20008068
 8007870:	2000806c 	.word	0x2000806c
 8007874:	20008070 	.word	0x20008070
 8007878:	20004be0 	.word	0x20004be0
 800787c:	20004be4 	.word	0x20004be4
 8007880:	20008058 	.word	0x20008058
 8007884:	2000805c 	.word	0x2000805c
 8007888:	20008060 	.word	0x20008060
 800788c:	20001070 	.word	0x20001070
 8007890:	2000108c 	.word	0x2000108c
 8007894:	20001090 	.word	0x20001090
 8007898:	20001094 	.word	0x20001094
 800789c:	20008044 	.word	0x20008044
 80078a0:	40d55556 	.word	0x40d55556
 80078a4:	20000f4c 	.word	0x20000f4c
 80078a8:	20000f50 	.word	0x20000f50
 80078ac:	20000f54 	.word	0x20000f54
 80078b0:	20001028 	.word	0x20001028
 80078b4:	20001030 	.word	0x20001030
 80078b8:	2000102c 	.word	0x2000102c
 80078bc:	20000fc8 	.word	0x20000fc8
 80078c0:	20004a00 	.word	0x20004a00
 80078c4:	20004a10 	.word	0x20004a10
 80078c8:	3c23d70a 	.word	0x3c23d70a
 80078cc:	20004a14 	.word	0x20004a14
 80078d0:	41700000 	.word	0x41700000
 80078d4:	20004a18 	.word	0x20004a18
 80078d8:	469c4000 	.word	0x469c4000
 80078dc:	20004a2c 	.word	0x20004a2c
 80078e0:	20004a30 	.word	0x20004a30
 80078e4:	20004a34 	.word	0x20004a34
 80078e8:	20004a38 	.word	0x20004a38
 80078ec:	20004a3c 	.word	0x20004a3c
 80078f0:	43960000 	.word	0x43960000
 80078f4:	20004a40 	.word	0x20004a40
 80078f8:	20004b9c 	.word	0x20004b9c
 80078fc:	20004ba0 	.word	0x20004ba0
 8007900:	20004ba8 	.word	0x20004ba8
 8007904:	20004a54 	.word	0x20004a54
 8007908:	20004bd8 	.word	0x20004bd8
 800790c:	20004bdc 	.word	0x20004bdc
 8007910:	20004c48 	.word	0x20004c48
 8007914:	20004c4c 	.word	0x20004c4c
 8007918:	20007d88 	.word	0x20007d88
 800791c:	200049dc 	.word	0x200049dc
 8007920:	20000170 	.word	0x20000170
 8007924:	20001078 	.word	0x20001078
 8007928:	20008054 	.word	0x20008054
 800792c:	20008056 	.word	0x20008056
 8007930:	20008052 	.word	0x20008052
 8007934:	20008050 	.word	0x20008050
 8007938:	200049fc 	.word	0x200049fc
 800793c:	44480000 	.word	0x44480000
 8007940:	20000fa4 	.word	0x20000fa4
 8007944:	20000fac 	.word	0x20000fac
 8007948:	20000fb4 	.word	0x20000fb4
 800794c:	41f00000 	.word	0x41f00000
 8007950:	20000fa8 	.word	0x20000fa8
 8007954:	20000fb0 	.word	0x20000fb0
 8007958:	20000fb8 	.word	0x20000fb8
 800795c:	40f00000 	.word	0x40f00000
 8007960:	20000fbc 	.word	0x20000fbc
 8007964:	20000fc0 	.word	0x20000fc0
 8007968:	20000fc4 	.word	0x20000fc4
 800796c:	200049b8 	.word	0x200049b8
 8007970:	4920      	ldr	r1, [pc, #128]	; (80079f4 <initialize+0x474>)
 8007972:	4821      	ldr	r0, [pc, #132]	; (80079f8 <initialize+0x478>)
 8007974:	f7ff f984 	bl	8006c80 <HAL_UART_Receive_DMA>

	/* Motor Interface and Encoder initialization */
	/* Attach the function MyFlagInterruptHandler (defined below) to the flag interrupt */
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8007978:	4820      	ldr	r0, [pc, #128]	; (80079fc <initialize+0x47c>)
 800797a:	f7fc f8ad 	bl	8003ad8 <BSP_MotorControl_AttachFlagInterrupt>

	/* Attach the function Error_Handler (defined below) to the error Handler*/
	BSP_MotorControl_AttachErrorHandler(Error_Handler);
 800797e:	4820      	ldr	r0, [pc, #128]	; (8007a00 <initialize+0x480>)
 8007980:	f7fc f88c 	bl	8003a9c <BSP_MotorControl_AttachErrorHandler>

	/* Encoder initialization */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8007984:	2118      	movs	r1, #24
 8007986:	481f      	ldr	r0, [pc, #124]	; (8007a04 <initialize+0x484>)
 8007988:	f7fe fbcc 	bl	8006124 <HAL_TIM_Encoder_Start>
//	}
//
//	/* Configure controller filter and sample time parameters */
//	*deriv_lp_corner_f = DERIVATIVE_LOW_PASS_CORNER_FREQUENCY;
//	*deriv_lp_corner_f_rotor = DERIVATIVE_LOW_PASS_CORNER_FREQUENCY_ROTOR;
	t_sample_cpu_cycles = (uint32_t) round(T_SAMPLE_DEFAULT * RCC_HCLK_FREQ);
 800798c:	4b1e      	ldr	r3, [pc, #120]	; (8007a08 <initialize+0x488>)
 800798e:	4a1f      	ldr	r2, [pc, #124]	; (8007a0c <initialize+0x48c>)
 8007990:	601a      	str	r2, [r3, #0]
	Tsample = (float) t_sample_cpu_cycles / RCC_HCLK_FREQ;
 8007992:	4b1d      	ldr	r3, [pc, #116]	; (8007a08 <initialize+0x488>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800799e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8007a10 <initialize+0x490>
 80079a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80079a6:	4b1b      	ldr	r3, [pc, #108]	; (8007a14 <initialize+0x494>)
 80079a8:	edc3 7a00 	vstr	s15, [r3]
	*sample_period = Tsample;
 80079ac:	4b1a      	ldr	r3, [pc, #104]	; (8007a18 <initialize+0x498>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a18      	ldr	r2, [pc, #96]	; (8007a14 <initialize+0x494>)
 80079b2:	6812      	ldr	r2, [r2, #0]
 80079b4:	601a      	str	r2, [r3, #0]
	Tsample_rotor = Tsample;
 80079b6:	4b17      	ldr	r3, [pc, #92]	; (8007a14 <initialize+0x494>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a18      	ldr	r2, [pc, #96]	; (8007a1c <initialize+0x49c>)
 80079bc:	6013      	str	r3, [r2, #0]
	*sample_period_rotor = Tsample_rotor;
 80079be:	4b18      	ldr	r3, [pc, #96]	; (8007a20 <initialize+0x4a0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a16      	ldr	r2, [pc, #88]	; (8007a1c <initialize+0x49c>)
 80079c4:	6812      	ldr	r2, [r2, #0]
 80079c6:	601a      	str	r2, [r3, #0]
//	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	/*
	 * Request user input for mode configuration
	 */

	enable_adaptive_mode = ENABLE_ADAPTIVE_MODE;
 80079c8:	4b16      	ldr	r3, [pc, #88]	; (8007a24 <initialize+0x4a4>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
	adaptive_threshold_low = ADAPTIVE_THRESHOLD_LOW;
 80079ce:	4b16      	ldr	r3, [pc, #88]	; (8007a28 <initialize+0x4a8>)
 80079d0:	4a16      	ldr	r2, [pc, #88]	; (8007a2c <initialize+0x4ac>)
 80079d2:	601a      	str	r2, [r3, #0]
	adaptive_threshold_high = ADAPTIVE_THRESHOLD_HIGH;
 80079d4:	4b16      	ldr	r3, [pc, #88]	; (8007a30 <initialize+0x4b0>)
 80079d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80079da:	601a      	str	r2, [r3, #0]
	adaptive_state = ADAPTIVE_STATE;
 80079dc:	4b15      	ldr	r3, [pc, #84]	; (8007a34 <initialize+0x4b4>)
 80079de:	2200      	movs	r2, #0
 80079e0:	601a      	str	r2, [r3, #0]
	adaptive_state_change = 0;
 80079e2:	4b15      	ldr	r3, [pc, #84]	; (8007a38 <initialize+0x4b8>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	601a      	str	r2, [r3, #0]
	adaptive_dwell_period = ADAPTIVE_DWELL_PERIOD;
 80079e8:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <initialize+0x4bc>)
 80079ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80079ee:	601a      	str	r2, [r3, #0]

}
 80079f0:	bf00      	nop
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20000b80 	.word	0x20000b80
 80079f8:	20000a78 	.word	0x20000a78
 80079fc:	08008a51 	.word	0x08008a51
 8007a00:	08008a69 	.word	0x08008a69
 8007a04:	20000f10 	.word	0x20000f10
 8007a08:	20000a24 	.word	0x20000a24
 8007a0c:	00029040 	.word	0x00029040
 8007a10:	4ca037a0 	.word	0x4ca037a0
 8007a14:	20008038 	.word	0x20008038
 8007a18:	20000f88 	.word	0x20000f88
 8007a1c:	2000803c 	.word	0x2000803c
 8007a20:	20000f8c 	.word	0x20000f8c
 8007a24:	200049b8 	.word	0x200049b8
 8007a28:	20004998 	.word	0x20004998
 8007a2c:	41f00000 	.word	0x41f00000
 8007a30:	2000499c 	.word	0x2000499c
 8007a34:	200049bc 	.word	0x200049bc
 8007a38:	200049c0 	.word	0x200049c0
 8007a3c:	200049b4 	.word	0x200049b4

08007a40 <initialize_main_loop>:
void initialize_main_loop(){
 8007a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
	mode_interactive = 0;
 8007a48:	4b8b      	ldr	r3, [pc, #556]	; (8007c78 <initialize_main_loop+0x238>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]
	/* Flush read buffer  */
//	for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
//		Msg.Data[k] = 0;
//	}
	/* Start timer for configuration command read loop */
	tick_read_cycle_start = HAL_GetTick();
 8007a4e:	f7fc fc51 	bl	80042f4 <HAL_GetTick>
 8007a52:	4603      	mov	r3, r0
 8007a54:	4a89      	ldr	r2, [pc, #548]	; (8007c7c <initialize_main_loop+0x23c>)
 8007a56:	6013      	str	r3, [r2, #0]
	/* Configuration command read loop */
	user_configuration();
 8007a58:	f001 fa34 	bl	8008ec4 <user_configuration>

	/* Set Motor Speed Profile and torque current */
	BSP_MotorControl_SoftStop(0);
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	f7fc fa8d 	bl	8003f7c <BSP_MotorControl_SoftStop>
	BSP_MotorControl_WaitWhileActive(0);
 8007a62:	2000      	movs	r0, #0
 8007a64:	f7fc face 	bl	8004004 <BSP_MotorControl_WaitWhileActive>
	L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 8007a68:	4b85      	ldr	r3, [pc, #532]	; (8007c80 <initialize_main_loop+0x240>)
 8007a6a:	edd3 7a00 	vldr	s15, [r3]
 8007a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8007a72:	2109      	movs	r1, #9
 8007a74:	2000      	movs	r0, #0
 8007a76:	f7fa fa0d 	bl	8001e94 <L6474_SetAnalogValue>
	BSP_MotorControl_SetMaxSpeed(0, max_speed);
 8007a7a:	4b82      	ldr	r3, [pc, #520]	; (8007c84 <initialize_main_loop+0x244>)
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	2000      	movs	r0, #0
 8007a82:	f7fc fa2b 	bl	8003edc <BSP_MotorControl_SetMaxSpeed>
	BSP_MotorControl_SetMinSpeed(0, min_speed);
 8007a86:	4b80      	ldr	r3, [pc, #512]	; (8007c88 <initialize_main_loop+0x248>)
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	f7fc fa4d 	bl	8003f2c <BSP_MotorControl_SetMinSpeed>
	BSP_MotorControl_SetAcceleration(0, MAX_ACCEL);
 8007a92:	f241 7170 	movw	r1, #6000	; 0x1770
 8007a96:	2000      	movs	r0, #0
 8007a98:	f7fc f9ae 	bl	8003df8 <BSP_MotorControl_SetAcceleration>
	BSP_MotorControl_SetDeceleration(0, MAX_DECEL);
 8007a9c:	f241 7170 	movw	r1, #6000	; 0x1770
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	f7fc f9d1 	bl	8003e48 <BSP_MotorControl_SetDeceleration>
//				torq_current_val);
//		HAL_UART_Transmit(&huart2, (uint8_t*) msg,
//				strlen(msg), HAL_MAX_DELAY);

//	/* Motor Control Characterization Test*/
	if (enable_motor_actuator_characterization_mode == 1) {
 8007aa6:	4b79      	ldr	r3, [pc, #484]	; (8007c8c <initialize_main_loop+0x24c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <initialize_main_loop+0x72>
		motor_actuator_characterization_mode();
 8007aae:	f001 fa47 	bl	8008f40 <motor_actuator_characterization_mode>
	}
	/* Interactive digital motor control system */
	if (enable_rotor_actuator_control == 1) {
 8007ab2:	4b77      	ldr	r3, [pc, #476]	; (8007c90 <initialize_main_loop+0x250>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d101      	bne.n	8007abe <initialize_main_loop+0x7e>
		interactive_rotor_actuator_control();
 8007aba:	f001 ff91 	bl	80099e0 <interactive_rotor_actuator_control>
	 *
	 * *************************************************************************************************
	 */

	/* Setting enable_control_action enables control loop */
	enable_control_action = ENABLE_CONTROL_ACTION;
 8007abe:	4b75      	ldr	r3, [pc, #468]	; (8007c94 <initialize_main_loop+0x254>)
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	601a      	str	r2, [r3, #0]
	/*
	 * Set Motor Position Zero occuring only once after reset and suppressed thereafter
	 * to maintain angle calibration
	 */

	if (reset_state == 1){
 8007ac4:	4b74      	ldr	r3, [pc, #464]	; (8007c98 <initialize_main_loop+0x258>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d101      	bne.n	8007ad0 <initialize_main_loop+0x90>
		rotor_position_set();
 8007acc:	f001 f886 	bl	8008bdc <rotor_position_set>
	}

	//######## Jawad ************** Modification ########################################
	//SendGAMInput( COMMAND_INDEX_SEND_POSITION );

	ret = rotor_position_read(&rotor_position_steps);
 8007ad0:	4872      	ldr	r0, [pc, #456]	; (8007c9c <initialize_main_loop+0x25c>)
 8007ad2:	f001 f894 	bl	8008bfe <rotor_position_read>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	4a71      	ldr	r2, [pc, #452]	; (8007ca0 <initialize_main_loop+0x260>)
 8007ada:	6013      	str	r3, [r2, #0]
	 * A small stimulus is applied to ensure Pendulum will fall to Suspended orientation
	 * in the event that it may be finely balanced in the vertical position
	 *
	 */

	BSP_MotorControl_GoTo(0, 3);
 8007adc:	2103      	movs	r1, #3
 8007ade:	2000      	movs	r0, #0
 8007ae0:	f7fc f924 	bl	8003d2c <BSP_MotorControl_GoTo>
	BSP_MotorControl_WaitWhileActive(0);
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	f7fc fa8d 	bl	8004004 <BSP_MotorControl_WaitWhileActive>
	HAL_Delay(150);
 8007aea:	2096      	movs	r0, #150	; 0x96
 8007aec:	f7fc fc0e 	bl	800430c <HAL_Delay>
	BSP_MotorControl_GoTo(0, -3);
 8007af0:	f06f 0102 	mvn.w	r1, #2
 8007af4:	2000      	movs	r0, #0
 8007af6:	f7fc f919 	bl	8003d2c <BSP_MotorControl_GoTo>
	BSP_MotorControl_WaitWhileActive(0);
 8007afa:	2000      	movs	r0, #0
 8007afc:	f7fc fa82 	bl	8004004 <BSP_MotorControl_WaitWhileActive>
	HAL_Delay(150);
 8007b00:	2096      	movs	r0, #150	; 0x96
 8007b02:	f7fc fc03 	bl	800430c <HAL_Delay>
	BSP_MotorControl_GoTo(0, 3);
 8007b06:	2103      	movs	r1, #3
 8007b08:	2000      	movs	r0, #0
 8007b0a:	f7fc f90f 	bl	8003d2c <BSP_MotorControl_GoTo>
	BSP_MotorControl_WaitWhileActive(0);
 8007b0e:	2000      	movs	r0, #0
 8007b10:	f7fc fa78 	bl	8004004 <BSP_MotorControl_WaitWhileActive>
	HAL_Delay(150);
 8007b14:	2096      	movs	r0, #150	; 0x96
 8007b16:	f7fc fbf9 	bl	800430c <HAL_Delay>
	BSP_MotorControl_GoTo(0, 0);
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	f7fc f905 	bl	8003d2c <BSP_MotorControl_GoTo>
	BSP_MotorControl_WaitWhileActive(0);
 8007b22:	2000      	movs	r0, #0
 8007b24:	f7fc fa6e 	bl	8004004 <BSP_MotorControl_WaitWhileActive>

	sprintf(msg, "Test for Pendulum at Rest - Waiting for Pendulum to Stabilize\r\n");
 8007b28:	495e      	ldr	r1, [pc, #376]	; (8007ca4 <initialize_main_loop+0x264>)
 8007b2a:	485f      	ldr	r0, [pc, #380]	; (8007ca8 <initialize_main_loop+0x268>)
 8007b2c:	f003 fbe2 	bl	800b2f4 <sprintf>
	SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8007b30:	200a      	movs	r0, #10
 8007b32:	f002 f94d 	bl	8009dd0 <SendGAMInput>
	//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

	encoder_position_init = 0;
 8007b36:	4b5d      	ldr	r3, [pc, #372]	; (8007cac <initialize_main_loop+0x26c>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]
	ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007b3c:	4b5b      	ldr	r3, [pc, #364]	; (8007cac <initialize_main_loop+0x26c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a5b      	ldr	r2, [pc, #364]	; (8007cb0 <initialize_main_loop+0x270>)
 8007b42:	4619      	mov	r1, r3
 8007b44:	485b      	ldr	r0, [pc, #364]	; (8007cb4 <initialize_main_loop+0x274>)
 8007b46:	f000 ff9b 	bl	8008a80 <encoder_position_read>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	4a54      	ldr	r2, [pc, #336]	; (8007ca0 <initialize_main_loop+0x260>)
 8007b4e:	6013      	str	r3, [r2, #0]
	encoder_position_prev = encoder_position_steps;
 8007b50:	4b58      	ldr	r3, [pc, #352]	; (8007cb4 <initialize_main_loop+0x274>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a58      	ldr	r2, [pc, #352]	; (8007cb8 <initialize_main_loop+0x278>)
 8007b56:	6013      	str	r3, [r2, #0]
	HAL_Delay(INITIAL_PENDULUM_MOTION_TEST_DELAY);
 8007b58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007b5c:	f7fc fbd6 	bl	800430c <HAL_Delay>
	ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007b60:	4b52      	ldr	r3, [pc, #328]	; (8007cac <initialize_main_loop+0x26c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a52      	ldr	r2, [pc, #328]	; (8007cb0 <initialize_main_loop+0x270>)
 8007b66:	4619      	mov	r1, r3
 8007b68:	4852      	ldr	r0, [pc, #328]	; (8007cb4 <initialize_main_loop+0x274>)
 8007b6a:	f000 ff89 	bl	8008a80 <encoder_position_read>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	4a4b      	ldr	r2, [pc, #300]	; (8007ca0 <initialize_main_loop+0x260>)
 8007b72:	6013      	str	r3, [r2, #0]
	encoder_position_curr = encoder_position_steps;
 8007b74:	4b4f      	ldr	r3, [pc, #316]	; (8007cb4 <initialize_main_loop+0x274>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a50      	ldr	r2, [pc, #320]	; (8007cbc <initialize_main_loop+0x27c>)
 8007b7a:	6013      	str	r3, [r2, #0]
	while (encoder_position_curr != encoder_position_prev) {
 8007b7c:	e06f      	b.n	8007c5e <initialize_main_loop+0x21e>
		ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007b7e:	4b4b      	ldr	r3, [pc, #300]	; (8007cac <initialize_main_loop+0x26c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a4b      	ldr	r2, [pc, #300]	; (8007cb0 <initialize_main_loop+0x270>)
 8007b84:	4619      	mov	r1, r3
 8007b86:	484b      	ldr	r0, [pc, #300]	; (8007cb4 <initialize_main_loop+0x274>)
 8007b88:	f000 ff7a 	bl	8008a80 <encoder_position_read>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	4a44      	ldr	r2, [pc, #272]	; (8007ca0 <initialize_main_loop+0x260>)
 8007b90:	6013      	str	r3, [r2, #0]
		encoder_position_prev = encoder_position_steps;
 8007b92:	4b48      	ldr	r3, [pc, #288]	; (8007cb4 <initialize_main_loop+0x274>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a48      	ldr	r2, [pc, #288]	; (8007cb8 <initialize_main_loop+0x278>)
 8007b98:	6013      	str	r3, [r2, #0]
		HAL_Delay(INITIAL_PENDULUM_MOTION_TEST_DELAY);
 8007b9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007b9e:	f7fc fbb5 	bl	800430c <HAL_Delay>
		ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007ba2:	4b42      	ldr	r3, [pc, #264]	; (8007cac <initialize_main_loop+0x26c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a42      	ldr	r2, [pc, #264]	; (8007cb0 <initialize_main_loop+0x270>)
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4842      	ldr	r0, [pc, #264]	; (8007cb4 <initialize_main_loop+0x274>)
 8007bac:	f000 ff68 	bl	8008a80 <encoder_position_read>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	4a3b      	ldr	r2, [pc, #236]	; (8007ca0 <initialize_main_loop+0x260>)
 8007bb4:	6013      	str	r3, [r2, #0]
		encoder_position_curr = encoder_position_steps;
 8007bb6:	4b3f      	ldr	r3, [pc, #252]	; (8007cb4 <initialize_main_loop+0x274>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a40      	ldr	r2, [pc, #256]	; (8007cbc <initialize_main_loop+0x27c>)
 8007bbc:	6013      	str	r3, [r2, #0]

		/*
		 * Ensure stability reached with final motion test
		 */

		if (encoder_position_prev == encoder_position_curr) {
 8007bbe:	4b3e      	ldr	r3, [pc, #248]	; (8007cb8 <initialize_main_loop+0x278>)
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	4b3e      	ldr	r3, [pc, #248]	; (8007cbc <initialize_main_loop+0x27c>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d129      	bne.n	8007c1e <initialize_main_loop+0x1de>
			HAL_Delay(INITIAL_PENDULUM_MOTION_TEST_DELAY);
 8007bca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007bce:	f7fc fb9d 	bl	800430c <HAL_Delay>
			ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007bd2:	4b36      	ldr	r3, [pc, #216]	; (8007cac <initialize_main_loop+0x26c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a36      	ldr	r2, [pc, #216]	; (8007cb0 <initialize_main_loop+0x270>)
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4836      	ldr	r0, [pc, #216]	; (8007cb4 <initialize_main_loop+0x274>)
 8007bdc:	f000 ff50 	bl	8008a80 <encoder_position_read>
 8007be0:	4603      	mov	r3, r0
 8007be2:	4a2f      	ldr	r2, [pc, #188]	; (8007ca0 <initialize_main_loop+0x260>)
 8007be4:	6013      	str	r3, [r2, #0]
			encoder_position_prev = encoder_position_steps;
 8007be6:	4b33      	ldr	r3, [pc, #204]	; (8007cb4 <initialize_main_loop+0x274>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a33      	ldr	r2, [pc, #204]	; (8007cb8 <initialize_main_loop+0x278>)
 8007bec:	6013      	str	r3, [r2, #0]
			HAL_Delay(INITIAL_PENDULUM_MOTION_TEST_DELAY);
 8007bee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007bf2:	f7fc fb8b 	bl	800430c <HAL_Delay>
			ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007bf6:	4b2d      	ldr	r3, [pc, #180]	; (8007cac <initialize_main_loop+0x26c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a2d      	ldr	r2, [pc, #180]	; (8007cb0 <initialize_main_loop+0x270>)
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	482d      	ldr	r0, [pc, #180]	; (8007cb4 <initialize_main_loop+0x274>)
 8007c00:	f000 ff3e 	bl	8008a80 <encoder_position_read>
 8007c04:	4603      	mov	r3, r0
 8007c06:	4a26      	ldr	r2, [pc, #152]	; (8007ca0 <initialize_main_loop+0x260>)
 8007c08:	6013      	str	r3, [r2, #0]
			encoder_position_curr = encoder_position_steps;
 8007c0a:	4b2a      	ldr	r3, [pc, #168]	; (8007cb4 <initialize_main_loop+0x274>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a2b      	ldr	r2, [pc, #172]	; (8007cbc <initialize_main_loop+0x27c>)
 8007c10:	6013      	str	r3, [r2, #0]
			if (encoder_position_prev == encoder_position_curr) {
 8007c12:	4b29      	ldr	r3, [pc, #164]	; (8007cb8 <initialize_main_loop+0x278>)
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	4b29      	ldr	r3, [pc, #164]	; (8007cbc <initialize_main_loop+0x27c>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d052      	beq.n	8007cc4 <initialize_main_loop+0x284>
				break;
			}
		}
		/* Alert user of undesired motion */
		sprintf(msg, "Pendulum Motion Detected with angle %0.2f - Waiting for Pendulum to Stabilize\r\n",
				(float) ((encoder_position_curr - encoder_position_prev)
 8007c1e:	4b27      	ldr	r3, [pc, #156]	; (8007cbc <initialize_main_loop+0x27c>)
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b25      	ldr	r3, [pc, #148]	; (8007cb8 <initialize_main_loop+0x278>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	1ad3      	subs	r3, r2, r3
						/ ENCODER_READ_ANGLE_SCALE));
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7f8 fc93 	bl	8000554 <__aeabi_i2d>
 8007c2e:	a310      	add	r3, pc, #64	; (adr r3, 8007c70 <initialize_main_loop+0x230>)
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	f7f8 fe22 	bl	800087c <__aeabi_ddiv>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
				(float) ((encoder_position_curr - encoder_position_prev)
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4619      	mov	r1, r3
 8007c40:	f7f8 ffea 	bl	8000c18 <__aeabi_d2f>
 8007c44:	4603      	mov	r3, r0
		sprintf(msg, "Pendulum Motion Detected with angle %0.2f - Waiting for Pendulum to Stabilize\r\n",
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7f8 fc96 	bl	8000578 <__aeabi_f2d>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	491b      	ldr	r1, [pc, #108]	; (8007cc0 <initialize_main_loop+0x280>)
 8007c52:	4815      	ldr	r0, [pc, #84]	; (8007ca8 <initialize_main_loop+0x268>)
 8007c54:	f003 fb4e 	bl	800b2f4 <sprintf>
		SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8007c58:	200a      	movs	r0, #10
 8007c5a:	f002 f8b9 	bl	8009dd0 <SendGAMInput>
	while (encoder_position_curr != encoder_position_prev) {
 8007c5e:	4b17      	ldr	r3, [pc, #92]	; (8007cbc <initialize_main_loop+0x27c>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	4b15      	ldr	r3, [pc, #84]	; (8007cb8 <initialize_main_loop+0x278>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d189      	bne.n	8007b7e <initialize_main_loop+0x13e>
 8007c6a:	e02c      	b.n	8007cc6 <initialize_main_loop+0x286>
 8007c6c:	f3af 8000 	nop.w
 8007c70:	c1094a2c 	.word	0xc1094a2c
 8007c74:	401aaaaa 	.word	0x401aaaaa
 8007c78:	20004c38 	.word	0x20004c38
 8007c7c:	20008014 	.word	0x20008014
 8007c80:	200049fc 	.word	0x200049fc
 8007c84:	20008052 	.word	0x20008052
 8007c88:	20008050 	.word	0x20008050
 8007c8c:	200049f4 	.word	0x200049f4
 8007c90:	200049e8 	.word	0x200049e8
 8007c94:	20000a28 	.word	0x20000a28
 8007c98:	2000804c 	.word	0x2000804c
 8007c9c:	20000fd0 	.word	0x20000fd0
 8007ca0:	20000f74 	.word	0x20000f74
 8007ca4:	080116e8 	.word	0x080116e8
 8007ca8:	20000d74 	.word	0x20000d74
 8007cac:	20001078 	.word	0x20001078
 8007cb0:	20000f10 	.word	0x20000f10
 8007cb4:	20001074 	.word	0x20001074
 8007cb8:	20001094 	.word	0x20001094
 8007cbc:	20001090 	.word	0x20001090
 8007cc0:	08011728 	.word	0x08011728
				break;
 8007cc4:	bf00      	nop
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	}

	sprintf(msg, "Pendulum Now at Rest and Measuring Pendulum Down Angle\r\n");
 8007cc6:	4979      	ldr	r1, [pc, #484]	; (8007eac <initialize_main_loop+0x46c>)
 8007cc8:	4879      	ldr	r0, [pc, #484]	; (8007eb0 <initialize_main_loop+0x470>)
 8007cca:	f003 fb13 	bl	800b2f4 <sprintf>
	SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8007cce:	200a      	movs	r0, #10
 8007cd0:	f002 f87e 	bl	8009dd0 <SendGAMInput>

	/*
	 * Initialize Pendulum Angle Read offset by setting encoder_position_init
	 */

	HAL_Delay(100);
 8007cd4:	2064      	movs	r0, #100	; 0x64
 8007cd6:	f7fc fb19 	bl	800430c <HAL_Delay>
	ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007cda:	4b76      	ldr	r3, [pc, #472]	; (8007eb4 <initialize_main_loop+0x474>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a76      	ldr	r2, [pc, #472]	; (8007eb8 <initialize_main_loop+0x478>)
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4876      	ldr	r0, [pc, #472]	; (8007ebc <initialize_main_loop+0x47c>)
 8007ce4:	f000 fecc 	bl	8008a80 <encoder_position_read>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	4a75      	ldr	r2, [pc, #468]	; (8007ec0 <initialize_main_loop+0x480>)
 8007cec:	6013      	str	r3, [r2, #0]
	encoder_position_init = encoder_position_steps;
 8007cee:	4b73      	ldr	r3, [pc, #460]	; (8007ebc <initialize_main_loop+0x47c>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a70      	ldr	r2, [pc, #448]	; (8007eb4 <initialize_main_loop+0x474>)
 8007cf4:	6013      	str	r3, [r2, #0]

	if (ret == -1) {
 8007cf6:	4b72      	ldr	r3, [pc, #456]	; (8007ec0 <initialize_main_loop+0x480>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfe:	d106      	bne.n	8007d0e <initialize_main_loop+0x2ce>
		sprintf(msg, "Encoder Position Under Range Error\r\n");
 8007d00:	4970      	ldr	r1, [pc, #448]	; (8007ec4 <initialize_main_loop+0x484>)
 8007d02:	486b      	ldr	r0, [pc, #428]	; (8007eb0 <initialize_main_loop+0x470>)
 8007d04:	f003 faf6 	bl	800b2f4 <sprintf>
		SendGAMInput( COMMAND_INDEX_SEND_STATUS_ERROR );
 8007d08:	200b      	movs	r0, #11
 8007d0a:	f002 f861 	bl	8009dd0 <SendGAMInput>
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	}
	if (ret == 1) {
 8007d0e:	4b6c      	ldr	r3, [pc, #432]	; (8007ec0 <initialize_main_loop+0x480>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d106      	bne.n	8007d24 <initialize_main_loop+0x2e4>
		sprintf(msg, "Encoder Position Over Range Error\r\n");
 8007d16:	496c      	ldr	r1, [pc, #432]	; (8007ec8 <initialize_main_loop+0x488>)
 8007d18:	4865      	ldr	r0, [pc, #404]	; (8007eb0 <initialize_main_loop+0x470>)
 8007d1a:	f003 faeb 	bl	800b2f4 <sprintf>
		SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8007d1e:	200a      	movs	r0, #10
 8007d20:	f002 f856 	bl	8009dd0 <SendGAMInput>
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	}

	ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007d24:	4b63      	ldr	r3, [pc, #396]	; (8007eb4 <initialize_main_loop+0x474>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a63      	ldr	r2, [pc, #396]	; (8007eb8 <initialize_main_loop+0x478>)
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	4863      	ldr	r0, [pc, #396]	; (8007ebc <initialize_main_loop+0x47c>)
 8007d2e:	f000 fea7 	bl	8008a80 <encoder_position_read>
 8007d32:	4603      	mov	r3, r0
 8007d34:	4a62      	ldr	r2, [pc, #392]	; (8007ec0 <initialize_main_loop+0x480>)
 8007d36:	6013      	str	r3, [r2, #0]
	encoder_position_down = encoder_position_steps;
 8007d38:	4b60      	ldr	r3, [pc, #384]	; (8007ebc <initialize_main_loop+0x47c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a63      	ldr	r2, [pc, #396]	; (8007ecc <initialize_main_loop+0x48c>)
 8007d3e:	6013      	str	r3, [r2, #0]
	//sprintf(msg, "Pendulum Initial Angle %i\r\n", encoder_position_steps);
	//SendGAMInput( COMMAND_INDEX_SEND_POSITION );
	//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);


	if (enable_swing_up == 0){
 8007d40:	4b63      	ldr	r3, [pc, #396]	; (8007ed0 <initialize_main_loop+0x490>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d130      	bne.n	8007daa <initialize_main_loop+0x36a>
		/*
		 * Alert user with rotor motion prompt to adjust pendulum upright by
		 */
		BSP_MotorControl_GoTo(0, 30);
 8007d48:	211e      	movs	r1, #30
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	f7fb ffee 	bl	8003d2c <BSP_MotorControl_GoTo>
		BSP_MotorControl_WaitWhileActive(0);
 8007d50:	2000      	movs	r0, #0
 8007d52:	f7fc f957 	bl	8004004 <BSP_MotorControl_WaitWhileActive>
		HAL_Delay(150);
 8007d56:	2096      	movs	r0, #150	; 0x96
 8007d58:	f7fc fad8 	bl	800430c <HAL_Delay>
		BSP_MotorControl_GoTo(0, -30);
 8007d5c:	f06f 011d 	mvn.w	r1, #29
 8007d60:	2000      	movs	r0, #0
 8007d62:	f7fb ffe3 	bl	8003d2c <BSP_MotorControl_GoTo>
		BSP_MotorControl_WaitWhileActive(0);
 8007d66:	2000      	movs	r0, #0
 8007d68:	f7fc f94c 	bl	8004004 <BSP_MotorControl_WaitWhileActive>
		HAL_Delay(150);
 8007d6c:	2096      	movs	r0, #150	; 0x96
 8007d6e:	f7fc facd 	bl	800430c <HAL_Delay>
		BSP_MotorControl_GoTo(0, 30);
 8007d72:	211e      	movs	r1, #30
 8007d74:	2000      	movs	r0, #0
 8007d76:	f7fb ffd9 	bl	8003d2c <BSP_MotorControl_GoTo>
		BSP_MotorControl_WaitWhileActive(0);
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	f7fc f942 	bl	8004004 <BSP_MotorControl_WaitWhileActive>
		HAL_Delay(150);
 8007d80:	2096      	movs	r0, #150	; 0x96
 8007d82:	f7fc fac3 	bl	800430c <HAL_Delay>
		BSP_MotorControl_GoTo(0, 0);
 8007d86:	2100      	movs	r1, #0
 8007d88:	2000      	movs	r0, #0
 8007d8a:	f7fb ffcf 	bl	8003d2c <BSP_MotorControl_GoTo>
		BSP_MotorControl_WaitWhileActive(0);
 8007d8e:	2000      	movs	r0, #0
 8007d90:	f7fc f938 	bl	8004004 <BSP_MotorControl_WaitWhileActive>

		/* Request user action to bring pendulum upright */
		if(select_suspended_mode == 0){
 8007d94:	4b4f      	ldr	r3, [pc, #316]	; (8007ed4 <initialize_main_loop+0x494>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d106      	bne.n	8007daa <initialize_main_loop+0x36a>
			sprintf(msg, "Adjust Pendulum Upright By Turning CCW Control Will Start When Vertical\r\n");
 8007d9c:	494e      	ldr	r1, [pc, #312]	; (8007ed8 <initialize_main_loop+0x498>)
 8007d9e:	4844      	ldr	r0, [pc, #272]	; (8007eb0 <initialize_main_loop+0x470>)
 8007da0:	f003 faa8 	bl	800b2f4 <sprintf>
			SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8007da4:	200a      	movs	r0, #10
 8007da6:	f002 f813 	bl	8009dd0 <SendGAMInput>

	/*
	 * System start option with manual lifting of Pendulum to vertical by user
	 */

	if (enable_swing_up == 0){
 8007daa:	4b49      	ldr	r3, [pc, #292]	; (8007ed0 <initialize_main_loop+0x490>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f040 80b3 	bne.w	8007f1a <initialize_main_loop+0x4da>

		tick_wait_start = HAL_GetTick();
 8007db4:	f7fc fa9e 	bl	80042f4 <HAL_GetTick>
 8007db8:	4603      	mov	r3, r0
 8007dba:	4a48      	ldr	r2, [pc, #288]	; (8007edc <initialize_main_loop+0x49c>)
 8007dbc:	6013      	str	r3, [r2, #0]
		if (select_suspended_mode == 0) {
 8007dbe:	4b45      	ldr	r3, [pc, #276]	; (8007ed4 <initialize_main_loop+0x494>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f040 80a9 	bne.w	8007f1a <initialize_main_loop+0x4da>
			while (1){
				ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007dc8:	4b3a      	ldr	r3, [pc, #232]	; (8007eb4 <initialize_main_loop+0x474>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a3a      	ldr	r2, [pc, #232]	; (8007eb8 <initialize_main_loop+0x478>)
 8007dce:	4619      	mov	r1, r3
 8007dd0:	483a      	ldr	r0, [pc, #232]	; (8007ebc <initialize_main_loop+0x47c>)
 8007dd2:	f000 fe55 	bl	8008a80 <encoder_position_read>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	4a39      	ldr	r2, [pc, #228]	; (8007ec0 <initialize_main_loop+0x480>)
 8007dda:	6013      	str	r3, [r2, #0]
				if (fabs(encoder_position_steps - encoder_position_down - (int) (180 * angle_scale)) < START_ANGLE * angle_scale){
 8007ddc:	4b37      	ldr	r3, [pc, #220]	; (8007ebc <initialize_main_loop+0x47c>)
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	4b3a      	ldr	r3, [pc, #232]	; (8007ecc <initialize_main_loop+0x48c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	4a3e      	ldr	r2, [pc, #248]	; (8007ee0 <initialize_main_loop+0x4a0>)
 8007de8:	edd2 7a00 	vldr	s15, [r2]
 8007dec:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8007ee4 <initialize_main_loop+0x4a4>
 8007df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007df8:	ee17 2a90 	vmov	r2, s15
 8007dfc:	1a9b      	subs	r3, r3, r2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7f8 fba8 	bl	8000554 <__aeabi_i2d>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4692      	mov	sl, r2
 8007e0a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8007e0e:	4b34      	ldr	r3, [pc, #208]	; (8007ee0 <initialize_main_loop+0x4a0>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7f8 fbb0 	bl	8000578 <__aeabi_f2d>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4650      	mov	r0, sl
 8007e1e:	4659      	mov	r1, fp
 8007e20:	f7f8 fe74 	bl	8000b0c <__aeabi_dcmplt>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <initialize_main_loop+0x3f2>
					HAL_Delay(START_ANGLE_DELAY);
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	f7fc fa6e 	bl	800430c <HAL_Delay>
					break;
 8007e30:	e073      	b.n	8007f1a <initialize_main_loop+0x4da>
				}
				if (fabs(encoder_position_steps - encoder_position_down + (int)(180 * angle_scale)) < START_ANGLE * angle_scale){
 8007e32:	4b22      	ldr	r3, [pc, #136]	; (8007ebc <initialize_main_loop+0x47c>)
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	4b25      	ldr	r3, [pc, #148]	; (8007ecc <initialize_main_loop+0x48c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	4a28      	ldr	r2, [pc, #160]	; (8007ee0 <initialize_main_loop+0x4a0>)
 8007e3e:	edd2 7a00 	vldr	s15, [r2]
 8007e42:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007ee4 <initialize_main_loop+0x4a4>
 8007e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e4e:	ee17 2a90 	vmov	r2, s15
 8007e52:	4413      	add	r3, r2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7f8 fb7d 	bl	8000554 <__aeabi_i2d>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	603a      	str	r2, [r7, #0]
 8007e60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e64:	607b      	str	r3, [r7, #4]
 8007e66:	4b1e      	ldr	r3, [pc, #120]	; (8007ee0 <initialize_main_loop+0x4a0>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7f8 fb84 	bl	8000578 <__aeabi_f2d>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e78:	f7f8 fe48 	bl	8000b0c <__aeabi_dcmplt>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d032      	beq.n	8007ee8 <initialize_main_loop+0x4a8>
					encoder_position_down = encoder_position_down - 2*(int)(180 * angle_scale);
 8007e82:	4b12      	ldr	r3, [pc, #72]	; (8007ecc <initialize_main_loop+0x48c>)
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	4b16      	ldr	r3, [pc, #88]	; (8007ee0 <initialize_main_loop+0x4a0>)
 8007e88:	edd3 7a00 	vldr	s15, [r3]
 8007e8c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8007ee4 <initialize_main_loop+0x4a4>
 8007e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e98:	ee17 3a90 	vmov	r3, s15
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	4a0a      	ldr	r2, [pc, #40]	; (8007ecc <initialize_main_loop+0x48c>)
 8007ea2:	6013      	str	r3, [r2, #0]
					HAL_Delay(START_ANGLE_DELAY);
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	f7fc fa31 	bl	800430c <HAL_Delay>
					break;
 8007eaa:	e036      	b.n	8007f1a <initialize_main_loop+0x4da>
 8007eac:	08011778 	.word	0x08011778
 8007eb0:	20000d74 	.word	0x20000d74
 8007eb4:	20001078 	.word	0x20001078
 8007eb8:	20000f10 	.word	0x20000f10
 8007ebc:	20001074 	.word	0x20001074
 8007ec0:	20000f74 	.word	0x20000f74
 8007ec4:	080117b4 	.word	0x080117b4
 8007ec8:	080117dc 	.word	0x080117dc
 8007ecc:	2000108c 	.word	0x2000108c
 8007ed0:	2000491c 	.word	0x2000491c
 8007ed4:	200049dc 	.word	0x200049dc
 8007ed8:	08011800 	.word	0x08011800
 8007edc:	20008018 	.word	0x20008018
 8007ee0:	20008044 	.word	0x20008044
 8007ee4:	43340000 	.word	0x43340000
				}
				tick_wait = HAL_GetTick();
 8007ee8:	f7fc fa04 	bl	80042f4 <HAL_GetTick>
 8007eec:	4603      	mov	r3, r0
 8007eee:	4a62      	ldr	r2, [pc, #392]	; (8008078 <initialize_main_loop+0x638>)
 8007ef0:	6013      	str	r3, [r2, #0]

				if ( (tick_wait - tick_wait_start) > PENDULUM_ORIENTATION_START_DELAY){
 8007ef2:	4b61      	ldr	r3, [pc, #388]	; (8008078 <initialize_main_loop+0x638>)
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	4b61      	ldr	r3, [pc, #388]	; (800807c <initialize_main_loop+0x63c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	f242 7210 	movw	r2, #10000	; 0x2710
 8007f00:	4293      	cmp	r3, r2
 8007f02:	f67f af61 	bls.w	8007dc8 <initialize_main_loop+0x388>
					sprintf(msg, "Pendulum Upright Action Not Detected - Restarting ...\r\n");
 8007f06:	495e      	ldr	r1, [pc, #376]	; (8008080 <initialize_main_loop+0x640>)
 8007f08:	485e      	ldr	r0, [pc, #376]	; (8008084 <initialize_main_loop+0x644>)
 8007f0a:	f003 f9f3 	bl	800b2f4 <sprintf>
					SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8007f0e:	200a      	movs	r0, #10
 8007f10:	f001 ff5e 	bl	8009dd0 <SendGAMInput>
					//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
					enable_control_action = 0;
 8007f14:	4b5c      	ldr	r3, [pc, #368]	; (8008088 <initialize_main_loop+0x648>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]
	/*
	 * For case of Suspended Mode Operation, no initial condition check is required
	 * for pendulum down angle.
	 */

	if(select_suspended_mode == 1){
 8007f1a:	4b5c      	ldr	r3, [pc, #368]	; (800808c <initialize_main_loop+0x64c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d107      	bne.n	8007f32 <initialize_main_loop+0x4f2>
		sprintf(msg, "Suspended Mode Control Will Start in %i Seconds\r\n", (int) (CONTROL_START_DELAY / 1000));
 8007f22:	2201      	movs	r2, #1
 8007f24:	495a      	ldr	r1, [pc, #360]	; (8008090 <initialize_main_loop+0x650>)
 8007f26:	4857      	ldr	r0, [pc, #348]	; (8008084 <initialize_main_loop+0x644>)
 8007f28:	f003 f9e4 	bl	800b2f4 <sprintf>
		SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8007f2c:	200a      	movs	r0, #10
 8007f2e:	f001 ff4f 	bl	8009dd0 <SendGAMInput>
//		pid_filter_control_execute(&PID_Rotor, current_error_rotor_steps,
//				sample_period_rotor, Deriv_Filt_Rotor);

	/* Initialize control system variables */

	cycle_count = CYCLE_LIMIT;
 8007f32:	4b58      	ldr	r3, [pc, #352]	; (8008094 <initialize_main_loop+0x654>)
 8007f34:	4a58      	ldr	r2, [pc, #352]	; (8008098 <initialize_main_loop+0x658>)
 8007f36:	601a      	str	r2, [r3, #0]
	i = 0;
 8007f38:	4b58      	ldr	r3, [pc, #352]	; (800809c <initialize_main_loop+0x65c>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]
	rotor_position_steps = 0;
 8007f3e:	4b58      	ldr	r3, [pc, #352]	; (80080a0 <initialize_main_loop+0x660>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]
	rotor_position_steps_prev = 0;
 8007f44:	4b57      	ldr	r3, [pc, #348]	; (80080a4 <initialize_main_loop+0x664>)
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	601a      	str	r2, [r3, #0]
	rotor_position_filter_steps = 0;
 8007f4c:	4b56      	ldr	r3, [pc, #344]	; (80080a8 <initialize_main_loop+0x668>)
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	601a      	str	r2, [r3, #0]
	rotor_position_filter_steps_prev = 0;
 8007f54:	4b55      	ldr	r3, [pc, #340]	; (80080ac <initialize_main_loop+0x66c>)
 8007f56:	f04f 0200 	mov.w	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
	rotor_position_command_steps = 0;
 8007f5c:	4b54      	ldr	r3, [pc, #336]	; (80080b0 <initialize_main_loop+0x670>)
 8007f5e:	f04f 0200 	mov.w	r2, #0
 8007f62:	601a      	str	r2, [r3, #0]
	rotor_position_diff = 0;
 8007f64:	4b53      	ldr	r3, [pc, #332]	; (80080b4 <initialize_main_loop+0x674>)
 8007f66:	f04f 0200 	mov.w	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
	rotor_position_diff_prev = 0;
 8007f6c:	4b52      	ldr	r3, [pc, #328]	; (80080b8 <initialize_main_loop+0x678>)
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	601a      	str	r2, [r3, #0]
	rotor_position_diff_filter = 0;
 8007f74:	4b51      	ldr	r3, [pc, #324]	; (80080bc <initialize_main_loop+0x67c>)
 8007f76:	f04f 0200 	mov.w	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]
	rotor_position_diff_filter_prev = 0;
 8007f7c:	4b50      	ldr	r3, [pc, #320]	; (80080c0 <initialize_main_loop+0x680>)
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
	rotor_position_step_polarity = 1;
 8007f84:	4b4f      	ldr	r3, [pc, #316]	; (80080c4 <initialize_main_loop+0x684>)
 8007f86:	2201      	movs	r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
	encoder_angle_slope_corr_steps = 0;
 8007f8a:	4b4f      	ldr	r3, [pc, #316]	; (80080c8 <initialize_main_loop+0x688>)
 8007f8c:	f04f 0200 	mov.w	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]
	rotor_sine_drive = 0;
 8007f92:	4b4e      	ldr	r3, [pc, #312]	; (80080cc <initialize_main_loop+0x68c>)
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]
	sine_drive_transition = 0;
 8007f9a:	4b4d      	ldr	r3, [pc, #308]	; (80080d0 <initialize_main_loop+0x690>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]
	rotor_mod_control = 1.0;
 8007fa0:	4b4c      	ldr	r3, [pc, #304]	; (80080d4 <initialize_main_loop+0x694>)
 8007fa2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007fa6:	601a      	str	r2, [r3, #0]
	enable_adaptive_mode = 0;
 8007fa8:	4b4b      	ldr	r3, [pc, #300]	; (80080d8 <initialize_main_loop+0x698>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
	tick_cycle_start = HAL_GetTick();
 8007fae:	f7fc f9a1 	bl	80042f4 <HAL_GetTick>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	4a49      	ldr	r2, [pc, #292]	; (80080dc <initialize_main_loop+0x69c>)
 8007fb6:	6013      	str	r3, [r2, #0]
	tick_cycle_previous = tick_cycle_start;
 8007fb8:	4b48      	ldr	r3, [pc, #288]	; (80080dc <initialize_main_loop+0x69c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a48      	ldr	r2, [pc, #288]	; (80080e0 <initialize_main_loop+0x6a0>)
 8007fbe:	6013      	str	r3, [r2, #0]
	tick_cycle_current =  tick_cycle_start;
 8007fc0:	4b46      	ldr	r3, [pc, #280]	; (80080dc <initialize_main_loop+0x69c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a47      	ldr	r2, [pc, #284]	; (80080e4 <initialize_main_loop+0x6a4>)
 8007fc6:	6013      	str	r3, [r2, #0]
	enable_cycle_delay_warning = ENABLE_CYCLE_DELAY_WARNING;
 8007fc8:	4b47      	ldr	r3, [pc, #284]	; (80080e8 <initialize_main_loop+0x6a8>)
 8007fca:	2201      	movs	r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]
	chirp_cycle = 0;
 8007fce:	4b47      	ldr	r3, [pc, #284]	; (80080ec <initialize_main_loop+0x6ac>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	601a      	str	r2, [r3, #0]
	chirp_dwell_cycle = 0;
 8007fd4:	4b46      	ldr	r3, [pc, #280]	; (80080f0 <initialize_main_loop+0x6b0>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	601a      	str	r2, [r3, #0]
	pendulum_position_command_steps = 0;
 8007fda:	4b46      	ldr	r3, [pc, #280]	; (80080f4 <initialize_main_loop+0x6b4>)
 8007fdc:	f04f 0200 	mov.w	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]
	impulse_start_index = 0;
 8007fe2:	4b45      	ldr	r3, [pc, #276]	; (80080f8 <initialize_main_loop+0x6b8>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	601a      	str	r2, [r3, #0]
	mode_transition_state = 0;
 8007fe8:	4b44      	ldr	r3, [pc, #272]	; (80080fc <initialize_main_loop+0x6bc>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	601a      	str	r2, [r3, #0]
	transition_to_adaptive_mode = 0;
 8007fee:	4b44      	ldr	r3, [pc, #272]	; (8008100 <initialize_main_loop+0x6c0>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	601a      	str	r2, [r3, #0]
	error_sum_prev = 0;
 8007ff4:	4b43      	ldr	r3, [pc, #268]	; (8008104 <initialize_main_loop+0x6c4>)
 8007ff6:	f04f 0200 	mov.w	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]
	error_sum_filter_prev = 0;
 8007ffc:	4b42      	ldr	r3, [pc, #264]	; (8008108 <initialize_main_loop+0x6c8>)
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	601a      	str	r2, [r3, #0]
	adaptive_state = 4;
 8008004:	4b41      	ldr	r3, [pc, #260]	; (800810c <initialize_main_loop+0x6cc>)
 8008006:	2204      	movs	r2, #4
 8008008:	601a      	str	r2, [r3, #0]
	rotor_control_target_steps_prev = 0;
 800800a:	4b41      	ldr	r3, [pc, #260]	; (8008110 <initialize_main_loop+0x6d0>)
 800800c:	f04f 0200 	mov.w	r2, #0
 8008010:	601a      	str	r2, [r3, #0]
	rotor_position_command_steps_prev = 0;
 8008012:	4b40      	ldr	r3, [pc, #256]	; (8008114 <initialize_main_loop+0x6d4>)
 8008014:	f04f 0200 	mov.w	r2, #0
 8008018:	601a      	str	r2, [r3, #0]
	rotor_position_command_steps_pf_prev = 0;
 800801a:	4b3f      	ldr	r3, [pc, #252]	; (8008118 <initialize_main_loop+0x6d8>)
 800801c:	f04f 0200 	mov.w	r2, #0
 8008020:	601a      	str	r2, [r3, #0]
	enable_high_speed_sampling = ENABLE_HIGH_SPEED_SAMPLING_MODE;
 8008022:	4b3e      	ldr	r3, [pc, #248]	; (800811c <initialize_main_loop+0x6dc>)
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]
	slope_prev = 0;
 8008028:	4b3d      	ldr	r3, [pc, #244]	; (8008120 <initialize_main_loop+0x6e0>)
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
	rotor_track_comb_command = 0;
 800802e:	4b3d      	ldr	r3, [pc, #244]	; (8008124 <initialize_main_loop+0x6e4>)
 8008030:	f04f 0200 	mov.w	r2, #0
 8008034:	601a      	str	r2, [r3, #0]
	noise_rej_signal_prev = 0;
 8008036:	4b3c      	ldr	r3, [pc, #240]	; (8008128 <initialize_main_loop+0x6e8>)
 8008038:	f04f 0200 	mov.w	r2, #0
 800803c:	601a      	str	r2, [r3, #0]
	noise_rej_signal_filter_prev = 0;
 800803e:	4b3b      	ldr	r3, [pc, #236]	; (800812c <initialize_main_loop+0x6ec>)
 8008040:	f04f 0200 	mov.w	r2, #0
 8008044:	601a      	str	r2, [r3, #0]
	full_sysid_start_index = -1;
 8008046:	4b3a      	ldr	r3, [pc, #232]	; (8008130 <initialize_main_loop+0x6f0>)
 8008048:	f04f 32ff 	mov.w	r2, #4294967295
 800804c:	601a      	str	r2, [r3, #0]
	current_cpu_cycle = 0;
 800804e:	4b39      	ldr	r3, [pc, #228]	; (8008134 <initialize_main_loop+0x6f4>)
 8008050:	2200      	movs	r2, #0
 8008052:	601a      	str	r2, [r3, #0]
	speed_scale = DATA_REPORT_SPEED_SCALE;
 8008054:	4b38      	ldr	r3, [pc, #224]	; (8008138 <initialize_main_loop+0x6f8>)
 8008056:	2214      	movs	r2, #20
 8008058:	601a      	str	r2, [r3, #0]
	speed_governor = 0;
 800805a:	4b38      	ldr	r3, [pc, #224]	; (800813c <initialize_main_loop+0x6fc>)
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]
	encoder_position_offset = 0;
 8008060:	4b37      	ldr	r3, [pc, #220]	; (8008140 <initialize_main_loop+0x700>)
 8008062:	f04f 0200 	mov.w	r2, #0
 8008066:	601a      	str	r2, [r3, #0]
	encoder_position_offset_zero = 0;
 8008068:	4b36      	ldr	r3, [pc, #216]	; (8008144 <initialize_main_loop+0x704>)
 800806a:	f04f 0200 	mov.w	r2, #0
 800806e:	601a      	str	r2, [r3, #0]

	for (m = 0; m < ANGLE_CAL_OFFSET_STEP_COUNT + 1; m++){
 8008070:	4b35      	ldr	r3, [pc, #212]	; (8008148 <initialize_main_loop+0x708>)
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	e074      	b.n	8008162 <initialize_main_loop+0x722>
 8008078:	2000801c 	.word	0x2000801c
 800807c:	20008018 	.word	0x20008018
 8008080:	0801184c 	.word	0x0801184c
 8008084:	20000d74 	.word	0x20000d74
 8008088:	20000a28 	.word	0x20000a28
 800808c:	200049dc 	.word	0x200049dc
 8008090:	08011884 	.word	0x08011884
 8008094:	20000f60 	.word	0x20000f60
 8008098:	000186a0 	.word	0x000186a0
 800809c:	20000f64 	.word	0x20000f64
 80080a0:	20000fd0 	.word	0x20000fd0
 80080a4:	20000fe4 	.word	0x20000fe4
 80080a8:	20000fe8 	.word	0x20000fe8
 80080ac:	20000fec 	.word	0x20000fec
 80080b0:	20000fd4 	.word	0x20000fd4
 80080b4:	20000ff0 	.word	0x20000ff0
 80080b8:	20000ff4 	.word	0x20000ff4
 80080bc:	20000ff8 	.word	0x20000ff8
 80080c0:	20000ffc 	.word	0x20000ffc
 80080c4:	200049c8 	.word	0x200049c8
 80080c8:	20004990 	.word	0x20004990
 80080cc:	20004a44 	.word	0x20004a44
 80080d0:	20004a38 	.word	0x20004a38
 80080d4:	20004a4c 	.word	0x20004a4c
 80080d8:	200049b8 	.word	0x200049b8
 80080dc:	2000800c 	.word	0x2000800c
 80080e0:	20008008 	.word	0x20008008
 80080e4:	20008004 	.word	0x20008004
 80080e8:	20000f98 	.word	0x20000f98
 80080ec:	20004a04 	.word	0x20004a04
 80080f0:	20004a08 	.word	0x20004a08
 80080f4:	20004a28 	.word	0x20004a28
 80080f8:	200049cc 	.word	0x200049cc
 80080fc:	20004c48 	.word	0x20004c48
 8008100:	20004c4c 	.word	0x20004c4c
 8008104:	200049a0 	.word	0x200049a0
 8008108:	200049a8 	.word	0x200049a8
 800810c:	200049bc 	.word	0x200049bc
 8008110:	20000f54 	.word	0x20000f54
 8008114:	200049c4 	.word	0x200049c4
 8008118:	20000fdc 	.word	0x20000fdc
 800811c:	20008048 	.word	0x20008048
 8008120:	2000498c 	.word	0x2000498c
 8008124:	20004b94 	.word	0x20004b94
 8008128:	20004bb8 	.word	0x20004bb8
 800812c:	20004bbc 	.word	0x20004bbc
 8008130:	20004b88 	.word	0x20004b88
 8008134:	20008020 	.word	0x20008020
 8008138:	20004be8 	.word	0x20004be8
 800813c:	20004bec 	.word	0x20004bec
 8008140:	20001098 	.word	0x20001098
 8008144:	2000109c 	.word	0x2000109c
 8008148:	20000f70 	.word	0x20000f70
		offset_angle[m] = 0;
 800814c:	4b6b      	ldr	r3, [pc, #428]	; (80082fc <initialize_main_loop+0x8bc>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a6b      	ldr	r2, [pc, #428]	; (8008300 <initialize_main_loop+0x8c0>)
 8008152:	2100      	movs	r1, #0
 8008154:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (m = 0; m < ANGLE_CAL_OFFSET_STEP_COUNT + 1; m++){
 8008158:	4b68      	ldr	r3, [pc, #416]	; (80082fc <initialize_main_loop+0x8bc>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3301      	adds	r3, #1
 800815e:	4a67      	ldr	r2, [pc, #412]	; (80082fc <initialize_main_loop+0x8bc>)
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	4b66      	ldr	r3, [pc, #408]	; (80082fc <initialize_main_loop+0x8bc>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f240 7209 	movw	r2, #1801	; 0x709
 800816a:	4293      	cmp	r3, r2
 800816c:	ddee      	ble.n	800814c <initialize_main_loop+0x70c>
	/* Clear read buffer */
//	for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
//		Msg.Data[k] = 0;
//	}
	/* Initialize UART receive system */
	__HAL_DMA_RESET_HANDLE_STATE(&hdma_usart2_rx);
 800816e:	4b65      	ldr	r3, [pc, #404]	; (8008304 <initialize_main_loop+0x8c4>)
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
//		int init_enable_sensitivity_fnc_step = enable_sensitivity_fnc_step;
//		int init_enable_noise_rejection_step = enable_noise_rejection_step;
//		int init_enable_rotor_plant_design = enable_rotor_plant_design;
//		int init_enable_rotor_plant_gain_design = enable_rotor_plant_gain_design;

	if(select_suspended_mode == 1){
 8008176:	4b64      	ldr	r3, [pc, #400]	; (8008308 <initialize_main_loop+0x8c8>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d103      	bne.n	8008186 <initialize_main_loop+0x746>
		load_disturbance_sensitivity_scale = 1.0;
 800817e:	4b63      	ldr	r3, [pc, #396]	; (800830c <initialize_main_loop+0x8cc>)
 8008180:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008184:	601a      	str	r2, [r3, #0]
	}
	if(select_suspended_mode == 0){
 8008186:	4b60      	ldr	r3, [pc, #384]	; (8008308 <initialize_main_loop+0x8c8>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d102      	bne.n	8008194 <initialize_main_loop+0x754>
		load_disturbance_sensitivity_scale = LOAD_DISTURBANCE_SENSITIVITY_SCALE;
 800818e:	4b5f      	ldr	r3, [pc, #380]	; (800830c <initialize_main_loop+0x8cc>)
 8008190:	4a5f      	ldr	r2, [pc, #380]	; (8008310 <initialize_main_loop+0x8d0>)
 8008192:	601a      	str	r2, [r3, #0]
	 * https://github.com/OevreFlataeker/steval_edukit_swingup
	 *
	 */


	if (enable_swing_up == 1 && select_suspended_mode == 0){
 8008194:	4b5f      	ldr	r3, [pc, #380]	; (8008314 <initialize_main_loop+0x8d4>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b01      	cmp	r3, #1
 800819a:	f040 8166 	bne.w	800846a <initialize_main_loop+0xa2a>
 800819e:	4b5a      	ldr	r3, [pc, #360]	; (8008308 <initialize_main_loop+0x8c8>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f040 8161 	bne.w	800846a <initialize_main_loop+0xa2a>
//			enable_noise_rejection_step = 0;
//			enable_rotor_plant_design = 0;
//			enable_rotor_plant_gain_design = 0;

		/* Set Torque Current value to 800 mA (normal operation will revert to 400 mA */
		torq_current_val = MAX_TORQUE_SWING_UP;
 80081a8:	4b5b      	ldr	r3, [pc, #364]	; (8008318 <initialize_main_loop+0x8d8>)
 80081aa:	4a5c      	ldr	r2, [pc, #368]	; (800831c <initialize_main_loop+0x8dc>)
 80081ac:	601a      	str	r2, [r3, #0]
		L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 80081ae:	4b5a      	ldr	r3, [pc, #360]	; (8008318 <initialize_main_loop+0x8d8>)
 80081b0:	edd3 7a00 	vldr	s15, [r3]
 80081b4:	eeb0 0a67 	vmov.f32	s0, s15
 80081b8:	2109      	movs	r1, #9
 80081ba:	2000      	movs	r0, #0
 80081bc:	f7f9 fe6a 	bl	8001e94 <L6474_SetAnalogValue>

		sprintf(msg, "Pendulum Swing Up Starting\r\n");
 80081c0:	4957      	ldr	r1, [pc, #348]	; (8008320 <initialize_main_loop+0x8e0>)
 80081c2:	4858      	ldr	r0, [pc, #352]	; (8008324 <initialize_main_loop+0x8e4>)
 80081c4:	f003 f896 	bl	800b2f4 <sprintf>
		SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 80081c8:	200a      	movs	r0, #10
 80081ca:	f001 fe01 	bl	8009dd0 <SendGAMInput>
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

		/* Initialize position and motion variables */
		max_encoder_position = 0;
 80081ce:	4b56      	ldr	r3, [pc, #344]	; (8008328 <initialize_main_loop+0x8e8>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]
		global_max_encoder_position = 0;
 80081d4:	4b55      	ldr	r3, [pc, #340]	; (800832c <initialize_main_loop+0x8ec>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	601a      	str	r2, [r3, #0]
		peaked = 0;
 80081da:	4b55      	ldr	r3, [pc, #340]	; (8008330 <initialize_main_loop+0x8f0>)
 80081dc:	2200      	movs	r2, #0
 80081de:	701a      	strb	r2, [r3, #0]
		handled_peak = 0;
 80081e0:	4b54      	ldr	r3, [pc, #336]	; (8008334 <initialize_main_loop+0x8f4>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	701a      	strb	r2, [r3, #0]
		swing_up_state = 0;
 80081e6:	4b54      	ldr	r3, [pc, #336]	; (8008338 <initialize_main_loop+0x8f8>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]
		swing_up_state_prev = 0;
 80081ec:	4b53      	ldr	r3, [pc, #332]	; (800833c <initialize_main_loop+0x8fc>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	601a      	str	r2, [r3, #0]
		zero_crossed = 0;
 80081f2:	4b53      	ldr	r3, [pc, #332]	; (8008340 <initialize_main_loop+0x900>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]
		stage_count = 0;
 80081f8:	4b52      	ldr	r3, [pc, #328]	; (8008344 <initialize_main_loop+0x904>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]
		/* Select initial amplitude for rotor impulse */
		stage_amp = STAGE_0_AMP;
 80081fe:	4b52      	ldr	r3, [pc, #328]	; (8008348 <initialize_main_loop+0x908>)
 8008200:	22c8      	movs	r2, #200	; 0xc8
 8008202:	601a      	str	r2, [r3, #0]

		//sprintf(tmp_string,"Current Position Down %0.2f\r\n", encoder_position_down/angle_scale);
		//HAL_UART_Transmit(&huart2, (uint8_t*) tmp_string, strlen(tmp_string), HAL_MAX_DELAY);

		/* Initiate first swing */
		swing_up_direction = FORWARD;
 8008204:	4b51      	ldr	r3, [pc, #324]	; (800834c <initialize_main_loop+0x90c>)
 8008206:	2201      	movs	r2, #1
 8008208:	701a      	strb	r2, [r3, #0]
		BSP_MotorControl_Move(0, swing_up_direction, 150);
 800820a:	4b50      	ldr	r3, [pc, #320]	; (800834c <initialize_main_loop+0x90c>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	2296      	movs	r2, #150	; 0x96
 8008210:	4619      	mov	r1, r3
 8008212:	2000      	movs	r0, #0
 8008214:	f7fb fdcc 	bl	8003db0 <BSP_MotorControl_Move>
		BSP_MotorControl_WaitWhileActive(0);
 8008218:	2000      	movs	r0, #0
 800821a:	f7fb fef3 	bl	8004004 <BSP_MotorControl_WaitWhileActive>

		/* Enter Swing Up Loop */
		while (1)
		{
			//break;
			HAL_Delay(2);
 800821e:	2002      	movs	r0, #2
 8008220:	f7fc f874 	bl	800430c <HAL_Delay>
			ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8008224:	4b4a      	ldr	r3, [pc, #296]	; (8008350 <initialize_main_loop+0x910>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a4a      	ldr	r2, [pc, #296]	; (8008354 <initialize_main_loop+0x914>)
 800822a:	4619      	mov	r1, r3
 800822c:	484a      	ldr	r0, [pc, #296]	; (8008358 <initialize_main_loop+0x918>)
 800822e:	f000 fc27 	bl	8008a80 <encoder_position_read>
 8008232:	4603      	mov	r3, r0
 8008234:	4a49      	ldr	r2, [pc, #292]	; (800835c <initialize_main_loop+0x91c>)
 8008236:	6013      	str	r3, [r2, #0]
			/* Optional Swing Up progress reporting */
			//sprintf(tmp_string,"Rotor Impulse Amplitude %i Max Angle (degrees) %0.3f\r\n", stage_amp, fabs((float)(global_max_encoder_position)/(ENCODER_READ_ANGLE_SCALE)));
			//HAL_UART_Transmit(&huart2, (uint8_t*) tmp_string, strlen(tmp_string), HAL_MAX_DELAY);

			/* Break if pendulum angle relative to vertical meets tolerance (for clockwise or counter clockwise approach */
			if (fabs(encoder_position_steps - encoder_position_down - (int) (180 * angle_scale)) < START_ANGLE * angle_scale){
 8008238:	4b47      	ldr	r3, [pc, #284]	; (8008358 <initialize_main_loop+0x918>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	4b48      	ldr	r3, [pc, #288]	; (8008360 <initialize_main_loop+0x920>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	4a48      	ldr	r2, [pc, #288]	; (8008364 <initialize_main_loop+0x924>)
 8008244:	edd2 7a00 	vldr	s15, [r2]
 8008248:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8008368 <initialize_main_loop+0x928>
 800824c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008250:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008254:	ee17 2a90 	vmov	r2, s15
 8008258:	1a9b      	subs	r3, r3, r2
 800825a:	4618      	mov	r0, r3
 800825c:	f7f8 f97a 	bl	8000554 <__aeabi_i2d>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	4614      	mov	r4, r2
 8008266:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800826a:	4b3e      	ldr	r3, [pc, #248]	; (8008364 <initialize_main_loop+0x924>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4618      	mov	r0, r3
 8008270:	f7f8 f982 	bl	8000578 <__aeabi_f2d>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4620      	mov	r0, r4
 800827a:	4629      	mov	r1, r5
 800827c:	f7f8 fc46 	bl	8000b0c <__aeabi_dcmplt>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	f040 80f0 	bne.w	8008468 <initialize_main_loop+0xa28>
				break;
			}
			if (fabs(encoder_position_steps - encoder_position_down + (int)(180 * angle_scale)) < START_ANGLE * angle_scale){
 8008288:	4b33      	ldr	r3, [pc, #204]	; (8008358 <initialize_main_loop+0x918>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	4b34      	ldr	r3, [pc, #208]	; (8008360 <initialize_main_loop+0x920>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	4a34      	ldr	r2, [pc, #208]	; (8008364 <initialize_main_loop+0x924>)
 8008294:	edd2 7a00 	vldr	s15, [r2]
 8008298:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8008368 <initialize_main_loop+0x928>
 800829c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80082a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082a4:	ee17 2a90 	vmov	r2, s15
 80082a8:	4413      	add	r3, r2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7f8 f952 	bl	8000554 <__aeabi_i2d>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4690      	mov	r8, r2
 80082b6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80082ba:	4b2a      	ldr	r3, [pc, #168]	; (8008364 <initialize_main_loop+0x924>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4618      	mov	r0, r3
 80082c0:	f7f8 f95a 	bl	8000578 <__aeabi_f2d>
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	4640      	mov	r0, r8
 80082ca:	4649      	mov	r1, r9
 80082cc:	f7f8 fc1e 	bl	8000b0c <__aeabi_dcmplt>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d04a      	beq.n	800836c <initialize_main_loop+0x92c>
				encoder_position_down = encoder_position_down - 2*(int)(180 * angle_scale);
 80082d6:	4b22      	ldr	r3, [pc, #136]	; (8008360 <initialize_main_loop+0x920>)
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	4b22      	ldr	r3, [pc, #136]	; (8008364 <initialize_main_loop+0x924>)
 80082dc:	edd3 7a00 	vldr	s15, [r3]
 80082e0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8008368 <initialize_main_loop+0x928>
 80082e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80082e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082ec:	ee17 3a90 	vmov	r3, s15
 80082f0:	005b      	lsls	r3, r3, #1
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	4a1a      	ldr	r2, [pc, #104]	; (8008360 <initialize_main_loop+0x920>)
 80082f6:	6013      	str	r3, [r2, #0]
				break;
 80082f8:	e0b7      	b.n	800846a <initialize_main_loop+0xa2a>
 80082fa:	bf00      	nop
 80082fc:	20000f70 	.word	0x20000f70
 8008300:	200010bc 	.word	0x200010bc
 8008304:	20000ab8 	.word	0x20000ab8
 8008308:	200049dc 	.word	0x200049dc
 800830c:	20004bac 	.word	0x20004bac
 8008310:	41a00000 	.word	0x41a00000
 8008314:	2000491c 	.word	0x2000491c
 8008318:	200049fc 	.word	0x200049fc
 800831c:	44480000 	.word	0x44480000
 8008320:	080118b8 	.word	0x080118b8
 8008324:	20000d74 	.word	0x20000d74
 8008328:	20001080 	.word	0x20001080
 800832c:	20001084 	.word	0x20001084
 8008330:	20004924 	.word	0x20004924
 8008334:	20004925 	.word	0x20004925
 8008338:	20004930 	.word	0x20004930
 800833c:	20004934 	.word	0x20004934
 8008340:	20004928 	.word	0x20004928
 8008344:	20004938 	.word	0x20004938
 8008348:	2000493c 	.word	0x2000493c
 800834c:	2000492c 	.word	0x2000492c
 8008350:	20001078 	.word	0x20001078
 8008354:	20000f10 	.word	0x20000f10
 8008358:	20001074 	.word	0x20001074
 800835c:	20000f74 	.word	0x20000f74
 8008360:	2000108c 	.word	0x2000108c
 8008364:	20008044 	.word	0x20008044
 8008368:	43340000 	.word	0x43340000
			}

			if (zero_crossed)
 800836c:	4b6c      	ldr	r3, [pc, #432]	; (8008520 <initialize_main_loop+0xae0>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d05e      	beq.n	8008432 <initialize_main_loop+0x9f2>
			{
				zero_crossed = 0;
 8008374:	4b6a      	ldr	r3, [pc, #424]	; (8008520 <initialize_main_loop+0xae0>)
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
				// Push it aka put some more kinetic energy into the pendulum
				if (swing_up_state == 0){
 800837a:	4b6a      	ldr	r3, [pc, #424]	; (8008524 <initialize_main_loop+0xae4>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d157      	bne.n	8008432 <initialize_main_loop+0x9f2>
					BSP_MotorControl_Move(0, swing_up_direction, stage_amp);
 8008382:	4b69      	ldr	r3, [pc, #420]	; (8008528 <initialize_main_loop+0xae8>)
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	4a69      	ldr	r2, [pc, #420]	; (800852c <initialize_main_loop+0xaec>)
 8008388:	6812      	ldr	r2, [r2, #0]
 800838a:	4619      	mov	r1, r3
 800838c:	2000      	movs	r0, #0
 800838e:	f7fb fd0f 	bl	8003db0 <BSP_MotorControl_Move>
					BSP_MotorControl_WaitWhileActive(0);
 8008392:	2000      	movs	r0, #0
 8008394:	f7fb fe36 	bl	8004004 <BSP_MotorControl_WaitWhileActive>
					stage_count++;
 8008398:	4b65      	ldr	r3, [pc, #404]	; (8008530 <initialize_main_loop+0xaf0>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3301      	adds	r3, #1
 800839e:	4a64      	ldr	r2, [pc, #400]	; (8008530 <initialize_main_loop+0xaf0>)
 80083a0:	6013      	str	r3, [r2, #0]

					if (prev_global_max_encoder_position != global_max_encoder_position && stage_count > 4){
 80083a2:	4b64      	ldr	r3, [pc, #400]	; (8008534 <initialize_main_loop+0xaf4>)
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4b64      	ldr	r3, [pc, #400]	; (8008538 <initialize_main_loop+0xaf8>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d030      	beq.n	8008410 <initialize_main_loop+0x9d0>
 80083ae:	4b60      	ldr	r3, [pc, #384]	; (8008530 <initialize_main_loop+0xaf0>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b04      	cmp	r3, #4
 80083b4:	dd2c      	ble.n	8008410 <initialize_main_loop+0x9d0>
					if (abs(global_max_encoder_position) < 600){
 80083b6:	4b60      	ldr	r3, [pc, #384]	; (8008538 <initialize_main_loop+0xaf8>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f513 7f16 	cmn.w	r3, #600	; 0x258
 80083be:	dd07      	ble.n	80083d0 <initialize_main_loop+0x990>
 80083c0:	4b5d      	ldr	r3, [pc, #372]	; (8008538 <initialize_main_loop+0xaf8>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80083c8:	da02      	bge.n	80083d0 <initialize_main_loop+0x990>
						stage_amp = STAGE_0_AMP;
 80083ca:	4b58      	ldr	r3, [pc, #352]	; (800852c <initialize_main_loop+0xaec>)
 80083cc:	22c8      	movs	r2, #200	; 0xc8
 80083ce:	601a      	str	r2, [r3, #0]
					}
					if (abs(global_max_encoder_position) >= 600 && abs(global_max_encoder_position) < 1000){
 80083d0:	4b59      	ldr	r3, [pc, #356]	; (8008538 <initialize_main_loop+0xaf8>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bfb8      	it	lt
 80083d8:	425b      	neglt	r3, r3
 80083da:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80083de:	db0c      	blt.n	80083fa <initialize_main_loop+0x9ba>
 80083e0:	4b55      	ldr	r3, [pc, #340]	; (8008538 <initialize_main_loop+0xaf8>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80083e8:	dd07      	ble.n	80083fa <initialize_main_loop+0x9ba>
 80083ea:	4b53      	ldr	r3, [pc, #332]	; (8008538 <initialize_main_loop+0xaf8>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083f2:	da02      	bge.n	80083fa <initialize_main_loop+0x9ba>
						stage_amp = STAGE_1_AMP;
 80083f4:	4b4d      	ldr	r3, [pc, #308]	; (800852c <initialize_main_loop+0xaec>)
 80083f6:	2282      	movs	r2, #130	; 0x82
 80083f8:	601a      	str	r2, [r3, #0]
					}
					if (abs(global_max_encoder_position) >= 1000){
 80083fa:	4b4f      	ldr	r3, [pc, #316]	; (8008538 <initialize_main_loop+0xaf8>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	bfb8      	it	lt
 8008402:	425b      	neglt	r3, r3
 8008404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008408:	db02      	blt.n	8008410 <initialize_main_loop+0x9d0>
						stage_amp = STAGE_2_AMP;
 800840a:	4b48      	ldr	r3, [pc, #288]	; (800852c <initialize_main_loop+0xaec>)
 800840c:	2278      	movs	r2, #120	; 0x78
 800840e:	601a      	str	r2, [r3, #0]
					}
					}
					prev_global_max_encoder_position = global_max_encoder_position;
 8008410:	4b49      	ldr	r3, [pc, #292]	; (8008538 <initialize_main_loop+0xaf8>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a47      	ldr	r2, [pc, #284]	; (8008534 <initialize_main_loop+0xaf4>)
 8008416:	6013      	str	r3, [r2, #0]
					global_max_encoder_position = 0;
 8008418:	4b47      	ldr	r3, [pc, #284]	; (8008538 <initialize_main_loop+0xaf8>)
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
					ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 800841e:	4b47      	ldr	r3, [pc, #284]	; (800853c <initialize_main_loop+0xafc>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a47      	ldr	r2, [pc, #284]	; (8008540 <initialize_main_loop+0xb00>)
 8008424:	4619      	mov	r1, r3
 8008426:	4847      	ldr	r0, [pc, #284]	; (8008544 <initialize_main_loop+0xb04>)
 8008428:	f000 fb2a 	bl	8008a80 <encoder_position_read>
 800842c:	4603      	mov	r3, r0
 800842e:	4a46      	ldr	r2, [pc, #280]	; (8008548 <initialize_main_loop+0xb08>)
 8008430:	6013      	str	r3, [r2, #0]
				}
			}


			// We have a peak but did not handle it yet
			if (peaked && !handled_peak)
 8008432:	4b46      	ldr	r3, [pc, #280]	; (800854c <initialize_main_loop+0xb0c>)
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	f43f aef1 	beq.w	800821e <initialize_main_loop+0x7de>
 800843c:	4b44      	ldr	r3, [pc, #272]	; (8008550 <initialize_main_loop+0xb10>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f47f aeec 	bne.w	800821e <initialize_main_loop+0x7de>
			{
				// Ensure we only enter this branch one per peak
				handled_peak = 1;
 8008446:	4b42      	ldr	r3, [pc, #264]	; (8008550 <initialize_main_loop+0xb10>)
 8008448:	2201      	movs	r2, #1
 800844a:	701a      	strb	r2, [r3, #0]
				// Reset maximum encoder value to reassess after crossing the bottom
				max_encoder_position = 0;
 800844c:	4b41      	ldr	r3, [pc, #260]	; (8008554 <initialize_main_loop+0xb14>)
 800844e:	2200      	movs	r2, #0
 8008450:	601a      	str	r2, [r3, #0]
				// Switch motor direction
				swing_up_direction = swing_up_direction == FORWARD ? BACKWARD : FORWARD;
 8008452:	4b35      	ldr	r3, [pc, #212]	; (8008528 <initialize_main_loop+0xae8>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	2b01      	cmp	r3, #1
 8008458:	bf14      	ite	ne
 800845a:	2301      	movne	r3, #1
 800845c:	2300      	moveq	r3, #0
 800845e:	b2db      	uxtb	r3, r3
 8008460:	461a      	mov	r2, r3
 8008462:	4b31      	ldr	r3, [pc, #196]	; (8008528 <initialize_main_loop+0xae8>)
 8008464:	701a      	strb	r2, [r3, #0]
			HAL_Delay(2);
 8008466:	e6da      	b.n	800821e <initialize_main_loop+0x7de>
				break;
 8008468:	bf00      	nop
		}
	}



	enable_control_action = 1;
 800846a:	4b3b      	ldr	r3, [pc, #236]	; (8008558 <initialize_main_loop+0xb18>)
 800846c:	2201      	movs	r2, #1
 800846e:	601a      	str	r2, [r3, #0]

	if (ACCEL_CONTROL == 1) {
		BSP_MotorControl_HardStop(0);
 8008470:	2000      	movs	r0, #0
 8008472:	f7fb fc7d 	bl	8003d70 <BSP_MotorControl_HardStop>
		L6474_CmdEnable(0);
 8008476:	2000      	movs	r0, #0
 8008478:	f7f8 fe00 	bl	800107c <L6474_CmdEnable>
		target_velocity_prescaled = 0;
 800847c:	4b37      	ldr	r3, [pc, #220]	; (800855c <initialize_main_loop+0xb1c>)
 800847e:	f04f 0200 	mov.w	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
		L6474_Board_SetDirectionGpio(0, BACKWARD);
 8008484:	2100      	movs	r1, #0
 8008486:	2000      	movs	r0, #0
 8008488:	f7fb fa2e 	bl	80038e8 <L6474_Board_SetDirectionGpio>
	}

	/*
	 * Set Torque Current to value for normal operation
	 */
	torq_current_val = MAX_TORQUE_CONFIG;
 800848c:	4b34      	ldr	r3, [pc, #208]	; (8008560 <initialize_main_loop+0xb20>)
 800848e:	4a35      	ldr	r2, [pc, #212]	; (8008564 <initialize_main_loop+0xb24>)
 8008490:	601a      	str	r2, [r3, #0]
	L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 8008492:	4b33      	ldr	r3, [pc, #204]	; (8008560 <initialize_main_loop+0xb20>)
 8008494:	edd3 7a00 	vldr	s15, [r3]
 8008498:	eeb0 0a67 	vmov.f32	s0, s15
 800849c:	2109      	movs	r1, #9
 800849e:	2000      	movs	r0, #0
 80084a0:	f7f9 fcf8 	bl	8001e94 <L6474_SetAnalogValue>

	target_cpu_cycle = DWT->CYCCNT;
 80084a4:	4b30      	ldr	r3, [pc, #192]	; (8008568 <initialize_main_loop+0xb28>)
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	4a30      	ldr	r2, [pc, #192]	; (800856c <initialize_main_loop+0xb2c>)
 80084aa:	6013      	str	r3, [r2, #0]
	prev_cpu_cycle = DWT->CYCCNT;
 80084ac:	4b2e      	ldr	r3, [pc, #184]	; (8008568 <initialize_main_loop+0xb28>)
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	4a2f      	ldr	r2, [pc, #188]	; (8008570 <initialize_main_loop+0xb30>)
 80084b2:	6013      	str	r3, [r2, #0]

	ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 80084b4:	4b21      	ldr	r3, [pc, #132]	; (800853c <initialize_main_loop+0xafc>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a21      	ldr	r2, [pc, #132]	; (8008540 <initialize_main_loop+0xb00>)
 80084ba:	4619      	mov	r1, r3
 80084bc:	4821      	ldr	r0, [pc, #132]	; (8008544 <initialize_main_loop+0xb04>)
 80084be:	f000 fadf 	bl	8008a80 <encoder_position_read>
 80084c2:	4603      	mov	r3, r0
 80084c4:	4a20      	ldr	r2, [pc, #128]	; (8008548 <initialize_main_loop+0xb08>)
 80084c6:	6013      	str	r3, [r2, #0]
	if (select_suspended_mode == 0) {
 80084c8:	4b2a      	ldr	r3, [pc, #168]	; (8008574 <initialize_main_loop+0xb34>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d122      	bne.n	8008516 <initialize_main_loop+0xad6>
		encoder_position = encoder_position_steps - encoder_position_down - (int)(180 * angle_scale);
 80084d0:	4b1c      	ldr	r3, [pc, #112]	; (8008544 <initialize_main_loop+0xb04>)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	4b28      	ldr	r3, [pc, #160]	; (8008578 <initialize_main_loop+0xb38>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	4a28      	ldr	r2, [pc, #160]	; (800857c <initialize_main_loop+0xb3c>)
 80084dc:	edd2 7a00 	vldr	s15, [r2]
 80084e0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8008580 <initialize_main_loop+0xb40>
 80084e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80084e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084ec:	ee17 2a90 	vmov	r2, s15
 80084f0:	1a9b      	subs	r3, r3, r2
 80084f2:	ee07 3a90 	vmov	s15, r3
 80084f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084fa:	4b22      	ldr	r3, [pc, #136]	; (8008584 <initialize_main_loop+0xb44>)
 80084fc:	edc3 7a00 	vstr	s15, [r3]
		encoder_position = encoder_position - encoder_position_offset;
 8008500:	4b20      	ldr	r3, [pc, #128]	; (8008584 <initialize_main_loop+0xb44>)
 8008502:	ed93 7a00 	vldr	s14, [r3]
 8008506:	4b20      	ldr	r3, [pc, #128]	; (8008588 <initialize_main_loop+0xb48>)
 8008508:	edd3 7a00 	vldr	s15, [r3]
 800850c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008510:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <initialize_main_loop+0xb44>)
 8008512:	edc3 7a00 	vstr	s15, [r3]
//				encoder_position = encoder_position_steps - encoder_position_down - (int)(180 * angle_scale);
//				encoder_position = encoder_position - encoder_position_offset;
//			}
//			return encoder_position;
//		}
}
 8008516:	bf00      	nop
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008520:	20004928 	.word	0x20004928
 8008524:	20004930 	.word	0x20004930
 8008528:	2000492c 	.word	0x2000492c
 800852c:	2000493c 	.word	0x2000493c
 8008530:	20004938 	.word	0x20004938
 8008534:	20001088 	.word	0x20001088
 8008538:	20001084 	.word	0x20001084
 800853c:	20001078 	.word	0x20001078
 8008540:	20000f10 	.word	0x20000f10
 8008544:	20001074 	.word	0x20001074
 8008548:	20000f74 	.word	0x20000f74
 800854c:	20004924 	.word	0x20004924
 8008550:	20004925 	.word	0x20004925
 8008554:	20001080 	.word	0x20001080
 8008558:	20000a28 	.word	0x20000a28
 800855c:	20000c6c 	.word	0x20000c6c
 8008560:	200049fc 	.word	0x200049fc
 8008564:	44480000 	.word	0x44480000
 8008568:	e0001000 	.word	0xe0001000
 800856c:	2000802c 	.word	0x2000802c
 8008570:	20008024 	.word	0x20008024
 8008574:	200049dc 	.word	0x200049dc
 8008578:	2000108c 	.word	0x2000108c
 800857c:	20008044 	.word	0x20008044
 8008580:	43340000 	.word	0x43340000
 8008584:	20001070 	.word	0x20001070
 8008588:	20001098 	.word	0x20001098

0800858c <setControlCycle>:



}

bool setControlCycle(){
 800858c:	b580      	push	{r7, lr}
 800858e:	af00      	add	r7, sp, #0
	/* Compute 100 cycle time average of cycle period for system performance measurement */
	if(i == 1){
 8008590:	4b5e      	ldr	r3, [pc, #376]	; (800870c <setControlCycle+0x180>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d11a      	bne.n	80085ce <setControlCycle+0x42>
		cycle_period_start = HAL_GetTick();
 8008598:	f7fb feac 	bl	80042f4 <HAL_GetTick>
 800859c:	4603      	mov	r3, r0
 800859e:	461a      	mov	r2, r3
 80085a0:	4b5b      	ldr	r3, [pc, #364]	; (8008710 <setControlCycle+0x184>)
 80085a2:	601a      	str	r2, [r3, #0]
		cycle_period_sum = 100*Tsample*1000 - 1;
 80085a4:	4b5b      	ldr	r3, [pc, #364]	; (8008714 <setControlCycle+0x188>)
 80085a6:	edd3 7a00 	vldr	s15, [r3]
 80085aa:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8008718 <setControlCycle+0x18c>
 80085ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80085b2:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800871c <setControlCycle+0x190>
 80085b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80085ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085c6:	ee17 2a90 	vmov	r2, s15
 80085ca:	4b55      	ldr	r3, [pc, #340]	; (8008720 <setControlCycle+0x194>)
 80085cc:	601a      	str	r2, [r3, #0]
	}
	if(i % 100 == 0){
 80085ce:	4b4f      	ldr	r3, [pc, #316]	; (800870c <setControlCycle+0x180>)
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	4b54      	ldr	r3, [pc, #336]	; (8008724 <setControlCycle+0x198>)
 80085d4:	fb83 1302 	smull	r1, r3, r3, r2
 80085d8:	1159      	asrs	r1, r3, #5
 80085da:	17d3      	asrs	r3, r2, #31
 80085dc:	1acb      	subs	r3, r1, r3
 80085de:	2164      	movs	r1, #100	; 0x64
 80085e0:	fb01 f303 	mul.w	r3, r1, r3
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10e      	bne.n	8008608 <setControlCycle+0x7c>
		cycle_period_sum = HAL_GetTick() - cycle_period_start;
 80085ea:	f7fb fe83 	bl	80042f4 <HAL_GetTick>
 80085ee:	4603      	mov	r3, r0
 80085f0:	4a47      	ldr	r2, [pc, #284]	; (8008710 <setControlCycle+0x184>)
 80085f2:	6812      	ldr	r2, [r2, #0]
 80085f4:	1a9b      	subs	r3, r3, r2
 80085f6:	461a      	mov	r2, r3
 80085f8:	4b49      	ldr	r3, [pc, #292]	; (8008720 <setControlCycle+0x194>)
 80085fa:	601a      	str	r2, [r3, #0]
		cycle_period_start = HAL_GetTick();
 80085fc:	f7fb fe7a 	bl	80042f4 <HAL_GetTick>
 8008600:	4603      	mov	r3, r0
 8008602:	461a      	mov	r2, r3
 8008604:	4b42      	ldr	r3, [pc, #264]	; (8008710 <setControlCycle+0x184>)
 8008606:	601a      	str	r2, [r3, #0]
	}
	tick = HAL_GetTick();
 8008608:	f7fb fe74 	bl	80042f4 <HAL_GetTick>
 800860c:	4603      	mov	r3, r0
 800860e:	4a46      	ldr	r2, [pc, #280]	; (8008728 <setControlCycle+0x19c>)
 8008610:	6013      	str	r3, [r2, #0]
	tick_cycle_previous = tick_cycle_current;
 8008612:	4b46      	ldr	r3, [pc, #280]	; (800872c <setControlCycle+0x1a0>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a46      	ldr	r2, [pc, #280]	; (8008730 <setControlCycle+0x1a4>)
 8008618:	6013      	str	r3, [r2, #0]
	tick_cycle_current = tick;
 800861a:	4b43      	ldr	r3, [pc, #268]	; (8008728 <setControlCycle+0x19c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a43      	ldr	r2, [pc, #268]	; (800872c <setControlCycle+0x1a0>)
 8008620:	6013      	str	r3, [r2, #0]


	prev_target_cpu_cycle = target_cpu_cycle;
 8008622:	4b44      	ldr	r3, [pc, #272]	; (8008734 <setControlCycle+0x1a8>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a44      	ldr	r2, [pc, #272]	; (8008738 <setControlCycle+0x1ac>)
 8008628:	6013      	str	r3, [r2, #0]
	target_cpu_cycle += t_sample_cpu_cycles; // Increment target_cpu_cycle by sample time
 800862a:	4b42      	ldr	r3, [pc, #264]	; (8008734 <setControlCycle+0x1a8>)
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	4b43      	ldr	r3, [pc, #268]	; (800873c <setControlCycle+0x1b0>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4413      	add	r3, r2
 8008634:	4a3f      	ldr	r2, [pc, #252]	; (8008734 <setControlCycle+0x1a8>)
 8008636:	6013      	str	r3, [r2, #0]

	current_cpu_cycle = DWT->CYCCNT;
 8008638:	4b41      	ldr	r3, [pc, #260]	; (8008740 <setControlCycle+0x1b4>)
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	4a41      	ldr	r2, [pc, #260]	; (8008744 <setControlCycle+0x1b8>)
 800863e:	6013      	str	r3, [r2, #0]

	// If there is time left until target_cpu_cycle
	if (((int) (target_cpu_cycle - current_cpu_cycle)) > 0) {
 8008640:	4b3c      	ldr	r3, [pc, #240]	; (8008734 <setControlCycle+0x1a8>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	4b3f      	ldr	r3, [pc, #252]	; (8008744 <setControlCycle+0x1b8>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	dd19      	ble.n	8008682 <setControlCycle+0xf6>

		// If DWT->CYCCNT needs to overflow first
		if (current_cpu_cycle > target_cpu_cycle) {
 800864e:	4b3d      	ldr	r3, [pc, #244]	; (8008744 <setControlCycle+0x1b8>)
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	4b38      	ldr	r3, [pc, #224]	; (8008734 <setControlCycle+0x1a8>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	429a      	cmp	r2, r3
 8008658:	d90d      	bls.n	8008676 <setControlCycle+0xea>
			// Wait for DWT->CYCCNT to overflow
			do {
				last_cpu_cycle = current_cpu_cycle;
 800865a:	4b3a      	ldr	r3, [pc, #232]	; (8008744 <setControlCycle+0x1b8>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a3a      	ldr	r2, [pc, #232]	; (8008748 <setControlCycle+0x1bc>)
 8008660:	6013      	str	r3, [r2, #0]
				current_cpu_cycle = DWT->CYCCNT;
 8008662:	4b37      	ldr	r3, [pc, #220]	; (8008740 <setControlCycle+0x1b4>)
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	4a37      	ldr	r2, [pc, #220]	; (8008744 <setControlCycle+0x1b8>)
 8008668:	6013      	str	r3, [r2, #0]
			} while (current_cpu_cycle >= last_cpu_cycle);
 800866a:	4b36      	ldr	r3, [pc, #216]	; (8008744 <setControlCycle+0x1b8>)
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	4b36      	ldr	r3, [pc, #216]	; (8008748 <setControlCycle+0x1bc>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	d2f1      	bcs.n	800865a <setControlCycle+0xce>
		}

		DWT_Delay_until_cycle(target_cpu_cycle);
 8008676:	4b2f      	ldr	r3, [pc, #188]	; (8008734 <setControlCycle+0x1a8>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe ff6c 	bl	8007558 <DWT_Delay_until_cycle>
 8008680:	e020      	b.n	80086c4 <setControlCycle+0x138>
	} else {
		// Provide warning and exit if delay exceeds 5 cycles
		if (current_cpu_cycle - target_cpu_cycle > t_sample_cpu_cycles*5 && enable_cycle_delay_warning == 1) {
 8008682:	4b30      	ldr	r3, [pc, #192]	; (8008744 <setControlCycle+0x1b8>)
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	4b2b      	ldr	r3, [pc, #172]	; (8008734 <setControlCycle+0x1a8>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	1ad1      	subs	r1, r2, r3
 800868c:	4b2b      	ldr	r3, [pc, #172]	; (800873c <setControlCycle+0x1b0>)
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	4613      	mov	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	4299      	cmp	r1, r3
 8008698:	d914      	bls.n	80086c4 <setControlCycle+0x138>
 800869a:	4b2c      	ldr	r3, [pc, #176]	; (800874c <setControlCycle+0x1c0>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d110      	bne.n	80086c4 <setControlCycle+0x138>
			sprintf(msg, "Error: control loop lag\r\n");
 80086a2:	492b      	ldr	r1, [pc, #172]	; (8008750 <setControlCycle+0x1c4>)
 80086a4:	482b      	ldr	r0, [pc, #172]	; (8008754 <setControlCycle+0x1c8>)
 80086a6:	f002 fe25 	bl	800b2f4 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80086aa:	482a      	ldr	r0, [pc, #168]	; (8008754 <setControlCycle+0x1c8>)
 80086ac:	f7f7 fda2 	bl	80001f4 <strlen>
 80086b0:	4603      	mov	r3, r0
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	f04f 33ff 	mov.w	r3, #4294967295
 80086b8:	4926      	ldr	r1, [pc, #152]	; (8008754 <setControlCycle+0x1c8>)
 80086ba:	4827      	ldr	r0, [pc, #156]	; (8008758 <setControlCycle+0x1cc>)
 80086bc:	f7fe fa46 	bl	8006b4c <HAL_UART_Transmit>
			return 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	e021      	b.n	8008708 <setControlCycle+0x17c>
		}
	}

	/* Record current cpu cycle for delay computation at the end of loop execution */
	current_cpu_cycle = DWT->CYCCNT;
 80086c4:	4b1e      	ldr	r3, [pc, #120]	; (8008740 <setControlCycle+0x1b4>)
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	4a1e      	ldr	r2, [pc, #120]	; (8008744 <setControlCycle+0x1b8>)
 80086ca:	6013      	str	r3, [r2, #0]

	/* Compute value of relative delay after insertion of delay adjust */
	current_cpu_cycle_delay_relative_report = (int)(t_sample_cpu_cycles - (current_cpu_cycle - prev_cpu_cycle));
 80086cc:	4b23      	ldr	r3, [pc, #140]	; (800875c <setControlCycle+0x1d0>)
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	4b1c      	ldr	r3, [pc, #112]	; (8008744 <setControlCycle+0x1b8>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	1ad2      	subs	r2, r2, r3
 80086d6:	4b19      	ldr	r3, [pc, #100]	; (800873c <setControlCycle+0x1b0>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4413      	add	r3, r2
 80086dc:	461a      	mov	r2, r3
 80086de:	4b20      	ldr	r3, [pc, #128]	; (8008760 <setControlCycle+0x1d4>)
 80086e0:	601a      	str	r2, [r3, #0]
	current_cpu_cycle_delay_relative_report = (current_cpu_cycle_delay_relative_report*1000000)/RCC_HCLK_FREQ;
 80086e2:	4b1f      	ldr	r3, [pc, #124]	; (8008760 <setControlCycle+0x1d4>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a1f      	ldr	r2, [pc, #124]	; (8008764 <setControlCycle+0x1d8>)
 80086e8:	fb82 1203 	smull	r1, r2, r2, r3
 80086ec:	1112      	asrs	r2, r2, #4
 80086ee:	17db      	asrs	r3, r3, #31
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	4a1b      	ldr	r2, [pc, #108]	; (8008760 <setControlCycle+0x1d4>)
 80086f4:	6013      	str	r3, [r2, #0]

	prev_cpu_cycle = current_cpu_cycle;
 80086f6:	4b13      	ldr	r3, [pc, #76]	; (8008744 <setControlCycle+0x1b8>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a18      	ldr	r2, [pc, #96]	; (800875c <setControlCycle+0x1d0>)
 80086fc:	6013      	str	r3, [r2, #0]

	/* Increment cycle counter */

	i++;
 80086fe:	4b03      	ldr	r3, [pc, #12]	; (800870c <setControlCycle+0x180>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3301      	adds	r3, #1
 8008704:	4a01      	ldr	r2, [pc, #4]	; (800870c <setControlCycle+0x180>)
 8008706:	6013      	str	r3, [r2, #0]

}
 8008708:	4618      	mov	r0, r3
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20000f64 	.word	0x20000f64
 8008710:	20000f90 	.word	0x20000f90
 8008714:	20008038 	.word	0x20008038
 8008718:	42c80000 	.word	0x42c80000
 800871c:	447a0000 	.word	0x447a0000
 8008720:	20000f94 	.word	0x20000f94
 8008724:	51eb851f 	.word	0x51eb851f
 8008728:	20008000 	.word	0x20008000
 800872c:	20008004 	.word	0x20008004
 8008730:	20008008 	.word	0x20008008
 8008734:	2000802c 	.word	0x2000802c
 8008738:	20008030 	.word	0x20008030
 800873c:	20000a24 	.word	0x20000a24
 8008740:	e0001000 	.word	0xe0001000
 8008744:	20008020 	.word	0x20008020
 8008748:	20008028 	.word	0x20008028
 800874c:	20000f98 	.word	0x20000f98
 8008750:	08011930 	.word	0x08011930
 8008754:	20000d74 	.word	0x20000d74
 8008758:	20000a78 	.word	0x20000a78
 800875c:	20008024 	.word	0x20008024
 8008760:	20008034 	.word	0x20008034
 8008764:	30c30c31 	.word	0x30c30c31

08008768 <main>:

int main(void) {
 8008768:	b580      	push	{r7, lr}
 800876a:	af00      	add	r7, sp, #0

	initialize();
 800876c:	f7fe ff08 	bl	8007580 <initialize>

	while (1) {

		initialize_main_loop();
 8008770:	f7ff f966 	bl	8007a40 <initialize_main_loop>
		 *
		 * Control Loop Start
		 *
		 * *************************************************************************************************
		 */
		SendGAMInputMain( );
 8008774:	f001 fb34 	bl	8009de0 <SendGAMInputMain>
		//HAL_Delay(150);
		while (enable_control_action == 1) {
 8008778:	e00b      	b.n	8008792 <main+0x2a>
				sprintf(msg, "Exiting control because of cycle count limit \r\n");
				SendGAMInput( COMMAND_INDEX_SEND_STATUS_ERROR );
				break;
			}

			if( ProcessGAMOutput() == 0)
 800877a:	f001 fc35 	bl	8009fe8 <ProcessGAMOutput>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00b      	beq.n	800879c <main+0x34>
				break;
			SendGAMInputMain( );
 8008784:	f001 fb2c 	bl	8009de0 <SendGAMInputMain>

			if( !setControlCycle() ) break;
 8008788:	f7ff ff00 	bl	800858c <setControlCycle>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d006      	beq.n	80087a0 <main+0x38>
		while (enable_control_action == 1) {
 8008792:	4b23      	ldr	r3, [pc, #140]	; (8008820 <main+0xb8>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d0ef      	beq.n	800877a <main+0x12>
 800879a:	e002      	b.n	80087a2 <main+0x3a>
				break;
 800879c:	bf00      	nop
 800879e:	e000      	b.n	80087a2 <main+0x3a>
			if( !setControlCycle() ) break;
 80087a0:	bf00      	nop

		/*
		 * Control System Exit Loop
		 */
		if (ACCEL_CONTROL == 1) {
			desired_pwm_period = 0;
 80087a2:	4b20      	ldr	r3, [pc, #128]	; (8008824 <main+0xbc>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	601a      	str	r2, [r3, #0]
			current_pwm_period = 0;
 80087a8:	4b1f      	ldr	r3, [pc, #124]	; (8008828 <main+0xc0>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	601a      	str	r2, [r3, #0]

		/*
		 * Restore rotor position at low speed profile
		 */

		ret = rotor_position_read(&rotor_position_steps);
 80087ae:	481f      	ldr	r0, [pc, #124]	; (800882c <main+0xc4>)
 80087b0:	f000 fa25 	bl	8008bfe <rotor_position_read>
 80087b4:	4603      	mov	r3, r0
 80087b6:	4a1e      	ldr	r2, [pc, #120]	; (8008830 <main+0xc8>)
 80087b8:	6013      	str	r3, [r2, #0]
		BSP_MotorControl_GoTo(0, 0);
 80087ba:	2100      	movs	r1, #0
 80087bc:	2000      	movs	r0, #0
 80087be:	f7fb fab5 	bl	8003d2c <BSP_MotorControl_GoTo>
		BSP_MotorControl_SoftStop(0);
 80087c2:	2000      	movs	r0, #0
 80087c4:	f7fb fbda 	bl	8003f7c <BSP_MotorControl_SoftStop>

		/*
		 * Terminate motor control
		 */

		ret = rotor_position_read(&rotor_position_steps);
 80087c8:	4818      	ldr	r0, [pc, #96]	; (800882c <main+0xc4>)
 80087ca:	f000 fa18 	bl	8008bfe <rotor_position_read>
 80087ce:	4603      	mov	r3, r0
 80087d0:	4a17      	ldr	r2, [pc, #92]	; (8008830 <main+0xc8>)
 80087d2:	6013      	str	r3, [r2, #0]
		sprintf(msg,"Exit Control at Rotor Angle, %.2f\r\n",
				(float) ((rotor_position_steps) / STEPPER_READ_POSITION_STEPS_PER_DEGREE));
 80087d4:	4b15      	ldr	r3, [pc, #84]	; (800882c <main+0xc4>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f7f7 febb 	bl	8000554 <__aeabi_i2d>
 80087de:	a30e      	add	r3, pc, #56	; (adr r3, 8008818 <main+0xb0>)
 80087e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e4:	f7f8 f84a 	bl	800087c <__aeabi_ddiv>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4610      	mov	r0, r2
 80087ee:	4619      	mov	r1, r3
 80087f0:	f7f8 fa12 	bl	8000c18 <__aeabi_d2f>
 80087f4:	4603      	mov	r3, r0
		sprintf(msg,"Exit Control at Rotor Angle, %.2f\r\n",
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7f7 febe 	bl	8000578 <__aeabi_f2d>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	490c      	ldr	r1, [pc, #48]	; (8008834 <main+0xcc>)
 8008802:	480d      	ldr	r0, [pc, #52]	; (8008838 <main+0xd0>)
 8008804:	f002 fd76 	bl	800b2f4 <sprintf>
		SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8008808:	200a      	movs	r0, #10
 800880a:	f001 fae1 	bl	8009dd0 <SendGAMInput>

		/*
		 * System software reset
		 */

		NVIC_SystemReset();
 800880e:	f7fe fe59 	bl	80074c4 <NVIC_SystemReset>
	while (1) {
 8008812:	e7ad      	b.n	8008770 <main+0x8>
 8008814:	f3af 8000 	nop.w
 8008818:	75818c5d 	.word	0x75818c5d
 800881c:	4021c71c 	.word	0x4021c71c
 8008820:	20000a28 	.word	0x20000a28
 8008824:	20000c64 	.word	0x20000c64
 8008828:	20000c68 	.word	0x20000c68
 800882c:	20000fd0 	.word	0x20000fd0
 8008830:	20000f74 	.word	0x20000f74
 8008834:	0801194c 	.word	0x0801194c
 8008838:	20000d74 	.word	0x20000d74

0800883c <Extract_Msg>:
 * @param  LastPos last added byte position
 * @param  BufMaxLen buffer length
 * @param  Msg pointer to the protocol message
 * @retval Number of bytes read if the msg is finished
 */
uint16_t Extract_Msg(uint8_t *CircularBuff, uint16_t StartPos, uint16_t LastPos, uint16_t BufMaxLen, T_Serial_Msg *Msg) {
 800883c:	b480      	push	{r7}
 800883e:	b087      	sub	sp, #28
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	4608      	mov	r0, r1
 8008846:	4611      	mov	r1, r2
 8008848:	461a      	mov	r2, r3
 800884a:	4603      	mov	r3, r0
 800884c:	817b      	strh	r3, [r7, #10]
 800884e:	460b      	mov	r3, r1
 8008850:	813b      	strh	r3, [r7, #8]
 8008852:	4613      	mov	r3, r2
 8008854:	80fb      	strh	r3, [r7, #6]
	/* Number of bytes to be analyzed */
	uint16_t NumNewByte = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	82fb      	strh	r3, [r7, #22]
	/* Circular buffer index */
	uint16_t MsgIdx;
	/* Two index for ByteStuffing process  */
	uint16_t BuffIdx;

	if (LastPos >= StartPos) {
 800885a:	893a      	ldrh	r2, [r7, #8]
 800885c:	897b      	ldrh	r3, [r7, #10]
 800885e:	429a      	cmp	r2, r3
 8008860:	d304      	bcc.n	800886c <Extract_Msg+0x30>
		NumNewByte = LastPos - StartPos;
 8008862:	893a      	ldrh	r2, [r7, #8]
 8008864:	897b      	ldrh	r3, [r7, #10]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	82fb      	strh	r3, [r7, #22]
 800886a:	e006      	b.n	800887a <Extract_Msg+0x3e>
	} else {
		NumNewByte = BufMaxLen + LastPos - StartPos;
 800886c:	88fa      	ldrh	r2, [r7, #6]
 800886e:	893b      	ldrh	r3, [r7, #8]
 8008870:	4413      	add	r3, r2
 8008872:	b29a      	uxth	r2, r3
 8008874:	897b      	ldrh	r3, [r7, #10]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	82fb      	strh	r3, [r7, #22]
	}
	BuffIdx = StartPos;
 800887a:	897b      	ldrh	r3, [r7, #10]
 800887c:	827b      	strh	r3, [r7, #18]

	for (MsgIdx = 0; MsgIdx < NumNewByte; MsgIdx++) {
 800887e:	2300      	movs	r3, #0
 8008880:	82bb      	strh	r3, [r7, #20]
 8008882:	e01f      	b.n	80088c4 <Extract_Msg+0x88>
		Data = CircularBuff[BuffIdx];
 8008884:	8a7b      	ldrh	r3, [r7, #18]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	4413      	add	r3, r2
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	747b      	strb	r3, [r7, #17]
		BuffIdx++;
 800888e:	8a7b      	ldrh	r3, [r7, #18]
 8008890:	3301      	adds	r3, #1
 8008892:	827b      	strh	r3, [r7, #18]
		if (BuffIdx >= BufMaxLen) {
 8008894:	8a7a      	ldrh	r2, [r7, #18]
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	429a      	cmp	r2, r3
 800889a:	d301      	bcc.n	80088a0 <Extract_Msg+0x64>
			BuffIdx = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	827b      	strh	r3, [r7, #18]
		}

		/* If End of message is found, start to recompose the message */
		if (Data == SERIAL_MSG_EOF) {
 80088a0:	7c7b      	ldrb	r3, [r7, #17]
 80088a2:	2b0d      	cmp	r3, #13
 80088a4:	d106      	bne.n	80088b4 <Extract_Msg+0x78>
			Msg->Len = MsgIdx;
 80088a6:	8aba      	ldrh	r2, [r7, #20]
 80088a8:	6a3b      	ldr	r3, [r7, #32]
 80088aa:	601a      	str	r2, [r3, #0]
			return MsgIdx + 1;
 80088ac:	8abb      	ldrh	r3, [r7, #20]
 80088ae:	3301      	adds	r3, #1
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	e00c      	b.n	80088ce <Extract_Msg+0x92>
		} else {
			Msg->Data[MsgIdx] = Data;
 80088b4:	8abb      	ldrh	r3, [r7, #20]
 80088b6:	6a3a      	ldr	r2, [r7, #32]
 80088b8:	4413      	add	r3, r2
 80088ba:	7c7a      	ldrb	r2, [r7, #17]
 80088bc:	711a      	strb	r2, [r3, #4]
	for (MsgIdx = 0; MsgIdx < NumNewByte; MsgIdx++) {
 80088be:	8abb      	ldrh	r3, [r7, #20]
 80088c0:	3301      	adds	r3, #1
 80088c2:	82bb      	strh	r3, [r7, #20]
 80088c4:	8aba      	ldrh	r2, [r7, #20]
 80088c6:	8afb      	ldrh	r3, [r7, #22]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d3db      	bcc.n	8008884 <Extract_Msg+0x48>
		}
	}
	return 0;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
	...

080088dc <MX_TIM3_Init>:

/* TIM3 init function */
	void MX_TIM3_Init(void) {
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08c      	sub	sp, #48	; 0x30
 80088e0:	af00      	add	r7, sp, #0

	TIM_Encoder_InitTypeDef sConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim3.Instance = TIM3;
 80088e2:	4b20      	ldr	r3, [pc, #128]	; (8008964 <MX_TIM3_Init+0x88>)
 80088e4:	4a20      	ldr	r2, [pc, #128]	; (8008968 <MX_TIM3_Init+0x8c>)
 80088e6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80088e8:	4b1e      	ldr	r3, [pc, #120]	; (8008964 <MX_TIM3_Init+0x88>)
 80088ea:	2200      	movs	r2, #0
 80088ec:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088ee:	4b1d      	ldr	r3, [pc, #116]	; (8008964 <MX_TIM3_Init+0x88>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80088f4:	4b1b      	ldr	r3, [pc, #108]	; (8008964 <MX_TIM3_Init+0x88>)
 80088f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088fa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80088fc:	4b19      	ldr	r3, [pc, #100]	; (8008964 <MX_TIM3_Init+0x88>)
 80088fe:	2200      	movs	r2, #0
 8008900:	611a      	str	r2, [r3, #16]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008902:	2303      	movs	r3, #3
 8008904:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008906:	2300      	movs	r3, #0
 8008908:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800890a:	2301      	movs	r3, #1
 800890c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800890e:	2300      	movs	r3, #0
 8008910:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008916:	2300      	movs	r3, #0
 8008918:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800891a:	2301      	movs	r3, #1
 800891c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800891e:	2300      	movs	r3, #0
 8008920:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8008926:	f107 030c 	add.w	r3, r7, #12
 800892a:	4619      	mov	r1, r3
 800892c:	480d      	ldr	r0, [pc, #52]	; (8008964 <MX_TIM3_Init+0x88>)
 800892e:	f7fd fb63 	bl	8005ff8 <HAL_TIM_Encoder_Init>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <MX_TIM3_Init+0x62>
		Error_Handler(0);
 8008938:	2000      	movs	r0, #0
 800893a:	f000 f895 	bl	8008a68 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800893e:	2300      	movs	r3, #0
 8008940:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008942:	2300      	movs	r3, #0
 8008944:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8008946:	1d3b      	adds	r3, r7, #4
 8008948:	4619      	mov	r1, r3
 800894a:	4806      	ldr	r0, [pc, #24]	; (8008964 <MX_TIM3_Init+0x88>)
 800894c:	f7fe f858 	bl	8006a00 <HAL_TIMEx_MasterConfigSynchronization>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <MX_TIM3_Init+0x80>
			!= HAL_OK) {
		Error_Handler(0);
 8008956:	2000      	movs	r0, #0
 8008958:	f000 f886 	bl	8008a68 <Error_Handler>
	}

}
 800895c:	bf00      	nop
 800895e:	3730      	adds	r7, #48	; 0x30
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20000f10 	.word	0x20000f10
 8008968:	40000400 	.word	0x40000400

0800896c <MX_USART2_UART_Init>:

/* USART2 init function */

	void MX_USART2_UART_Init(void) {
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE()
 8008972:	2300      	movs	r3, #0
 8008974:	607b      	str	r3, [r7, #4]
 8008976:	4b31      	ldr	r3, [pc, #196]	; (8008a3c <MX_USART2_UART_Init+0xd0>)
 8008978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897a:	4a30      	ldr	r2, [pc, #192]	; (8008a3c <MX_USART2_UART_Init+0xd0>)
 800897c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008980:	6313      	str	r3, [r2, #48]	; 0x30
 8008982:	4b2e      	ldr	r3, [pc, #184]	; (8008a3c <MX_USART2_UART_Init+0xd0>)
 8008984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800898a:	607b      	str	r3, [r7, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
							;

	huart2.Instance = USART2;
 800898e:	4b2c      	ldr	r3, [pc, #176]	; (8008a40 <MX_USART2_UART_Init+0xd4>)
 8008990:	4a2c      	ldr	r2, [pc, #176]	; (8008a44 <MX_USART2_UART_Init+0xd8>)
 8008992:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = SAMPLE_BAUD_RATE;
 8008994:	4b2a      	ldr	r3, [pc, #168]	; (8008a40 <MX_USART2_UART_Init+0xd4>)
 8008996:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800899a:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800899c:	4b28      	ldr	r3, [pc, #160]	; (8008a40 <MX_USART2_UART_Init+0xd4>)
 800899e:	2200      	movs	r2, #0
 80089a0:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80089a2:	4b27      	ldr	r3, [pc, #156]	; (8008a40 <MX_USART2_UART_Init+0xd4>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80089a8:	4b25      	ldr	r3, [pc, #148]	; (8008a40 <MX_USART2_UART_Init+0xd4>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80089ae:	4b24      	ldr	r3, [pc, #144]	; (8008a40 <MX_USART2_UART_Init+0xd4>)
 80089b0:	220c      	movs	r2, #12
 80089b2:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80089b4:	4b22      	ldr	r3, [pc, #136]	; (8008a40 <MX_USART2_UART_Init+0xd4>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80089ba:	4b21      	ldr	r3, [pc, #132]	; (8008a40 <MX_USART2_UART_Init+0xd4>)
 80089bc:	2200      	movs	r2, #0
 80089be:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80089c0:	481f      	ldr	r0, [pc, #124]	; (8008a40 <MX_USART2_UART_Init+0xd4>)
 80089c2:	f7fe f876 	bl	8006ab2 <HAL_UART_Init>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <MX_USART2_UART_Init+0x66>
		Error_Handler(0);
 80089cc:	2000      	movs	r0, #0
 80089ce:	f000 f84b 	bl	8008a68 <Error_Handler>
	}

	/* USART2 RX DMA Init */
	hdma_usart2_rx.Instance = DMA1_Stream5;
 80089d2:	4b1d      	ldr	r3, [pc, #116]	; (8008a48 <MX_USART2_UART_Init+0xdc>)
 80089d4:	4a1d      	ldr	r2, [pc, #116]	; (8008a4c <MX_USART2_UART_Init+0xe0>)
 80089d6:	601a      	str	r2, [r3, #0]
	hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80089d8:	4b1b      	ldr	r3, [pc, #108]	; (8008a48 <MX_USART2_UART_Init+0xdc>)
 80089da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80089de:	605a      	str	r2, [r3, #4]
	hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80089e0:	4b19      	ldr	r3, [pc, #100]	; (8008a48 <MX_USART2_UART_Init+0xdc>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	609a      	str	r2, [r3, #8]
	hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089e6:	4b18      	ldr	r3, [pc, #96]	; (8008a48 <MX_USART2_UART_Init+0xdc>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	60da      	str	r2, [r3, #12]
	hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80089ec:	4b16      	ldr	r3, [pc, #88]	; (8008a48 <MX_USART2_UART_Init+0xdc>)
 80089ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089f2:	611a      	str	r2, [r3, #16]
	hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80089f4:	4b14      	ldr	r3, [pc, #80]	; (8008a48 <MX_USART2_UART_Init+0xdc>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	615a      	str	r2, [r3, #20]
	hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80089fa:	4b13      	ldr	r3, [pc, #76]	; (8008a48 <MX_USART2_UART_Init+0xdc>)
 80089fc:	2200      	movs	r2, #0
 80089fe:	619a      	str	r2, [r3, #24]
	hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8008a00:	4b11      	ldr	r3, [pc, #68]	; (8008a48 <MX_USART2_UART_Init+0xdc>)
 8008a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a06:	61da      	str	r2, [r3, #28]
	hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008a08:	4b0f      	ldr	r3, [pc, #60]	; (8008a48 <MX_USART2_UART_Init+0xdc>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	621a      	str	r2, [r3, #32]
	hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008a0e:	4b0e      	ldr	r3, [pc, #56]	; (8008a48 <MX_USART2_UART_Init+0xdc>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8008a14:	480c      	ldr	r0, [pc, #48]	; (8008a48 <MX_USART2_UART_Init+0xdc>)
 8008a16:	f7fb fdab 	bl	8004570 <HAL_DMA_Init>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <MX_USART2_UART_Init+0xba>
		Error_Handler(0);
 8008a20:	2000      	movs	r0, #0
 8008a22:	f000 f821 	bl	8008a68 <Error_Handler>
	}
	__HAL_LINKDMA(&huart2, hdmarx, hdma_usart2_rx);
 8008a26:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <MX_USART2_UART_Init+0xd4>)
 8008a28:	4a07      	ldr	r2, [pc, #28]	; (8008a48 <MX_USART2_UART_Init+0xdc>)
 8008a2a:	635a      	str	r2, [r3, #52]	; 0x34
 8008a2c:	4b06      	ldr	r3, [pc, #24]	; (8008a48 <MX_USART2_UART_Init+0xdc>)
 8008a2e:	4a04      	ldr	r2, [pc, #16]	; (8008a40 <MX_USART2_UART_Init+0xd4>)
 8008a30:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008a32:	bf00      	nop
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	40023800 	.word	0x40023800
 8008a40:	20000a78 	.word	0x20000a78
 8008a44:	40004400 	.word	0x40004400
 8008a48:	20000ab8 	.word	0x20000ab8
 8008a4c:	40026088 	.word	0x40026088

08008a50 <MyFlagInterruptHandler>:
/**
 * @brief  This function is the User handler for the flag interrupt
 * @param  None
 * @retval None
 */
void MyFlagInterruptHandler(void) {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
	/* Get the value of the status register via the L6474 command GET_STATUS */
	uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 8008a56:	2000      	movs	r0, #0
 8008a58:	f7fb faf4 	bl	8004044 <BSP_MotorControl_CmdGetStatus>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	80fb      	strh	r3, [r7, #6]
	if ((statusRegister & L6474_STATUS_OCD) == 0) {
		//overcurrent detection
		// Action to be customized
	}

}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <Error_Handler>:
/**
 * @brief  This function is executed in event of error occurrence.
 * @param  error number of the error event
 * @retval None
 */
void Error_Handler(uint16_t error) {
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	80fb      	strh	r3, [r7, #6]
	/* Backup error number */
	gLastError = error;
 8008a72:	4a02      	ldr	r2, [pc, #8]	; (8008a7c <Error_Handler+0x14>)
 8008a74:	88fb      	ldrh	r3, [r7, #6]
 8008a76:	8013      	strh	r3, [r2, #0]

	/* Infinite loop */
	while (1) {
 8008a78:	e7fe      	b.n	8008a78 <Error_Handler+0x10>
 8008a7a:	bf00      	nop
 8008a7c:	20000a74 	.word	0x20000a74

08008a80 <encoder_position_read>:
 * This is developed and provided by Markus Dauberschmidt.  Please see
 * https://github.com/OevreFlataeker/steval_edukit_swingup
 *
 */

__INLINE int encoder_position_read(int *encoder_position, int encoder_position_init, TIM_HandleTypeDef *htim3) {
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]

	cnt3 = __HAL_TIM_GET_COUNTER(htim3);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	4a41      	ldr	r2, [pc, #260]	; (8008b98 <encoder_position_read+0x118>)
 8008a94:	6013      	str	r3, [r2, #0]

	if (cnt3 >= 32768) {
 8008a96:	4b40      	ldr	r3, [pc, #256]	; (8008b98 <encoder_position_read+0x118>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a9e:	d30b      	bcc.n	8008ab8 <encoder_position_read+0x38>
		*encoder_position = (int) (cnt3);
 8008aa0:	4b3d      	ldr	r3, [pc, #244]	; (8008b98 <encoder_position_read+0x118>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	601a      	str	r2, [r3, #0]
		*encoder_position = *encoder_position - 65536;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	601a      	str	r2, [r3, #0]
 8008ab6:	e004      	b.n	8008ac2 <encoder_position_read+0x42>
	} else {
		*encoder_position = (int) (cnt3);
 8008ab8:	4b37      	ldr	r3, [pc, #220]	; (8008b98 <encoder_position_read+0x118>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	601a      	str	r2, [r3, #0]
	}

	range_error = 0;
 8008ac2:	4b36      	ldr	r3, [pc, #216]	; (8008b9c <encoder_position_read+0x11c>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	601a      	str	r2, [r3, #0]
	if (*encoder_position <= -32768) {
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8008ad0:	dc06      	bgt.n	8008ae0 <encoder_position_read+0x60>
		range_error = -1;
 8008ad2:	4b32      	ldr	r3, [pc, #200]	; (8008b9c <encoder_position_read+0x11c>)
 8008ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad8:	601a      	str	r2, [r3, #0]
		*encoder_position = -32768;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4a30      	ldr	r2, [pc, #192]	; (8008ba0 <encoder_position_read+0x120>)
 8008ade:	601a      	str	r2, [r3, #0]
	}
	if (*encoder_position >= 32767) {
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	dd06      	ble.n	8008afa <encoder_position_read+0x7a>
		range_error = 1;
 8008aec:	4b2b      	ldr	r3, [pc, #172]	; (8008b9c <encoder_position_read+0x11c>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	601a      	str	r2, [r3, #0]
		*encoder_position = 32767;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008af8:	601a      	str	r2, [r3, #0]
	}

	*encoder_position = *encoder_position - encoder_position_init;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	1ad2      	subs	r2, r2, r3
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	601a      	str	r2, [r3, #0]
	 *  Detect if we passed the bottom, then re-arm peak flag
	 *  oppositeSigns returns true when we pass the bottom position
	 */


	if (oppositeSigns(*encoder_position, previous_encoder_position))
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a26      	ldr	r2, [pc, #152]	; (8008ba4 <encoder_position_read+0x124>)
 8008b0c:	6812      	ldr	r2, [r2, #0]
 8008b0e:	4611      	mov	r1, r2
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 f853 	bl	8008bbc <oppositeSigns>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d005      	beq.n	8008b28 <encoder_position_read+0xa8>
	{
		peaked = 0;
 8008b1c:	4b22      	ldr	r3, [pc, #136]	; (8008ba8 <encoder_position_read+0x128>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	701a      	strb	r2, [r3, #0]
		zero_crossed = 1;
 8008b22:	4b22      	ldr	r3, [pc, #136]	; (8008bac <encoder_position_read+0x12c>)
 8008b24:	2201      	movs	r2, #1
 8008b26:	601a      	str	r2, [r3, #0]
	}

	if (!peaked) // We don't need to evaluate anymore if we hit a maximum when we're still in downward motion and didn't cross the minimum
 8008b28:	4b1f      	ldr	r3, [pc, #124]	; (8008ba8 <encoder_position_read+0x128>)
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d128      	bne.n	8008b82 <encoder_position_read+0x102>
	{
		// Add global maximum
		if (abs(*encoder_position) >= abs(global_max_encoder_position))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8008b38:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8008b3c:	4b1c      	ldr	r3, [pc, #112]	; (8008bb0 <encoder_position_read+0x130>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	bfb8      	it	lt
 8008b44:	425b      	neglt	r3, r3
 8008b46:	429a      	cmp	r2, r3
 8008b48:	db03      	blt.n	8008b52 <encoder_position_read+0xd2>
		{
			global_max_encoder_position = *encoder_position;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a18      	ldr	r2, [pc, #96]	; (8008bb0 <encoder_position_read+0x130>)
 8008b50:	6013      	str	r3, [r2, #0]
		}
		// Check if new maximum
		if (abs(*encoder_position) >= abs(max_encoder_position))
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8008b5a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8008b5e:	4b15      	ldr	r3, [pc, #84]	; (8008bb4 <encoder_position_read+0x134>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	bfb8      	it	lt
 8008b66:	425b      	neglt	r3, r3
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	db04      	blt.n	8008b76 <encoder_position_read+0xf6>
		{
			max_encoder_position = *encoder_position;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a10      	ldr	r2, [pc, #64]	; (8008bb4 <encoder_position_read+0x134>)
 8008b72:	6013      	str	r3, [r2, #0]
 8008b74:	e005      	b.n	8008b82 <encoder_position_read+0x102>
		}
		else
		{
			// We are at the peak and disable further checks until we traversed the minimum position again
			peaked = 1;
 8008b76:	4b0c      	ldr	r3, [pc, #48]	; (8008ba8 <encoder_position_read+0x128>)
 8008b78:	2201      	movs	r2, #1
 8008b7a:	701a      	strb	r2, [r3, #0]
			handled_peak = 0;
 8008b7c:	4b0e      	ldr	r3, [pc, #56]	; (8008bb8 <encoder_position_read+0x138>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	701a      	strb	r2, [r3, #0]
		}
	}

	previous_encoder_position = *encoder_position;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a07      	ldr	r2, [pc, #28]	; (8008ba4 <encoder_position_read+0x124>)
 8008b88:	6013      	str	r3, [r2, #0]


	return range_error;
 8008b8a:	4b04      	ldr	r3, [pc, #16]	; (8008b9c <encoder_position_read+0x11c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20001068 	.word	0x20001068
 8008b9c:	2000106c 	.word	0x2000106c
 8008ba0:	ffff8000 	.word	0xffff8000
 8008ba4:	2000107c 	.word	0x2000107c
 8008ba8:	20004924 	.word	0x20004924
 8008bac:	20004928 	.word	0x20004928
 8008bb0:	20001084 	.word	0x20001084
 8008bb4:	20001080 	.word	0x20001080
 8008bb8:	20004925 	.word	0x20004925

08008bbc <oppositeSigns>:
 * Returns true if the two arguments have opposite sign, false if not
 * @retval bool.
 * Developed and provided by Markus Dauberschmidt
 */

__INLINE bool oppositeSigns(int x, int y) {
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
	return ((x ^ y) < 0);
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	4053      	eors	r3, r2
 8008bcc:	0fdb      	lsrs	r3, r3, #31
 8008bce:	b2db      	uxtb	r3, r3
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <rotor_position_set>:

/*
 * Rotor position set
 */

void rotor_position_set(void) {
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
	uint32_t rotor_position_u;
	rotor_position_u = BSP_MotorControl_GetPosition(0);
 8008be2:	2000      	movs	r0, #0
 8008be4:	f7fb f87e 	bl	8003ce4 <BSP_MotorControl_GetPosition>
 8008be8:	4603      	mov	r3, r0
 8008bea:	607b      	str	r3, [r7, #4]
	BSP_MotorControl_SetHome(0, rotor_position_u);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	f7fb f951 	bl	8003e98 <BSP_MotorControl_SetHome>
}
 8008bf6:	bf00      	nop
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <rotor_position_read>:
 *
 * Returns error if overflow detected
 *
 */

__INLINE int rotor_position_read(int *rotor_position) {
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
	uint32_t rotor_position_u;
	int range_error;
	rotor_position_u = BSP_MotorControl_GetPosition(0);
 8008c06:	2000      	movs	r0, #0
 8008c08:	f7fb f86c 	bl	8003ce4 <BSP_MotorControl_GetPosition>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	60bb      	str	r3, [r7, #8]

	if (rotor_position_u > 2147483648) {
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c16:	d903      	bls.n	8008c20 <rotor_position_read+0x22>
		*rotor_position = (int) (rotor_position_u) - 4294967296;
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	601a      	str	r2, [r3, #0]
 8008c1e:	e002      	b.n	8008c26 <rotor_position_read+0x28>
	} else {
		*rotor_position = (int) (rotor_position_u);
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	601a      	str	r2, [r3, #0]
	}
	range_error = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	60fb      	str	r3, [r7, #12]
	if (*rotor_position <= -2147483648) {
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c32:	d106      	bne.n	8008c42 <rotor_position_read+0x44>
		range_error = -1;
 8008c34:	f04f 33ff 	mov.w	r3, #4294967295
 8008c38:	60fb      	str	r3, [r7, #12]
		*rotor_position = -2147483648;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c40:	601a      	str	r2, [r3, #0]
	}
	if (*rotor_position >= 2147483647) {
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d105      	bne.n	8008c5a <rotor_position_read+0x5c>
		range_error = 1;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]
		*rotor_position = 2147483647;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008c58:	601a      	str	r2, [r3, #0]
	}
	return range_error;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <read_float>:

/*
 * Single float value read
 */

void read_float(uint32_t * RxBuffer_ReadIdx, uint32_t * RxBuffer_WriteIdx , uint32_t * readBytes, float *float_return) {
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b088      	sub	sp, #32
 8008c68:	af02      	add	r7, sp, #8
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	603b      	str	r3, [r7, #0]

	int k;

	while (1) {
		*RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8008c72:	4b28      	ldr	r3, [pc, #160]	; (8008d14 <read_float+0xb0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f1c3 02c8 	rsb	r2, r3, #200	; 0xc8
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	601a      	str	r2, [r3, #0]
		*readBytes = Extract_Msg(RxBuffer, *RxBuffer_ReadIdx, *RxBuffer_WriteIdx, UART_RX_BUFFER_SIZE, &Msg);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	b299      	uxth	r1, r3
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	4b22      	ldr	r3, [pc, #136]	; (8008d18 <read_float+0xb4>)
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	23c8      	movs	r3, #200	; 0xc8
 8008c92:	4822      	ldr	r0, [pc, #136]	; (8008d1c <read_float+0xb8>)
 8008c94:	f7ff fdd2 	bl	800883c <Extract_Msg>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	601a      	str	r2, [r3, #0]

		if (*readBytes)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d02d      	beq.n	8008d04 <read_float+0xa0>
		{
			*RxBuffer_ReadIdx = (*RxBuffer_ReadIdx + *readBytes)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	441a      	add	r2, r3
											% UART_RX_BUFFER_SIZE;
 8008cb2:	4b1b      	ldr	r3, [pc, #108]	; (8008d20 <read_float+0xbc>)
 8008cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8008cb8:	099b      	lsrs	r3, r3, #6
 8008cba:	21c8      	movs	r1, #200	; 0xc8
 8008cbc:	fb01 f303 	mul.w	r3, r1, r3
 8008cc0:	1ad3      	subs	r3, r2, r3
			*RxBuffer_ReadIdx = (*RxBuffer_ReadIdx + *readBytes)
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	6013      	str	r3, [r2, #0]
			*float_return = atof((char*) Msg.Data);
 8008cc6:	4817      	ldr	r0, [pc, #92]	; (8008d24 <read_float+0xc0>)
 8008cc8:	f001 fba5 	bl	800a416 <atof>
 8008ccc:	ec53 2b10 	vmov	r2, r3, d0
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	f7f7 ffa0 	bl	8000c18 <__aeabi_d2f>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	601a      	str	r2, [r3, #0]
			for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]
 8008ce2:	e008      	b.n	8008cf6 <read_float+0x92>
				Msg.Data[k] = 0;
 8008ce4:	4a0c      	ldr	r2, [pc, #48]	; (8008d18 <read_float+0xb4>)
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	4413      	add	r3, r2
 8008cea:	3304      	adds	r3, #4
 8008cec:	2200      	movs	r2, #0
 8008cee:	701a      	strb	r2, [r3, #0]
			for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	617b      	str	r3, [r7, #20]
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b63      	cmp	r3, #99	; 0x63
 8008cfa:	ddf3      	ble.n	8008ce4 <read_float+0x80>
			}
			*readBytes = 0;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	601a      	str	r2, [r3, #0]
			break;
 8008d02:	e003      	b.n	8008d0c <read_float+0xa8>
		}
		HAL_Delay(100);
 8008d04:	2064      	movs	r0, #100	; 0x64
 8008d06:	f7fb fb01 	bl	800430c <HAL_Delay>
		*RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8008d0a:	e7b2      	b.n	8008c72 <read_float+0xe>
	}
}
 8008d0c:	bf00      	nop
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20000ab8 	.word	0x20000ab8
 8008d18:	20000b18 	.word	0x20000b18
 8008d1c:	20000b80 	.word	0x20000b80
 8008d20:	51eb851f 	.word	0x51eb851f
 8008d24:	20000b1c 	.word	0x20000b1c

08008d28 <read_int>:

/*
 * Single integer value read
 */

void read_int(uint32_t * RxBuffer_ReadIdx, uint32_t * RxBuffer_WriteIdx , uint32_t * readBytes, int * int_return) {
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af02      	add	r7, sp, #8
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	603b      	str	r3, [r7, #0]

	int k;

	while (1) {
		*RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8008d36:	4b25      	ldr	r3, [pc, #148]	; (8008dcc <read_int+0xa4>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	f1c3 02c8 	rsb	r2, r3, #200	; 0xc8
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	601a      	str	r2, [r3, #0]
		*readBytes = Extract_Msg(RxBuffer, *RxBuffer_ReadIdx, *RxBuffer_WriteIdx, UART_RX_BUFFER_SIZE, &Msg);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	b299      	uxth	r1, r3
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	4b1f      	ldr	r3, [pc, #124]	; (8008dd0 <read_int+0xa8>)
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	23c8      	movs	r3, #200	; 0xc8
 8008d56:	481f      	ldr	r0, [pc, #124]	; (8008dd4 <read_int+0xac>)
 8008d58:	f7ff fd70 	bl	800883c <Extract_Msg>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	461a      	mov	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	601a      	str	r2, [r3, #0]

		if (*readBytes)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d027      	beq.n	8008dbc <read_int+0x94>
		{
			*RxBuffer_ReadIdx = (*RxBuffer_ReadIdx + *readBytes)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	441a      	add	r2, r3
											% UART_RX_BUFFER_SIZE;
 8008d76:	4b18      	ldr	r3, [pc, #96]	; (8008dd8 <read_int+0xb0>)
 8008d78:	fba3 1302 	umull	r1, r3, r3, r2
 8008d7c:	099b      	lsrs	r3, r3, #6
 8008d7e:	21c8      	movs	r1, #200	; 0xc8
 8008d80:	fb01 f303 	mul.w	r3, r1, r3
 8008d84:	1ad3      	subs	r3, r2, r3
			*RxBuffer_ReadIdx = (*RxBuffer_ReadIdx + *readBytes)
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	6013      	str	r3, [r2, #0]

			*int_return = atoi((char*)(Msg.Data));
 8008d8a:	4814      	ldr	r0, [pc, #80]	; (8008ddc <read_int+0xb4>)
 8008d8c:	f001 fb46 	bl	800a41c <atoi>
 8008d90:	4602      	mov	r2, r0
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	601a      	str	r2, [r3, #0]
			for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 8008d96:	2300      	movs	r3, #0
 8008d98:	617b      	str	r3, [r7, #20]
 8008d9a:	e008      	b.n	8008dae <read_int+0x86>
				Msg.Data[k] = 0;
 8008d9c:	4a0c      	ldr	r2, [pc, #48]	; (8008dd0 <read_int+0xa8>)
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	4413      	add	r3, r2
 8008da2:	3304      	adds	r3, #4
 8008da4:	2200      	movs	r2, #0
 8008da6:	701a      	strb	r2, [r3, #0]
			for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	3301      	adds	r3, #1
 8008dac:	617b      	str	r3, [r7, #20]
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2b63      	cmp	r3, #99	; 0x63
 8008db2:	ddf3      	ble.n	8008d9c <read_int+0x74>
			}
			*readBytes = 0;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	601a      	str	r2, [r3, #0]
			break;
 8008dba:	e003      	b.n	8008dc4 <read_int+0x9c>
		}
		HAL_Delay(100);
 8008dbc:	2064      	movs	r0, #100	; 0x64
 8008dbe:	f7fb faa5 	bl	800430c <HAL_Delay>
		*RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8008dc2:	e7b8      	b.n	8008d36 <read_int+0xe>
	}
}
 8008dc4:	bf00      	nop
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	20000ab8 	.word	0x20000ab8
 8008dd0:	20000b18 	.word	0x20000b18
 8008dd4:	20000b80 	.word	0x20000b80
 8008dd8:	51eb851f 	.word	0x51eb851f
 8008ddc:	20000b1c 	.word	0x20000b1c

08008de0 <user_configuration_default>:
		break;
	}

}

void user_configuration_default(void){
 8008de0:	b580      	push	{r7, lr}
 8008de2:	af00      	add	r7, sp, #0
	enable_state_feedback = 0;
 8008de4:	4b20      	ldr	r3, [pc, #128]	; (8008e68 <user_configuration_default+0x88>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]
	select_suspended_mode = 0;
 8008dea:	4b20      	ldr	r3, [pc, #128]	; (8008e6c <user_configuration_default+0x8c>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	601a      	str	r2, [r3, #0]
	proportional = 		PRIMARY_PROPORTIONAL_MODE_1;
 8008df0:	4b1f      	ldr	r3, [pc, #124]	; (8008e70 <user_configuration_default+0x90>)
 8008df2:	4a20      	ldr	r2, [pc, #128]	; (8008e74 <user_configuration_default+0x94>)
 8008df4:	601a      	str	r2, [r3, #0]
	integral = 			PRIMARY_INTEGRAL_MODE_1;
 8008df6:	4b20      	ldr	r3, [pc, #128]	; (8008e78 <user_configuration_default+0x98>)
 8008df8:	f04f 0200 	mov.w	r2, #0
 8008dfc:	601a      	str	r2, [r3, #0]
	derivative = 		PRIMARY_DERIVATIVE_MODE_1;
 8008dfe:	4b1f      	ldr	r3, [pc, #124]	; (8008e7c <user_configuration_default+0x9c>)
 8008e00:	4a1f      	ldr	r2, [pc, #124]	; (8008e80 <user_configuration_default+0xa0>)
 8008e02:	601a      	str	r2, [r3, #0]
	rotor_p_gain = 		SECONDARY_PROPORTIONAL_MODE_1;
 8008e04:	4b1f      	ldr	r3, [pc, #124]	; (8008e84 <user_configuration_default+0xa4>)
 8008e06:	4a20      	ldr	r2, [pc, #128]	; (8008e88 <user_configuration_default+0xa8>)
 8008e08:	601a      	str	r2, [r3, #0]
	rotor_i_gain = 		SECONDARY_INTEGRAL_MODE_1;
 8008e0a:	4b20      	ldr	r3, [pc, #128]	; (8008e8c <user_configuration_default+0xac>)
 8008e0c:	f04f 0200 	mov.w	r2, #0
 8008e10:	601a      	str	r2, [r3, #0]
	rotor_d_gain = 		SECONDARY_DERIVATIVE_MODE_1;
 8008e12:	4b1f      	ldr	r3, [pc, #124]	; (8008e90 <user_configuration_default+0xb0>)
 8008e14:	4a1f      	ldr	r2, [pc, #124]	; (8008e94 <user_configuration_default+0xb4>)
 8008e16:	601a      	str	r2, [r3, #0]
	max_speed = 		MAX_SPEED_MODE_1;
 8008e18:	4b1f      	ldr	r3, [pc, #124]	; (8008e98 <user_configuration_default+0xb8>)
 8008e1a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008e1e:	801a      	strh	r2, [r3, #0]
	min_speed = 		MIN_SPEED_MODE_1;
 8008e20:	4b1e      	ldr	r3, [pc, #120]	; (8008e9c <user_configuration_default+0xbc>)
 8008e22:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008e26:	801a      	strh	r2, [r3, #0]
	enable_rotor_plant_design = 0;
 8008e28:	4b1d      	ldr	r3, [pc, #116]	; (8008ea0 <user_configuration_default+0xc0>)
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	601a      	str	r2, [r3, #0]
	enable_rotor_plant_gain_design = 0;
 8008e2e:	4b1d      	ldr	r3, [pc, #116]	; (8008ea4 <user_configuration_default+0xc4>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
	enable_rotor_position_step_response_cycle = 0;
 8008e34:	4b1c      	ldr	r3, [pc, #112]	; (8008ea8 <user_configuration_default+0xc8>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	601a      	str	r2, [r3, #0]
	enable_pendulum_position_impulse_response_cycle = 0;
 8008e3a:	4b1c      	ldr	r3, [pc, #112]	; (8008eac <user_configuration_default+0xcc>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	601a      	str	r2, [r3, #0]
	enable_rotor_chirp = 0;
 8008e40:	4b1b      	ldr	r3, [pc, #108]	; (8008eb0 <user_configuration_default+0xd0>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	601a      	str	r2, [r3, #0]
	enable_mod_sin_rotor_tracking = 1;
 8008e46:	4b1b      	ldr	r3, [pc, #108]	; (8008eb4 <user_configuration_default+0xd4>)
 8008e48:	2201      	movs	r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]
	enable_angle_cal = 1;
 8008e4c:	4b1a      	ldr	r3, [pc, #104]	; (8008eb8 <user_configuration_default+0xd8>)
 8008e4e:	2201      	movs	r2, #1
 8008e50:	601a      	str	r2, [r3, #0]
	enable_swing_up = 1;
 8008e52:	4b1a      	ldr	r3, [pc, #104]	; (8008ebc <user_configuration_default+0xdc>)
 8008e54:	2201      	movs	r2, #1
 8008e56:	601a      	str	r2, [r3, #0]
	L6474_SetAnalogValue(0, L6474_TVAL, TORQ_CURRENT_DEFAULT);
 8008e58:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008ec0 <user_configuration_default+0xe0>
 8008e5c:	2109      	movs	r1, #9
 8008e5e:	2000      	movs	r0, #0
 8008e60:	f7f9 f818 	bl	8001e94 <L6474_SetAnalogValue>
}
 8008e64:	bf00      	nop
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	20000fbc 	.word	0x20000fbc
 8008e6c:	200049dc 	.word	0x200049dc
 8008e70:	20000fa4 	.word	0x20000fa4
 8008e74:	43960000 	.word	0x43960000
 8008e78:	20000fac 	.word	0x20000fac
 8008e7c:	20000fb4 	.word	0x20000fb4
 8008e80:	41f00000 	.word	0x41f00000
 8008e84:	20000fa8 	.word	0x20000fa8
 8008e88:	41700000 	.word	0x41700000
 8008e8c:	20000fb0 	.word	0x20000fb0
 8008e90:	20000fb8 	.word	0x20000fb8
 8008e94:	40f00000 	.word	0x40f00000
 8008e98:	20008052 	.word	0x20008052
 8008e9c:	20008050 	.word	0x20008050
 8008ea0:	20001008 	.word	0x20001008
 8008ea4:	2000100c 	.word	0x2000100c
 8008ea8:	20004a30 	.word	0x20004a30
 8008eac:	20004a54 	.word	0x20004a54
 8008eb0:	20004a00 	.word	0x20004a00
 8008eb4:	20004a2c 	.word	0x20004a2c
 8008eb8:	200010a0 	.word	0x200010a0
 8008ebc:	2000491c 	.word	0x2000491c
 8008ec0:	44480000 	.word	0x44480000

08008ec4 <user_configuration>:
/*
 * Configure system based on user selection
 */

void user_configuration(void){
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	af00      	add	r7, sp, #0



	enable_rotor_actuator_test = 0;
 8008ec8:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <user_configuration+0x50>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]
	enable_rotor_actuator_control = 0;
 8008ece:	4b12      	ldr	r3, [pc, #72]	; (8008f18 <user_configuration+0x54>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	601a      	str	r2, [r3, #0]
	enable_encoder_test = 0;
 8008ed4:	4b11      	ldr	r3, [pc, #68]	; (8008f1c <user_configuration+0x58>)
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	601a      	str	r2, [r3, #0]
	enable_rotor_actuator_high_speed_test = 0;
 8008eda:	4b11      	ldr	r3, [pc, #68]	; (8008f20 <user_configuration+0x5c>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	601a      	str	r2, [r3, #0]
	enable_motor_actuator_characterization_mode = 0;
 8008ee0:	4b10      	ldr	r3, [pc, #64]	; (8008f24 <user_configuration+0x60>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]
	enable_full_sysid = 0;
 8008ee6:	4b10      	ldr	r3, [pc, #64]	; (8008f28 <user_configuration+0x64>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]

	enable_rotor_tracking_comb_signal = 0;
 8008eec:	4b0f      	ldr	r3, [pc, #60]	; (8008f2c <user_configuration+0x68>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
	rotor_track_comb_amplitude = 0;
 8008ef2:	4b0f      	ldr	r3, [pc, #60]	; (8008f30 <user_configuration+0x6c>)
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	601a      	str	r2, [r3, #0]
	enable_disturbance_rejection_step = 0;
 8008efa:	4b0e      	ldr	r3, [pc, #56]	; (8008f34 <user_configuration+0x70>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	601a      	str	r2, [r3, #0]
	enable_noise_rejection_step = 0;
 8008f00:	4b0d      	ldr	r3, [pc, #52]	; (8008f38 <user_configuration+0x74>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	601a      	str	r2, [r3, #0]
	enable_sensitivity_fnc_step = 0;
 8008f06:	4b0d      	ldr	r3, [pc, #52]	; (8008f3c <user_configuration+0x78>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	601a      	str	r2, [r3, #0]

//############## Jawad Modification  -->> ###############################
	user_configuration_default();
 8008f0c:	f7ff ff68 	bl	8008de0 <user_configuration_default>
	return;
 8008f10:	bf00      	nop
			}
			return;
		}
	}
	return;
}
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	200049e4 	.word	0x200049e4
 8008f18:	200049e8 	.word	0x200049e8
 8008f1c:	200049ec 	.word	0x200049ec
 8008f20:	200049f0 	.word	0x200049f0
 8008f24:	200049f4 	.word	0x200049f4
 8008f28:	20004b70 	.word	0x20004b70
 8008f2c:	20004b8c 	.word	0x20004b8c
 8008f30:	20004b98 	.word	0x20004b98
 8008f34:	20004b9c 	.word	0x20004b9c
 8008f38:	20004ba0 	.word	0x20004ba0
 8008f3c:	20004ba8 	.word	0x20004ba8

08008f40 <motor_actuator_characterization_mode>:

/*
 * Rotor actuator characterization mode
 */

void motor_actuator_characterization_mode(void){
 8008f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f44:	b093      	sub	sp, #76	; 0x4c
 8008f46:	af0c      	add	r7, sp, #48	; 0x30
	/*
	 * Set Motor Speed Profile
	 */

	BSP_MotorControl_SetMaxSpeed(0, rotor_test_speed_max);
 8008f48:	4b7f      	ldr	r3, [pc, #508]	; (8009148 <motor_actuator_characterization_mode+0x208>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	4619      	mov	r1, r3
 8008f50:	2000      	movs	r0, #0
 8008f52:	f7fa ffc3 	bl	8003edc <BSP_MotorControl_SetMaxSpeed>
	BSP_MotorControl_SetMinSpeed(0, rotor_test_speed_min);
 8008f56:	4b7d      	ldr	r3, [pc, #500]	; (800914c <motor_actuator_characterization_mode+0x20c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	2000      	movs	r0, #0
 8008f60:	f7fa ffe4 	bl	8003f2c <BSP_MotorControl_SetMinSpeed>

	sprintf(msg, "\n\rMotor Profile Speeds Min %u Max %u",
 8008f64:	4b79      	ldr	r3, [pc, #484]	; (800914c <motor_actuator_characterization_mode+0x20c>)
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	4b77      	ldr	r3, [pc, #476]	; (8009148 <motor_actuator_characterization_mode+0x208>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4978      	ldr	r1, [pc, #480]	; (8009150 <motor_actuator_characterization_mode+0x210>)
 8008f6e:	4879      	ldr	r0, [pc, #484]	; (8009154 <motor_actuator_characterization_mode+0x214>)
 8008f70:	f002 f9c0 	bl	800b2f4 <sprintf>
			rotor_test_speed_min, rotor_test_speed_max);
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8008f74:	4877      	ldr	r0, [pc, #476]	; (8009154 <motor_actuator_characterization_mode+0x214>)
 8008f76:	f7f7 f93d 	bl	80001f4 <strlen>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f82:	4974      	ldr	r1, [pc, #464]	; (8009154 <motor_actuator_characterization_mode+0x214>)
 8008f84:	4874      	ldr	r0, [pc, #464]	; (8009158 <motor_actuator_characterization_mode+0x218>)
 8008f86:	f7fd fde1 	bl	8006b4c <HAL_UART_Transmit>
			HAL_MAX_DELAY);

	BSP_MotorControl_SetAcceleration(0,
 8008f8a:	4b74      	ldr	r3, [pc, #464]	; (800915c <motor_actuator_characterization_mode+0x21c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	4619      	mov	r1, r3
 8008f92:	2000      	movs	r0, #0
 8008f94:	f7fa ff30 	bl	8003df8 <BSP_MotorControl_SetAcceleration>
			(uint16_t) (rotor_test_acceleration_max));
	BSP_MotorControl_SetDeceleration(0,
 8008f98:	4b71      	ldr	r3, [pc, #452]	; (8009160 <motor_actuator_characterization_mode+0x220>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	f7fa ff51 	bl	8003e48 <BSP_MotorControl_SetDeceleration>
			(uint16_t) (swing_deceleration_max));

	sprintf(msg,
			"\n\rMotor Profile Acceleration Max %u Deceleration Max %u",
			BSP_MotorControl_GetAcceleration(0),
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	f7fa fe0c 	bl	8003bc4 <BSP_MotorControl_GetAcceleration>
 8008fac:	4603      	mov	r3, r0
	sprintf(msg,
 8008fae:	461c      	mov	r4, r3
			BSP_MotorControl_GetDeceleration(0));
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	f7fa fe4f 	bl	8003c54 <BSP_MotorControl_GetDeceleration>
 8008fb6:	4603      	mov	r3, r0
	sprintf(msg,
 8008fb8:	4622      	mov	r2, r4
 8008fba:	496a      	ldr	r1, [pc, #424]	; (8009164 <motor_actuator_characterization_mode+0x224>)
 8008fbc:	4865      	ldr	r0, [pc, #404]	; (8009154 <motor_actuator_characterization_mode+0x214>)
 8008fbe:	f002 f999 	bl	800b2f4 <sprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8008fc2:	4864      	ldr	r0, [pc, #400]	; (8009154 <motor_actuator_characterization_mode+0x214>)
 8008fc4:	f7f7 f916 	bl	80001f4 <strlen>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd0:	4960      	ldr	r1, [pc, #384]	; (8009154 <motor_actuator_characterization_mode+0x214>)
 8008fd2:	4861      	ldr	r0, [pc, #388]	; (8009158 <motor_actuator_characterization_mode+0x218>)
 8008fd4:	f7fd fdba 	bl	8006b4c <HAL_UART_Transmit>

	/*
	 * Set Rotor Position Zero
	 */

	rotor_position_set();
 8008fd8:	f7ff fe00 	bl	8008bdc <rotor_position_set>
	test_time = HAL_GetTick() - tick_cycle_start;
 8008fdc:	f7fb f98a 	bl	80042f4 <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	4b61      	ldr	r3, [pc, #388]	; (8009168 <motor_actuator_characterization_mode+0x228>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	ee07 3a90 	vmov	s15, r3
 8008fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ff0:	4b5e      	ldr	r3, [pc, #376]	; (800916c <motor_actuator_characterization_mode+0x22c>)
 8008ff2:	edc3 7a00 	vstr	s15, [r3]

	rotor_chirp_step_period = (int) (rotor_chirp_period * 240.0);
 8008ff6:	4b5e      	ldr	r3, [pc, #376]	; (8009170 <motor_actuator_characterization_mode+0x230>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7f7 fabc 	bl	8000578 <__aeabi_f2d>
 8009000:	f04f 0200 	mov.w	r2, #0
 8009004:	4b5b      	ldr	r3, [pc, #364]	; (8009174 <motor_actuator_characterization_mode+0x234>)
 8009006:	f7f7 fb0f 	bl	8000628 <__aeabi_dmul>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	4610      	mov	r0, r2
 8009010:	4619      	mov	r1, r3
 8009012:	f7f7 fdb9 	bl	8000b88 <__aeabi_d2iz>
 8009016:	4603      	mov	r3, r0
 8009018:	4a57      	ldr	r2, [pc, #348]	; (8009178 <motor_actuator_characterization_mode+0x238>)
 800901a:	6013      	str	r3, [r2, #0]
	tick_cycle_start = HAL_GetTick();
 800901c:	f7fb f96a 	bl	80042f4 <HAL_GetTick>
 8009020:	4603      	mov	r3, r0
 8009022:	4a51      	ldr	r2, [pc, #324]	; (8009168 <motor_actuator_characterization_mode+0x228>)
 8009024:	6013      	str	r3, [r2, #0]
	mode_index_command = 1;
 8009026:	4b55      	ldr	r3, [pc, #340]	; (800917c <motor_actuator_characterization_mode+0x23c>)
 8009028:	2201      	movs	r2, #1
 800902a:	601a      	str	r2, [r3, #0]
	mode_index = 1;
 800902c:	4b54      	ldr	r3, [pc, #336]	; (8009180 <motor_actuator_characterization_mode+0x240>)
 800902e:	2201      	movs	r2, #1
 8009030:	601a      	str	r2, [r3, #0]

	while (1) {
		i = 0;
 8009032:	4b54      	ldr	r3, [pc, #336]	; (8009184 <motor_actuator_characterization_mode+0x244>)
 8009034:	2200      	movs	r2, #0
 8009036:	601a      	str	r2, [r3, #0]
		while (i < rotor_chirp_step_period) {
 8009038:	f000 bc58 	b.w	80098ec <motor_actuator_characterization_mode+0x9ac>
			RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE
					- __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800903c:	4b52      	ldr	r3, [pc, #328]	; (8009188 <motor_actuator_characterization_mode+0x248>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
			RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE
 8009046:	4a51      	ldr	r2, [pc, #324]	; (800918c <motor_actuator_characterization_mode+0x24c>)
 8009048:	6013      	str	r3, [r2, #0]
			readBytes = Extract_Msg(RxBuffer, RxBuffer_ReadIdx,
 800904a:	4b51      	ldr	r3, [pc, #324]	; (8009190 <motor_actuator_characterization_mode+0x250>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	b299      	uxth	r1, r3
 8009050:	4b4e      	ldr	r3, [pc, #312]	; (800918c <motor_actuator_characterization_mode+0x24c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	b29a      	uxth	r2, r3
 8009056:	4b4f      	ldr	r3, [pc, #316]	; (8009194 <motor_actuator_characterization_mode+0x254>)
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	23c8      	movs	r3, #200	; 0xc8
 800905c:	484e      	ldr	r0, [pc, #312]	; (8009198 <motor_actuator_characterization_mode+0x258>)
 800905e:	f7ff fbed 	bl	800883c <Extract_Msg>
 8009062:	4603      	mov	r3, r0
 8009064:	461a      	mov	r2, r3
 8009066:	4b4d      	ldr	r3, [pc, #308]	; (800919c <motor_actuator_characterization_mode+0x25c>)
 8009068:	601a      	str	r2, [r3, #0]
					RxBuffer_WriteIdx, UART_RX_BUFFER_SIZE, &Msg);

			if (readBytes == 2 && Msg.Len == 1 && i % 10 == 0) {
 800906a:	4b4c      	ldr	r3, [pc, #304]	; (800919c <motor_actuator_characterization_mode+0x25c>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b02      	cmp	r3, #2
 8009070:	f040 80b2 	bne.w	80091d8 <motor_actuator_characterization_mode+0x298>
 8009074:	4b47      	ldr	r3, [pc, #284]	; (8009194 <motor_actuator_characterization_mode+0x254>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b01      	cmp	r3, #1
 800907a:	f040 80ad 	bne.w	80091d8 <motor_actuator_characterization_mode+0x298>
 800907e:	4b41      	ldr	r3, [pc, #260]	; (8009184 <motor_actuator_characterization_mode+0x244>)
 8009080:	6819      	ldr	r1, [r3, #0]
 8009082:	4b47      	ldr	r3, [pc, #284]	; (80091a0 <motor_actuator_characterization_mode+0x260>)
 8009084:	fb83 2301 	smull	r2, r3, r3, r1
 8009088:	109a      	asrs	r2, r3, #2
 800908a:	17cb      	asrs	r3, r1, #31
 800908c:	1ad2      	subs	r2, r2, r3
 800908e:	4613      	mov	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	1aca      	subs	r2, r1, r3
 8009098:	2a00      	cmp	r2, #0
 800909a:	f040 809d 	bne.w	80091d8 <motor_actuator_characterization_mode+0x298>
				RxBuffer_ReadIdx = (RxBuffer_ReadIdx + readBytes)
 800909e:	4b3c      	ldr	r3, [pc, #240]	; (8009190 <motor_actuator_characterization_mode+0x250>)
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	4b3e      	ldr	r3, [pc, #248]	; (800919c <motor_actuator_characterization_mode+0x25c>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	441a      	add	r2, r3
								% UART_RX_BUFFER_SIZE;
 80090a8:	4b3e      	ldr	r3, [pc, #248]	; (80091a4 <motor_actuator_characterization_mode+0x264>)
 80090aa:	fba3 1302 	umull	r1, r3, r3, r2
 80090ae:	099b      	lsrs	r3, r3, #6
 80090b0:	21c8      	movs	r1, #200	; 0xc8
 80090b2:	fb01 f303 	mul.w	r3, r1, r3
 80090b6:	1ad3      	subs	r3, r2, r3
				RxBuffer_ReadIdx = (RxBuffer_ReadIdx + readBytes)
 80090b8:	4a35      	ldr	r2, [pc, #212]	; (8009190 <motor_actuator_characterization_mode+0x250>)
 80090ba:	6013      	str	r3, [r2, #0]
				mode_transition_state = 1;
 80090bc:	4b3a      	ldr	r3, [pc, #232]	; (80091a8 <motor_actuator_characterization_mode+0x268>)
 80090be:	2201      	movs	r2, #1
 80090c0:	601a      	str	r2, [r3, #0]
				if (strcmp((char *) Msg.Data, mode_string_stop) == 0) {
 80090c2:	493a      	ldr	r1, [pc, #232]	; (80091ac <motor_actuator_characterization_mode+0x26c>)
 80090c4:	483a      	ldr	r0, [pc, #232]	; (80091b0 <motor_actuator_characterization_mode+0x270>)
 80090c6:	f7f7 f88b 	bl	80001e0 <strcmp>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d104      	bne.n	80090da <motor_actuator_characterization_mode+0x19a>
					mode_index_command = mode_quit;
 80090d0:	4b38      	ldr	r3, [pc, #224]	; (80091b4 <motor_actuator_characterization_mode+0x274>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a29      	ldr	r2, [pc, #164]	; (800917c <motor_actuator_characterization_mode+0x23c>)
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	e07e      	b.n	80091d8 <motor_actuator_characterization_mode+0x298>
				} else if (strcmp((char *) Msg.Data, mode_string_inc_accel)
 80090da:	4937      	ldr	r1, [pc, #220]	; (80091b8 <motor_actuator_characterization_mode+0x278>)
 80090dc:	4834      	ldr	r0, [pc, #208]	; (80091b0 <motor_actuator_characterization_mode+0x270>)
 80090de:	f7f7 f87f 	bl	80001e0 <strcmp>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d103      	bne.n	80090f0 <motor_actuator_characterization_mode+0x1b0>
						== 0) {
					mode_index_command = 17;
 80090e8:	4b24      	ldr	r3, [pc, #144]	; (800917c <motor_actuator_characterization_mode+0x23c>)
 80090ea:	2211      	movs	r2, #17
 80090ec:	601a      	str	r2, [r3, #0]
 80090ee:	e073      	b.n	80091d8 <motor_actuator_characterization_mode+0x298>
				} else if (strcmp((char *) Msg.Data, mode_string_dec_accel)
 80090f0:	4932      	ldr	r1, [pc, #200]	; (80091bc <motor_actuator_characterization_mode+0x27c>)
 80090f2:	482f      	ldr	r0, [pc, #188]	; (80091b0 <motor_actuator_characterization_mode+0x270>)
 80090f4:	f7f7 f874 	bl	80001e0 <strcmp>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d103      	bne.n	8009106 <motor_actuator_characterization_mode+0x1c6>
						== 0) {
					mode_index_command = 16;
 80090fe:	4b1f      	ldr	r3, [pc, #124]	; (800917c <motor_actuator_characterization_mode+0x23c>)
 8009100:	2210      	movs	r2, #16
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	e068      	b.n	80091d8 <motor_actuator_characterization_mode+0x298>
				} else if (strcmp((char *) Msg.Data,mode_string_inc_amp)
 8009106:	492e      	ldr	r1, [pc, #184]	; (80091c0 <motor_actuator_characterization_mode+0x280>)
 8009108:	4829      	ldr	r0, [pc, #164]	; (80091b0 <motor_actuator_characterization_mode+0x270>)
 800910a:	f7f7 f869 	bl	80001e0 <strcmp>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d103      	bne.n	800911c <motor_actuator_characterization_mode+0x1dc>
						== 0) {
					mode_index_command = 18;
 8009114:	4b19      	ldr	r3, [pc, #100]	; (800917c <motor_actuator_characterization_mode+0x23c>)
 8009116:	2212      	movs	r2, #18
 8009118:	601a      	str	r2, [r3, #0]
 800911a:	e05d      	b.n	80091d8 <motor_actuator_characterization_mode+0x298>
				} else if (strcmp((char *) Msg.Data,mode_string_dec_amp)
 800911c:	4929      	ldr	r1, [pc, #164]	; (80091c4 <motor_actuator_characterization_mode+0x284>)
 800911e:	4824      	ldr	r0, [pc, #144]	; (80091b0 <motor_actuator_characterization_mode+0x270>)
 8009120:	f7f7 f85e 	bl	80001e0 <strcmp>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d103      	bne.n	8009132 <motor_actuator_characterization_mode+0x1f2>
						== 0) {
					mode_index_command = 19;
 800912a:	4b14      	ldr	r3, [pc, #80]	; (800917c <motor_actuator_characterization_mode+0x23c>)
 800912c:	2213      	movs	r2, #19
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	e052      	b.n	80091d8 <motor_actuator_characterization_mode+0x298>
				} else if (strcmp((char *) Msg.Data,
 8009132:	4925      	ldr	r1, [pc, #148]	; (80091c8 <motor_actuator_characterization_mode+0x288>)
 8009134:	481e      	ldr	r0, [pc, #120]	; (80091b0 <motor_actuator_characterization_mode+0x270>)
 8009136:	f7f7 f853 	bl	80001e0 <strcmp>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d145      	bne.n	80091cc <motor_actuator_characterization_mode+0x28c>
						mode_string_mode_motor_characterization_mode)
						== 0) {
					mode_index_command = 1;
 8009140:	4b0e      	ldr	r3, [pc, #56]	; (800917c <motor_actuator_characterization_mode+0x23c>)
 8009142:	2201      	movs	r2, #1
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	e047      	b.n	80091d8 <motor_actuator_characterization_mode+0x298>
 8009148:	20004a60 	.word	0x20004a60
 800914c:	20004a5c 	.word	0x20004a5c
 8009150:	08011c74 	.word	0x08011c74
 8009154:	20000d74 	.word	0x20000d74
 8009158:	20000a78 	.word	0x20000a78
 800915c:	20004a64 	.word	0x20004a64
 8009160:	20004a68 	.word	0x20004a68
 8009164:	08011c9c 	.word	0x08011c9c
 8009168:	2000800c 	.word	0x2000800c
 800916c:	20008040 	.word	0x20008040
 8009170:	20004a18 	.word	0x20004a18
 8009174:	406e0000 	.word	0x406e0000
 8009178:	20004a24 	.word	0x20004a24
 800917c:	20004c40 	.word	0x20004c40
 8009180:	20004be0 	.word	0x20004be0
 8009184:	20000f64 	.word	0x20000f64
 8009188:	20000ab8 	.word	0x20000ab8
 800918c:	2000805c 	.word	0x2000805c
 8009190:	20008058 	.word	0x20008058
 8009194:	20000b18 	.word	0x20000b18
 8009198:	20000b80 	.word	0x20000b80
 800919c:	20008060 	.word	0x20008060
 80091a0:	66666667 	.word	0x66666667
 80091a4:	51eb851f 	.word	0x51eb851f
 80091a8:	20004c48 	.word	0x20004c48
 80091ac:	20004c50 	.word	0x20004c50
 80091b0:	20000b1c 	.word	0x20000b1c
 80091b4:	20004c34 	.word	0x20004c34
 80091b8:	200051c8 	.word	0x200051c8
 80091bc:	20005290 	.word	0x20005290
 80091c0:	20005358 	.word	0x20005358
 80091c4:	20005420 	.word	0x20005420
 80091c8:	20005740 	.word	0x20005740
				} else {
					mode_index_command = atoi((char*) Msg.Data);
 80091cc:	4897      	ldr	r0, [pc, #604]	; (800942c <motor_actuator_characterization_mode+0x4ec>)
 80091ce:	f001 f925 	bl	800a41c <atoi>
 80091d2:	4603      	mov	r3, r0
 80091d4:	4a96      	ldr	r2, [pc, #600]	; (8009430 <motor_actuator_characterization_mode+0x4f0>)
 80091d6:	6013      	str	r3, [r2, #0]
				}
			}



			if (mode_index_command == mode_quit) {
 80091d8:	4b95      	ldr	r3, [pc, #596]	; (8009430 <motor_actuator_characterization_mode+0x4f0>)
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	4b95      	ldr	r3, [pc, #596]	; (8009434 <motor_actuator_characterization_mode+0x4f4>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	f000 838b 	beq.w	80098fc <motor_actuator_characterization_mode+0x9bc>
				break;
			}

			if (mode_index_command == 1 && mode_transition_state == 1) {
 80091e6:	4b92      	ldr	r3, [pc, #584]	; (8009430 <motor_actuator_characterization_mode+0x4f0>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d109      	bne.n	8009202 <motor_actuator_characterization_mode+0x2c2>
 80091ee:	4b92      	ldr	r3, [pc, #584]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d105      	bne.n	8009202 <motor_actuator_characterization_mode+0x2c2>
				mode_index = 1;
 80091f6:	4b91      	ldr	r3, [pc, #580]	; (800943c <motor_actuator_characterization_mode+0x4fc>)
 80091f8:	2201      	movs	r2, #1
 80091fa:	601a      	str	r2, [r3, #0]
				mode_transition_state = 0;
 80091fc:	4b8e      	ldr	r3, [pc, #568]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 80091fe:	2200      	movs	r2, #0
 8009200:	601a      	str	r2, [r3, #0]
			}

			if (mode_index_command == 2 && mode_transition_state == 1) {
 8009202:	4b8b      	ldr	r3, [pc, #556]	; (8009430 <motor_actuator_characterization_mode+0x4f0>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b02      	cmp	r3, #2
 8009208:	d109      	bne.n	800921e <motor_actuator_characterization_mode+0x2de>
 800920a:	4b8b      	ldr	r3, [pc, #556]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d105      	bne.n	800921e <motor_actuator_characterization_mode+0x2de>
				mode_index = 2;
 8009212:	4b8a      	ldr	r3, [pc, #552]	; (800943c <motor_actuator_characterization_mode+0x4fc>)
 8009214:	2202      	movs	r2, #2
 8009216:	601a      	str	r2, [r3, #0]
				mode_transition_state = 0;
 8009218:	4b87      	ldr	r3, [pc, #540]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 800921a:	2200      	movs	r2, #0
 800921c:	601a      	str	r2, [r3, #0]
			}

			if (mode_index_command == 3 && mode_transition_state == 1) {
 800921e:	4b84      	ldr	r3, [pc, #528]	; (8009430 <motor_actuator_characterization_mode+0x4f0>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b03      	cmp	r3, #3
 8009224:	d10c      	bne.n	8009240 <motor_actuator_characterization_mode+0x300>
 8009226:	4b84      	ldr	r3, [pc, #528]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d108      	bne.n	8009240 <motor_actuator_characterization_mode+0x300>
				L6474_SetAnalogValue(0, L6474_TVAL, MAX_TORQUE_CONFIG);
 800922e:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8009440 <motor_actuator_characterization_mode+0x500>
 8009232:	2109      	movs	r1, #9
 8009234:	2000      	movs	r0, #0
 8009236:	f7f8 fe2d 	bl	8001e94 <L6474_SetAnalogValue>
				mode_transition_state = 0;
 800923a:	4b7f      	ldr	r3, [pc, #508]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 800923c:	2200      	movs	r2, #0
 800923e:	601a      	str	r2, [r3, #0]
			}

			if (mode_index_command == 4 && mode_transition_state == 1) {
 8009240:	4b7b      	ldr	r3, [pc, #492]	; (8009430 <motor_actuator_characterization_mode+0x4f0>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b04      	cmp	r3, #4
 8009246:	d10c      	bne.n	8009262 <motor_actuator_characterization_mode+0x322>
 8009248:	4b7b      	ldr	r3, [pc, #492]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d108      	bne.n	8009262 <motor_actuator_characterization_mode+0x322>
				L6474_SetAnalogValue(0, L6474_TVAL, MAX_TORQUE_CONFIG);
 8009250:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8009440 <motor_actuator_characterization_mode+0x500>
 8009254:	2109      	movs	r1, #9
 8009256:	2000      	movs	r0, #0
 8009258:	f7f8 fe1c 	bl	8001e94 <L6474_SetAnalogValue>
				mode_transition_state = 0;
 800925c:	4b76      	ldr	r3, [pc, #472]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 800925e:	2200      	movs	r2, #0
 8009260:	601a      	str	r2, [r3, #0]
			}
			if (mode_index_command == 5 && mode_transition_state == 1) {
 8009262:	4b73      	ldr	r3, [pc, #460]	; (8009430 <motor_actuator_characterization_mode+0x4f0>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b05      	cmp	r3, #5
 8009268:	d10c      	bne.n	8009284 <motor_actuator_characterization_mode+0x344>
 800926a:	4b73      	ldr	r3, [pc, #460]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d108      	bne.n	8009284 <motor_actuator_characterization_mode+0x344>
				L6474_SetAnalogValue(0, L6474_TVAL, MAX_TORQUE_CONFIG);
 8009272:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8009440 <motor_actuator_characterization_mode+0x500>
 8009276:	2109      	movs	r1, #9
 8009278:	2000      	movs	r0, #0
 800927a:	f7f8 fe0b 	bl	8001e94 <L6474_SetAnalogValue>
				mode_transition_state = 0;
 800927e:	4b6e      	ldr	r3, [pc, #440]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 8009280:	2200      	movs	r2, #0
 8009282:	601a      	str	r2, [r3, #0]
			}

			if (mode_index_command == 6 && mode_transition_state == 1) {
 8009284:	4b6a      	ldr	r3, [pc, #424]	; (8009430 <motor_actuator_characterization_mode+0x4f0>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b06      	cmp	r3, #6
 800928a:	d121      	bne.n	80092d0 <motor_actuator_characterization_mode+0x390>
 800928c:	4b6a      	ldr	r3, [pc, #424]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d11d      	bne.n	80092d0 <motor_actuator_characterization_mode+0x390>
				rotor_test_speed_max = rotor_test_speed_max + 100;
 8009294:	4b6b      	ldr	r3, [pc, #428]	; (8009444 <motor_actuator_characterization_mode+0x504>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	3364      	adds	r3, #100	; 0x64
 800929a:	4a6a      	ldr	r2, [pc, #424]	; (8009444 <motor_actuator_characterization_mode+0x504>)
 800929c:	6013      	str	r3, [r2, #0]
				if (rotor_test_speed_max > 1000) {
 800929e:	4b69      	ldr	r3, [pc, #420]	; (8009444 <motor_actuator_characterization_mode+0x504>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092a6:	dd03      	ble.n	80092b0 <motor_actuator_characterization_mode+0x370>
					rotor_test_speed_max = 1000;
 80092a8:	4b66      	ldr	r3, [pc, #408]	; (8009444 <motor_actuator_characterization_mode+0x504>)
 80092aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80092ae:	601a      	str	r2, [r3, #0]
				}
				BSP_MotorControl_SoftStop(0);
 80092b0:	2000      	movs	r0, #0
 80092b2:	f7fa fe63 	bl	8003f7c <BSP_MotorControl_SoftStop>
				BSP_MotorControl_WaitWhileActive(0);
 80092b6:	2000      	movs	r0, #0
 80092b8:	f7fa fea4 	bl	8004004 <BSP_MotorControl_WaitWhileActive>
				BSP_MotorControl_SetMaxSpeed(0, rotor_test_speed_max);
 80092bc:	4b61      	ldr	r3, [pc, #388]	; (8009444 <motor_actuator_characterization_mode+0x504>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	4619      	mov	r1, r3
 80092c4:	2000      	movs	r0, #0
 80092c6:	f7fa fe09 	bl	8003edc <BSP_MotorControl_SetMaxSpeed>
				mode_transition_state = 0;
 80092ca:	4b5b      	ldr	r3, [pc, #364]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]
			}

			if (mode_index_command == 7 && mode_transition_state == 1) {
 80092d0:	4b57      	ldr	r3, [pc, #348]	; (8009430 <motor_actuator_characterization_mode+0x4f0>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b07      	cmp	r3, #7
 80092d6:	d129      	bne.n	800932c <motor_actuator_characterization_mode+0x3ec>
 80092d8:	4b57      	ldr	r3, [pc, #348]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d125      	bne.n	800932c <motor_actuator_characterization_mode+0x3ec>
				rotor_test_speed_max = rotor_test_speed_max - 100;
 80092e0:	4b58      	ldr	r3, [pc, #352]	; (8009444 <motor_actuator_characterization_mode+0x504>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3b64      	subs	r3, #100	; 0x64
 80092e6:	4a57      	ldr	r2, [pc, #348]	; (8009444 <motor_actuator_characterization_mode+0x504>)
 80092e8:	6013      	str	r3, [r2, #0]
				if (rotor_test_speed_max < 200) {
 80092ea:	4b56      	ldr	r3, [pc, #344]	; (8009444 <motor_actuator_characterization_mode+0x504>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2bc7      	cmp	r3, #199	; 0xc7
 80092f0:	dc02      	bgt.n	80092f8 <motor_actuator_characterization_mode+0x3b8>
					rotor_test_speed_max = 200;
 80092f2:	4b54      	ldr	r3, [pc, #336]	; (8009444 <motor_actuator_characterization_mode+0x504>)
 80092f4:	22c8      	movs	r2, #200	; 0xc8
 80092f6:	601a      	str	r2, [r3, #0]
				}
				if (rotor_test_speed_min > rotor_test_speed_max) {
 80092f8:	4b53      	ldr	r3, [pc, #332]	; (8009448 <motor_actuator_characterization_mode+0x508>)
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	4b51      	ldr	r3, [pc, #324]	; (8009444 <motor_actuator_characterization_mode+0x504>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	429a      	cmp	r2, r3
 8009302:	dd03      	ble.n	800930c <motor_actuator_characterization_mode+0x3cc>
					rotor_test_speed_max = rotor_test_speed_min;
 8009304:	4b50      	ldr	r3, [pc, #320]	; (8009448 <motor_actuator_characterization_mode+0x508>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a4e      	ldr	r2, [pc, #312]	; (8009444 <motor_actuator_characterization_mode+0x504>)
 800930a:	6013      	str	r3, [r2, #0]
				}
				BSP_MotorControl_SoftStop(0);
 800930c:	2000      	movs	r0, #0
 800930e:	f7fa fe35 	bl	8003f7c <BSP_MotorControl_SoftStop>
				BSP_MotorControl_WaitWhileActive(0);
 8009312:	2000      	movs	r0, #0
 8009314:	f7fa fe76 	bl	8004004 <BSP_MotorControl_WaitWhileActive>
				BSP_MotorControl_SetMaxSpeed(0, rotor_test_speed_max);
 8009318:	4b4a      	ldr	r3, [pc, #296]	; (8009444 <motor_actuator_characterization_mode+0x504>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	b29b      	uxth	r3, r3
 800931e:	4619      	mov	r1, r3
 8009320:	2000      	movs	r0, #0
 8009322:	f7fa fddb 	bl	8003edc <BSP_MotorControl_SetMaxSpeed>
				mode_transition_state = 0;
 8009326:	4b44      	ldr	r3, [pc, #272]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 8009328:	2200      	movs	r2, #0
 800932a:	601a      	str	r2, [r3, #0]
			}

			if (mode_index_command == 8 && mode_transition_state == 1) {
 800932c:	4b40      	ldr	r3, [pc, #256]	; (8009430 <motor_actuator_characterization_mode+0x4f0>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b08      	cmp	r3, #8
 8009332:	d12b      	bne.n	800938c <motor_actuator_characterization_mode+0x44c>
 8009334:	4b40      	ldr	r3, [pc, #256]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d127      	bne.n	800938c <motor_actuator_characterization_mode+0x44c>
				rotor_test_speed_min = rotor_test_speed_min + 100;
 800933c:	4b42      	ldr	r3, [pc, #264]	; (8009448 <motor_actuator_characterization_mode+0x508>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3364      	adds	r3, #100	; 0x64
 8009342:	4a41      	ldr	r2, [pc, #260]	; (8009448 <motor_actuator_characterization_mode+0x508>)
 8009344:	6013      	str	r3, [r2, #0]
				if (rotor_test_speed_min > rotor_test_speed_max) {
 8009346:	4b40      	ldr	r3, [pc, #256]	; (8009448 <motor_actuator_characterization_mode+0x508>)
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	4b3e      	ldr	r3, [pc, #248]	; (8009444 <motor_actuator_characterization_mode+0x504>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	429a      	cmp	r2, r3
 8009350:	dd03      	ble.n	800935a <motor_actuator_characterization_mode+0x41a>
					rotor_test_speed_min = rotor_test_speed_max;
 8009352:	4b3c      	ldr	r3, [pc, #240]	; (8009444 <motor_actuator_characterization_mode+0x504>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a3c      	ldr	r2, [pc, #240]	; (8009448 <motor_actuator_characterization_mode+0x508>)
 8009358:	6013      	str	r3, [r2, #0]
				}
				if (rotor_test_speed_min > 1000) {
 800935a:	4b3b      	ldr	r3, [pc, #236]	; (8009448 <motor_actuator_characterization_mode+0x508>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009362:	dd03      	ble.n	800936c <motor_actuator_characterization_mode+0x42c>
					rotor_test_speed_min = 1000;
 8009364:	4b38      	ldr	r3, [pc, #224]	; (8009448 <motor_actuator_characterization_mode+0x508>)
 8009366:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800936a:	601a      	str	r2, [r3, #0]
				}
				BSP_MotorControl_SoftStop(0);
 800936c:	2000      	movs	r0, #0
 800936e:	f7fa fe05 	bl	8003f7c <BSP_MotorControl_SoftStop>
				BSP_MotorControl_WaitWhileActive(0);
 8009372:	2000      	movs	r0, #0
 8009374:	f7fa fe46 	bl	8004004 <BSP_MotorControl_WaitWhileActive>
				BSP_MotorControl_SetMinSpeed(0, rotor_test_speed_min);
 8009378:	4b33      	ldr	r3, [pc, #204]	; (8009448 <motor_actuator_characterization_mode+0x508>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	b29b      	uxth	r3, r3
 800937e:	4619      	mov	r1, r3
 8009380:	2000      	movs	r0, #0
 8009382:	f7fa fdd3 	bl	8003f2c <BSP_MotorControl_SetMinSpeed>
				mode_transition_state = 0;
 8009386:	4b2c      	ldr	r3, [pc, #176]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]
			}

			if (mode_index_command == 9 && mode_transition_state == 1) {
 800938c:	4b28      	ldr	r3, [pc, #160]	; (8009430 <motor_actuator_characterization_mode+0x4f0>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b09      	cmp	r3, #9
 8009392:	d11f      	bne.n	80093d4 <motor_actuator_characterization_mode+0x494>
 8009394:	4b28      	ldr	r3, [pc, #160]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d11b      	bne.n	80093d4 <motor_actuator_characterization_mode+0x494>
				rotor_test_speed_min = rotor_test_speed_min - 100;
 800939c:	4b2a      	ldr	r3, [pc, #168]	; (8009448 <motor_actuator_characterization_mode+0x508>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3b64      	subs	r3, #100	; 0x64
 80093a2:	4a29      	ldr	r2, [pc, #164]	; (8009448 <motor_actuator_characterization_mode+0x508>)
 80093a4:	6013      	str	r3, [r2, #0]
				if (rotor_test_speed_min < 200) {
 80093a6:	4b28      	ldr	r3, [pc, #160]	; (8009448 <motor_actuator_characterization_mode+0x508>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2bc7      	cmp	r3, #199	; 0xc7
 80093ac:	dc02      	bgt.n	80093b4 <motor_actuator_characterization_mode+0x474>
					rotor_test_speed_min = 200;
 80093ae:	4b26      	ldr	r3, [pc, #152]	; (8009448 <motor_actuator_characterization_mode+0x508>)
 80093b0:	22c8      	movs	r2, #200	; 0xc8
 80093b2:	601a      	str	r2, [r3, #0]
				}
				BSP_MotorControl_SoftStop(0);
 80093b4:	2000      	movs	r0, #0
 80093b6:	f7fa fde1 	bl	8003f7c <BSP_MotorControl_SoftStop>
				BSP_MotorControl_WaitWhileActive(0);
 80093ba:	2000      	movs	r0, #0
 80093bc:	f7fa fe22 	bl	8004004 <BSP_MotorControl_WaitWhileActive>
				BSP_MotorControl_SetMinSpeed(0, rotor_test_speed_min);
 80093c0:	4b21      	ldr	r3, [pc, #132]	; (8009448 <motor_actuator_characterization_mode+0x508>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	4619      	mov	r1, r3
 80093c8:	2000      	movs	r0, #0
 80093ca:	f7fa fdaf 	bl	8003f2c <BSP_MotorControl_SetMinSpeed>
				mode_transition_state = 0;
 80093ce:	4b1a      	ldr	r3, [pc, #104]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	601a      	str	r2, [r3, #0]
			}

			if (mode_index_command == 16 && mode_transition_state == 1) {
 80093d4:	4b16      	ldr	r3, [pc, #88]	; (8009430 <motor_actuator_characterization_mode+0x4f0>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b10      	cmp	r3, #16
 80093da:	d140      	bne.n	800945e <motor_actuator_characterization_mode+0x51e>
 80093dc:	4b16      	ldr	r3, [pc, #88]	; (8009438 <motor_actuator_characterization_mode+0x4f8>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d13c      	bne.n	800945e <motor_actuator_characterization_mode+0x51e>
				rotor_test_acceleration_max = rotor_test_acceleration_max - 500;
 80093e4:	4b19      	ldr	r3, [pc, #100]	; (800944c <motor_actuator_characterization_mode+0x50c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80093ec:	4a17      	ldr	r2, [pc, #92]	; (800944c <motor_actuator_characterization_mode+0x50c>)
 80093ee:	6013      	str	r3, [r2, #0]
				if (rotor_test_acceleration_max < 0) {
 80093f0:	4b16      	ldr	r3, [pc, #88]	; (800944c <motor_actuator_characterization_mode+0x50c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	da02      	bge.n	80093fe <motor_actuator_characterization_mode+0x4be>
					rotor_test_acceleration_max = 0;
 80093f8:	4b14      	ldr	r3, [pc, #80]	; (800944c <motor_actuator_characterization_mode+0x50c>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]
				}
				swing_deceleration_max = rotor_test_acceleration_max;
 80093fe:	4b13      	ldr	r3, [pc, #76]	; (800944c <motor_actuator_characterization_mode+0x50c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a13      	ldr	r2, [pc, #76]	; (8009450 <motor_actuator_characterization_mode+0x510>)
 8009404:	6013      	str	r3, [r2, #0]
				BSP_MotorControl_SoftStop(0);
 8009406:	2000      	movs	r0, #0
 8009408:	f7fa fdb8 	bl	8003f7c <BSP_MotorControl_SoftStop>
				BSP_MotorControl_WaitWhileActive(0);
 800940c:	2000      	movs	r0, #0
 800940e:	f7fa fdf9 	bl	8004004 <BSP_MotorControl_WaitWhileActive>
				BSP_MotorControl_SetAcceleration(0,
 8009412:	4b0e      	ldr	r3, [pc, #56]	; (800944c <motor_actuator_characterization_mode+0x50c>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	b29b      	uxth	r3, r3
 8009418:	4619      	mov	r1, r3
 800941a:	2000      	movs	r0, #0
 800941c:	f7fa fcec 	bl	8003df8 <BSP_MotorControl_SetAcceleration>
						(uint16_t) (rotor_test_acceleration_max));
				BSP_MotorControl_SetDeceleration(0,
 8009420:	4b0b      	ldr	r3, [pc, #44]	; (8009450 <motor_actuator_characterization_mode+0x510>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	b29b      	uxth	r3, r3
 8009426:	4619      	mov	r1, r3
 8009428:	2000      	movs	r0, #0
 800942a:	e013      	b.n	8009454 <motor_actuator_characterization_mode+0x514>
 800942c:	20000b1c 	.word	0x20000b1c
 8009430:	20004c40 	.word	0x20004c40
 8009434:	20004c34 	.word	0x20004c34
 8009438:	20004c48 	.word	0x20004c48
 800943c:	20004be0 	.word	0x20004be0
 8009440:	44480000 	.word	0x44480000
 8009444:	20004a60 	.word	0x20004a60
 8009448:	20004a5c 	.word	0x20004a5c
 800944c:	20004a64 	.word	0x20004a64
 8009450:	20004a68 	.word	0x20004a68
 8009454:	f7fa fcf8 	bl	8003e48 <BSP_MotorControl_SetDeceleration>
						(uint16_t) (swing_deceleration_max));
				mode_transition_state = 0;
 8009458:	4bb5      	ldr	r3, [pc, #724]	; (8009730 <motor_actuator_characterization_mode+0x7f0>)
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]
			}

			if (mode_index_command == 17 && mode_transition_state == 1) {
 800945e:	4bb5      	ldr	r3, [pc, #724]	; (8009734 <motor_actuator_characterization_mode+0x7f4>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b11      	cmp	r3, #17
 8009464:	d12e      	bne.n	80094c4 <motor_actuator_characterization_mode+0x584>
 8009466:	4bb2      	ldr	r3, [pc, #712]	; (8009730 <motor_actuator_characterization_mode+0x7f0>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d12a      	bne.n	80094c4 <motor_actuator_characterization_mode+0x584>
				rotor_test_acceleration_max = rotor_test_acceleration_max + 500;
 800946e:	4bb2      	ldr	r3, [pc, #712]	; (8009738 <motor_actuator_characterization_mode+0x7f8>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009476:	4ab0      	ldr	r2, [pc, #704]	; (8009738 <motor_actuator_characterization_mode+0x7f8>)
 8009478:	6013      	str	r3, [r2, #0]
				if (rotor_test_acceleration_max > 10000) {
 800947a:	4baf      	ldr	r3, [pc, #700]	; (8009738 <motor_actuator_characterization_mode+0x7f8>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009482:	4293      	cmp	r3, r2
 8009484:	dd03      	ble.n	800948e <motor_actuator_characterization_mode+0x54e>
					rotor_test_acceleration_max = 10000;
 8009486:	4bac      	ldr	r3, [pc, #688]	; (8009738 <motor_actuator_characterization_mode+0x7f8>)
 8009488:	f242 7210 	movw	r2, #10000	; 0x2710
 800948c:	601a      	str	r2, [r3, #0]
				}
				swing_deceleration_max = rotor_test_acceleration_max;
 800948e:	4baa      	ldr	r3, [pc, #680]	; (8009738 <motor_actuator_characterization_mode+0x7f8>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4aaa      	ldr	r2, [pc, #680]	; (800973c <motor_actuator_characterization_mode+0x7fc>)
 8009494:	6013      	str	r3, [r2, #0]
				BSP_MotorControl_SoftStop(0);
 8009496:	2000      	movs	r0, #0
 8009498:	f7fa fd70 	bl	8003f7c <BSP_MotorControl_SoftStop>
				BSP_MotorControl_WaitWhileActive(0);
 800949c:	2000      	movs	r0, #0
 800949e:	f7fa fdb1 	bl	8004004 <BSP_MotorControl_WaitWhileActive>
				BSP_MotorControl_SetAcceleration(0,
 80094a2:	4ba5      	ldr	r3, [pc, #660]	; (8009738 <motor_actuator_characterization_mode+0x7f8>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	4619      	mov	r1, r3
 80094aa:	2000      	movs	r0, #0
 80094ac:	f7fa fca4 	bl	8003df8 <BSP_MotorControl_SetAcceleration>
						(uint16_t) (rotor_test_acceleration_max));
				BSP_MotorControl_SetDeceleration(0,
 80094b0:	4ba2      	ldr	r3, [pc, #648]	; (800973c <motor_actuator_characterization_mode+0x7fc>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	4619      	mov	r1, r3
 80094b8:	2000      	movs	r0, #0
 80094ba:	f7fa fcc5 	bl	8003e48 <BSP_MotorControl_SetDeceleration>
						(uint16_t) (swing_deceleration_max));
				mode_transition_state = 0;
 80094be:	4b9c      	ldr	r3, [pc, #624]	; (8009730 <motor_actuator_characterization_mode+0x7f0>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]
			}

			if (mode_index_command == 18 && mode_transition_state == 1) {
 80094c4:	4b9b      	ldr	r3, [pc, #620]	; (8009734 <motor_actuator_characterization_mode+0x7f4>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b12      	cmp	r3, #18
 80094ca:	d11d      	bne.n	8009508 <motor_actuator_characterization_mode+0x5c8>
 80094cc:	4b98      	ldr	r3, [pc, #608]	; (8009730 <motor_actuator_characterization_mode+0x7f0>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d119      	bne.n	8009508 <motor_actuator_characterization_mode+0x5c8>
				rotor_chirp_amplitude = rotor_chirp_amplitude + 1;
 80094d4:	4b9a      	ldr	r3, [pc, #616]	; (8009740 <motor_actuator_characterization_mode+0x800>)
 80094d6:	edd3 7a00 	vldr	s15, [r3]
 80094da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80094e2:	4b97      	ldr	r3, [pc, #604]	; (8009740 <motor_actuator_characterization_mode+0x800>)
 80094e4:	edc3 7a00 	vstr	s15, [r3]
				if (rotor_chirp_amplitude > 10) {
 80094e8:	4b95      	ldr	r3, [pc, #596]	; (8009740 <motor_actuator_characterization_mode+0x800>)
 80094ea:	edd3 7a00 	vldr	s15, [r3]
 80094ee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80094f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094fa:	dd02      	ble.n	8009502 <motor_actuator_characterization_mode+0x5c2>
					rotor_chirp_amplitude = 10;
 80094fc:	4b90      	ldr	r3, [pc, #576]	; (8009740 <motor_actuator_characterization_mode+0x800>)
 80094fe:	4a91      	ldr	r2, [pc, #580]	; (8009744 <motor_actuator_characterization_mode+0x804>)
 8009500:	601a      	str	r2, [r3, #0]
				}
				mode_transition_state = 0;
 8009502:	4b8b      	ldr	r3, [pc, #556]	; (8009730 <motor_actuator_characterization_mode+0x7f0>)
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]
			}

			if (mode_index_command == 19 && mode_transition_state == 1) {
 8009508:	4b8a      	ldr	r3, [pc, #552]	; (8009734 <motor_actuator_characterization_mode+0x7f4>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2b13      	cmp	r3, #19
 800950e:	d11e      	bne.n	800954e <motor_actuator_characterization_mode+0x60e>
 8009510:	4b87      	ldr	r3, [pc, #540]	; (8009730 <motor_actuator_characterization_mode+0x7f0>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d11a      	bne.n	800954e <motor_actuator_characterization_mode+0x60e>
				rotor_chirp_amplitude = rotor_chirp_amplitude - 1;
 8009518:	4b89      	ldr	r3, [pc, #548]	; (8009740 <motor_actuator_characterization_mode+0x800>)
 800951a:	edd3 7a00 	vldr	s15, [r3]
 800951e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009522:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009526:	4b86      	ldr	r3, [pc, #536]	; (8009740 <motor_actuator_characterization_mode+0x800>)
 8009528:	edc3 7a00 	vstr	s15, [r3]
				if (rotor_chirp_amplitude < 1) {
 800952c:	4b84      	ldr	r3, [pc, #528]	; (8009740 <motor_actuator_characterization_mode+0x800>)
 800952e:	edd3 7a00 	vldr	s15, [r3]
 8009532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800953a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953e:	d503      	bpl.n	8009548 <motor_actuator_characterization_mode+0x608>
					rotor_chirp_amplitude = 1;
 8009540:	4b7f      	ldr	r3, [pc, #508]	; (8009740 <motor_actuator_characterization_mode+0x800>)
 8009542:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009546:	601a      	str	r2, [r3, #0]
				}
				mode_transition_state = 0;
 8009548:	4b79      	ldr	r3, [pc, #484]	; (8009730 <motor_actuator_characterization_mode+0x7f0>)
 800954a:	2200      	movs	r2, #0
 800954c:	601a      	str	r2, [r3, #0]
			}

			if (i == 0) {
 800954e:	4b7e      	ldr	r3, [pc, #504]	; (8009748 <motor_actuator_characterization_mode+0x808>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d11a      	bne.n	800958c <motor_actuator_characterization_mode+0x64c>
				cycle_period_start = HAL_GetTick();
 8009556:	f7fa fecd 	bl	80042f4 <HAL_GetTick>
 800955a:	4603      	mov	r3, r0
 800955c:	461a      	mov	r2, r3
 800955e:	4b7b      	ldr	r3, [pc, #492]	; (800974c <motor_actuator_characterization_mode+0x80c>)
 8009560:	601a      	str	r2, [r3, #0]
				cycle_period_sum = 100 * Tsample * 1000 - 1;
 8009562:	4b7b      	ldr	r3, [pc, #492]	; (8009750 <motor_actuator_characterization_mode+0x810>)
 8009564:	edd3 7a00 	vldr	s15, [r3]
 8009568:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8009754 <motor_actuator_characterization_mode+0x814>
 800956c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009570:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8009758 <motor_actuator_characterization_mode+0x818>
 8009574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800957c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009584:	ee17 2a90 	vmov	r2, s15
 8009588:	4b74      	ldr	r3, [pc, #464]	; (800975c <motor_actuator_characterization_mode+0x81c>)
 800958a:	601a      	str	r2, [r3, #0]
			}
			if (i % 100 == 0) {
 800958c:	4b6e      	ldr	r3, [pc, #440]	; (8009748 <motor_actuator_characterization_mode+0x808>)
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	4b73      	ldr	r3, [pc, #460]	; (8009760 <motor_actuator_characterization_mode+0x820>)
 8009592:	fb83 1302 	smull	r1, r3, r3, r2
 8009596:	1159      	asrs	r1, r3, #5
 8009598:	17d3      	asrs	r3, r2, #31
 800959a:	1acb      	subs	r3, r1, r3
 800959c:	2164      	movs	r1, #100	; 0x64
 800959e:	fb01 f303 	mul.w	r3, r1, r3
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10e      	bne.n	80095c6 <motor_actuator_characterization_mode+0x686>
				cycle_period_sum = HAL_GetTick() - cycle_period_start;
 80095a8:	f7fa fea4 	bl	80042f4 <HAL_GetTick>
 80095ac:	4603      	mov	r3, r0
 80095ae:	4a67      	ldr	r2, [pc, #412]	; (800974c <motor_actuator_characterization_mode+0x80c>)
 80095b0:	6812      	ldr	r2, [r2, #0]
 80095b2:	1a9b      	subs	r3, r3, r2
 80095b4:	461a      	mov	r2, r3
 80095b6:	4b69      	ldr	r3, [pc, #420]	; (800975c <motor_actuator_characterization_mode+0x81c>)
 80095b8:	601a      	str	r2, [r3, #0]
				cycle_period_start = HAL_GetTick();
 80095ba:	f7fa fe9b 	bl	80042f4 <HAL_GetTick>
 80095be:	4603      	mov	r3, r0
 80095c0:	461a      	mov	r2, r3
 80095c2:	4b62      	ldr	r3, [pc, #392]	; (800974c <motor_actuator_characterization_mode+0x80c>)
 80095c4:	601a      	str	r2, [r3, #0]
			}

			tick_cycle_previous = tick_cycle_current;
 80095c6:	4b67      	ldr	r3, [pc, #412]	; (8009764 <motor_actuator_characterization_mode+0x824>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a67      	ldr	r2, [pc, #412]	; (8009768 <motor_actuator_characterization_mode+0x828>)
 80095cc:	6013      	str	r3, [r2, #0]
			tick_cycle_current = tick;
 80095ce:	4b67      	ldr	r3, [pc, #412]	; (800976c <motor_actuator_characterization_mode+0x82c>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a64      	ldr	r2, [pc, #400]	; (8009764 <motor_actuator_characterization_mode+0x824>)
 80095d4:	6013      	str	r3, [r2, #0]
			chirp_time = (float) (i) / 400;
 80095d6:	4b5c      	ldr	r3, [pc, #368]	; (8009748 <motor_actuator_characterization_mode+0x808>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80095e2:	eddf 6a63 	vldr	s13, [pc, #396]	; 8009770 <motor_actuator_characterization_mode+0x830>
 80095e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80095ea:	4b62      	ldr	r3, [pc, #392]	; (8009774 <motor_actuator_characterization_mode+0x834>)
 80095ec:	edc3 7a00 	vstr	s15, [r3]
			rotor_chirp_frequency = rotor_chirp_start_freq
					+ (rotor_chirp_end_freq - rotor_chirp_start_freq)
 80095f0:	4b61      	ldr	r3, [pc, #388]	; (8009778 <motor_actuator_characterization_mode+0x838>)
 80095f2:	ed93 7a00 	vldr	s14, [r3]
 80095f6:	4b61      	ldr	r3, [pc, #388]	; (800977c <motor_actuator_characterization_mode+0x83c>)
 80095f8:	edd3 7a00 	vldr	s15, [r3]
 80095fc:	ee37 7a67 	vsub.f32	s14, s14, s15
					* (float) (i) / rotor_chirp_step_period;
 8009600:	4b51      	ldr	r3, [pc, #324]	; (8009748 <motor_actuator_characterization_mode+0x808>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	ee07 3a90 	vmov	s15, r3
 8009608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800960c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009610:	4b5b      	ldr	r3, [pc, #364]	; (8009780 <motor_actuator_characterization_mode+0x840>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	ee07 3a90 	vmov	s15, r3
 8009618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800961c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (rotor_chirp_end_freq - rotor_chirp_start_freq)
 8009620:	4b56      	ldr	r3, [pc, #344]	; (800977c <motor_actuator_characterization_mode+0x83c>)
 8009622:	edd3 7a00 	vldr	s15, [r3]
 8009626:	ee77 7a27 	vadd.f32	s15, s14, s15
			rotor_chirp_frequency = rotor_chirp_start_freq
 800962a:	4b56      	ldr	r3, [pc, #344]	; (8009784 <motor_actuator_characterization_mode+0x844>)
 800962c:	edc3 7a00 	vstr	s15, [r3]

			if (mode_index == 1) {
 8009630:	4b55      	ldr	r3, [pc, #340]	; (8009788 <motor_actuator_characterization_mode+0x848>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d13e      	bne.n	80096b6 <motor_actuator_characterization_mode+0x776>
				rotor_position_command_steps =
						rotor_chirp_amplitude
						* (float) (STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE)
 8009638:	4b41      	ldr	r3, [pc, #260]	; (8009740 <motor_actuator_characterization_mode+0x800>)
 800963a:	edd3 7a00 	vldr	s15, [r3]
 800963e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800978c <motor_actuator_characterization_mode+0x84c>
 8009642:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009646:	ee17 0a90 	vmov	r0, s15
 800964a:	f7f6 ff95 	bl	8000578 <__aeabi_f2d>
 800964e:	4604      	mov	r4, r0
 8009650:	460d      	mov	r5, r1
						* sin(
								2.0 * 3.14159
								* rotor_chirp_frequency
 8009652:	4b4c      	ldr	r3, [pc, #304]	; (8009784 <motor_actuator_characterization_mode+0x844>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4618      	mov	r0, r3
 8009658:	f7f6 ff8e 	bl	8000578 <__aeabi_f2d>
 800965c:	a332      	add	r3, pc, #200	; (adr r3, 8009728 <motor_actuator_characterization_mode+0x7e8>)
 800965e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009662:	f7f6 ffe1 	bl	8000628 <__aeabi_dmul>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4690      	mov	r8, r2
 800966c:	4699      	mov	r9, r3
						* sin(
 800966e:	4b41      	ldr	r3, [pc, #260]	; (8009774 <motor_actuator_characterization_mode+0x834>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4618      	mov	r0, r3
 8009674:	f7f6 ff80 	bl	8000578 <__aeabi_f2d>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4640      	mov	r0, r8
 800967e:	4649      	mov	r1, r9
 8009680:	f7f6 ffd2 	bl	8000628 <__aeabi_dmul>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	ec43 2b17 	vmov	d7, r2, r3
 800968c:	eeb0 0a47 	vmov.f32	s0, s14
 8009690:	eef0 0a67 	vmov.f32	s1, s15
 8009694:	f006 ff7c 	bl	8010590 <sin>
 8009698:	ec53 2b10 	vmov	r2, r3, d0
 800969c:	4620      	mov	r0, r4
 800969e:	4629      	mov	r1, r5
 80096a0:	f7f6 ffc2 	bl	8000628 <__aeabi_dmul>
 80096a4:	4602      	mov	r2, r0
 80096a6:	460b      	mov	r3, r1
 80096a8:	4610      	mov	r0, r2
 80096aa:	4619      	mov	r1, r3
 80096ac:	f7f7 fab4 	bl	8000c18 <__aeabi_d2f>
 80096b0:	4603      	mov	r3, r0
				rotor_position_command_steps =
 80096b2:	4a37      	ldr	r2, [pc, #220]	; (8009790 <motor_actuator_characterization_mode+0x850>)
 80096b4:	6013      	str	r3, [r2, #0]
								* chirp_time);
			}

			if (mode_index == 2) {
 80096b6:	4b34      	ldr	r3, [pc, #208]	; (8009788 <motor_actuator_characterization_mode+0x848>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	f040 808c 	bne.w	80097d8 <motor_actuator_characterization_mode+0x898>
				if (sin(
						2.0 * 3.14159 * rotor_chirp_frequency
 80096c0:	4b30      	ldr	r3, [pc, #192]	; (8009784 <motor_actuator_characterization_mode+0x844>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7f6 ff57 	bl	8000578 <__aeabi_f2d>
 80096ca:	a317      	add	r3, pc, #92	; (adr r3, 8009728 <motor_actuator_characterization_mode+0x7e8>)
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	f7f6 ffaa 	bl	8000628 <__aeabi_dmul>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4614      	mov	r4, r2
 80096da:	461d      	mov	r5, r3
				if (sin(
 80096dc:	4b25      	ldr	r3, [pc, #148]	; (8009774 <motor_actuator_characterization_mode+0x834>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7f6 ff49 	bl	8000578 <__aeabi_f2d>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	4620      	mov	r0, r4
 80096ec:	4629      	mov	r1, r5
 80096ee:	f7f6 ff9b 	bl	8000628 <__aeabi_dmul>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	ec43 2b17 	vmov	d7, r2, r3
 80096fa:	eeb0 0a47 	vmov.f32	s0, s14
 80096fe:	eef0 0a67 	vmov.f32	s1, s15
 8009702:	f006 ff45 	bl	8010590 <sin>
 8009706:	ec51 0b10 	vmov	r0, r1, d0
 800970a:	f04f 0200 	mov.w	r2, #0
 800970e:	f04f 0300 	mov.w	r3, #0
 8009712:	f7f7 f9fb 	bl	8000b0c <__aeabi_dcmplt>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d03d      	beq.n	8009798 <motor_actuator_characterization_mode+0x858>
						* chirp_time) < 0) {
					k = -1;
 800971c:	4b1d      	ldr	r3, [pc, #116]	; (8009794 <motor_actuator_characterization_mode+0x854>)
 800971e:	f04f 32ff 	mov.w	r2, #4294967295
 8009722:	601a      	str	r2, [r3, #0]
 8009724:	e03b      	b.n	800979e <motor_actuator_characterization_mode+0x85e>
 8009726:	bf00      	nop
 8009728:	f01b866e 	.word	0xf01b866e
 800972c:	401921f9 	.word	0x401921f9
 8009730:	20004c48 	.word	0x20004c48
 8009734:	20004c40 	.word	0x20004c40
 8009738:	20004a64 	.word	0x20004a64
 800973c:	20004a68 	.word	0x20004a68
 8009740:	20004a20 	.word	0x20004a20
 8009744:	41200000 	.word	0x41200000
 8009748:	20000f64 	.word	0x20000f64
 800974c:	20000f90 	.word	0x20000f90
 8009750:	20008038 	.word	0x20008038
 8009754:	42c80000 	.word	0x42c80000
 8009758:	447a0000 	.word	0x447a0000
 800975c:	20000f94 	.word	0x20000f94
 8009760:	51eb851f 	.word	0x51eb851f
 8009764:	20008004 	.word	0x20008004
 8009768:	20008008 	.word	0x20008008
 800976c:	20008000 	.word	0x20008000
 8009770:	43c80000 	.word	0x43c80000
 8009774:	20004a0c 	.word	0x20004a0c
 8009778:	20004a14 	.word	0x20004a14
 800977c:	20004a10 	.word	0x20004a10
 8009780:	20004a24 	.word	0x20004a24
 8009784:	20004a1c 	.word	0x20004a1c
 8009788:	20004be0 	.word	0x20004be0
 800978c:	410e38e4 	.word	0x410e38e4
 8009790:	20000fd4 	.word	0x20000fd4
 8009794:	20000f6c 	.word	0x20000f6c
				} else {
					k = 1;
 8009798:	4b79      	ldr	r3, [pc, #484]	; (8009980 <motor_actuator_characterization_mode+0xa40>)
 800979a:	2201      	movs	r2, #1
 800979c:	601a      	str	r2, [r3, #0]
				}
				rotor_position_command_steps = k * rotor_chirp_amplitude
 800979e:	4b78      	ldr	r3, [pc, #480]	; (8009980 <motor_actuator_characterization_mode+0xa40>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	ee07 3a90 	vmov	s15, r3
 80097a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80097aa:	4b76      	ldr	r3, [pc, #472]	; (8009984 <motor_actuator_characterization_mode+0xa44>)
 80097ac:	edd3 7a00 	vldr	s15, [r3]
 80097b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b4:	ee17 0a90 	vmov	r0, s15
 80097b8:	f7f6 fede 	bl	8000578 <__aeabi_f2d>
						* STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE;
 80097bc:	a36e      	add	r3, pc, #440	; (adr r3, 8009978 <motor_actuator_characterization_mode+0xa38>)
 80097be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c2:	f7f6 ff31 	bl	8000628 <__aeabi_dmul>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	4610      	mov	r0, r2
 80097cc:	4619      	mov	r1, r3
 80097ce:	f7f7 fa23 	bl	8000c18 <__aeabi_d2f>
 80097d2:	4603      	mov	r3, r0
				rotor_position_command_steps = k * rotor_chirp_amplitude
 80097d4:	4a6c      	ldr	r2, [pc, #432]	; (8009988 <motor_actuator_characterization_mode+0xa48>)
 80097d6:	6013      	str	r3, [r2, #0]
			}

			current_speed = BSP_MotorControl_GetCurrentSpeed(0);
 80097d8:	2000      	movs	r0, #0
 80097da:	f7fa fa17 	bl	8003c0c <BSP_MotorControl_GetCurrentSpeed>
 80097de:	4603      	mov	r3, r0
 80097e0:	461a      	mov	r2, r3
 80097e2:	4b6a      	ldr	r3, [pc, #424]	; (800998c <motor_actuator_characterization_mode+0xa4c>)
 80097e4:	801a      	strh	r2, [r3, #0]
			BSP_MotorControl_GoTo(0, (int) (rotor_position_command_steps));
 80097e6:	4b68      	ldr	r3, [pc, #416]	; (8009988 <motor_actuator_characterization_mode+0xa48>)
 80097e8:	edd3 7a00 	vldr	s15, [r3]
 80097ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097f0:	ee17 1a90 	vmov	r1, s15
 80097f4:	2000      	movs	r0, #0
 80097f6:	f7fa fa99 	bl	8003d2c <BSP_MotorControl_GoTo>

			if (BSP_MotorControl_GetDeviceState(0) == ACCELERATING) {
 80097fa:	2000      	movs	r0, #0
 80097fc:	f7fa fa4e 	bl	8003c9c <BSP_MotorControl_GetDeviceState>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d102      	bne.n	800980c <motor_actuator_characterization_mode+0x8cc>
				motor_state = 1;
 8009806:	4b62      	ldr	r3, [pc, #392]	; (8009990 <motor_actuator_characterization_mode+0xa50>)
 8009808:	2201      	movs	r2, #1
 800980a:	601a      	str	r2, [r3, #0]
			}
			if (BSP_MotorControl_GetDeviceState(0) == DECELERATING) {
 800980c:	2000      	movs	r0, #0
 800980e:	f7fa fa45 	bl	8003c9c <BSP_MotorControl_GetDeviceState>
 8009812:	4603      	mov	r3, r0
 8009814:	2b02      	cmp	r3, #2
 8009816:	d103      	bne.n	8009820 <motor_actuator_characterization_mode+0x8e0>
				motor_state = -1;
 8009818:	4b5d      	ldr	r3, [pc, #372]	; (8009990 <motor_actuator_characterization_mode+0xa50>)
 800981a:	f04f 32ff 	mov.w	r2, #4294967295
 800981e:	601a      	str	r2, [r3, #0]
			}
			if (BSP_MotorControl_GetDeviceState(0) == STEADY) {
 8009820:	2000      	movs	r0, #0
 8009822:	f7fa fa3b 	bl	8003c9c <BSP_MotorControl_GetDeviceState>
 8009826:	4603      	mov	r3, r0
 8009828:	2b03      	cmp	r3, #3
 800982a:	d103      	bne.n	8009834 <motor_actuator_characterization_mode+0x8f4>
				motor_state = -2;
 800982c:	4b58      	ldr	r3, [pc, #352]	; (8009990 <motor_actuator_characterization_mode+0xa50>)
 800982e:	f06f 0201 	mvn.w	r2, #1
 8009832:	601a      	str	r2, [r3, #0]
			}
			if (BSP_MotorControl_GetDeviceState(0) == INACTIVE) {
 8009834:	2000      	movs	r0, #0
 8009836:	f7fa fa31 	bl	8003c9c <BSP_MotorControl_GetDeviceState>
 800983a:	4603      	mov	r3, r0
 800983c:	2b08      	cmp	r3, #8
 800983e:	d102      	bne.n	8009846 <motor_actuator_characterization_mode+0x906>
				motor_state = 0;
 8009840:	4b53      	ldr	r3, [pc, #332]	; (8009990 <motor_actuator_characterization_mode+0xa50>)
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
			}
			ret = rotor_position_read(&rotor_position_steps);
 8009846:	4853      	ldr	r0, [pc, #332]	; (8009994 <motor_actuator_characterization_mode+0xa54>)
 8009848:	f7ff f9d9 	bl	8008bfe <rotor_position_read>
 800984c:	4603      	mov	r3, r0
 800984e:	4a52      	ldr	r2, [pc, #328]	; (8009998 <motor_actuator_characterization_mode+0xa58>)
 8009850:	6013      	str	r3, [r2, #0]
			current_speed = BSP_MotorControl_GetCurrentSpeed(0);
 8009852:	2000      	movs	r0, #0
 8009854:	f7fa f9da 	bl	8003c0c <BSP_MotorControl_GetCurrentSpeed>
 8009858:	4603      	mov	r3, r0
 800985a:	461a      	mov	r2, r3
 800985c:	4b4b      	ldr	r3, [pc, #300]	; (800998c <motor_actuator_characterization_mode+0xa4c>)
 800985e:	801a      	strh	r2, [r3, #0]
			sprintf(msg,
 8009860:	4b4e      	ldr	r3, [pc, #312]	; (800999c <motor_actuator_characterization_mode+0xa5c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	617b      	str	r3, [r7, #20]
 8009866:	4b4e      	ldr	r3, [pc, #312]	; (80099a0 <motor_actuator_characterization_mode+0xa60>)
 8009868:	6819      	ldr	r1, [r3, #0]
 800986a:	6139      	str	r1, [r7, #16]
					"%i\t%i\t%i\t%i\t%i\t%f\t%i\t%i\t%i\t%i\t%i\r\n", i,
					cycle_period_sum,
					(int) (tick_cycle_current - tick_cycle_previous),
 800986c:	4b4d      	ldr	r3, [pc, #308]	; (80099a4 <motor_actuator_characterization_mode+0xa64>)
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	4b4d      	ldr	r3, [pc, #308]	; (80099a8 <motor_actuator_characterization_mode+0xa68>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	1ad3      	subs	r3, r2, r3
			sprintf(msg,
 8009876:	60fb      	str	r3, [r7, #12]
 8009878:	4b44      	ldr	r3, [pc, #272]	; (800998c <motor_actuator_characterization_mode+0xa4c>)
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	60bb      	str	r3, [r7, #8]
 800987e:	4b45      	ldr	r3, [pc, #276]	; (8009994 <motor_actuator_characterization_mode+0xa54>)
 8009880:	681c      	ldr	r4, [r3, #0]
 8009882:	4b41      	ldr	r3, [pc, #260]	; (8009988 <motor_actuator_characterization_mode+0xa48>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4618      	mov	r0, r3
 8009888:	f7f6 fe76 	bl	8000578 <__aeabi_f2d>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	493f      	ldr	r1, [pc, #252]	; (8009990 <motor_actuator_characterization_mode+0xa50>)
 8009892:	6809      	ldr	r1, [r1, #0]
 8009894:	4845      	ldr	r0, [pc, #276]	; (80099ac <motor_actuator_characterization_mode+0xa6c>)
 8009896:	6800      	ldr	r0, [r0, #0]
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	4d45      	ldr	r5, [pc, #276]	; (80099b0 <motor_actuator_characterization_mode+0xa70>)
 800989c:	682d      	ldr	r5, [r5, #0]
 800989e:	4e45      	ldr	r6, [pc, #276]	; (80099b4 <motor_actuator_characterization_mode+0xa74>)
 80098a0:	6836      	ldr	r6, [r6, #0]
 80098a2:	4845      	ldr	r0, [pc, #276]	; (80099b8 <motor_actuator_characterization_mode+0xa78>)
 80098a4:	6800      	ldr	r0, [r0, #0]
 80098a6:	900a      	str	r0, [sp, #40]	; 0x28
 80098a8:	9609      	str	r6, [sp, #36]	; 0x24
 80098aa:	9508      	str	r5, [sp, #32]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	9007      	str	r0, [sp, #28]
 80098b0:	9106      	str	r1, [sp, #24]
 80098b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80098b6:	9402      	str	r4, [sp, #8]
 80098b8:	68b8      	ldr	r0, [r7, #8]
 80098ba:	9001      	str	r0, [sp, #4]
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	9000      	str	r0, [sp, #0]
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	697a      	ldr	r2, [r7, #20]
 80098c4:	493d      	ldr	r1, [pc, #244]	; (80099bc <motor_actuator_characterization_mode+0xa7c>)
 80098c6:	483e      	ldr	r0, [pc, #248]	; (80099c0 <motor_actuator_characterization_mode+0xa80>)
 80098c8:	f001 fd14 	bl	800b2f4 <sprintf>
					current_speed, rotor_position_steps,
					rotor_position_command_steps, motor_state,
					rotor_test_speed_max, rotor_test_speed_min,
					rotor_test_acceleration_max, swing_deceleration_max);
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 80098cc:	483c      	ldr	r0, [pc, #240]	; (80099c0 <motor_actuator_characterization_mode+0xa80>)
 80098ce:	f7f6 fc91 	bl	80001f4 <strlen>
 80098d2:	4603      	mov	r3, r0
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	f04f 33ff 	mov.w	r3, #4294967295
 80098da:	4939      	ldr	r1, [pc, #228]	; (80099c0 <motor_actuator_characterization_mode+0xa80>)
 80098dc:	4839      	ldr	r0, [pc, #228]	; (80099c4 <motor_actuator_characterization_mode+0xa84>)
 80098de:	f7fd f935 	bl	8006b4c <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i = i + 1;
 80098e2:	4b2e      	ldr	r3, [pc, #184]	; (800999c <motor_actuator_characterization_mode+0xa5c>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	3301      	adds	r3, #1
 80098e8:	4a2c      	ldr	r2, [pc, #176]	; (800999c <motor_actuator_characterization_mode+0xa5c>)
 80098ea:	6013      	str	r3, [r2, #0]
		while (i < rotor_chirp_step_period) {
 80098ec:	4b2b      	ldr	r3, [pc, #172]	; (800999c <motor_actuator_characterization_mode+0xa5c>)
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	4b35      	ldr	r3, [pc, #212]	; (80099c8 <motor_actuator_characterization_mode+0xa88>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	f6ff aba1 	blt.w	800903c <motor_actuator_characterization_mode+0xfc>
 80098fa:	e000      	b.n	80098fe <motor_actuator_characterization_mode+0x9be>
				break;
 80098fc:	bf00      	nop
		}
		if (mode_index_command == mode_quit) {
 80098fe:	4b33      	ldr	r3, [pc, #204]	; (80099cc <motor_actuator_characterization_mode+0xa8c>)
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	4b33      	ldr	r3, [pc, #204]	; (80099d0 <motor_actuator_characterization_mode+0xa90>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	429a      	cmp	r2, r3
 8009908:	d006      	beq.n	8009918 <motor_actuator_characterization_mode+0x9d8>
			break;
		}
		j = j + 1;
 800990a:	4b32      	ldr	r3, [pc, #200]	; (80099d4 <motor_actuator_characterization_mode+0xa94>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3301      	adds	r3, #1
 8009910:	4a30      	ldr	r2, [pc, #192]	; (80099d4 <motor_actuator_characterization_mode+0xa94>)
 8009912:	6013      	str	r3, [r2, #0]
		i = 0;
 8009914:	f7ff bb8d 	b.w	8009032 <motor_actuator_characterization_mode+0xf2>
			break;
 8009918:	bf00      	nop
	}
	L6474_CmdDisable(0);
 800991a:	2000      	movs	r0, #0
 800991c:	f7f7 fba0 	bl	8001060 <L6474_CmdDisable>
	sprintf(msg, "\r\nMotor Characterization Complete");
 8009920:	492d      	ldr	r1, [pc, #180]	; (80099d8 <motor_actuator_characterization_mode+0xa98>)
 8009922:	4827      	ldr	r0, [pc, #156]	; (80099c0 <motor_actuator_characterization_mode+0xa80>)
 8009924:	f001 fce6 	bl	800b2f4 <sprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8009928:	4825      	ldr	r0, [pc, #148]	; (80099c0 <motor_actuator_characterization_mode+0xa80>)
 800992a:	f7f6 fc63 	bl	80001f4 <strlen>
 800992e:	4603      	mov	r3, r0
 8009930:	b29a      	uxth	r2, r3
 8009932:	f04f 33ff 	mov.w	r3, #4294967295
 8009936:	4922      	ldr	r1, [pc, #136]	; (80099c0 <motor_actuator_characterization_mode+0xa80>)
 8009938:	4822      	ldr	r0, [pc, #136]	; (80099c4 <motor_actuator_characterization_mode+0xa84>)
 800993a:	f7fd f907 	bl	8006b4c <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	sprintf(msg, "\n\r\n\r*************************System Reset and Restart***************************\n\r\n\r");
 800993e:	4927      	ldr	r1, [pc, #156]	; (80099dc <motor_actuator_characterization_mode+0xa9c>)
 8009940:	481f      	ldr	r0, [pc, #124]	; (80099c0 <motor_actuator_characterization_mode+0xa80>)
 8009942:	f001 fcd7 	bl	800b2f4 <sprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009946:	481e      	ldr	r0, [pc, #120]	; (80099c0 <motor_actuator_characterization_mode+0xa80>)
 8009948:	f7f6 fc54 	bl	80001f4 <strlen>
 800994c:	4603      	mov	r3, r0
 800994e:	b29a      	uxth	r2, r3
 8009950:	f04f 33ff 	mov.w	r3, #4294967295
 8009954:	491a      	ldr	r1, [pc, #104]	; (80099c0 <motor_actuator_characterization_mode+0xa80>)
 8009956:	481b      	ldr	r0, [pc, #108]	; (80099c4 <motor_actuator_characterization_mode+0xa84>)
 8009958:	f7fd f8f8 	bl	8006b4c <HAL_UART_Transmit>
	HAL_Delay(3000);
 800995c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009960:	f7fa fcd4 	bl	800430c <HAL_Delay>
	NVIC_SystemReset();
 8009964:	f7fd fdae 	bl	80074c4 <NVIC_SystemReset>
}
 8009968:	bf00      	nop
 800996a:	371c      	adds	r7, #28
 800996c:	46bd      	mov	sp, r7
 800996e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009972:	bf00      	nop
 8009974:	f3af 8000 	nop.w
 8009978:	75818c5d 	.word	0x75818c5d
 800997c:	4021c71c 	.word	0x4021c71c
 8009980:	20000f6c 	.word	0x20000f6c
 8009984:	20004a20 	.word	0x20004a20
 8009988:	20000fd4 	.word	0x20000fd4
 800998c:	20004b68 	.word	0x20004b68
 8009990:	200049f8 	.word	0x200049f8
 8009994:	20000fd0 	.word	0x20000fd0
 8009998:	20000f74 	.word	0x20000f74
 800999c:	20000f64 	.word	0x20000f64
 80099a0:	20000f94 	.word	0x20000f94
 80099a4:	20008004 	.word	0x20008004
 80099a8:	20008008 	.word	0x20008008
 80099ac:	20004a60 	.word	0x20004a60
 80099b0:	20004a5c 	.word	0x20004a5c
 80099b4:	20004a64 	.word	0x20004a64
 80099b8:	20004a68 	.word	0x20004a68
 80099bc:	080121f0 	.word	0x080121f0
 80099c0:	20000d74 	.word	0x20000d74
 80099c4:	20000a78 	.word	0x20000a78
 80099c8:	20004a24 	.word	0x20004a24
 80099cc:	20004c40 	.word	0x20004c40
 80099d0:	20004c34 	.word	0x20004c34
 80099d4:	20000f68 	.word	0x20000f68
 80099d8:	08012214 	.word	0x08012214
 80099dc:	08012198 	.word	0x08012198

080099e0 <interactive_rotor_actuator_control>:

/*
 * Interactive rotor control
 */

void interactive_rotor_actuator_control(void){
 80099e0:	b590      	push	{r4, r7, lr}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af02      	add	r7, sp, #8

		/*
		 * Set Motor Speed Profile
		 */

		sprintf(msg, "\r\nEnter Motor Maximum Speed..............................................: ");
 80099e6:	49b4      	ldr	r1, [pc, #720]	; (8009cb8 <interactive_rotor_actuator_control+0x2d8>)
 80099e8:	48b4      	ldr	r0, [pc, #720]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 80099ea:	f001 fc83 	bl	800b2f4 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 80099ee:	48b3      	ldr	r0, [pc, #716]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 80099f0:	f7f6 fc00 	bl	80001f4 <strlen>
 80099f4:	4603      	mov	r3, r0
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	f04f 33ff 	mov.w	r3, #4294967295
 80099fc:	49af      	ldr	r1, [pc, #700]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 80099fe:	48b0      	ldr	r0, [pc, #704]	; (8009cc0 <interactive_rotor_actuator_control+0x2e0>)
 8009a00:	f7fd f8a4 	bl	8006b4c <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes,
 8009a04:	4baf      	ldr	r3, [pc, #700]	; (8009cc4 <interactive_rotor_actuator_control+0x2e4>)
 8009a06:	4ab0      	ldr	r2, [pc, #704]	; (8009cc8 <interactive_rotor_actuator_control+0x2e8>)
 8009a08:	49b0      	ldr	r1, [pc, #704]	; (8009ccc <interactive_rotor_actuator_control+0x2ec>)
 8009a0a:	48b1      	ldr	r0, [pc, #708]	; (8009cd0 <interactive_rotor_actuator_control+0x2f0>)
 8009a0c:	f7ff f98c 	bl	8008d28 <read_int>
				&rotor_test_speed_max);
		sprintf(msg, "%i", rotor_test_speed_max);
 8009a10:	4bac      	ldr	r3, [pc, #688]	; (8009cc4 <interactive_rotor_actuator_control+0x2e4>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	461a      	mov	r2, r3
 8009a16:	49af      	ldr	r1, [pc, #700]	; (8009cd4 <interactive_rotor_actuator_control+0x2f4>)
 8009a18:	48a8      	ldr	r0, [pc, #672]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009a1a:	f001 fc6b 	bl	800b2f4 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8009a1e:	48a7      	ldr	r0, [pc, #668]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009a20:	f7f6 fbe8 	bl	80001f4 <strlen>
 8009a24:	4603      	mov	r3, r0
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	f04f 33ff 	mov.w	r3, #4294967295
 8009a2c:	49a3      	ldr	r1, [pc, #652]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009a2e:	48a4      	ldr	r0, [pc, #656]	; (8009cc0 <interactive_rotor_actuator_control+0x2e0>)
 8009a30:	f7fd f88c 	bl	8006b4c <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		sprintf(msg, "\r\nEnter Motor Minimum Speed..............................................: ");
 8009a34:	49a8      	ldr	r1, [pc, #672]	; (8009cd8 <interactive_rotor_actuator_control+0x2f8>)
 8009a36:	48a1      	ldr	r0, [pc, #644]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009a38:	f001 fc5c 	bl	800b2f4 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8009a3c:	489f      	ldr	r0, [pc, #636]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009a3e:	f7f6 fbd9 	bl	80001f4 <strlen>
 8009a42:	4603      	mov	r3, r0
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	f04f 33ff 	mov.w	r3, #4294967295
 8009a4a:	499c      	ldr	r1, [pc, #624]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009a4c:	489c      	ldr	r0, [pc, #624]	; (8009cc0 <interactive_rotor_actuator_control+0x2e0>)
 8009a4e:	f7fd f87d 	bl	8006b4c <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes,
 8009a52:	4ba2      	ldr	r3, [pc, #648]	; (8009cdc <interactive_rotor_actuator_control+0x2fc>)
 8009a54:	4a9c      	ldr	r2, [pc, #624]	; (8009cc8 <interactive_rotor_actuator_control+0x2e8>)
 8009a56:	499d      	ldr	r1, [pc, #628]	; (8009ccc <interactive_rotor_actuator_control+0x2ec>)
 8009a58:	489d      	ldr	r0, [pc, #628]	; (8009cd0 <interactive_rotor_actuator_control+0x2f0>)
 8009a5a:	f7ff f965 	bl	8008d28 <read_int>
				&rotor_test_speed_min);
		sprintf(msg, "%i", rotor_test_speed_min);
 8009a5e:	4b9f      	ldr	r3, [pc, #636]	; (8009cdc <interactive_rotor_actuator_control+0x2fc>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	499b      	ldr	r1, [pc, #620]	; (8009cd4 <interactive_rotor_actuator_control+0x2f4>)
 8009a66:	4895      	ldr	r0, [pc, #596]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009a68:	f001 fc44 	bl	800b2f4 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8009a6c:	4893      	ldr	r0, [pc, #588]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009a6e:	f7f6 fbc1 	bl	80001f4 <strlen>
 8009a72:	4603      	mov	r3, r0
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	f04f 33ff 	mov.w	r3, #4294967295
 8009a7a:	4990      	ldr	r1, [pc, #576]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009a7c:	4890      	ldr	r0, [pc, #576]	; (8009cc0 <interactive_rotor_actuator_control+0x2e0>)
 8009a7e:	f7fd f865 	bl	8006b4c <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		sprintf(msg, "\r\nEnter Motor Maximum Acceleration.......................................: ");
 8009a82:	4997      	ldr	r1, [pc, #604]	; (8009ce0 <interactive_rotor_actuator_control+0x300>)
 8009a84:	488d      	ldr	r0, [pc, #564]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009a86:	f001 fc35 	bl	800b2f4 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8009a8a:	488c      	ldr	r0, [pc, #560]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009a8c:	f7f6 fbb2 	bl	80001f4 <strlen>
 8009a90:	4603      	mov	r3, r0
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	f04f 33ff 	mov.w	r3, #4294967295
 8009a98:	4988      	ldr	r1, [pc, #544]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009a9a:	4889      	ldr	r0, [pc, #548]	; (8009cc0 <interactive_rotor_actuator_control+0x2e0>)
 8009a9c:	f7fd f856 	bl	8006b4c <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes,
 8009aa0:	4b90      	ldr	r3, [pc, #576]	; (8009ce4 <interactive_rotor_actuator_control+0x304>)
 8009aa2:	4a89      	ldr	r2, [pc, #548]	; (8009cc8 <interactive_rotor_actuator_control+0x2e8>)
 8009aa4:	4989      	ldr	r1, [pc, #548]	; (8009ccc <interactive_rotor_actuator_control+0x2ec>)
 8009aa6:	488a      	ldr	r0, [pc, #552]	; (8009cd0 <interactive_rotor_actuator_control+0x2f0>)
 8009aa8:	f7ff f93e 	bl	8008d28 <read_int>
				&rotor_test_acceleration_max);
		sprintf(msg, "%i", rotor_test_acceleration_max);
 8009aac:	4b8d      	ldr	r3, [pc, #564]	; (8009ce4 <interactive_rotor_actuator_control+0x304>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4988      	ldr	r1, [pc, #544]	; (8009cd4 <interactive_rotor_actuator_control+0x2f4>)
 8009ab4:	4881      	ldr	r0, [pc, #516]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009ab6:	f001 fc1d 	bl	800b2f4 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8009aba:	4880      	ldr	r0, [pc, #512]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009abc:	f7f6 fb9a 	bl	80001f4 <strlen>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac8:	497c      	ldr	r1, [pc, #496]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009aca:	487d      	ldr	r0, [pc, #500]	; (8009cc0 <interactive_rotor_actuator_control+0x2e0>)
 8009acc:	f7fd f83e 	bl	8006b4c <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		sprintf(msg, "\r\nEnter Motor Maximum Deceleration.......................................: ");
 8009ad0:	4985      	ldr	r1, [pc, #532]	; (8009ce8 <interactive_rotor_actuator_control+0x308>)
 8009ad2:	487a      	ldr	r0, [pc, #488]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009ad4:	f001 fc0e 	bl	800b2f4 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8009ad8:	4878      	ldr	r0, [pc, #480]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009ada:	f7f6 fb8b 	bl	80001f4 <strlen>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae6:	4975      	ldr	r1, [pc, #468]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009ae8:	4875      	ldr	r0, [pc, #468]	; (8009cc0 <interactive_rotor_actuator_control+0x2e0>)
 8009aea:	f7fd f82f 	bl	8006b4c <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes,
 8009aee:	4b7f      	ldr	r3, [pc, #508]	; (8009cec <interactive_rotor_actuator_control+0x30c>)
 8009af0:	4a75      	ldr	r2, [pc, #468]	; (8009cc8 <interactive_rotor_actuator_control+0x2e8>)
 8009af2:	4976      	ldr	r1, [pc, #472]	; (8009ccc <interactive_rotor_actuator_control+0x2ec>)
 8009af4:	4876      	ldr	r0, [pc, #472]	; (8009cd0 <interactive_rotor_actuator_control+0x2f0>)
 8009af6:	f7ff f917 	bl	8008d28 <read_int>
				&swing_deceleration_max);
		sprintf(msg, "%i", swing_deceleration_max);
 8009afa:	4b7c      	ldr	r3, [pc, #496]	; (8009cec <interactive_rotor_actuator_control+0x30c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	4974      	ldr	r1, [pc, #464]	; (8009cd4 <interactive_rotor_actuator_control+0x2f4>)
 8009b02:	486e      	ldr	r0, [pc, #440]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009b04:	f001 fbf6 	bl	800b2f4 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8009b08:	486c      	ldr	r0, [pc, #432]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009b0a:	f7f6 fb73 	bl	80001f4 <strlen>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	f04f 33ff 	mov.w	r3, #4294967295
 8009b16:	4969      	ldr	r1, [pc, #420]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009b18:	4869      	ldr	r0, [pc, #420]	; (8009cc0 <interactive_rotor_actuator_control+0x2e0>)
 8009b1a:	f7fd f817 	bl	8006b4c <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		BSP_MotorControl_SetMaxSpeed(0, rotor_test_speed_max);
 8009b1e:	4b69      	ldr	r3, [pc, #420]	; (8009cc4 <interactive_rotor_actuator_control+0x2e4>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	4619      	mov	r1, r3
 8009b26:	2000      	movs	r0, #0
 8009b28:	f7fa f9d8 	bl	8003edc <BSP_MotorControl_SetMaxSpeed>
		BSP_MotorControl_SetMinSpeed(0, rotor_test_speed_min);
 8009b2c:	4b6b      	ldr	r3, [pc, #428]	; (8009cdc <interactive_rotor_actuator_control+0x2fc>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	4619      	mov	r1, r3
 8009b34:	2000      	movs	r0, #0
 8009b36:	f7fa f9f9 	bl	8003f2c <BSP_MotorControl_SetMinSpeed>

		sprintf(msg, "\n\rMotor Profile Speeds Minimum %u Maximum %u",
 8009b3a:	4b68      	ldr	r3, [pc, #416]	; (8009cdc <interactive_rotor_actuator_control+0x2fc>)
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	4b61      	ldr	r3, [pc, #388]	; (8009cc4 <interactive_rotor_actuator_control+0x2e4>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	496b      	ldr	r1, [pc, #428]	; (8009cf0 <interactive_rotor_actuator_control+0x310>)
 8009b44:	485d      	ldr	r0, [pc, #372]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009b46:	f001 fbd5 	bl	800b2f4 <sprintf>
				rotor_test_speed_min, rotor_test_speed_max);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8009b4a:	485c      	ldr	r0, [pc, #368]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009b4c:	f7f6 fb52 	bl	80001f4 <strlen>
 8009b50:	4603      	mov	r3, r0
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	f04f 33ff 	mov.w	r3, #4294967295
 8009b58:	4958      	ldr	r1, [pc, #352]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009b5a:	4859      	ldr	r0, [pc, #356]	; (8009cc0 <interactive_rotor_actuator_control+0x2e0>)
 8009b5c:	f7fc fff6 	bl	8006b4c <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		BSP_MotorControl_SetAcceleration(0, rotor_test_acceleration_max);
 8009b60:	4b60      	ldr	r3, [pc, #384]	; (8009ce4 <interactive_rotor_actuator_control+0x304>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	4619      	mov	r1, r3
 8009b68:	2000      	movs	r0, #0
 8009b6a:	f7fa f945 	bl	8003df8 <BSP_MotorControl_SetAcceleration>
		BSP_MotorControl_SetDeceleration(0, swing_deceleration_max);
 8009b6e:	4b5f      	ldr	r3, [pc, #380]	; (8009cec <interactive_rotor_actuator_control+0x30c>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	4619      	mov	r1, r3
 8009b76:	2000      	movs	r0, #0
 8009b78:	f7fa f966 	bl	8003e48 <BSP_MotorControl_SetDeceleration>

		sprintf(msg,"\n\rMotor Profile Acceleration Maximum %u Deceleration Maximum %u",
				BSP_MotorControl_GetAcceleration(0), BSP_MotorControl_GetDeceleration(0));
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	f7fa f821 	bl	8003bc4 <BSP_MotorControl_GetAcceleration>
 8009b82:	4603      	mov	r3, r0
		sprintf(msg,"\n\rMotor Profile Acceleration Maximum %u Deceleration Maximum %u",
 8009b84:	461c      	mov	r4, r3
				BSP_MotorControl_GetAcceleration(0), BSP_MotorControl_GetDeceleration(0));
 8009b86:	2000      	movs	r0, #0
 8009b88:	f7fa f864 	bl	8003c54 <BSP_MotorControl_GetDeceleration>
 8009b8c:	4603      	mov	r3, r0
		sprintf(msg,"\n\rMotor Profile Acceleration Maximum %u Deceleration Maximum %u",
 8009b8e:	4622      	mov	r2, r4
 8009b90:	4958      	ldr	r1, [pc, #352]	; (8009cf4 <interactive_rotor_actuator_control+0x314>)
 8009b92:	484a      	ldr	r0, [pc, #296]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009b94:	f001 fbae 	bl	800b2f4 <sprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),HAL_MAX_DELAY);
 8009b98:	4848      	ldr	r0, [pc, #288]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009b9a:	f7f6 fb2b 	bl	80001f4 <strlen>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba6:	4945      	ldr	r1, [pc, #276]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009ba8:	4845      	ldr	r0, [pc, #276]	; (8009cc0 <interactive_rotor_actuator_control+0x2e0>)
 8009baa:	f7fc ffcf 	bl	8006b4c <HAL_UART_Transmit>

		j = 1;
 8009bae:	4b52      	ldr	r3, [pc, #328]	; (8009cf8 <interactive_rotor_actuator_control+0x318>)
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	601a      	str	r2, [r3, #0]
		 * Set initial rotor position
		 */

		while (1) {

			sprintf(msg, "\r\nEnter Motor Position Target in Degrees ................................: ");
 8009bb4:	4951      	ldr	r1, [pc, #324]	; (8009cfc <interactive_rotor_actuator_control+0x31c>)
 8009bb6:	4841      	ldr	r0, [pc, #260]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009bb8:	f001 fb9c 	bl	800b2f4 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009bbc:	483f      	ldr	r0, [pc, #252]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009bbe:	f7f6 fb19 	bl	80001f4 <strlen>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bca:	493c      	ldr	r1, [pc, #240]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009bcc:	483c      	ldr	r0, [pc, #240]	; (8009cc0 <interactive_rotor_actuator_control+0x2e0>)
 8009bce:	f7fc ffbd 	bl	8006b4c <HAL_UART_Transmit>

			read_float(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes, &rotor_position_command_deg);
 8009bd2:	4b4b      	ldr	r3, [pc, #300]	; (8009d00 <interactive_rotor_actuator_control+0x320>)
 8009bd4:	4a3c      	ldr	r2, [pc, #240]	; (8009cc8 <interactive_rotor_actuator_control+0x2e8>)
 8009bd6:	493d      	ldr	r1, [pc, #244]	; (8009ccc <interactive_rotor_actuator_control+0x2ec>)
 8009bd8:	483d      	ldr	r0, [pc, #244]	; (8009cd0 <interactive_rotor_actuator_control+0x2f0>)
 8009bda:	f7ff f843 	bl	8008c64 <read_float>
			sprintf(msg, "%0.2f", rotor_position_command_deg);
 8009bde:	4b48      	ldr	r3, [pc, #288]	; (8009d00 <interactive_rotor_actuator_control+0x320>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7f6 fcc8 	bl	8000578 <__aeabi_f2d>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	4945      	ldr	r1, [pc, #276]	; (8009d04 <interactive_rotor_actuator_control+0x324>)
 8009bee:	4833      	ldr	r0, [pc, #204]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009bf0:	f001 fb80 	bl	800b2f4 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009bf4:	4831      	ldr	r0, [pc, #196]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009bf6:	f7f6 fafd 	bl	80001f4 <strlen>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8009c02:	492e      	ldr	r1, [pc, #184]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009c04:	482e      	ldr	r0, [pc, #184]	; (8009cc0 <interactive_rotor_actuator_control+0x2e0>)
 8009c06:	f7fc ffa1 	bl	8006b4c <HAL_UART_Transmit>

			BSP_MotorControl_GoTo(0, (int)(rotor_position_command_deg*STEPPER_CONTROL_POSITION_STEPS_PER_DEGREE));
 8009c0a:	4b3d      	ldr	r3, [pc, #244]	; (8009d00 <interactive_rotor_actuator_control+0x320>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7f6 fcb2 	bl	8000578 <__aeabi_f2d>
 8009c14:	a326      	add	r3, pc, #152	; (adr r3, 8009cb0 <interactive_rotor_actuator_control+0x2d0>)
 8009c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1a:	f7f6 fd05 	bl	8000628 <__aeabi_dmul>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	4610      	mov	r0, r2
 8009c24:	4619      	mov	r1, r3
 8009c26:	f7f6 ffaf 	bl	8000b88 <__aeabi_d2iz>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	2000      	movs	r0, #0
 8009c30:	f7fa f87c 	bl	8003d2c <BSP_MotorControl_GoTo>
			BSP_MotorControl_WaitWhileActive(0);
 8009c34:	2000      	movs	r0, #0
 8009c36:	f7fa f9e5 	bl	8004004 <BSP_MotorControl_WaitWhileActive>

			ret = rotor_position_read(&rotor_position_steps);
 8009c3a:	4833      	ldr	r0, [pc, #204]	; (8009d08 <interactive_rotor_actuator_control+0x328>)
 8009c3c:	f7fe ffdf 	bl	8008bfe <rotor_position_read>
 8009c40:	4603      	mov	r3, r0
 8009c42:	4a32      	ldr	r2, [pc, #200]	; (8009d0c <interactive_rotor_actuator_control+0x32c>)
 8009c44:	6013      	str	r3, [r2, #0]
			sprintf(msg, "\n\rMotor Position in Steps %i and Degrees %.2f\r\n",
 8009c46:	4b30      	ldr	r3, [pc, #192]	; (8009d08 <interactive_rotor_actuator_control+0x328>)
 8009c48:	681c      	ldr	r4, [r3, #0]
					rotor_position_steps, (float) ((rotor_position_steps) / STEPPER_READ_POSITION_STEPS_PER_DEGREE));
 8009c4a:	4b2f      	ldr	r3, [pc, #188]	; (8009d08 <interactive_rotor_actuator_control+0x328>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7f6 fc80 	bl	8000554 <__aeabi_i2d>
 8009c54:	a316      	add	r3, pc, #88	; (adr r3, 8009cb0 <interactive_rotor_actuator_control+0x2d0>)
 8009c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5a:	f7f6 fe0f 	bl	800087c <__aeabi_ddiv>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4610      	mov	r0, r2
 8009c64:	4619      	mov	r1, r3
 8009c66:	f7f6 ffd7 	bl	8000c18 <__aeabi_d2f>
 8009c6a:	4603      	mov	r3, r0
			sprintf(msg, "\n\rMotor Position in Steps %i and Degrees %.2f\r\n",
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7f6 fc83 	bl	8000578 <__aeabi_f2d>
 8009c72:	4602      	mov	r2, r0
 8009c74:	460b      	mov	r3, r1
 8009c76:	e9cd 2300 	strd	r2, r3, [sp]
 8009c7a:	4622      	mov	r2, r4
 8009c7c:	4924      	ldr	r1, [pc, #144]	; (8009d10 <interactive_rotor_actuator_control+0x330>)
 8009c7e:	480f      	ldr	r0, [pc, #60]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009c80:	f001 fb38 	bl	800b2f4 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009c84:	480d      	ldr	r0, [pc, #52]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009c86:	f7f6 fab5 	bl	80001f4 <strlen>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c92:	490a      	ldr	r1, [pc, #40]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009c94:	480a      	ldr	r0, [pc, #40]	; (8009cc0 <interactive_rotor_actuator_control+0x2e0>)
 8009c96:	f7fc ff59 	bl	8006b4c <HAL_UART_Transmit>

			sprintf(msg, "\r\nEnter 1 to Enter New Motor Configuration, 0 to Continue, -1 to Exit ...: ");
 8009c9a:	491e      	ldr	r1, [pc, #120]	; (8009d14 <interactive_rotor_actuator_control+0x334>)
 8009c9c:	4807      	ldr	r0, [pc, #28]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009c9e:	f001 fb29 	bl	800b2f4 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009ca2:	4806      	ldr	r0, [pc, #24]	; (8009cbc <interactive_rotor_actuator_control+0x2dc>)
 8009ca4:	f7f6 faa6 	bl	80001f4 <strlen>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	e034      	b.n	8009d18 <interactive_rotor_actuator_control+0x338>
 8009cae:	bf00      	nop
 8009cb0:	75818c5d 	.word	0x75818c5d
 8009cb4:	4021c71c 	.word	0x4021c71c
 8009cb8:	08012238 	.word	0x08012238
 8009cbc:	20000d74 	.word	0x20000d74
 8009cc0:	20000a78 	.word	0x20000a78
 8009cc4:	20004a60 	.word	0x20004a60
 8009cc8:	20008060 	.word	0x20008060
 8009ccc:	2000805c 	.word	0x2000805c
 8009cd0:	20008058 	.word	0x20008058
 8009cd4:	08012284 	.word	0x08012284
 8009cd8:	08012288 	.word	0x08012288
 8009cdc:	20004a5c 	.word	0x20004a5c
 8009ce0:	080122d4 	.word	0x080122d4
 8009ce4:	20004a64 	.word	0x20004a64
 8009ce8:	08012320 	.word	0x08012320
 8009cec:	20004a68 	.word	0x20004a68
 8009cf0:	0801236c 	.word	0x0801236c
 8009cf4:	0801239c 	.word	0x0801239c
 8009cf8:	20000f68 	.word	0x20000f68
 8009cfc:	080123dc 	.word	0x080123dc
 8009d00:	20000fe0 	.word	0x20000fe0
 8009d04:	08012428 	.word	0x08012428
 8009d08:	20000fd0 	.word	0x20000fd0
 8009d0c:	20000f74 	.word	0x20000f74
 8009d10:	08012430 	.word	0x08012430
 8009d14:	08012460 	.word	0x08012460
 8009d18:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1c:	4924      	ldr	r1, [pc, #144]	; (8009db0 <interactive_rotor_actuator_control+0x3d0>)
 8009d1e:	4825      	ldr	r0, [pc, #148]	; (8009db4 <interactive_rotor_actuator_control+0x3d4>)
 8009d20:	f7fc ff14 	bl	8006b4c <HAL_UART_Transmit>

			read_int(&RxBuffer_ReadIdx, &RxBuffer_WriteIdx, &readBytes,
 8009d24:	4b24      	ldr	r3, [pc, #144]	; (8009db8 <interactive_rotor_actuator_control+0x3d8>)
 8009d26:	4a25      	ldr	r2, [pc, #148]	; (8009dbc <interactive_rotor_actuator_control+0x3dc>)
 8009d28:	4925      	ldr	r1, [pc, #148]	; (8009dc0 <interactive_rotor_actuator_control+0x3e0>)
 8009d2a:	4826      	ldr	r0, [pc, #152]	; (8009dc4 <interactive_rotor_actuator_control+0x3e4>)
 8009d2c:	f7fe fffc 	bl	8008d28 <read_int>
					&j);
			if (j == 1) {
 8009d30:	4b21      	ldr	r3, [pc, #132]	; (8009db8 <interactive_rotor_actuator_control+0x3d8>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d005      	beq.n	8009d44 <interactive_rotor_actuator_control+0x364>
				break;
			}
			if (j == -1) {
 8009d38:	4b1f      	ldr	r3, [pc, #124]	; (8009db8 <interactive_rotor_actuator_control+0x3d8>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d40:	d002      	beq.n	8009d48 <interactive_rotor_actuator_control+0x368>
			sprintf(msg, "\r\nEnter Motor Position Target in Degrees ................................: ");
 8009d42:	e737      	b.n	8009bb4 <interactive_rotor_actuator_control+0x1d4>
				break;
 8009d44:	bf00      	nop
 8009d46:	e000      	b.n	8009d4a <interactive_rotor_actuator_control+0x36a>
				break;
 8009d48:	bf00      	nop
			}

		}
		if (j == -1) {
 8009d4a:	4b1b      	ldr	r3, [pc, #108]	; (8009db8 <interactive_rotor_actuator_control+0x3d8>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d52:	d000      	beq.n	8009d56 <interactive_rotor_actuator_control+0x376>
		sprintf(msg, "\r\nEnter Motor Maximum Speed..............................................: ");
 8009d54:	e647      	b.n	80099e6 <interactive_rotor_actuator_control+0x6>
				break;
 8009d56:	bf00      	nop
		}

	}
	L6474_CmdDisable(0);
 8009d58:	2000      	movs	r0, #0
 8009d5a:	f7f7 f981 	bl	8001060 <L6474_CmdDisable>
	sprintf(msg, "\r\nMotor Characterization Terminated");
 8009d5e:	491a      	ldr	r1, [pc, #104]	; (8009dc8 <interactive_rotor_actuator_control+0x3e8>)
 8009d60:	4813      	ldr	r0, [pc, #76]	; (8009db0 <interactive_rotor_actuator_control+0x3d0>)
 8009d62:	f001 fac7 	bl	800b2f4 <sprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg),
 8009d66:	4812      	ldr	r0, [pc, #72]	; (8009db0 <interactive_rotor_actuator_control+0x3d0>)
 8009d68:	f7f6 fa44 	bl	80001f4 <strlen>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	f04f 33ff 	mov.w	r3, #4294967295
 8009d74:	490e      	ldr	r1, [pc, #56]	; (8009db0 <interactive_rotor_actuator_control+0x3d0>)
 8009d76:	480f      	ldr	r0, [pc, #60]	; (8009db4 <interactive_rotor_actuator_control+0x3d4>)
 8009d78:	f7fc fee8 	bl	8006b4c <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	sprintf(msg, "\n\r\n\r*************************System Reset and Restart***************************\n\r\n\r");
 8009d7c:	4913      	ldr	r1, [pc, #76]	; (8009dcc <interactive_rotor_actuator_control+0x3ec>)
 8009d7e:	480c      	ldr	r0, [pc, #48]	; (8009db0 <interactive_rotor_actuator_control+0x3d0>)
 8009d80:	f001 fab8 	bl	800b2f4 <sprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8009d84:	480a      	ldr	r0, [pc, #40]	; (8009db0 <interactive_rotor_actuator_control+0x3d0>)
 8009d86:	f7f6 fa35 	bl	80001f4 <strlen>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d92:	4907      	ldr	r1, [pc, #28]	; (8009db0 <interactive_rotor_actuator_control+0x3d0>)
 8009d94:	4807      	ldr	r0, [pc, #28]	; (8009db4 <interactive_rotor_actuator_control+0x3d4>)
 8009d96:	f7fc fed9 	bl	8006b4c <HAL_UART_Transmit>
	HAL_Delay(3000);
 8009d9a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009d9e:	f7fa fab5 	bl	800430c <HAL_Delay>
	NVIC_SystemReset();
 8009da2:	f7fd fb8f 	bl	80074c4 <NVIC_SystemReset>
}
 8009da6:	bf00      	nop
 8009da8:	3704      	adds	r7, #4
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd90      	pop	{r4, r7, pc}
 8009dae:	bf00      	nop
 8009db0:	20000d74 	.word	0x20000d74
 8009db4:	20000a78 	.word	0x20000a78
 8009db8:	20000f68 	.word	0x20000f68
 8009dbc:	20008060 	.word	0x20008060
 8009dc0:	2000805c 	.word	0x2000805c
 8009dc4:	20008058 	.word	0x20008058
 8009dc8:	080124ac 	.word	0x080124ac
 8009dcc:	08012198 	.word	0x08012198

08009dd0 <SendGAMInput>:
 * Positions  ==> 1
 */



void SendGAMInput(  ){
 8009dd0:	b480      	push	{r7}
 8009dd2:	af00      	add	r7, sp, #0
//			break;
//	}

	//ret = HAL_UART_Transmit(&huart2, (uint8_t*) msg_cmd, sizeof(frame), HAL_MAX_DELAY);

}
 8009dd4:	bf00      	nop
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
	...

08009de0 <SendGAMInputMain>:


void SendGAMInputMain(  ){
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af00      	add	r7, sp, #0
	ret = rotor_position_read(&rotor_position_steps);
 8009de6:	4842      	ldr	r0, [pc, #264]	; (8009ef0 <SendGAMInputMain+0x110>)
 8009de8:	f7fe ff09 	bl	8008bfe <rotor_position_read>
 8009dec:	4603      	mov	r3, r0
 8009dee:	4a41      	ldr	r2, [pc, #260]	; (8009ef4 <SendGAMInputMain+0x114>)
 8009df0:	6013      	str	r3, [r2, #0]
	ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8009df2:	4b41      	ldr	r3, [pc, #260]	; (8009ef8 <SendGAMInputMain+0x118>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a41      	ldr	r2, [pc, #260]	; (8009efc <SendGAMInputMain+0x11c>)
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4841      	ldr	r0, [pc, #260]	; (8009f00 <SendGAMInputMain+0x120>)
 8009dfc:	f7fe fe40 	bl	8008a80 <encoder_position_read>
 8009e00:	4603      	mov	r3, r0
 8009e02:	4a3c      	ldr	r2, [pc, #240]	; (8009ef4 <SendGAMInputMain+0x114>)
 8009e04:	6013      	str	r3, [r2, #0]
	if (select_suspended_mode == 0) {
 8009e06:	4b3f      	ldr	r3, [pc, #252]	; (8009f04 <SendGAMInputMain+0x124>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d122      	bne.n	8009e54 <SendGAMInputMain+0x74>
		encoder_position = encoder_position_steps - encoder_position_down - (int)(180 * angle_scale);
 8009e0e:	4b3c      	ldr	r3, [pc, #240]	; (8009f00 <SendGAMInputMain+0x120>)
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	4b3d      	ldr	r3, [pc, #244]	; (8009f08 <SendGAMInputMain+0x128>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	4a3c      	ldr	r2, [pc, #240]	; (8009f0c <SendGAMInputMain+0x12c>)
 8009e1a:	edd2 7a00 	vldr	s15, [r2]
 8009e1e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8009f10 <SendGAMInputMain+0x130>
 8009e22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e2a:	ee17 2a90 	vmov	r2, s15
 8009e2e:	1a9b      	subs	r3, r3, r2
 8009e30:	ee07 3a90 	vmov	s15, r3
 8009e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e38:	4b36      	ldr	r3, [pc, #216]	; (8009f14 <SendGAMInputMain+0x134>)
 8009e3a:	edc3 7a00 	vstr	s15, [r3]
		encoder_position = encoder_position - encoder_position_offset;
 8009e3e:	4b35      	ldr	r3, [pc, #212]	; (8009f14 <SendGAMInputMain+0x134>)
 8009e40:	ed93 7a00 	vldr	s14, [r3]
 8009e44:	4b34      	ldr	r3, [pc, #208]	; (8009f18 <SendGAMInputMain+0x138>)
 8009e46:	edd3 7a00 	vldr	s15, [r3]
 8009e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e4e:	4b31      	ldr	r3, [pc, #196]	; (8009f14 <SendGAMInputMain+0x134>)
 8009e50:	edc3 7a00 	vstr	s15, [r3]
	}
	if (select_suspended_mode == 1) {
 8009e54:	4b2b      	ldr	r3, [pc, #172]	; (8009f04 <SendGAMInputMain+0x124>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d116      	bne.n	8009e8a <SendGAMInputMain+0xaa>
		encoder_position = encoder_position_steps - encoder_position_down;
 8009e5c:	4b28      	ldr	r3, [pc, #160]	; (8009f00 <SendGAMInputMain+0x120>)
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	4b29      	ldr	r3, [pc, #164]	; (8009f08 <SendGAMInputMain+0x128>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	ee07 3a90 	vmov	s15, r3
 8009e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e6e:	4b29      	ldr	r3, [pc, #164]	; (8009f14 <SendGAMInputMain+0x134>)
 8009e70:	edc3 7a00 	vstr	s15, [r3]
		encoder_position = encoder_position - encoder_position_offset;
 8009e74:	4b27      	ldr	r3, [pc, #156]	; (8009f14 <SendGAMInputMain+0x134>)
 8009e76:	ed93 7a00 	vldr	s14, [r3]
 8009e7a:	4b27      	ldr	r3, [pc, #156]	; (8009f18 <SendGAMInputMain+0x138>)
 8009e7c:	edd3 7a00 	vldr	s15, [r3]
 8009e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e84:	4b23      	ldr	r3, [pc, #140]	; (8009f14 <SendGAMInputMain+0x134>)
 8009e86:	edc3 7a00 	vstr	s15, [r3]
	}

	uint32_t pwm_count = L6474_Board_Pwm1GetCounter();
 8009e8a:	f7f9 fbe9 	bl	8003660 <L6474_Board_Pwm1GetCounter>
 8009e8e:	61f8      	str	r0, [r7, #28]
	apply_acc_start_time = DWT->CYCCNT;
 8009e90:	4b22      	ldr	r3, [pc, #136]	; (8009f1c <SendGAMInputMain+0x13c>)
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	4a22      	ldr	r2, [pc, #136]	; (8009f20 <SendGAMInputMain+0x140>)
 8009e96:	6013      	str	r3, [r2, #0]


	DataFrame frame = {
 8009e98:	4b15      	ldr	r3, [pc, #84]	; (8009ef0 <SendGAMInputMain+0x110>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	603b      	str	r3, [r7, #0]
 8009e9e:	4b1d      	ldr	r3, [pc, #116]	; (8009f14 <SendGAMInputMain+0x134>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	607b      	str	r3, [r7, #4]
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	60bb      	str	r3, [r7, #8]
 8009ea8:	4b1d      	ldr	r3, [pc, #116]	; (8009f20 <SendGAMInputMain+0x140>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	60fb      	str	r3, [r7, #12]
 8009eae:	4b1d      	ldr	r3, [pc, #116]	; (8009f24 <SendGAMInputMain+0x144>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	613b      	str	r3, [r7, #16]
 8009eb4:	4b1c      	ldr	r3, [pc, #112]	; (8009f28 <SendGAMInputMain+0x148>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	617b      	str	r3, [r7, #20]
 8009eba:	4b1c      	ldr	r3, [pc, #112]	; (8009f2c <SendGAMInputMain+0x14c>)
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	763b      	strb	r3, [r7, #24]
 8009ec0:	4b1b      	ldr	r3, [pc, #108]	; (8009f30 <SendGAMInputMain+0x150>)
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	767b      	strb	r3, [r7, #25]
		LOOP_BACK_L6474_Board_Pwm1Period,
		LOOP_BACK_gpioState,
		LOOP_BACK_break_Control_Loop
	};

	memcpy(msg_cmd, &frame, sizeof(frame) );
 8009ec6:	463b      	mov	r3, r7
 8009ec8:	221a      	movs	r2, #26
 8009eca:	4619      	mov	r1, r3
 8009ecc:	4819      	ldr	r0, [pc, #100]	; (8009f34 <SendGAMInputMain+0x154>)
 8009ece:	f001 fb09 	bl	800b4e4 <memcpy>

	ret = HAL_UART_Transmit(&huart2, (uint8_t*) msg_cmd, sizeof(frame), HAL_MAX_DELAY);
 8009ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed6:	221a      	movs	r2, #26
 8009ed8:	4916      	ldr	r1, [pc, #88]	; (8009f34 <SendGAMInputMain+0x154>)
 8009eda:	4817      	ldr	r0, [pc, #92]	; (8009f38 <SendGAMInputMain+0x158>)
 8009edc:	f7fc fe36 	bl	8006b4c <HAL_UART_Transmit>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	4b03      	ldr	r3, [pc, #12]	; (8009ef4 <SendGAMInputMain+0x114>)
 8009ee6:	601a      	str	r2, [r3, #0]

}
 8009ee8:	bf00      	nop
 8009eea:	3720      	adds	r7, #32
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	20000fd0 	.word	0x20000fd0
 8009ef4:	20000f74 	.word	0x20000f74
 8009ef8:	20001078 	.word	0x20001078
 8009efc:	20000f10 	.word	0x20000f10
 8009f00:	20001074 	.word	0x20001074
 8009f04:	200049dc 	.word	0x200049dc
 8009f08:	2000108c 	.word	0x2000108c
 8009f0c:	20008044 	.word	0x20008044
 8009f10:	43340000 	.word	0x43340000
 8009f14:	20001070 	.word	0x20001070
 8009f18:	20001098 	.word	0x20001098
 8009f1c:	e0001000 	.word	0xe0001000
 8009f20:	20000c58 	.word	0x20000c58
 8009f24:	20008064 	.word	0x20008064
 8009f28:	2000806c 	.word	0x2000806c
 8009f2c:	20008068 	.word	0x20008068
 8009f30:	20008070 	.word	0x20008070
 8009f34:	20000e34 	.word	0x20000e34
 8009f38:	20000a78 	.word	0x20000a78

08009f3c <read_Frame>:

/*
 * Single integer value read
 */

int read_Frame() {
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0

	int k;

	/* Number of bytes to be analyzed */
	uint16_t NumNewByte = 0;
 8009f42:	2300      	movs	r3, #0
 8009f44:	80fb      	strh	r3, [r7, #6]

	RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8009f46:	4b21      	ldr	r3, [pc, #132]	; (8009fcc <read_Frame+0x90>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8009f50:	4a1f      	ldr	r2, [pc, #124]	; (8009fd0 <read_Frame+0x94>)
 8009f52:	6013      	str	r3, [r2, #0]
	uint16_t LastPos  = RxBuffer_WriteIdx;
 8009f54:	4b1e      	ldr	r3, [pc, #120]	; (8009fd0 <read_Frame+0x94>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	80bb      	strh	r3, [r7, #4]
	uint16_t StartPos = RxBuffer_ReadIdx;
 8009f5a:	4b1e      	ldr	r3, [pc, #120]	; (8009fd4 <read_Frame+0x98>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	807b      	strh	r3, [r7, #2]

	/* Two index for ByteStuffing process  */
	uint16_t BuffIdx;

	if (LastPos >= StartPos) {
 8009f60:	88ba      	ldrh	r2, [r7, #4]
 8009f62:	887b      	ldrh	r3, [r7, #2]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d304      	bcc.n	8009f72 <read_Frame+0x36>
		NumNewByte = LastPos - StartPos;
 8009f68:	88ba      	ldrh	r2, [r7, #4]
 8009f6a:	887b      	ldrh	r3, [r7, #2]
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	80fb      	strh	r3, [r7, #6]
 8009f70:	e005      	b.n	8009f7e <read_Frame+0x42>
	} else {
		NumNewByte = UART_RX_BUFFER_SIZE + LastPos - StartPos;
 8009f72:	88ba      	ldrh	r2, [r7, #4]
 8009f74:	887b      	ldrh	r3, [r7, #2]
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	33c8      	adds	r3, #200	; 0xc8
 8009f7c:	80fb      	strh	r3, [r7, #6]
	}

	if( NumNewByte < sizeof(*rx_frame) ) return 0;
 8009f7e:	88fb      	ldrh	r3, [r7, #6]
 8009f80:	2b09      	cmp	r3, #9
 8009f82:	d801      	bhi.n	8009f88 <read_Frame+0x4c>
 8009f84:	2300      	movs	r3, #0
 8009f86:	e01d      	b.n	8009fc4 <read_Frame+0x88>

	NumNewByte = sizeof(*rx_frame);
 8009f88:	230a      	movs	r3, #10
 8009f8a:	80fb      	strh	r3, [r7, #6]

	BuffIdx = StartPos;
 8009f8c:	887b      	ldrh	r3, [r7, #2]
 8009f8e:	803b      	strh	r3, [r7, #0]

	memcpy(rx_frameBuffer, RxBuffer+StartPos, NumNewByte );
 8009f90:	887b      	ldrh	r3, [r7, #2]
 8009f92:	4a11      	ldr	r2, [pc, #68]	; (8009fd8 <read_Frame+0x9c>)
 8009f94:	4413      	add	r3, r2
 8009f96:	88fa      	ldrh	r2, [r7, #6]
 8009f98:	4619      	mov	r1, r3
 8009f9a:	4810      	ldr	r0, [pc, #64]	; (8009fdc <read_Frame+0xa0>)
 8009f9c:	f001 faa2 	bl	800b4e4 <memcpy>
	rx_frame = (DataFrameReceive)rx_frameBuffer;
 8009fa0:	4b0f      	ldr	r3, [pc, #60]	; (8009fe0 <read_Frame+0xa4>)
 8009fa2:	4a0e      	ldr	r2, [pc, #56]	; (8009fdc <read_Frame+0xa0>)
 8009fa4:	601a      	str	r2, [r3, #0]

	RxBuffer_ReadIdx = (RxBuffer_ReadIdx + NumNewByte) % UART_RX_BUFFER_SIZE;
 8009fa6:	88fa      	ldrh	r2, [r7, #6]
 8009fa8:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <read_Frame+0x98>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	441a      	add	r2, r3
 8009fae:	4b0d      	ldr	r3, [pc, #52]	; (8009fe4 <read_Frame+0xa8>)
 8009fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8009fb4:	099b      	lsrs	r3, r3, #6
 8009fb6:	21c8      	movs	r1, #200	; 0xc8
 8009fb8:	fb01 f303 	mul.w	r3, r1, r3
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	4a05      	ldr	r2, [pc, #20]	; (8009fd4 <read_Frame+0x98>)
 8009fc0:	6013      	str	r3, [r2, #0]

	return 1;
 8009fc2:	2301      	movs	r3, #1

}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	20000ab8 	.word	0x20000ab8
 8009fd0:	2000805c 	.word	0x2000805c
 8009fd4:	20008058 	.word	0x20008058
 8009fd8:	20000b80 	.word	0x20000b80
 8009fdc:	20000c4c 	.word	0x20000c4c
 8009fe0:	20000c48 	.word	0x20000c48
 8009fe4:	51eb851f 	.word	0x51eb851f

08009fe8 <ProcessGAMOutput>:

/*
 *Jawad Modification ======== ########################
 *Command processor
 */
int ProcessGAMOutput( void ){
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	af00      	add	r7, sp, #0


	if ( read_Frame() ) // Message found
 8009fec:	f7ff ffa6 	bl	8009f3c <read_Frame>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d02c      	beq.n	800a050 <ProcessGAMOutput+0x68>
	{

		LOOP_BACK_rotor_control_target_steps = rx_frame->control_target_steps;
 8009ff6:	4b18      	ldr	r3, [pc, #96]	; (800a058 <ProcessGAMOutput+0x70>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a17      	ldr	r2, [pc, #92]	; (800a05c <ProcessGAMOutput+0x74>)
 8009ffe:	6013      	str	r3, [r2, #0]
		LOOP_BACK_gpioState = rx_frame->gpioState;
 800a000:	4b15      	ldr	r3, [pc, #84]	; (800a058 <ProcessGAMOutput+0x70>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	7a1a      	ldrb	r2, [r3, #8]
 800a006:	4b16      	ldr	r3, [pc, #88]	; (800a060 <ProcessGAMOutput+0x78>)
 800a008:	701a      	strb	r2, [r3, #0]
		LOOP_BACK_L6474_Board_Pwm1Period = rx_frame->Pwm1Period;
 800a00a:	4b13      	ldr	r3, [pc, #76]	; (800a058 <ProcessGAMOutput+0x70>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	4a14      	ldr	r2, [pc, #80]	; (800a064 <ProcessGAMOutput+0x7c>)
 800a012:	6013      	str	r3, [r2, #0]
		LOOP_BACK_break_Control_Loop = rx_frame->break_Control_Loop;
 800a014:	4b10      	ldr	r3, [pc, #64]	; (800a058 <ProcessGAMOutput+0x70>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	7a5a      	ldrb	r2, [r3, #9]
 800a01a:	4b13      	ldr	r3, [pc, #76]	; (800a068 <ProcessGAMOutput+0x80>)
 800a01c:	701a      	strb	r2, [r3, #0]

		if( rx_frame->break_Control_Loop == 1)
 800a01e:	4b0e      	ldr	r3, [pc, #56]	; (800a058 <ProcessGAMOutput+0x70>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	7a5b      	ldrb	r3, [r3, #9]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d101      	bne.n	800a02c <ProcessGAMOutput+0x44>
			return 0;
 800a028:	2300      	movs	r3, #0
 800a02a:	e012      	b.n	800a052 <ProcessGAMOutput+0x6a>

		if( rx_frame->gpioState != UNKNOW_DIR )
 800a02c:	4b0a      	ldr	r3, [pc, #40]	; (800a058 <ProcessGAMOutput+0x70>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	7a1b      	ldrb	r3, [r3, #8]
 800a032:	2bff      	cmp	r3, #255	; 0xff
 800a034:	d006      	beq.n	800a044 <ProcessGAMOutput+0x5c>
			L6474_Board_SetDirectionGpio(0, rx_frame->gpioState);
 800a036:	4b08      	ldr	r3, [pc, #32]	; (800a058 <ProcessGAMOutput+0x70>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	7a1b      	ldrb	r3, [r3, #8]
 800a03c:	4619      	mov	r1, r3
 800a03e:	2000      	movs	r0, #0
 800a040:	f7f9 fc52 	bl	80038e8 <L6474_Board_SetDirectionGpio>

		//if( rx_frame->control_target_steps == 0 )
			L6474_Board_Pwm1SetPeriod(rx_frame->Pwm1Period);
 800a044:	4b04      	ldr	r3, [pc, #16]	; (800a058 <ProcessGAMOutput+0x70>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7f9 fb14 	bl	8003678 <L6474_Board_Pwm1SetPeriod>
//		else
//			BSP_MotorControl_GoTo(0,rx_frame->control_target_steps );


	}
	return 1;
 800a050:	2301      	movs	r3, #1
}
 800a052:	4618      	mov	r0, r3
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	20000c48 	.word	0x20000c48
 800a05c:	20008064 	.word	0x20008064
 800a060:	20008068 	.word	0x20008068
 800a064:	2000806c 	.word	0x2000806c
 800a068:	20008070 	.word	0x20008070

0800a06c <HAL_SPI_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param[in] hspi SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b08c      	sub	sp, #48	; 0x30
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hspi->Instance == SPIx)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a31      	ldr	r2, [pc, #196]	; (800a140 <HAL_SPI_MspInit+0xd4>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d15b      	bne.n	800a136 <HAL_SPI_MspInit+0xca>
  {  
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 800a07e:	2300      	movs	r3, #0
 800a080:	61bb      	str	r3, [r7, #24]
 800a082:	4b30      	ldr	r3, [pc, #192]	; (800a144 <HAL_SPI_MspInit+0xd8>)
 800a084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a086:	4a2f      	ldr	r2, [pc, #188]	; (800a144 <HAL_SPI_MspInit+0xd8>)
 800a088:	f043 0301 	orr.w	r3, r3, #1
 800a08c:	6313      	str	r3, [r2, #48]	; 0x30
 800a08e:	4b2d      	ldr	r3, [pc, #180]	; (800a144 <HAL_SPI_MspInit+0xd8>)
 800a090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	61bb      	str	r3, [r7, #24]
 800a098:	69bb      	ldr	r3, [r7, #24]
    SPIx_MISO_GPIO_CLK_ENABLE();
 800a09a:	2300      	movs	r3, #0
 800a09c:	617b      	str	r3, [r7, #20]
 800a09e:	4b29      	ldr	r3, [pc, #164]	; (800a144 <HAL_SPI_MspInit+0xd8>)
 800a0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a2:	4a28      	ldr	r2, [pc, #160]	; (800a144 <HAL_SPI_MspInit+0xd8>)
 800a0a4:	f043 0301 	orr.w	r3, r3, #1
 800a0a8:	6313      	str	r3, [r2, #48]	; 0x30
 800a0aa:	4b26      	ldr	r3, [pc, #152]	; (800a144 <HAL_SPI_MspInit+0xd8>)
 800a0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	697b      	ldr	r3, [r7, #20]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	613b      	str	r3, [r7, #16]
 800a0ba:	4b22      	ldr	r3, [pc, #136]	; (800a144 <HAL_SPI_MspInit+0xd8>)
 800a0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0be:	4a21      	ldr	r2, [pc, #132]	; (800a144 <HAL_SPI_MspInit+0xd8>)
 800a0c0:	f043 0301 	orr.w	r3, r3, #1
 800a0c4:	6313      	str	r3, [r2, #48]	; 0x30
 800a0c6:	4b1f      	ldr	r3, [pc, #124]	; (800a144 <HAL_SPI_MspInit+0xd8>)
 800a0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	613b      	str	r3, [r7, #16]
 800a0d0:	693b      	ldr	r3, [r7, #16]
    /* Enable SPI clock */
    SPIx_CLK_ENABLE(); 
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	60fb      	str	r3, [r7, #12]
 800a0d6:	4b1b      	ldr	r3, [pc, #108]	; (800a144 <HAL_SPI_MspInit+0xd8>)
 800a0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0da:	4a1a      	ldr	r2, [pc, #104]	; (800a144 <HAL_SPI_MspInit+0xd8>)
 800a0dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a0e0:	6453      	str	r3, [r2, #68]	; 0x44
 800a0e2:	4b18      	ldr	r3, [pc, #96]	; (800a144 <HAL_SPI_MspInit+0xd8>)
 800a0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0ea:	60fb      	str	r3, [r7, #12]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
    
    /*##-2- Configure peripheral GPIO ##########################################*/  
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 800a0ee:	2320      	movs	r3, #32
 800a0f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800a0f2:	2302      	movs	r3, #2
 800a0f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed     = GPIO_SPEED_MEDIUM;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 800a0fe:	2305      	movs	r3, #5
 800a100:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 800a102:	f107 031c 	add.w	r3, r7, #28
 800a106:	4619      	mov	r1, r3
 800a108:	480f      	ldr	r0, [pc, #60]	; (800a148 <HAL_SPI_MspInit+0xdc>)
 800a10a:	f7fa fda9 	bl	8004c60 <HAL_GPIO_Init>
      
    /* SPI MISO GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 800a10e:	2340      	movs	r3, #64	; 0x40
 800a110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 800a112:	2305      	movs	r3, #5
 800a114:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 800a116:	f107 031c 	add.w	r3, r7, #28
 800a11a:	4619      	mov	r1, r3
 800a11c:	480a      	ldr	r0, [pc, #40]	; (800a148 <HAL_SPI_MspInit+0xdc>)
 800a11e:	f7fa fd9f 	bl	8004c60 <HAL_GPIO_Init>
    
    /* SPI MOSI GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 800a122:	2380      	movs	r3, #128	; 0x80
 800a124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 800a126:	2305      	movs	r3, #5
 800a128:	62fb      	str	r3, [r7, #44]	; 0x2c
      
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);   
 800a12a:	f107 031c 	add.w	r3, r7, #28
 800a12e:	4619      	mov	r1, r3
 800a130:	4805      	ldr	r0, [pc, #20]	; (800a148 <HAL_SPI_MspInit+0xdc>)
 800a132:	f7fa fd95 	bl	8004c60 <HAL_GPIO_Init>
  }
}
 800a136:	bf00      	nop
 800a138:	3730      	adds	r7, #48	; 0x30
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	40013000 	.word	0x40013000
 800a144:	40023800 	.word	0x40023800
 800a148:	40020000 	.word	0x40020000

0800a14c <HAL_TIM_PWM_MspInit>:
  * @brief PWM MSP Initialization 
  * @param[in] htim_pwm PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b088      	sub	sp, #32
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a15c:	d123      	bne.n	800a1a6 <HAL_TIM_PWM_MspInit+0x5a>
	  {
			GPIO_InitTypeDef GPIO_InitStruct;
			/* Peripheral clock enable */
			__BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1_CLCK_ENABLE();
 800a15e:	2300      	movs	r3, #0
 800a160:	60bb      	str	r3, [r7, #8]
 800a162:	4b13      	ldr	r3, [pc, #76]	; (800a1b0 <HAL_TIM_PWM_MspInit+0x64>)
 800a164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a166:	4a12      	ldr	r2, [pc, #72]	; (800a1b0 <HAL_TIM_PWM_MspInit+0x64>)
 800a168:	f043 0301 	orr.w	r3, r3, #1
 800a16c:	6413      	str	r3, [r2, #64]	; 0x40
 800a16e:	4b10      	ldr	r3, [pc, #64]	; (800a1b0 <HAL_TIM_PWM_MspInit+0x64>)
 800a170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	60bb      	str	r3, [r7, #8]
 800a178:	68bb      	ldr	r3, [r7, #8]

			/* GPIO configuration */
			GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_1_PIN;
 800a17a:	2380      	movs	r3, #128	; 0x80
 800a17c:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;//GPIO_MODE_AF_PP;
 800a17e:	2301      	movs	r3, #1
 800a180:	613b      	str	r3, [r7, #16]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a182:	2300      	movs	r3, #0
 800a184:	617b      	str	r3, [r7, #20]
			GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800a186:	2300      	movs	r3, #0
 800a188:	61bb      	str	r3, [r7, #24]
			//GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AFx_TIMx_PWM1;
			HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PWM_1_PORT, &GPIO_InitStruct);
 800a18a:	f107 030c 	add.w	r3, r7, #12
 800a18e:	4619      	mov	r1, r3
 800a190:	4808      	ldr	r0, [pc, #32]	; (800a1b4 <HAL_TIM_PWM_MspInit+0x68>)
 800a192:	f7fa fd65 	bl	8004c60 <HAL_GPIO_Init>

			/* Set Interrupt Group Priority of Timer Interrupt*/
			HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_PWM1_IRQn, 4, 0);
 800a196:	2200      	movs	r2, #0
 800a198:	2104      	movs	r1, #4
 800a19a:	201c      	movs	r0, #28
 800a19c:	f7fa f9b1 	bl	8004502 <HAL_NVIC_SetPriority>

			/* Enable the timer global Interrupt */
			HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_PWM1_IRQn);
 800a1a0:	201c      	movs	r0, #28
 800a1a2:	f7fa f9ca 	bl	800453a <HAL_NVIC_EnableIRQ>
	  }
}
 800a1a6:	bf00      	nop
 800a1a8:	3720      	adds	r7, #32
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	40023800 	.word	0x40023800
 800a1b4:	40020800 	.word	0x40020800

0800a1b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief PWM Callback
  * @param[in] htim PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  if ((htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1)&& (htim->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1c8:	d11c      	bne.n	800a204 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	7e1b      	ldrb	r3, [r3, #24]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d118      	bne.n	800a204 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>
  {
	int delay_pulse = Delay_Pulse();
 800a1d2:	f7fd f98f 	bl	80074f4 <Delay_Pulse>
 800a1d6:	60f8      	str	r0, [r7, #12]
	if (delay_pulse == 0){
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d107      	bne.n	800a1ee <HAL_TIM_PWM_PulseFinishedCallback+0x36>
		HAL_GPIO_TogglePin(BSP_MOTOR_CONTROL_BOARD_PWM_1_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_1_PIN);
 800a1de:	2180      	movs	r1, #128	; 0x80
 800a1e0:	480a      	ldr	r0, [pc, #40]	; (800a20c <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 800a1e2:	f7fa feda 	bl	8004f9a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BSP_MOTOR_CONTROL_BOARD_PWM_1_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_1_PIN);
 800a1e6:	2180      	movs	r1, #128	; 0x80
 800a1e8:	4808      	ldr	r0, [pc, #32]	; (800a20c <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 800a1ea:	f7fa fed6 	bl	8004f9a <HAL_GPIO_TogglePin>
	}
    if (BSP_MotorControl_GetDeviceState(0) != INACTIVE)
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	f7f9 fd54 	bl	8003c9c <BSP_MotorControl_GetDeviceState>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b08      	cmp	r3, #8
 800a1f8:	d002      	beq.n	800a200 <HAL_TIM_PWM_PulseFinishedCallback+0x48>
    {
    	BSP_MotorControl_StepClockHandler(0);
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	f7f9 fee2 	bl	8003fc4 <BSP_MotorControl_StepClockHandler>
    }
    Main_StepClockHandler();
 800a200:	f7fd f98a 	bl	8007518 <Main_StepClockHandler>
  }
}
 800a204:	bf00      	nop
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	40020800 	.word	0x40020800

0800a210 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b088      	sub	sp, #32
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM3)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a12      	ldr	r2, [pc, #72]	; (800a268 <HAL_TIM_Encoder_MspInit+0x58>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d11d      	bne.n	800a25e <HAL_TIM_Encoder_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a222:	2300      	movs	r3, #0
 800a224:	60bb      	str	r3, [r7, #8]
 800a226:	4b11      	ldr	r3, [pc, #68]	; (800a26c <HAL_TIM_Encoder_MspInit+0x5c>)
 800a228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22a:	4a10      	ldr	r2, [pc, #64]	; (800a26c <HAL_TIM_Encoder_MspInit+0x5c>)
 800a22c:	f043 0302 	orr.w	r3, r3, #2
 800a230:	6413      	str	r3, [r2, #64]	; 0x40
 800a232:	4b0e      	ldr	r3, [pc, #56]	; (800a26c <HAL_TIM_Encoder_MspInit+0x5c>)
 800a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a236:	f003 0302 	and.w	r3, r3, #2
 800a23a:	60bb      	str	r3, [r7, #8]
 800a23c:	68bb      	ldr	r3, [r7, #8]

    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800a23e:	2330      	movs	r3, #48	; 0x30
 800a240:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a242:	2302      	movs	r3, #2
 800a244:	613b      	str	r3, [r7, #16]
    // GPIO_InitStruct.Pull = GPIO_NOPULL;
       /*
        * Pull Up Set for Encoder with Open Collector Output
        */
       GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a246:	2301      	movs	r3, #1
 800a248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a24a:	2303      	movs	r3, #3
 800a24c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a24e:	2302      	movs	r3, #2
 800a250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a252:	f107 030c 	add.w	r3, r7, #12
 800a256:	4619      	mov	r1, r3
 800a258:	4805      	ldr	r0, [pc, #20]	; (800a270 <HAL_TIM_Encoder_MspInit+0x60>)
 800a25a:	f7fa fd01 	bl	8004c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800a25e:	bf00      	nop
 800a260:	3720      	adds	r7, #32
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	40000400 	.word	0x40000400
 800a26c:	40023800 	.word	0x40023800
 800a270:	40020400 	.word	0x40020400

0800a274 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b088      	sub	sp, #32
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a16      	ldr	r2, [pc, #88]	; (800a2dc <HAL_UART_MspInit+0x68>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d125      	bne.n	800a2d2 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a286:	2300      	movs	r3, #0
 800a288:	60bb      	str	r3, [r7, #8]
 800a28a:	4b15      	ldr	r3, [pc, #84]	; (800a2e0 <HAL_UART_MspInit+0x6c>)
 800a28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28e:	4a14      	ldr	r2, [pc, #80]	; (800a2e0 <HAL_UART_MspInit+0x6c>)
 800a290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a294:	6413      	str	r3, [r2, #64]	; 0x40
 800a296:	4b12      	ldr	r3, [pc, #72]	; (800a2e0 <HAL_UART_MspInit+0x6c>)
 800a298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a29e:	60bb      	str	r3, [r7, #8]
 800a2a0:	68bb      	ldr	r3, [r7, #8]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a2a2:	230c      	movs	r3, #12
 800a2a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a2b2:	2307      	movs	r3, #7
 800a2b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2b6:	f107 030c 	add.w	r3, r7, #12
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	4809      	ldr	r0, [pc, #36]	; (800a2e4 <HAL_UART_MspInit+0x70>)
 800a2be:	f7fa fccf 	bl	8004c60 <HAL_GPIO_Init>

    /* Configure the NVIC for UART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	2026      	movs	r0, #38	; 0x26
 800a2c8:	f7fa f91b 	bl	8004502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a2cc:	2026      	movs	r0, #38	; 0x26
 800a2ce:	f7fa f934 	bl	800453a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800a2d2:	bf00      	nop
 800a2d4:	3720      	adds	r7, #32
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	40004400 	.word	0x40004400
 800a2e0:	40023800 	.word	0x40023800
 800a2e4:	40020000 	.word	0x40020000

0800a2e8 <HAL_GPIO_EXTI_Callback>:
  * @brief External Line Callback 
  * @param[in] GPIO_Pin pin number
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BSP_MOTOR_CONTROL_BOARD_FLAG_PIN)
 800a2f2:	88fb      	ldrh	r3, [r7, #6]
 800a2f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2f8:	d101      	bne.n	800a2fe <HAL_GPIO_EXTI_Callback+0x16>
  {
    BSP_MotorControl_FlagInterruptHandler();
 800a2fa:	f7f9 fc49 	bl	8003b90 <BSP_MotorControl_FlagInterruptHandler>
  }
 }
 800a2fe:	bf00      	nop
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800a306:	b480      	push	{r7}
 800a308:	af00      	add	r7, sp, #0
}
 800a30a:	bf00      	nop
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800a314:	b480      	push	{r7}
 800a316:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800a318:	e7fe      	b.n	800a318 <HardFault_Handler+0x4>

0800a31a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800a31a:	b480      	push	{r7}
 800a31c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800a31e:	e7fe      	b.n	800a31e <MemManage_Handler+0x4>

0800a320 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800a320:	b480      	push	{r7}
 800a322:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800a324:	e7fe      	b.n	800a324 <BusFault_Handler+0x4>

0800a326 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800a326:	b480      	push	{r7}
 800a328:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800a32a:	e7fe      	b.n	800a32a <UsageFault_Handler+0x4>

0800a32c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800a32c:	b480      	push	{r7}
 800a32e:	af00      	add	r7, sp, #0
}
 800a330:	bf00      	nop
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800a33a:	b480      	push	{r7}
 800a33c:	af00      	add	r7, sp, #0
}
 800a33e:	bf00      	nop
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800a348:	b480      	push	{r7}
 800a34a:	af00      	add	r7, sp, #0
}
 800a34c:	bf00      	nop
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800a35a:	f7f9 ffb7 	bl	80042cc <HAL_IncTick>
}
 800a35e:	bf00      	nop
 800a360:	bd80      	pop	{r7, pc}

0800a362 <EXTI15_10_IRQHandler>:
  * @brief  This function handles interrupt for External lines 10 to 15
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800a366:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a36a:	f7fa fe29 	bl	8004fc0 <HAL_GPIO_EXTI_IRQHandler>
}
 800a36e:	bf00      	nop
 800a370:	bd80      	pop	{r7, pc}
	...

0800a374 <TIM2_IRQHandler>:
  * @brief  This function handles TIM2 interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm1);
 800a378:	4802      	ldr	r0, [pc, #8]	; (800a384 <TIM2_IRQHandler+0x10>)
 800a37a:	f7fb ff0b 	bl	8006194 <HAL_TIM_IRQHandler>
}
 800a37e:	bf00      	nop
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	20000964 	.word	0x20000964

0800a388 <TIM3_IRQHandler>:
  * @brief  This function handles TIM3 interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm2);
 800a38c:	4802      	ldr	r0, [pc, #8]	; (800a398 <TIM3_IRQHandler+0x10>)
 800a38e:	f7fb ff01 	bl	8006194 <HAL_TIM_IRQHandler>
}
 800a392:	bf00      	nop
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	200009a0 	.word	0x200009a0

0800a39c <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm3);
 800a3a0:	4802      	ldr	r0, [pc, #8]	; (800a3ac <TIM4_IRQHandler+0x10>)
 800a3a2:	f7fb fef7 	bl	8006194 <HAL_TIM_IRQHandler>
}
 800a3a6:	bf00      	nop
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	200009dc 	.word	0x200009dc

0800a3b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800a3b4:	4802      	ldr	r0, [pc, #8]	; (800a3c0 <DMA1_Stream5_IRQHandler+0x10>)
 800a3b6:	f7fa f9e9 	bl	800478c <HAL_DMA_IRQHandler>
}
 800a3ba:	bf00      	nop
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	20000ab8 	.word	0x20000ab8

0800a3c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800a3c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a3fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a3c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a3ca:	e003      	b.n	800a3d4 <LoopCopyDataInit>

0800a3cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a3cc:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a3ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a3d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a3d2:	3104      	adds	r1, #4

0800a3d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a3d4:	480b      	ldr	r0, [pc, #44]	; (800a404 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a3d6:	4b0c      	ldr	r3, [pc, #48]	; (800a408 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a3d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a3da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a3dc:	d3f6      	bcc.n	800a3cc <CopyDataInit>
  ldr  r2, =_sbss
 800a3de:	4a0b      	ldr	r2, [pc, #44]	; (800a40c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a3e0:	e002      	b.n	800a3e8 <LoopFillZerobss>

0800a3e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a3e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a3e4:	f842 3b04 	str.w	r3, [r2], #4

0800a3e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a3e8:	4b09      	ldr	r3, [pc, #36]	; (800a410 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a3ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a3ec:	d3f9      	bcc.n	800a3e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a3ee:	f7f9 fedd 	bl	80041ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a3f2:	f001 f84f 	bl	800b494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a3f6:	f7fe f9b7 	bl	8008768 <main>
  bx  lr    
 800a3fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800a3fc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800a400:	08012b04 	.word	0x08012b04
  ldr  r0, =_sdata
 800a404:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a408:	20000850 	.word	0x20000850
  ldr  r2, =_sbss
 800a40c:	20000850 	.word	0x20000850
  ldr  r3, = _ebss
 800a410:	20008384 	.word	0x20008384

0800a414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a414:	e7fe      	b.n	800a414 <ADC_IRQHandler>

0800a416 <atof>:
 800a416:	2100      	movs	r1, #0
 800a418:	f000 be12 	b.w	800b040 <strtod>

0800a41c <atoi>:
 800a41c:	220a      	movs	r2, #10
 800a41e:	2100      	movs	r1, #0
 800a420:	f000 be9c 	b.w	800b15c <strtol>

0800a424 <sulp>:
 800a424:	b570      	push	{r4, r5, r6, lr}
 800a426:	4604      	mov	r4, r0
 800a428:	460d      	mov	r5, r1
 800a42a:	ec45 4b10 	vmov	d0, r4, r5
 800a42e:	4616      	mov	r6, r2
 800a430:	f002 fa60 	bl	800c8f4 <__ulp>
 800a434:	ec51 0b10 	vmov	r0, r1, d0
 800a438:	b17e      	cbz	r6, 800a45a <sulp+0x36>
 800a43a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a43e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a442:	2b00      	cmp	r3, #0
 800a444:	dd09      	ble.n	800a45a <sulp+0x36>
 800a446:	051b      	lsls	r3, r3, #20
 800a448:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a44c:	2400      	movs	r4, #0
 800a44e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a452:	4622      	mov	r2, r4
 800a454:	462b      	mov	r3, r5
 800a456:	f7f6 f8e7 	bl	8000628 <__aeabi_dmul>
 800a45a:	bd70      	pop	{r4, r5, r6, pc}
 800a45c:	0000      	movs	r0, r0
	...

0800a460 <_strtod_l>:
 800a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	ed2d 8b02 	vpush	{d8}
 800a468:	b09b      	sub	sp, #108	; 0x6c
 800a46a:	4604      	mov	r4, r0
 800a46c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a46e:	2200      	movs	r2, #0
 800a470:	9216      	str	r2, [sp, #88]	; 0x58
 800a472:	460d      	mov	r5, r1
 800a474:	f04f 0800 	mov.w	r8, #0
 800a478:	f04f 0900 	mov.w	r9, #0
 800a47c:	460a      	mov	r2, r1
 800a47e:	9215      	str	r2, [sp, #84]	; 0x54
 800a480:	7811      	ldrb	r1, [r2, #0]
 800a482:	292b      	cmp	r1, #43	; 0x2b
 800a484:	d04c      	beq.n	800a520 <_strtod_l+0xc0>
 800a486:	d83a      	bhi.n	800a4fe <_strtod_l+0x9e>
 800a488:	290d      	cmp	r1, #13
 800a48a:	d834      	bhi.n	800a4f6 <_strtod_l+0x96>
 800a48c:	2908      	cmp	r1, #8
 800a48e:	d834      	bhi.n	800a4fa <_strtod_l+0x9a>
 800a490:	2900      	cmp	r1, #0
 800a492:	d03d      	beq.n	800a510 <_strtod_l+0xb0>
 800a494:	2200      	movs	r2, #0
 800a496:	920a      	str	r2, [sp, #40]	; 0x28
 800a498:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a49a:	7832      	ldrb	r2, [r6, #0]
 800a49c:	2a30      	cmp	r2, #48	; 0x30
 800a49e:	f040 80b4 	bne.w	800a60a <_strtod_l+0x1aa>
 800a4a2:	7872      	ldrb	r2, [r6, #1]
 800a4a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a4a8:	2a58      	cmp	r2, #88	; 0x58
 800a4aa:	d170      	bne.n	800a58e <_strtod_l+0x12e>
 800a4ac:	9302      	str	r3, [sp, #8]
 800a4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	ab16      	add	r3, sp, #88	; 0x58
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	4a8e      	ldr	r2, [pc, #568]	; (800a6f0 <_strtod_l+0x290>)
 800a4b8:	ab17      	add	r3, sp, #92	; 0x5c
 800a4ba:	a915      	add	r1, sp, #84	; 0x54
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f001 f9b3 	bl	800b828 <__gethex>
 800a4c2:	f010 070f 	ands.w	r7, r0, #15
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	d005      	beq.n	800a4d6 <_strtod_l+0x76>
 800a4ca:	2f06      	cmp	r7, #6
 800a4cc:	d12a      	bne.n	800a524 <_strtod_l+0xc4>
 800a4ce:	3601      	adds	r6, #1
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	9615      	str	r6, [sp, #84]	; 0x54
 800a4d4:	930a      	str	r3, [sp, #40]	; 0x28
 800a4d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f040 857f 	bne.w	800afdc <_strtod_l+0xb7c>
 800a4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4e0:	b1db      	cbz	r3, 800a51a <_strtod_l+0xba>
 800a4e2:	4642      	mov	r2, r8
 800a4e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a4e8:	ec43 2b10 	vmov	d0, r2, r3
 800a4ec:	b01b      	add	sp, #108	; 0x6c
 800a4ee:	ecbd 8b02 	vpop	{d8}
 800a4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f6:	2920      	cmp	r1, #32
 800a4f8:	d1cc      	bne.n	800a494 <_strtod_l+0x34>
 800a4fa:	3201      	adds	r2, #1
 800a4fc:	e7bf      	b.n	800a47e <_strtod_l+0x1e>
 800a4fe:	292d      	cmp	r1, #45	; 0x2d
 800a500:	d1c8      	bne.n	800a494 <_strtod_l+0x34>
 800a502:	2101      	movs	r1, #1
 800a504:	910a      	str	r1, [sp, #40]	; 0x28
 800a506:	1c51      	adds	r1, r2, #1
 800a508:	9115      	str	r1, [sp, #84]	; 0x54
 800a50a:	7852      	ldrb	r2, [r2, #1]
 800a50c:	2a00      	cmp	r2, #0
 800a50e:	d1c3      	bne.n	800a498 <_strtod_l+0x38>
 800a510:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a512:	9515      	str	r5, [sp, #84]	; 0x54
 800a514:	2b00      	cmp	r3, #0
 800a516:	f040 855f 	bne.w	800afd8 <_strtod_l+0xb78>
 800a51a:	4642      	mov	r2, r8
 800a51c:	464b      	mov	r3, r9
 800a51e:	e7e3      	b.n	800a4e8 <_strtod_l+0x88>
 800a520:	2100      	movs	r1, #0
 800a522:	e7ef      	b.n	800a504 <_strtod_l+0xa4>
 800a524:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a526:	b13a      	cbz	r2, 800a538 <_strtod_l+0xd8>
 800a528:	2135      	movs	r1, #53	; 0x35
 800a52a:	a818      	add	r0, sp, #96	; 0x60
 800a52c:	f002 fadf 	bl	800caee <__copybits>
 800a530:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a532:	4620      	mov	r0, r4
 800a534:	f001 fee5 	bl	800c302 <_Bfree>
 800a538:	3f01      	subs	r7, #1
 800a53a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a53c:	2f04      	cmp	r7, #4
 800a53e:	d806      	bhi.n	800a54e <_strtod_l+0xee>
 800a540:	e8df f007 	tbb	[pc, r7]
 800a544:	201d0314 	.word	0x201d0314
 800a548:	14          	.byte	0x14
 800a549:	00          	.byte	0x00
 800a54a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a54e:	05e9      	lsls	r1, r5, #23
 800a550:	bf48      	it	mi
 800a552:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a556:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a55a:	0d1b      	lsrs	r3, r3, #20
 800a55c:	051b      	lsls	r3, r3, #20
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1b9      	bne.n	800a4d6 <_strtod_l+0x76>
 800a562:	f000 ff91 	bl	800b488 <__errno>
 800a566:	2322      	movs	r3, #34	; 0x22
 800a568:	6003      	str	r3, [r0, #0]
 800a56a:	e7b4      	b.n	800a4d6 <_strtod_l+0x76>
 800a56c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a570:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a574:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a578:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a57c:	e7e7      	b.n	800a54e <_strtod_l+0xee>
 800a57e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a6f8 <_strtod_l+0x298>
 800a582:	e7e4      	b.n	800a54e <_strtod_l+0xee>
 800a584:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a588:	f04f 38ff 	mov.w	r8, #4294967295
 800a58c:	e7df      	b.n	800a54e <_strtod_l+0xee>
 800a58e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	9215      	str	r2, [sp, #84]	; 0x54
 800a594:	785b      	ldrb	r3, [r3, #1]
 800a596:	2b30      	cmp	r3, #48	; 0x30
 800a598:	d0f9      	beq.n	800a58e <_strtod_l+0x12e>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d09b      	beq.n	800a4d6 <_strtod_l+0x76>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	f04f 0a00 	mov.w	sl, #0
 800a5a4:	9304      	str	r3, [sp, #16]
 800a5a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a5ae:	46d3      	mov	fp, sl
 800a5b0:	220a      	movs	r2, #10
 800a5b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a5b4:	7806      	ldrb	r6, [r0, #0]
 800a5b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a5ba:	b2d9      	uxtb	r1, r3
 800a5bc:	2909      	cmp	r1, #9
 800a5be:	d926      	bls.n	800a60e <_strtod_l+0x1ae>
 800a5c0:	494c      	ldr	r1, [pc, #304]	; (800a6f4 <_strtod_l+0x294>)
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f000 ff01 	bl	800b3ca <strncmp>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d030      	beq.n	800a62e <_strtod_l+0x1ce>
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	4632      	mov	r2, r6
 800a5d0:	9005      	str	r0, [sp, #20]
 800a5d2:	465e      	mov	r6, fp
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2a65      	cmp	r2, #101	; 0x65
 800a5d8:	d001      	beq.n	800a5de <_strtod_l+0x17e>
 800a5da:	2a45      	cmp	r2, #69	; 0x45
 800a5dc:	d113      	bne.n	800a606 <_strtod_l+0x1a6>
 800a5de:	b91e      	cbnz	r6, 800a5e8 <_strtod_l+0x188>
 800a5e0:	9a04      	ldr	r2, [sp, #16]
 800a5e2:	4302      	orrs	r2, r0
 800a5e4:	d094      	beq.n	800a510 <_strtod_l+0xb0>
 800a5e6:	2600      	movs	r6, #0
 800a5e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a5ea:	1c6a      	adds	r2, r5, #1
 800a5ec:	9215      	str	r2, [sp, #84]	; 0x54
 800a5ee:	786a      	ldrb	r2, [r5, #1]
 800a5f0:	2a2b      	cmp	r2, #43	; 0x2b
 800a5f2:	d074      	beq.n	800a6de <_strtod_l+0x27e>
 800a5f4:	2a2d      	cmp	r2, #45	; 0x2d
 800a5f6:	d078      	beq.n	800a6ea <_strtod_l+0x28a>
 800a5f8:	f04f 0c00 	mov.w	ip, #0
 800a5fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a600:	2909      	cmp	r1, #9
 800a602:	d97f      	bls.n	800a704 <_strtod_l+0x2a4>
 800a604:	9515      	str	r5, [sp, #84]	; 0x54
 800a606:	2700      	movs	r7, #0
 800a608:	e09e      	b.n	800a748 <_strtod_l+0x2e8>
 800a60a:	2300      	movs	r3, #0
 800a60c:	e7c8      	b.n	800a5a0 <_strtod_l+0x140>
 800a60e:	f1bb 0f08 	cmp.w	fp, #8
 800a612:	bfd8      	it	le
 800a614:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a616:	f100 0001 	add.w	r0, r0, #1
 800a61a:	bfda      	itte	le
 800a61c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a620:	9309      	strle	r3, [sp, #36]	; 0x24
 800a622:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a626:	f10b 0b01 	add.w	fp, fp, #1
 800a62a:	9015      	str	r0, [sp, #84]	; 0x54
 800a62c:	e7c1      	b.n	800a5b2 <_strtod_l+0x152>
 800a62e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a630:	1c5a      	adds	r2, r3, #1
 800a632:	9215      	str	r2, [sp, #84]	; 0x54
 800a634:	785a      	ldrb	r2, [r3, #1]
 800a636:	f1bb 0f00 	cmp.w	fp, #0
 800a63a:	d037      	beq.n	800a6ac <_strtod_l+0x24c>
 800a63c:	9005      	str	r0, [sp, #20]
 800a63e:	465e      	mov	r6, fp
 800a640:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a644:	2b09      	cmp	r3, #9
 800a646:	d912      	bls.n	800a66e <_strtod_l+0x20e>
 800a648:	2301      	movs	r3, #1
 800a64a:	e7c4      	b.n	800a5d6 <_strtod_l+0x176>
 800a64c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a64e:	1c5a      	adds	r2, r3, #1
 800a650:	9215      	str	r2, [sp, #84]	; 0x54
 800a652:	785a      	ldrb	r2, [r3, #1]
 800a654:	3001      	adds	r0, #1
 800a656:	2a30      	cmp	r2, #48	; 0x30
 800a658:	d0f8      	beq.n	800a64c <_strtod_l+0x1ec>
 800a65a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a65e:	2b08      	cmp	r3, #8
 800a660:	f200 84c1 	bhi.w	800afe6 <_strtod_l+0xb86>
 800a664:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a666:	9005      	str	r0, [sp, #20]
 800a668:	2000      	movs	r0, #0
 800a66a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a66c:	4606      	mov	r6, r0
 800a66e:	3a30      	subs	r2, #48	; 0x30
 800a670:	f100 0301 	add.w	r3, r0, #1
 800a674:	d014      	beq.n	800a6a0 <_strtod_l+0x240>
 800a676:	9905      	ldr	r1, [sp, #20]
 800a678:	4419      	add	r1, r3
 800a67a:	9105      	str	r1, [sp, #20]
 800a67c:	4633      	mov	r3, r6
 800a67e:	eb00 0c06 	add.w	ip, r0, r6
 800a682:	210a      	movs	r1, #10
 800a684:	4563      	cmp	r3, ip
 800a686:	d113      	bne.n	800a6b0 <_strtod_l+0x250>
 800a688:	1833      	adds	r3, r6, r0
 800a68a:	2b08      	cmp	r3, #8
 800a68c:	f106 0601 	add.w	r6, r6, #1
 800a690:	4406      	add	r6, r0
 800a692:	dc1a      	bgt.n	800a6ca <_strtod_l+0x26a>
 800a694:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a696:	230a      	movs	r3, #10
 800a698:	fb03 2301 	mla	r3, r3, r1, r2
 800a69c:	9309      	str	r3, [sp, #36]	; 0x24
 800a69e:	2300      	movs	r3, #0
 800a6a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a6a2:	1c51      	adds	r1, r2, #1
 800a6a4:	9115      	str	r1, [sp, #84]	; 0x54
 800a6a6:	7852      	ldrb	r2, [r2, #1]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	e7c9      	b.n	800a640 <_strtod_l+0x1e0>
 800a6ac:	4658      	mov	r0, fp
 800a6ae:	e7d2      	b.n	800a656 <_strtod_l+0x1f6>
 800a6b0:	2b08      	cmp	r3, #8
 800a6b2:	f103 0301 	add.w	r3, r3, #1
 800a6b6:	dc03      	bgt.n	800a6c0 <_strtod_l+0x260>
 800a6b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a6ba:	434f      	muls	r7, r1
 800a6bc:	9709      	str	r7, [sp, #36]	; 0x24
 800a6be:	e7e1      	b.n	800a684 <_strtod_l+0x224>
 800a6c0:	2b10      	cmp	r3, #16
 800a6c2:	bfd8      	it	le
 800a6c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a6c8:	e7dc      	b.n	800a684 <_strtod_l+0x224>
 800a6ca:	2e10      	cmp	r6, #16
 800a6cc:	bfdc      	itt	le
 800a6ce:	230a      	movle	r3, #10
 800a6d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a6d4:	e7e3      	b.n	800a69e <_strtod_l+0x23e>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	9305      	str	r3, [sp, #20]
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e780      	b.n	800a5e0 <_strtod_l+0x180>
 800a6de:	f04f 0c00 	mov.w	ip, #0
 800a6e2:	1caa      	adds	r2, r5, #2
 800a6e4:	9215      	str	r2, [sp, #84]	; 0x54
 800a6e6:	78aa      	ldrb	r2, [r5, #2]
 800a6e8:	e788      	b.n	800a5fc <_strtod_l+0x19c>
 800a6ea:	f04f 0c01 	mov.w	ip, #1
 800a6ee:	e7f8      	b.n	800a6e2 <_strtod_l+0x282>
 800a6f0:	080124d4 	.word	0x080124d4
 800a6f4:	080124d2 	.word	0x080124d2
 800a6f8:	7ff00000 	.word	0x7ff00000
 800a6fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a6fe:	1c51      	adds	r1, r2, #1
 800a700:	9115      	str	r1, [sp, #84]	; 0x54
 800a702:	7852      	ldrb	r2, [r2, #1]
 800a704:	2a30      	cmp	r2, #48	; 0x30
 800a706:	d0f9      	beq.n	800a6fc <_strtod_l+0x29c>
 800a708:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a70c:	2908      	cmp	r1, #8
 800a70e:	f63f af7a 	bhi.w	800a606 <_strtod_l+0x1a6>
 800a712:	3a30      	subs	r2, #48	; 0x30
 800a714:	9208      	str	r2, [sp, #32]
 800a716:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a718:	920c      	str	r2, [sp, #48]	; 0x30
 800a71a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a71c:	1c57      	adds	r7, r2, #1
 800a71e:	9715      	str	r7, [sp, #84]	; 0x54
 800a720:	7852      	ldrb	r2, [r2, #1]
 800a722:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a726:	f1be 0f09 	cmp.w	lr, #9
 800a72a:	d938      	bls.n	800a79e <_strtod_l+0x33e>
 800a72c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a72e:	1a7f      	subs	r7, r7, r1
 800a730:	2f08      	cmp	r7, #8
 800a732:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a736:	dc03      	bgt.n	800a740 <_strtod_l+0x2e0>
 800a738:	9908      	ldr	r1, [sp, #32]
 800a73a:	428f      	cmp	r7, r1
 800a73c:	bfa8      	it	ge
 800a73e:	460f      	movge	r7, r1
 800a740:	f1bc 0f00 	cmp.w	ip, #0
 800a744:	d000      	beq.n	800a748 <_strtod_l+0x2e8>
 800a746:	427f      	negs	r7, r7
 800a748:	2e00      	cmp	r6, #0
 800a74a:	d14f      	bne.n	800a7ec <_strtod_l+0x38c>
 800a74c:	9904      	ldr	r1, [sp, #16]
 800a74e:	4301      	orrs	r1, r0
 800a750:	f47f aec1 	bne.w	800a4d6 <_strtod_l+0x76>
 800a754:	2b00      	cmp	r3, #0
 800a756:	f47f aedb 	bne.w	800a510 <_strtod_l+0xb0>
 800a75a:	2a69      	cmp	r2, #105	; 0x69
 800a75c:	d029      	beq.n	800a7b2 <_strtod_l+0x352>
 800a75e:	dc26      	bgt.n	800a7ae <_strtod_l+0x34e>
 800a760:	2a49      	cmp	r2, #73	; 0x49
 800a762:	d026      	beq.n	800a7b2 <_strtod_l+0x352>
 800a764:	2a4e      	cmp	r2, #78	; 0x4e
 800a766:	f47f aed3 	bne.w	800a510 <_strtod_l+0xb0>
 800a76a:	499b      	ldr	r1, [pc, #620]	; (800a9d8 <_strtod_l+0x578>)
 800a76c:	a815      	add	r0, sp, #84	; 0x54
 800a76e:	f001 fa9b 	bl	800bca8 <__match>
 800a772:	2800      	cmp	r0, #0
 800a774:	f43f aecc 	beq.w	800a510 <_strtod_l+0xb0>
 800a778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	2b28      	cmp	r3, #40	; 0x28
 800a77e:	d12f      	bne.n	800a7e0 <_strtod_l+0x380>
 800a780:	4996      	ldr	r1, [pc, #600]	; (800a9dc <_strtod_l+0x57c>)
 800a782:	aa18      	add	r2, sp, #96	; 0x60
 800a784:	a815      	add	r0, sp, #84	; 0x54
 800a786:	f001 faa3 	bl	800bcd0 <__hexnan>
 800a78a:	2805      	cmp	r0, #5
 800a78c:	d128      	bne.n	800a7e0 <_strtod_l+0x380>
 800a78e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a790:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a794:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a798:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a79c:	e69b      	b.n	800a4d6 <_strtod_l+0x76>
 800a79e:	9f08      	ldr	r7, [sp, #32]
 800a7a0:	210a      	movs	r1, #10
 800a7a2:	fb01 2107 	mla	r1, r1, r7, r2
 800a7a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a7aa:	9208      	str	r2, [sp, #32]
 800a7ac:	e7b5      	b.n	800a71a <_strtod_l+0x2ba>
 800a7ae:	2a6e      	cmp	r2, #110	; 0x6e
 800a7b0:	e7d9      	b.n	800a766 <_strtod_l+0x306>
 800a7b2:	498b      	ldr	r1, [pc, #556]	; (800a9e0 <_strtod_l+0x580>)
 800a7b4:	a815      	add	r0, sp, #84	; 0x54
 800a7b6:	f001 fa77 	bl	800bca8 <__match>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	f43f aea8 	beq.w	800a510 <_strtod_l+0xb0>
 800a7c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7c2:	4988      	ldr	r1, [pc, #544]	; (800a9e4 <_strtod_l+0x584>)
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	a815      	add	r0, sp, #84	; 0x54
 800a7c8:	9315      	str	r3, [sp, #84]	; 0x54
 800a7ca:	f001 fa6d 	bl	800bca8 <__match>
 800a7ce:	b910      	cbnz	r0, 800a7d6 <_strtod_l+0x376>
 800a7d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	9315      	str	r3, [sp, #84]	; 0x54
 800a7d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a9f4 <_strtod_l+0x594>
 800a7da:	f04f 0800 	mov.w	r8, #0
 800a7de:	e67a      	b.n	800a4d6 <_strtod_l+0x76>
 800a7e0:	4881      	ldr	r0, [pc, #516]	; (800a9e8 <_strtod_l+0x588>)
 800a7e2:	f000 fe8d 	bl	800b500 <nan>
 800a7e6:	ec59 8b10 	vmov	r8, r9, d0
 800a7ea:	e674      	b.n	800a4d6 <_strtod_l+0x76>
 800a7ec:	9b05      	ldr	r3, [sp, #20]
 800a7ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7f0:	1afb      	subs	r3, r7, r3
 800a7f2:	f1bb 0f00 	cmp.w	fp, #0
 800a7f6:	bf08      	it	eq
 800a7f8:	46b3      	moveq	fp, r6
 800a7fa:	2e10      	cmp	r6, #16
 800a7fc:	9308      	str	r3, [sp, #32]
 800a7fe:	4635      	mov	r5, r6
 800a800:	bfa8      	it	ge
 800a802:	2510      	movge	r5, #16
 800a804:	f7f5 fe96 	bl	8000534 <__aeabi_ui2d>
 800a808:	2e09      	cmp	r6, #9
 800a80a:	4680      	mov	r8, r0
 800a80c:	4689      	mov	r9, r1
 800a80e:	dd13      	ble.n	800a838 <_strtod_l+0x3d8>
 800a810:	4b76      	ldr	r3, [pc, #472]	; (800a9ec <_strtod_l+0x58c>)
 800a812:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a816:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a81a:	f7f5 ff05 	bl	8000628 <__aeabi_dmul>
 800a81e:	4680      	mov	r8, r0
 800a820:	4650      	mov	r0, sl
 800a822:	4689      	mov	r9, r1
 800a824:	f7f5 fe86 	bl	8000534 <__aeabi_ui2d>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	4640      	mov	r0, r8
 800a82e:	4649      	mov	r1, r9
 800a830:	f7f5 fd44 	bl	80002bc <__adddf3>
 800a834:	4680      	mov	r8, r0
 800a836:	4689      	mov	r9, r1
 800a838:	2e0f      	cmp	r6, #15
 800a83a:	dc38      	bgt.n	800a8ae <_strtod_l+0x44e>
 800a83c:	9b08      	ldr	r3, [sp, #32]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f43f ae49 	beq.w	800a4d6 <_strtod_l+0x76>
 800a844:	dd24      	ble.n	800a890 <_strtod_l+0x430>
 800a846:	2b16      	cmp	r3, #22
 800a848:	dc0b      	bgt.n	800a862 <_strtod_l+0x402>
 800a84a:	4968      	ldr	r1, [pc, #416]	; (800a9ec <_strtod_l+0x58c>)
 800a84c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a850:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a854:	4642      	mov	r2, r8
 800a856:	464b      	mov	r3, r9
 800a858:	f7f5 fee6 	bl	8000628 <__aeabi_dmul>
 800a85c:	4680      	mov	r8, r0
 800a85e:	4689      	mov	r9, r1
 800a860:	e639      	b.n	800a4d6 <_strtod_l+0x76>
 800a862:	9a08      	ldr	r2, [sp, #32]
 800a864:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a868:	4293      	cmp	r3, r2
 800a86a:	db20      	blt.n	800a8ae <_strtod_l+0x44e>
 800a86c:	4c5f      	ldr	r4, [pc, #380]	; (800a9ec <_strtod_l+0x58c>)
 800a86e:	f1c6 060f 	rsb	r6, r6, #15
 800a872:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a876:	4642      	mov	r2, r8
 800a878:	464b      	mov	r3, r9
 800a87a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a87e:	f7f5 fed3 	bl	8000628 <__aeabi_dmul>
 800a882:	9b08      	ldr	r3, [sp, #32]
 800a884:	1b9e      	subs	r6, r3, r6
 800a886:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a88a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a88e:	e7e3      	b.n	800a858 <_strtod_l+0x3f8>
 800a890:	9b08      	ldr	r3, [sp, #32]
 800a892:	3316      	adds	r3, #22
 800a894:	db0b      	blt.n	800a8ae <_strtod_l+0x44e>
 800a896:	9b05      	ldr	r3, [sp, #20]
 800a898:	1bdf      	subs	r7, r3, r7
 800a89a:	4b54      	ldr	r3, [pc, #336]	; (800a9ec <_strtod_l+0x58c>)
 800a89c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a8a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8a4:	4640      	mov	r0, r8
 800a8a6:	4649      	mov	r1, r9
 800a8a8:	f7f5 ffe8 	bl	800087c <__aeabi_ddiv>
 800a8ac:	e7d6      	b.n	800a85c <_strtod_l+0x3fc>
 800a8ae:	9b08      	ldr	r3, [sp, #32]
 800a8b0:	1b75      	subs	r5, r6, r5
 800a8b2:	441d      	add	r5, r3
 800a8b4:	2d00      	cmp	r5, #0
 800a8b6:	dd70      	ble.n	800a99a <_strtod_l+0x53a>
 800a8b8:	f015 030f 	ands.w	r3, r5, #15
 800a8bc:	d00a      	beq.n	800a8d4 <_strtod_l+0x474>
 800a8be:	494b      	ldr	r1, [pc, #300]	; (800a9ec <_strtod_l+0x58c>)
 800a8c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8c4:	4642      	mov	r2, r8
 800a8c6:	464b      	mov	r3, r9
 800a8c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8cc:	f7f5 feac 	bl	8000628 <__aeabi_dmul>
 800a8d0:	4680      	mov	r8, r0
 800a8d2:	4689      	mov	r9, r1
 800a8d4:	f035 050f 	bics.w	r5, r5, #15
 800a8d8:	d04d      	beq.n	800a976 <_strtod_l+0x516>
 800a8da:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a8de:	dd22      	ble.n	800a926 <_strtod_l+0x4c6>
 800a8e0:	2500      	movs	r5, #0
 800a8e2:	46ab      	mov	fp, r5
 800a8e4:	9509      	str	r5, [sp, #36]	; 0x24
 800a8e6:	9505      	str	r5, [sp, #20]
 800a8e8:	2322      	movs	r3, #34	; 0x22
 800a8ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a9f4 <_strtod_l+0x594>
 800a8ee:	6023      	str	r3, [r4, #0]
 800a8f0:	f04f 0800 	mov.w	r8, #0
 800a8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f43f aded 	beq.w	800a4d6 <_strtod_l+0x76>
 800a8fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a8fe:	4620      	mov	r0, r4
 800a900:	f001 fcff 	bl	800c302 <_Bfree>
 800a904:	9905      	ldr	r1, [sp, #20]
 800a906:	4620      	mov	r0, r4
 800a908:	f001 fcfb 	bl	800c302 <_Bfree>
 800a90c:	4659      	mov	r1, fp
 800a90e:	4620      	mov	r0, r4
 800a910:	f001 fcf7 	bl	800c302 <_Bfree>
 800a914:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a916:	4620      	mov	r0, r4
 800a918:	f001 fcf3 	bl	800c302 <_Bfree>
 800a91c:	4629      	mov	r1, r5
 800a91e:	4620      	mov	r0, r4
 800a920:	f001 fcef 	bl	800c302 <_Bfree>
 800a924:	e5d7      	b.n	800a4d6 <_strtod_l+0x76>
 800a926:	4b32      	ldr	r3, [pc, #200]	; (800a9f0 <_strtod_l+0x590>)
 800a928:	9304      	str	r3, [sp, #16]
 800a92a:	2300      	movs	r3, #0
 800a92c:	112d      	asrs	r5, r5, #4
 800a92e:	4640      	mov	r0, r8
 800a930:	4649      	mov	r1, r9
 800a932:	469a      	mov	sl, r3
 800a934:	2d01      	cmp	r5, #1
 800a936:	dc21      	bgt.n	800a97c <_strtod_l+0x51c>
 800a938:	b10b      	cbz	r3, 800a93e <_strtod_l+0x4de>
 800a93a:	4680      	mov	r8, r0
 800a93c:	4689      	mov	r9, r1
 800a93e:	492c      	ldr	r1, [pc, #176]	; (800a9f0 <_strtod_l+0x590>)
 800a940:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a944:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a948:	4642      	mov	r2, r8
 800a94a:	464b      	mov	r3, r9
 800a94c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a950:	f7f5 fe6a 	bl	8000628 <__aeabi_dmul>
 800a954:	4b27      	ldr	r3, [pc, #156]	; (800a9f4 <_strtod_l+0x594>)
 800a956:	460a      	mov	r2, r1
 800a958:	400b      	ands	r3, r1
 800a95a:	4927      	ldr	r1, [pc, #156]	; (800a9f8 <_strtod_l+0x598>)
 800a95c:	428b      	cmp	r3, r1
 800a95e:	4680      	mov	r8, r0
 800a960:	d8be      	bhi.n	800a8e0 <_strtod_l+0x480>
 800a962:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a966:	428b      	cmp	r3, r1
 800a968:	bf86      	itte	hi
 800a96a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a9fc <_strtod_l+0x59c>
 800a96e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a972:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a976:	2300      	movs	r3, #0
 800a978:	9304      	str	r3, [sp, #16]
 800a97a:	e07b      	b.n	800aa74 <_strtod_l+0x614>
 800a97c:	07ea      	lsls	r2, r5, #31
 800a97e:	d505      	bpl.n	800a98c <_strtod_l+0x52c>
 800a980:	9b04      	ldr	r3, [sp, #16]
 800a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a986:	f7f5 fe4f 	bl	8000628 <__aeabi_dmul>
 800a98a:	2301      	movs	r3, #1
 800a98c:	9a04      	ldr	r2, [sp, #16]
 800a98e:	3208      	adds	r2, #8
 800a990:	f10a 0a01 	add.w	sl, sl, #1
 800a994:	106d      	asrs	r5, r5, #1
 800a996:	9204      	str	r2, [sp, #16]
 800a998:	e7cc      	b.n	800a934 <_strtod_l+0x4d4>
 800a99a:	d0ec      	beq.n	800a976 <_strtod_l+0x516>
 800a99c:	426d      	negs	r5, r5
 800a99e:	f015 020f 	ands.w	r2, r5, #15
 800a9a2:	d00a      	beq.n	800a9ba <_strtod_l+0x55a>
 800a9a4:	4b11      	ldr	r3, [pc, #68]	; (800a9ec <_strtod_l+0x58c>)
 800a9a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9aa:	4640      	mov	r0, r8
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b2:	f7f5 ff63 	bl	800087c <__aeabi_ddiv>
 800a9b6:	4680      	mov	r8, r0
 800a9b8:	4689      	mov	r9, r1
 800a9ba:	112d      	asrs	r5, r5, #4
 800a9bc:	d0db      	beq.n	800a976 <_strtod_l+0x516>
 800a9be:	2d1f      	cmp	r5, #31
 800a9c0:	dd1e      	ble.n	800aa00 <_strtod_l+0x5a0>
 800a9c2:	2500      	movs	r5, #0
 800a9c4:	46ab      	mov	fp, r5
 800a9c6:	9509      	str	r5, [sp, #36]	; 0x24
 800a9c8:	9505      	str	r5, [sp, #20]
 800a9ca:	2322      	movs	r3, #34	; 0x22
 800a9cc:	f04f 0800 	mov.w	r8, #0
 800a9d0:	f04f 0900 	mov.w	r9, #0
 800a9d4:	6023      	str	r3, [r4, #0]
 800a9d6:	e78d      	b.n	800a8f4 <_strtod_l+0x494>
 800a9d8:	08012809 	.word	0x08012809
 800a9dc:	080124e8 	.word	0x080124e8
 800a9e0:	08012801 	.word	0x08012801
 800a9e4:	0801288f 	.word	0x0801288f
 800a9e8:	0801288b 	.word	0x0801288b
 800a9ec:	08012728 	.word	0x08012728
 800a9f0:	08012700 	.word	0x08012700
 800a9f4:	7ff00000 	.word	0x7ff00000
 800a9f8:	7ca00000 	.word	0x7ca00000
 800a9fc:	7fefffff 	.word	0x7fefffff
 800aa00:	f015 0310 	ands.w	r3, r5, #16
 800aa04:	bf18      	it	ne
 800aa06:	236a      	movne	r3, #106	; 0x6a
 800aa08:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800adac <_strtod_l+0x94c>
 800aa0c:	9304      	str	r3, [sp, #16]
 800aa0e:	4640      	mov	r0, r8
 800aa10:	4649      	mov	r1, r9
 800aa12:	2300      	movs	r3, #0
 800aa14:	07ea      	lsls	r2, r5, #31
 800aa16:	d504      	bpl.n	800aa22 <_strtod_l+0x5c2>
 800aa18:	e9da 2300 	ldrd	r2, r3, [sl]
 800aa1c:	f7f5 fe04 	bl	8000628 <__aeabi_dmul>
 800aa20:	2301      	movs	r3, #1
 800aa22:	106d      	asrs	r5, r5, #1
 800aa24:	f10a 0a08 	add.w	sl, sl, #8
 800aa28:	d1f4      	bne.n	800aa14 <_strtod_l+0x5b4>
 800aa2a:	b10b      	cbz	r3, 800aa30 <_strtod_l+0x5d0>
 800aa2c:	4680      	mov	r8, r0
 800aa2e:	4689      	mov	r9, r1
 800aa30:	9b04      	ldr	r3, [sp, #16]
 800aa32:	b1bb      	cbz	r3, 800aa64 <_strtod_l+0x604>
 800aa34:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800aa38:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	4649      	mov	r1, r9
 800aa40:	dd10      	ble.n	800aa64 <_strtod_l+0x604>
 800aa42:	2b1f      	cmp	r3, #31
 800aa44:	f340 811e 	ble.w	800ac84 <_strtod_l+0x824>
 800aa48:	2b34      	cmp	r3, #52	; 0x34
 800aa4a:	bfde      	ittt	le
 800aa4c:	f04f 33ff 	movle.w	r3, #4294967295
 800aa50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aa54:	4093      	lslle	r3, r2
 800aa56:	f04f 0800 	mov.w	r8, #0
 800aa5a:	bfcc      	ite	gt
 800aa5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800aa60:	ea03 0901 	andle.w	r9, r3, r1
 800aa64:	2200      	movs	r2, #0
 800aa66:	2300      	movs	r3, #0
 800aa68:	4640      	mov	r0, r8
 800aa6a:	4649      	mov	r1, r9
 800aa6c:	f7f6 f844 	bl	8000af8 <__aeabi_dcmpeq>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	d1a6      	bne.n	800a9c2 <_strtod_l+0x562>
 800aa74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa7a:	4633      	mov	r3, r6
 800aa7c:	465a      	mov	r2, fp
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f001 fc8e 	bl	800c3a0 <__s2b>
 800aa84:	9009      	str	r0, [sp, #36]	; 0x24
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f43f af2a 	beq.w	800a8e0 <_strtod_l+0x480>
 800aa8c:	9a08      	ldr	r2, [sp, #32]
 800aa8e:	9b05      	ldr	r3, [sp, #20]
 800aa90:	2a00      	cmp	r2, #0
 800aa92:	eba3 0307 	sub.w	r3, r3, r7
 800aa96:	bfa8      	it	ge
 800aa98:	2300      	movge	r3, #0
 800aa9a:	930c      	str	r3, [sp, #48]	; 0x30
 800aa9c:	2500      	movs	r5, #0
 800aa9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aaa2:	9312      	str	r3, [sp, #72]	; 0x48
 800aaa4:	46ab      	mov	fp, r5
 800aaa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	6859      	ldr	r1, [r3, #4]
 800aaac:	f001 fc04 	bl	800c2b8 <_Balloc>
 800aab0:	9005      	str	r0, [sp, #20]
 800aab2:	2800      	cmp	r0, #0
 800aab4:	f43f af18 	beq.w	800a8e8 <_strtod_l+0x488>
 800aab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaba:	691a      	ldr	r2, [r3, #16]
 800aabc:	3202      	adds	r2, #2
 800aabe:	f103 010c 	add.w	r1, r3, #12
 800aac2:	0092      	lsls	r2, r2, #2
 800aac4:	300c      	adds	r0, #12
 800aac6:	f000 fd0d 	bl	800b4e4 <memcpy>
 800aaca:	ec49 8b10 	vmov	d0, r8, r9
 800aace:	aa18      	add	r2, sp, #96	; 0x60
 800aad0:	a917      	add	r1, sp, #92	; 0x5c
 800aad2:	4620      	mov	r0, r4
 800aad4:	f001 ff7e 	bl	800c9d4 <__d2b>
 800aad8:	ec49 8b18 	vmov	d8, r8, r9
 800aadc:	9016      	str	r0, [sp, #88]	; 0x58
 800aade:	2800      	cmp	r0, #0
 800aae0:	f43f af02 	beq.w	800a8e8 <_strtod_l+0x488>
 800aae4:	2101      	movs	r1, #1
 800aae6:	4620      	mov	r0, r4
 800aae8:	f001 fcf2 	bl	800c4d0 <__i2b>
 800aaec:	4683      	mov	fp, r0
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	f43f aefa 	beq.w	800a8e8 <_strtod_l+0x488>
 800aaf4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800aaf6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aaf8:	2e00      	cmp	r6, #0
 800aafa:	bfab      	itete	ge
 800aafc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800aafe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ab00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ab02:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800ab06:	bfac      	ite	ge
 800ab08:	eb06 0a03 	addge.w	sl, r6, r3
 800ab0c:	1b9f      	sublt	r7, r3, r6
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	1af6      	subs	r6, r6, r3
 800ab12:	4416      	add	r6, r2
 800ab14:	4ba0      	ldr	r3, [pc, #640]	; (800ad98 <_strtod_l+0x938>)
 800ab16:	3e01      	subs	r6, #1
 800ab18:	429e      	cmp	r6, r3
 800ab1a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ab1e:	f280 80c4 	bge.w	800acaa <_strtod_l+0x84a>
 800ab22:	1b9b      	subs	r3, r3, r6
 800ab24:	2b1f      	cmp	r3, #31
 800ab26:	eba2 0203 	sub.w	r2, r2, r3
 800ab2a:	f04f 0101 	mov.w	r1, #1
 800ab2e:	f300 80b0 	bgt.w	800ac92 <_strtod_l+0x832>
 800ab32:	fa01 f303 	lsl.w	r3, r1, r3
 800ab36:	930e      	str	r3, [sp, #56]	; 0x38
 800ab38:	2300      	movs	r3, #0
 800ab3a:	930d      	str	r3, [sp, #52]	; 0x34
 800ab3c:	eb0a 0602 	add.w	r6, sl, r2
 800ab40:	9b04      	ldr	r3, [sp, #16]
 800ab42:	45b2      	cmp	sl, r6
 800ab44:	4417      	add	r7, r2
 800ab46:	441f      	add	r7, r3
 800ab48:	4653      	mov	r3, sl
 800ab4a:	bfa8      	it	ge
 800ab4c:	4633      	movge	r3, r6
 800ab4e:	42bb      	cmp	r3, r7
 800ab50:	bfa8      	it	ge
 800ab52:	463b      	movge	r3, r7
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	bfc2      	ittt	gt
 800ab58:	1af6      	subgt	r6, r6, r3
 800ab5a:	1aff      	subgt	r7, r7, r3
 800ab5c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ab60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	dd17      	ble.n	800ab96 <_strtod_l+0x736>
 800ab66:	4659      	mov	r1, fp
 800ab68:	461a      	mov	r2, r3
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f001 fd70 	bl	800c650 <__pow5mult>
 800ab70:	4683      	mov	fp, r0
 800ab72:	2800      	cmp	r0, #0
 800ab74:	f43f aeb8 	beq.w	800a8e8 <_strtod_l+0x488>
 800ab78:	4601      	mov	r1, r0
 800ab7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f001 fcbd 	bl	800c4fc <__multiply>
 800ab82:	900b      	str	r0, [sp, #44]	; 0x2c
 800ab84:	2800      	cmp	r0, #0
 800ab86:	f43f aeaf 	beq.w	800a8e8 <_strtod_l+0x488>
 800ab8a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f001 fbb8 	bl	800c302 <_Bfree>
 800ab92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab94:	9316      	str	r3, [sp, #88]	; 0x58
 800ab96:	2e00      	cmp	r6, #0
 800ab98:	f300 808c 	bgt.w	800acb4 <_strtod_l+0x854>
 800ab9c:	9b08      	ldr	r3, [sp, #32]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	dd08      	ble.n	800abb4 <_strtod_l+0x754>
 800aba2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aba4:	9905      	ldr	r1, [sp, #20]
 800aba6:	4620      	mov	r0, r4
 800aba8:	f001 fd52 	bl	800c650 <__pow5mult>
 800abac:	9005      	str	r0, [sp, #20]
 800abae:	2800      	cmp	r0, #0
 800abb0:	f43f ae9a 	beq.w	800a8e8 <_strtod_l+0x488>
 800abb4:	2f00      	cmp	r7, #0
 800abb6:	dd08      	ble.n	800abca <_strtod_l+0x76a>
 800abb8:	9905      	ldr	r1, [sp, #20]
 800abba:	463a      	mov	r2, r7
 800abbc:	4620      	mov	r0, r4
 800abbe:	f001 fd87 	bl	800c6d0 <__lshift>
 800abc2:	9005      	str	r0, [sp, #20]
 800abc4:	2800      	cmp	r0, #0
 800abc6:	f43f ae8f 	beq.w	800a8e8 <_strtod_l+0x488>
 800abca:	f1ba 0f00 	cmp.w	sl, #0
 800abce:	dd08      	ble.n	800abe2 <_strtod_l+0x782>
 800abd0:	4659      	mov	r1, fp
 800abd2:	4652      	mov	r2, sl
 800abd4:	4620      	mov	r0, r4
 800abd6:	f001 fd7b 	bl	800c6d0 <__lshift>
 800abda:	4683      	mov	fp, r0
 800abdc:	2800      	cmp	r0, #0
 800abde:	f43f ae83 	beq.w	800a8e8 <_strtod_l+0x488>
 800abe2:	9a05      	ldr	r2, [sp, #20]
 800abe4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800abe6:	4620      	mov	r0, r4
 800abe8:	f001 fdfa 	bl	800c7e0 <__mdiff>
 800abec:	4605      	mov	r5, r0
 800abee:	2800      	cmp	r0, #0
 800abf0:	f43f ae7a 	beq.w	800a8e8 <_strtod_l+0x488>
 800abf4:	68c3      	ldr	r3, [r0, #12]
 800abf6:	930b      	str	r3, [sp, #44]	; 0x2c
 800abf8:	2300      	movs	r3, #0
 800abfa:	60c3      	str	r3, [r0, #12]
 800abfc:	4659      	mov	r1, fp
 800abfe:	f001 fdd3 	bl	800c7a8 <__mcmp>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	da60      	bge.n	800acc8 <_strtod_l+0x868>
 800ac06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac08:	ea53 0308 	orrs.w	r3, r3, r8
 800ac0c:	f040 8084 	bne.w	800ad18 <_strtod_l+0x8b8>
 800ac10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d17f      	bne.n	800ad18 <_strtod_l+0x8b8>
 800ac18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac1c:	0d1b      	lsrs	r3, r3, #20
 800ac1e:	051b      	lsls	r3, r3, #20
 800ac20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ac24:	d978      	bls.n	800ad18 <_strtod_l+0x8b8>
 800ac26:	696b      	ldr	r3, [r5, #20]
 800ac28:	b913      	cbnz	r3, 800ac30 <_strtod_l+0x7d0>
 800ac2a:	692b      	ldr	r3, [r5, #16]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	dd73      	ble.n	800ad18 <_strtod_l+0x8b8>
 800ac30:	4629      	mov	r1, r5
 800ac32:	2201      	movs	r2, #1
 800ac34:	4620      	mov	r0, r4
 800ac36:	f001 fd4b 	bl	800c6d0 <__lshift>
 800ac3a:	4659      	mov	r1, fp
 800ac3c:	4605      	mov	r5, r0
 800ac3e:	f001 fdb3 	bl	800c7a8 <__mcmp>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	dd68      	ble.n	800ad18 <_strtod_l+0x8b8>
 800ac46:	9904      	ldr	r1, [sp, #16]
 800ac48:	4a54      	ldr	r2, [pc, #336]	; (800ad9c <_strtod_l+0x93c>)
 800ac4a:	464b      	mov	r3, r9
 800ac4c:	2900      	cmp	r1, #0
 800ac4e:	f000 8084 	beq.w	800ad5a <_strtod_l+0x8fa>
 800ac52:	ea02 0109 	and.w	r1, r2, r9
 800ac56:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ac5a:	dc7e      	bgt.n	800ad5a <_strtod_l+0x8fa>
 800ac5c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ac60:	f77f aeb3 	ble.w	800a9ca <_strtod_l+0x56a>
 800ac64:	4b4e      	ldr	r3, [pc, #312]	; (800ada0 <_strtod_l+0x940>)
 800ac66:	4640      	mov	r0, r8
 800ac68:	4649      	mov	r1, r9
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f7f5 fcdc 	bl	8000628 <__aeabi_dmul>
 800ac70:	4b4a      	ldr	r3, [pc, #296]	; (800ad9c <_strtod_l+0x93c>)
 800ac72:	400b      	ands	r3, r1
 800ac74:	4680      	mov	r8, r0
 800ac76:	4689      	mov	r9, r1
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f47f ae3f 	bne.w	800a8fc <_strtod_l+0x49c>
 800ac7e:	2322      	movs	r3, #34	; 0x22
 800ac80:	6023      	str	r3, [r4, #0]
 800ac82:	e63b      	b.n	800a8fc <_strtod_l+0x49c>
 800ac84:	f04f 32ff 	mov.w	r2, #4294967295
 800ac88:	fa02 f303 	lsl.w	r3, r2, r3
 800ac8c:	ea03 0808 	and.w	r8, r3, r8
 800ac90:	e6e8      	b.n	800aa64 <_strtod_l+0x604>
 800ac92:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ac96:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ac9a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ac9e:	36e2      	adds	r6, #226	; 0xe2
 800aca0:	fa01 f306 	lsl.w	r3, r1, r6
 800aca4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800aca8:	e748      	b.n	800ab3c <_strtod_l+0x6dc>
 800acaa:	2100      	movs	r1, #0
 800acac:	2301      	movs	r3, #1
 800acae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800acb2:	e743      	b.n	800ab3c <_strtod_l+0x6dc>
 800acb4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800acb6:	4632      	mov	r2, r6
 800acb8:	4620      	mov	r0, r4
 800acba:	f001 fd09 	bl	800c6d0 <__lshift>
 800acbe:	9016      	str	r0, [sp, #88]	; 0x58
 800acc0:	2800      	cmp	r0, #0
 800acc2:	f47f af6b 	bne.w	800ab9c <_strtod_l+0x73c>
 800acc6:	e60f      	b.n	800a8e8 <_strtod_l+0x488>
 800acc8:	46ca      	mov	sl, r9
 800acca:	d171      	bne.n	800adb0 <_strtod_l+0x950>
 800accc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800acce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acd2:	b352      	cbz	r2, 800ad2a <_strtod_l+0x8ca>
 800acd4:	4a33      	ldr	r2, [pc, #204]	; (800ada4 <_strtod_l+0x944>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d12a      	bne.n	800ad30 <_strtod_l+0x8d0>
 800acda:	9b04      	ldr	r3, [sp, #16]
 800acdc:	4641      	mov	r1, r8
 800acde:	b1fb      	cbz	r3, 800ad20 <_strtod_l+0x8c0>
 800ace0:	4b2e      	ldr	r3, [pc, #184]	; (800ad9c <_strtod_l+0x93c>)
 800ace2:	ea09 0303 	and.w	r3, r9, r3
 800ace6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800acea:	f04f 32ff 	mov.w	r2, #4294967295
 800acee:	d81a      	bhi.n	800ad26 <_strtod_l+0x8c6>
 800acf0:	0d1b      	lsrs	r3, r3, #20
 800acf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800acf6:	fa02 f303 	lsl.w	r3, r2, r3
 800acfa:	4299      	cmp	r1, r3
 800acfc:	d118      	bne.n	800ad30 <_strtod_l+0x8d0>
 800acfe:	4b2a      	ldr	r3, [pc, #168]	; (800ada8 <_strtod_l+0x948>)
 800ad00:	459a      	cmp	sl, r3
 800ad02:	d102      	bne.n	800ad0a <_strtod_l+0x8aa>
 800ad04:	3101      	adds	r1, #1
 800ad06:	f43f adef 	beq.w	800a8e8 <_strtod_l+0x488>
 800ad0a:	4b24      	ldr	r3, [pc, #144]	; (800ad9c <_strtod_l+0x93c>)
 800ad0c:	ea0a 0303 	and.w	r3, sl, r3
 800ad10:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800ad14:	f04f 0800 	mov.w	r8, #0
 800ad18:	9b04      	ldr	r3, [sp, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1a2      	bne.n	800ac64 <_strtod_l+0x804>
 800ad1e:	e5ed      	b.n	800a8fc <_strtod_l+0x49c>
 800ad20:	f04f 33ff 	mov.w	r3, #4294967295
 800ad24:	e7e9      	b.n	800acfa <_strtod_l+0x89a>
 800ad26:	4613      	mov	r3, r2
 800ad28:	e7e7      	b.n	800acfa <_strtod_l+0x89a>
 800ad2a:	ea53 0308 	orrs.w	r3, r3, r8
 800ad2e:	d08a      	beq.n	800ac46 <_strtod_l+0x7e6>
 800ad30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad32:	b1e3      	cbz	r3, 800ad6e <_strtod_l+0x90e>
 800ad34:	ea13 0f0a 	tst.w	r3, sl
 800ad38:	d0ee      	beq.n	800ad18 <_strtod_l+0x8b8>
 800ad3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad3c:	9a04      	ldr	r2, [sp, #16]
 800ad3e:	4640      	mov	r0, r8
 800ad40:	4649      	mov	r1, r9
 800ad42:	b1c3      	cbz	r3, 800ad76 <_strtod_l+0x916>
 800ad44:	f7ff fb6e 	bl	800a424 <sulp>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	ec51 0b18 	vmov	r0, r1, d8
 800ad50:	f7f5 fab4 	bl	80002bc <__adddf3>
 800ad54:	4680      	mov	r8, r0
 800ad56:	4689      	mov	r9, r1
 800ad58:	e7de      	b.n	800ad18 <_strtod_l+0x8b8>
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ad60:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ad64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ad68:	f04f 38ff 	mov.w	r8, #4294967295
 800ad6c:	e7d4      	b.n	800ad18 <_strtod_l+0x8b8>
 800ad6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad70:	ea13 0f08 	tst.w	r3, r8
 800ad74:	e7e0      	b.n	800ad38 <_strtod_l+0x8d8>
 800ad76:	f7ff fb55 	bl	800a424 <sulp>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	ec51 0b18 	vmov	r0, r1, d8
 800ad82:	f7f5 fa99 	bl	80002b8 <__aeabi_dsub>
 800ad86:	2200      	movs	r2, #0
 800ad88:	2300      	movs	r3, #0
 800ad8a:	4680      	mov	r8, r0
 800ad8c:	4689      	mov	r9, r1
 800ad8e:	f7f5 feb3 	bl	8000af8 <__aeabi_dcmpeq>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d0c0      	beq.n	800ad18 <_strtod_l+0x8b8>
 800ad96:	e618      	b.n	800a9ca <_strtod_l+0x56a>
 800ad98:	fffffc02 	.word	0xfffffc02
 800ad9c:	7ff00000 	.word	0x7ff00000
 800ada0:	39500000 	.word	0x39500000
 800ada4:	000fffff 	.word	0x000fffff
 800ada8:	7fefffff 	.word	0x7fefffff
 800adac:	08012500 	.word	0x08012500
 800adb0:	4659      	mov	r1, fp
 800adb2:	4628      	mov	r0, r5
 800adb4:	f001 fe68 	bl	800ca88 <__ratio>
 800adb8:	ec57 6b10 	vmov	r6, r7, d0
 800adbc:	ee10 0a10 	vmov	r0, s0
 800adc0:	2200      	movs	r2, #0
 800adc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adc6:	4639      	mov	r1, r7
 800adc8:	f7f5 feaa 	bl	8000b20 <__aeabi_dcmple>
 800adcc:	2800      	cmp	r0, #0
 800adce:	d071      	beq.n	800aeb4 <_strtod_l+0xa54>
 800add0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800add2:	2b00      	cmp	r3, #0
 800add4:	d17c      	bne.n	800aed0 <_strtod_l+0xa70>
 800add6:	f1b8 0f00 	cmp.w	r8, #0
 800adda:	d15a      	bne.n	800ae92 <_strtod_l+0xa32>
 800addc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d15d      	bne.n	800aea0 <_strtod_l+0xa40>
 800ade4:	4b90      	ldr	r3, [pc, #576]	; (800b028 <_strtod_l+0xbc8>)
 800ade6:	2200      	movs	r2, #0
 800ade8:	4630      	mov	r0, r6
 800adea:	4639      	mov	r1, r7
 800adec:	f7f5 fe8e 	bl	8000b0c <__aeabi_dcmplt>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	d15c      	bne.n	800aeae <_strtod_l+0xa4e>
 800adf4:	4630      	mov	r0, r6
 800adf6:	4639      	mov	r1, r7
 800adf8:	4b8c      	ldr	r3, [pc, #560]	; (800b02c <_strtod_l+0xbcc>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	f7f5 fc14 	bl	8000628 <__aeabi_dmul>
 800ae00:	4606      	mov	r6, r0
 800ae02:	460f      	mov	r7, r1
 800ae04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ae08:	9606      	str	r6, [sp, #24]
 800ae0a:	9307      	str	r3, [sp, #28]
 800ae0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ae14:	4b86      	ldr	r3, [pc, #536]	; (800b030 <_strtod_l+0xbd0>)
 800ae16:	ea0a 0303 	and.w	r3, sl, r3
 800ae1a:	930d      	str	r3, [sp, #52]	; 0x34
 800ae1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae1e:	4b85      	ldr	r3, [pc, #532]	; (800b034 <_strtod_l+0xbd4>)
 800ae20:	429a      	cmp	r2, r3
 800ae22:	f040 8090 	bne.w	800af46 <_strtod_l+0xae6>
 800ae26:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ae2a:	ec49 8b10 	vmov	d0, r8, r9
 800ae2e:	f001 fd61 	bl	800c8f4 <__ulp>
 800ae32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae36:	ec51 0b10 	vmov	r0, r1, d0
 800ae3a:	f7f5 fbf5 	bl	8000628 <__aeabi_dmul>
 800ae3e:	4642      	mov	r2, r8
 800ae40:	464b      	mov	r3, r9
 800ae42:	f7f5 fa3b 	bl	80002bc <__adddf3>
 800ae46:	460b      	mov	r3, r1
 800ae48:	4979      	ldr	r1, [pc, #484]	; (800b030 <_strtod_l+0xbd0>)
 800ae4a:	4a7b      	ldr	r2, [pc, #492]	; (800b038 <_strtod_l+0xbd8>)
 800ae4c:	4019      	ands	r1, r3
 800ae4e:	4291      	cmp	r1, r2
 800ae50:	4680      	mov	r8, r0
 800ae52:	d944      	bls.n	800aede <_strtod_l+0xa7e>
 800ae54:	ee18 2a90 	vmov	r2, s17
 800ae58:	4b78      	ldr	r3, [pc, #480]	; (800b03c <_strtod_l+0xbdc>)
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d104      	bne.n	800ae68 <_strtod_l+0xa08>
 800ae5e:	ee18 3a10 	vmov	r3, s16
 800ae62:	3301      	adds	r3, #1
 800ae64:	f43f ad40 	beq.w	800a8e8 <_strtod_l+0x488>
 800ae68:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b03c <_strtod_l+0xbdc>
 800ae6c:	f04f 38ff 	mov.w	r8, #4294967295
 800ae70:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ae72:	4620      	mov	r0, r4
 800ae74:	f001 fa45 	bl	800c302 <_Bfree>
 800ae78:	9905      	ldr	r1, [sp, #20]
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f001 fa41 	bl	800c302 <_Bfree>
 800ae80:	4659      	mov	r1, fp
 800ae82:	4620      	mov	r0, r4
 800ae84:	f001 fa3d 	bl	800c302 <_Bfree>
 800ae88:	4629      	mov	r1, r5
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f001 fa39 	bl	800c302 <_Bfree>
 800ae90:	e609      	b.n	800aaa6 <_strtod_l+0x646>
 800ae92:	f1b8 0f01 	cmp.w	r8, #1
 800ae96:	d103      	bne.n	800aea0 <_strtod_l+0xa40>
 800ae98:	f1b9 0f00 	cmp.w	r9, #0
 800ae9c:	f43f ad95 	beq.w	800a9ca <_strtod_l+0x56a>
 800aea0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800aff8 <_strtod_l+0xb98>
 800aea4:	4f60      	ldr	r7, [pc, #384]	; (800b028 <_strtod_l+0xbc8>)
 800aea6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aeaa:	2600      	movs	r6, #0
 800aeac:	e7ae      	b.n	800ae0c <_strtod_l+0x9ac>
 800aeae:	4f5f      	ldr	r7, [pc, #380]	; (800b02c <_strtod_l+0xbcc>)
 800aeb0:	2600      	movs	r6, #0
 800aeb2:	e7a7      	b.n	800ae04 <_strtod_l+0x9a4>
 800aeb4:	4b5d      	ldr	r3, [pc, #372]	; (800b02c <_strtod_l+0xbcc>)
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	4639      	mov	r1, r7
 800aeba:	2200      	movs	r2, #0
 800aebc:	f7f5 fbb4 	bl	8000628 <__aeabi_dmul>
 800aec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aec2:	4606      	mov	r6, r0
 800aec4:	460f      	mov	r7, r1
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d09c      	beq.n	800ae04 <_strtod_l+0x9a4>
 800aeca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aece:	e79d      	b.n	800ae0c <_strtod_l+0x9ac>
 800aed0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b000 <_strtod_l+0xba0>
 800aed4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aed8:	ec57 6b17 	vmov	r6, r7, d7
 800aedc:	e796      	b.n	800ae0c <_strtod_l+0x9ac>
 800aede:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800aee2:	9b04      	ldr	r3, [sp, #16]
 800aee4:	46ca      	mov	sl, r9
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d1c2      	bne.n	800ae70 <_strtod_l+0xa10>
 800aeea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aeee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aef0:	0d1b      	lsrs	r3, r3, #20
 800aef2:	051b      	lsls	r3, r3, #20
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d1bb      	bne.n	800ae70 <_strtod_l+0xa10>
 800aef8:	4630      	mov	r0, r6
 800aefa:	4639      	mov	r1, r7
 800aefc:	f7f5 fef4 	bl	8000ce8 <__aeabi_d2lz>
 800af00:	f7f5 fb64 	bl	80005cc <__aeabi_l2d>
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	4630      	mov	r0, r6
 800af0a:	4639      	mov	r1, r7
 800af0c:	f7f5 f9d4 	bl	80002b8 <__aeabi_dsub>
 800af10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af16:	ea43 0308 	orr.w	r3, r3, r8
 800af1a:	4313      	orrs	r3, r2
 800af1c:	4606      	mov	r6, r0
 800af1e:	460f      	mov	r7, r1
 800af20:	d054      	beq.n	800afcc <_strtod_l+0xb6c>
 800af22:	a339      	add	r3, pc, #228	; (adr r3, 800b008 <_strtod_l+0xba8>)
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	f7f5 fdf0 	bl	8000b0c <__aeabi_dcmplt>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	f47f ace5 	bne.w	800a8fc <_strtod_l+0x49c>
 800af32:	a337      	add	r3, pc, #220	; (adr r3, 800b010 <_strtod_l+0xbb0>)
 800af34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af38:	4630      	mov	r0, r6
 800af3a:	4639      	mov	r1, r7
 800af3c:	f7f5 fe04 	bl	8000b48 <__aeabi_dcmpgt>
 800af40:	2800      	cmp	r0, #0
 800af42:	d095      	beq.n	800ae70 <_strtod_l+0xa10>
 800af44:	e4da      	b.n	800a8fc <_strtod_l+0x49c>
 800af46:	9b04      	ldr	r3, [sp, #16]
 800af48:	b333      	cbz	r3, 800af98 <_strtod_l+0xb38>
 800af4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af50:	d822      	bhi.n	800af98 <_strtod_l+0xb38>
 800af52:	a331      	add	r3, pc, #196	; (adr r3, 800b018 <_strtod_l+0xbb8>)
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	4630      	mov	r0, r6
 800af5a:	4639      	mov	r1, r7
 800af5c:	f7f5 fde0 	bl	8000b20 <__aeabi_dcmple>
 800af60:	b1a0      	cbz	r0, 800af8c <_strtod_l+0xb2c>
 800af62:	4639      	mov	r1, r7
 800af64:	4630      	mov	r0, r6
 800af66:	f7f5 fe37 	bl	8000bd8 <__aeabi_d2uiz>
 800af6a:	2801      	cmp	r0, #1
 800af6c:	bf38      	it	cc
 800af6e:	2001      	movcc	r0, #1
 800af70:	f7f5 fae0 	bl	8000534 <__aeabi_ui2d>
 800af74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af76:	4606      	mov	r6, r0
 800af78:	460f      	mov	r7, r1
 800af7a:	bb23      	cbnz	r3, 800afc6 <_strtod_l+0xb66>
 800af7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af80:	9010      	str	r0, [sp, #64]	; 0x40
 800af82:	9311      	str	r3, [sp, #68]	; 0x44
 800af84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800af88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800af8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800af94:	1a9b      	subs	r3, r3, r2
 800af96:	930f      	str	r3, [sp, #60]	; 0x3c
 800af98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800af9c:	eeb0 0a48 	vmov.f32	s0, s16
 800afa0:	eef0 0a68 	vmov.f32	s1, s17
 800afa4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800afa8:	f001 fca4 	bl	800c8f4 <__ulp>
 800afac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800afb0:	ec53 2b10 	vmov	r2, r3, d0
 800afb4:	f7f5 fb38 	bl	8000628 <__aeabi_dmul>
 800afb8:	ec53 2b18 	vmov	r2, r3, d8
 800afbc:	f7f5 f97e 	bl	80002bc <__adddf3>
 800afc0:	4680      	mov	r8, r0
 800afc2:	4689      	mov	r9, r1
 800afc4:	e78d      	b.n	800aee2 <_strtod_l+0xa82>
 800afc6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800afca:	e7db      	b.n	800af84 <_strtod_l+0xb24>
 800afcc:	a314      	add	r3, pc, #80	; (adr r3, 800b020 <_strtod_l+0xbc0>)
 800afce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd2:	f7f5 fd9b 	bl	8000b0c <__aeabi_dcmplt>
 800afd6:	e7b3      	b.n	800af40 <_strtod_l+0xae0>
 800afd8:	2300      	movs	r3, #0
 800afda:	930a      	str	r3, [sp, #40]	; 0x28
 800afdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800afde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afe0:	6013      	str	r3, [r2, #0]
 800afe2:	f7ff ba7c 	b.w	800a4de <_strtod_l+0x7e>
 800afe6:	2a65      	cmp	r2, #101	; 0x65
 800afe8:	f43f ab75 	beq.w	800a6d6 <_strtod_l+0x276>
 800afec:	2a45      	cmp	r2, #69	; 0x45
 800afee:	f43f ab72 	beq.w	800a6d6 <_strtod_l+0x276>
 800aff2:	2301      	movs	r3, #1
 800aff4:	f7ff bbaa 	b.w	800a74c <_strtod_l+0x2ec>
 800aff8:	00000000 	.word	0x00000000
 800affc:	bff00000 	.word	0xbff00000
 800b000:	00000000 	.word	0x00000000
 800b004:	3ff00000 	.word	0x3ff00000
 800b008:	94a03595 	.word	0x94a03595
 800b00c:	3fdfffff 	.word	0x3fdfffff
 800b010:	35afe535 	.word	0x35afe535
 800b014:	3fe00000 	.word	0x3fe00000
 800b018:	ffc00000 	.word	0xffc00000
 800b01c:	41dfffff 	.word	0x41dfffff
 800b020:	94a03595 	.word	0x94a03595
 800b024:	3fcfffff 	.word	0x3fcfffff
 800b028:	3ff00000 	.word	0x3ff00000
 800b02c:	3fe00000 	.word	0x3fe00000
 800b030:	7ff00000 	.word	0x7ff00000
 800b034:	7fe00000 	.word	0x7fe00000
 800b038:	7c9fffff 	.word	0x7c9fffff
 800b03c:	7fefffff 	.word	0x7fefffff

0800b040 <strtod>:
 800b040:	460a      	mov	r2, r1
 800b042:	4601      	mov	r1, r0
 800b044:	4802      	ldr	r0, [pc, #8]	; (800b050 <strtod+0x10>)
 800b046:	4b03      	ldr	r3, [pc, #12]	; (800b054 <strtod+0x14>)
 800b048:	6800      	ldr	r0, [r0, #0]
 800b04a:	f7ff ba09 	b.w	800a460 <_strtod_l>
 800b04e:	bf00      	nop
 800b050:	20000438 	.word	0x20000438
 800b054:	200001a8 	.word	0x200001a8

0800b058 <_strtol_l.constprop.0>:
 800b058:	2b01      	cmp	r3, #1
 800b05a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b05e:	d001      	beq.n	800b064 <_strtol_l.constprop.0+0xc>
 800b060:	2b24      	cmp	r3, #36	; 0x24
 800b062:	d906      	bls.n	800b072 <_strtol_l.constprop.0+0x1a>
 800b064:	f000 fa10 	bl	800b488 <__errno>
 800b068:	2316      	movs	r3, #22
 800b06a:	6003      	str	r3, [r0, #0]
 800b06c:	2000      	movs	r0, #0
 800b06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b072:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b158 <_strtol_l.constprop.0+0x100>
 800b076:	460d      	mov	r5, r1
 800b078:	462e      	mov	r6, r5
 800b07a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b07e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b082:	f017 0708 	ands.w	r7, r7, #8
 800b086:	d1f7      	bne.n	800b078 <_strtol_l.constprop.0+0x20>
 800b088:	2c2d      	cmp	r4, #45	; 0x2d
 800b08a:	d132      	bne.n	800b0f2 <_strtol_l.constprop.0+0x9a>
 800b08c:	782c      	ldrb	r4, [r5, #0]
 800b08e:	2701      	movs	r7, #1
 800b090:	1cb5      	adds	r5, r6, #2
 800b092:	2b00      	cmp	r3, #0
 800b094:	d05b      	beq.n	800b14e <_strtol_l.constprop.0+0xf6>
 800b096:	2b10      	cmp	r3, #16
 800b098:	d109      	bne.n	800b0ae <_strtol_l.constprop.0+0x56>
 800b09a:	2c30      	cmp	r4, #48	; 0x30
 800b09c:	d107      	bne.n	800b0ae <_strtol_l.constprop.0+0x56>
 800b09e:	782c      	ldrb	r4, [r5, #0]
 800b0a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b0a4:	2c58      	cmp	r4, #88	; 0x58
 800b0a6:	d14d      	bne.n	800b144 <_strtol_l.constprop.0+0xec>
 800b0a8:	786c      	ldrb	r4, [r5, #1]
 800b0aa:	2310      	movs	r3, #16
 800b0ac:	3502      	adds	r5, #2
 800b0ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b0b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b0b6:	f04f 0e00 	mov.w	lr, #0
 800b0ba:	fbb8 f9f3 	udiv	r9, r8, r3
 800b0be:	4676      	mov	r6, lr
 800b0c0:	fb03 8a19 	mls	sl, r3, r9, r8
 800b0c4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b0c8:	f1bc 0f09 	cmp.w	ip, #9
 800b0cc:	d816      	bhi.n	800b0fc <_strtol_l.constprop.0+0xa4>
 800b0ce:	4664      	mov	r4, ip
 800b0d0:	42a3      	cmp	r3, r4
 800b0d2:	dd24      	ble.n	800b11e <_strtol_l.constprop.0+0xc6>
 800b0d4:	f1be 3fff 	cmp.w	lr, #4294967295
 800b0d8:	d008      	beq.n	800b0ec <_strtol_l.constprop.0+0x94>
 800b0da:	45b1      	cmp	r9, r6
 800b0dc:	d31c      	bcc.n	800b118 <_strtol_l.constprop.0+0xc0>
 800b0de:	d101      	bne.n	800b0e4 <_strtol_l.constprop.0+0x8c>
 800b0e0:	45a2      	cmp	sl, r4
 800b0e2:	db19      	blt.n	800b118 <_strtol_l.constprop.0+0xc0>
 800b0e4:	fb06 4603 	mla	r6, r6, r3, r4
 800b0e8:	f04f 0e01 	mov.w	lr, #1
 800b0ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0f0:	e7e8      	b.n	800b0c4 <_strtol_l.constprop.0+0x6c>
 800b0f2:	2c2b      	cmp	r4, #43	; 0x2b
 800b0f4:	bf04      	itt	eq
 800b0f6:	782c      	ldrbeq	r4, [r5, #0]
 800b0f8:	1cb5      	addeq	r5, r6, #2
 800b0fa:	e7ca      	b.n	800b092 <_strtol_l.constprop.0+0x3a>
 800b0fc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b100:	f1bc 0f19 	cmp.w	ip, #25
 800b104:	d801      	bhi.n	800b10a <_strtol_l.constprop.0+0xb2>
 800b106:	3c37      	subs	r4, #55	; 0x37
 800b108:	e7e2      	b.n	800b0d0 <_strtol_l.constprop.0+0x78>
 800b10a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b10e:	f1bc 0f19 	cmp.w	ip, #25
 800b112:	d804      	bhi.n	800b11e <_strtol_l.constprop.0+0xc6>
 800b114:	3c57      	subs	r4, #87	; 0x57
 800b116:	e7db      	b.n	800b0d0 <_strtol_l.constprop.0+0x78>
 800b118:	f04f 3eff 	mov.w	lr, #4294967295
 800b11c:	e7e6      	b.n	800b0ec <_strtol_l.constprop.0+0x94>
 800b11e:	f1be 3fff 	cmp.w	lr, #4294967295
 800b122:	d105      	bne.n	800b130 <_strtol_l.constprop.0+0xd8>
 800b124:	2322      	movs	r3, #34	; 0x22
 800b126:	6003      	str	r3, [r0, #0]
 800b128:	4646      	mov	r6, r8
 800b12a:	b942      	cbnz	r2, 800b13e <_strtol_l.constprop.0+0xe6>
 800b12c:	4630      	mov	r0, r6
 800b12e:	e79e      	b.n	800b06e <_strtol_l.constprop.0+0x16>
 800b130:	b107      	cbz	r7, 800b134 <_strtol_l.constprop.0+0xdc>
 800b132:	4276      	negs	r6, r6
 800b134:	2a00      	cmp	r2, #0
 800b136:	d0f9      	beq.n	800b12c <_strtol_l.constprop.0+0xd4>
 800b138:	f1be 0f00 	cmp.w	lr, #0
 800b13c:	d000      	beq.n	800b140 <_strtol_l.constprop.0+0xe8>
 800b13e:	1e69      	subs	r1, r5, #1
 800b140:	6011      	str	r1, [r2, #0]
 800b142:	e7f3      	b.n	800b12c <_strtol_l.constprop.0+0xd4>
 800b144:	2430      	movs	r4, #48	; 0x30
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1b1      	bne.n	800b0ae <_strtol_l.constprop.0+0x56>
 800b14a:	2308      	movs	r3, #8
 800b14c:	e7af      	b.n	800b0ae <_strtol_l.constprop.0+0x56>
 800b14e:	2c30      	cmp	r4, #48	; 0x30
 800b150:	d0a5      	beq.n	800b09e <_strtol_l.constprop.0+0x46>
 800b152:	230a      	movs	r3, #10
 800b154:	e7ab      	b.n	800b0ae <_strtol_l.constprop.0+0x56>
 800b156:	bf00      	nop
 800b158:	08012529 	.word	0x08012529

0800b15c <strtol>:
 800b15c:	4613      	mov	r3, r2
 800b15e:	460a      	mov	r2, r1
 800b160:	4601      	mov	r1, r0
 800b162:	4802      	ldr	r0, [pc, #8]	; (800b16c <strtol+0x10>)
 800b164:	6800      	ldr	r0, [r0, #0]
 800b166:	f7ff bf77 	b.w	800b058 <_strtol_l.constprop.0>
 800b16a:	bf00      	nop
 800b16c:	20000438 	.word	0x20000438

0800b170 <std>:
 800b170:	2300      	movs	r3, #0
 800b172:	b510      	push	{r4, lr}
 800b174:	4604      	mov	r4, r0
 800b176:	e9c0 3300 	strd	r3, r3, [r0]
 800b17a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b17e:	6083      	str	r3, [r0, #8]
 800b180:	8181      	strh	r1, [r0, #12]
 800b182:	6643      	str	r3, [r0, #100]	; 0x64
 800b184:	81c2      	strh	r2, [r0, #14]
 800b186:	6183      	str	r3, [r0, #24]
 800b188:	4619      	mov	r1, r3
 800b18a:	2208      	movs	r2, #8
 800b18c:	305c      	adds	r0, #92	; 0x5c
 800b18e:	f000 f914 	bl	800b3ba <memset>
 800b192:	4b0d      	ldr	r3, [pc, #52]	; (800b1c8 <std+0x58>)
 800b194:	6223      	str	r3, [r4, #32]
 800b196:	4b0d      	ldr	r3, [pc, #52]	; (800b1cc <std+0x5c>)
 800b198:	6263      	str	r3, [r4, #36]	; 0x24
 800b19a:	4b0d      	ldr	r3, [pc, #52]	; (800b1d0 <std+0x60>)
 800b19c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b19e:	4b0d      	ldr	r3, [pc, #52]	; (800b1d4 <std+0x64>)
 800b1a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1a2:	4b0d      	ldr	r3, [pc, #52]	; (800b1d8 <std+0x68>)
 800b1a4:	61e4      	str	r4, [r4, #28]
 800b1a6:	429c      	cmp	r4, r3
 800b1a8:	d006      	beq.n	800b1b8 <std+0x48>
 800b1aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b1ae:	4294      	cmp	r4, r2
 800b1b0:	d002      	beq.n	800b1b8 <std+0x48>
 800b1b2:	33d0      	adds	r3, #208	; 0xd0
 800b1b4:	429c      	cmp	r4, r3
 800b1b6:	d105      	bne.n	800b1c4 <std+0x54>
 800b1b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1c0:	f000 b98c 	b.w	800b4dc <__retarget_lock_init_recursive>
 800b1c4:	bd10      	pop	{r4, pc}
 800b1c6:	bf00      	nop
 800b1c8:	0800b335 	.word	0x0800b335
 800b1cc:	0800b357 	.word	0x0800b357
 800b1d0:	0800b38f 	.word	0x0800b38f
 800b1d4:	0800b3b3 	.word	0x0800b3b3
 800b1d8:	20008074 	.word	0x20008074

0800b1dc <stdio_exit_handler>:
 800b1dc:	4a02      	ldr	r2, [pc, #8]	; (800b1e8 <stdio_exit_handler+0xc>)
 800b1de:	4903      	ldr	r1, [pc, #12]	; (800b1ec <stdio_exit_handler+0x10>)
 800b1e0:	4803      	ldr	r0, [pc, #12]	; (800b1f0 <stdio_exit_handler+0x14>)
 800b1e2:	f000 b869 	b.w	800b2b8 <_fwalk_sglue>
 800b1e6:	bf00      	nop
 800b1e8:	2000019c 	.word	0x2000019c
 800b1ec:	0800df6d 	.word	0x0800df6d
 800b1f0:	20000318 	.word	0x20000318

0800b1f4 <cleanup_stdio>:
 800b1f4:	6841      	ldr	r1, [r0, #4]
 800b1f6:	4b0c      	ldr	r3, [pc, #48]	; (800b228 <cleanup_stdio+0x34>)
 800b1f8:	4299      	cmp	r1, r3
 800b1fa:	b510      	push	{r4, lr}
 800b1fc:	4604      	mov	r4, r0
 800b1fe:	d001      	beq.n	800b204 <cleanup_stdio+0x10>
 800b200:	f002 feb4 	bl	800df6c <_fclose_r>
 800b204:	68a1      	ldr	r1, [r4, #8]
 800b206:	4b09      	ldr	r3, [pc, #36]	; (800b22c <cleanup_stdio+0x38>)
 800b208:	4299      	cmp	r1, r3
 800b20a:	d002      	beq.n	800b212 <cleanup_stdio+0x1e>
 800b20c:	4620      	mov	r0, r4
 800b20e:	f002 fead 	bl	800df6c <_fclose_r>
 800b212:	68e1      	ldr	r1, [r4, #12]
 800b214:	4b06      	ldr	r3, [pc, #24]	; (800b230 <cleanup_stdio+0x3c>)
 800b216:	4299      	cmp	r1, r3
 800b218:	d004      	beq.n	800b224 <cleanup_stdio+0x30>
 800b21a:	4620      	mov	r0, r4
 800b21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b220:	f002 bea4 	b.w	800df6c <_fclose_r>
 800b224:	bd10      	pop	{r4, pc}
 800b226:	bf00      	nop
 800b228:	20008074 	.word	0x20008074
 800b22c:	200080dc 	.word	0x200080dc
 800b230:	20008144 	.word	0x20008144

0800b234 <global_stdio_init.part.0>:
 800b234:	b510      	push	{r4, lr}
 800b236:	4b0b      	ldr	r3, [pc, #44]	; (800b264 <global_stdio_init.part.0+0x30>)
 800b238:	4c0b      	ldr	r4, [pc, #44]	; (800b268 <global_stdio_init.part.0+0x34>)
 800b23a:	4a0c      	ldr	r2, [pc, #48]	; (800b26c <global_stdio_init.part.0+0x38>)
 800b23c:	601a      	str	r2, [r3, #0]
 800b23e:	4620      	mov	r0, r4
 800b240:	2200      	movs	r2, #0
 800b242:	2104      	movs	r1, #4
 800b244:	f7ff ff94 	bl	800b170 <std>
 800b248:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b24c:	2201      	movs	r2, #1
 800b24e:	2109      	movs	r1, #9
 800b250:	f7ff ff8e 	bl	800b170 <std>
 800b254:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b258:	2202      	movs	r2, #2
 800b25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b25e:	2112      	movs	r1, #18
 800b260:	f7ff bf86 	b.w	800b170 <std>
 800b264:	200081ac 	.word	0x200081ac
 800b268:	20008074 	.word	0x20008074
 800b26c:	0800b1dd 	.word	0x0800b1dd

0800b270 <__sfp_lock_acquire>:
 800b270:	4801      	ldr	r0, [pc, #4]	; (800b278 <__sfp_lock_acquire+0x8>)
 800b272:	f000 b935 	b.w	800b4e0 <__retarget_lock_acquire_recursive>
 800b276:	bf00      	nop
 800b278:	200081b6 	.word	0x200081b6

0800b27c <__sfp_lock_release>:
 800b27c:	4801      	ldr	r0, [pc, #4]	; (800b284 <__sfp_lock_release+0x8>)
 800b27e:	f000 b930 	b.w	800b4e2 <__retarget_lock_release_recursive>
 800b282:	bf00      	nop
 800b284:	200081b6 	.word	0x200081b6

0800b288 <__sinit>:
 800b288:	b510      	push	{r4, lr}
 800b28a:	4604      	mov	r4, r0
 800b28c:	f7ff fff0 	bl	800b270 <__sfp_lock_acquire>
 800b290:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b292:	b11b      	cbz	r3, 800b29c <__sinit+0x14>
 800b294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b298:	f7ff bff0 	b.w	800b27c <__sfp_lock_release>
 800b29c:	4b04      	ldr	r3, [pc, #16]	; (800b2b0 <__sinit+0x28>)
 800b29e:	6363      	str	r3, [r4, #52]	; 0x34
 800b2a0:	4b04      	ldr	r3, [pc, #16]	; (800b2b4 <__sinit+0x2c>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1f5      	bne.n	800b294 <__sinit+0xc>
 800b2a8:	f7ff ffc4 	bl	800b234 <global_stdio_init.part.0>
 800b2ac:	e7f2      	b.n	800b294 <__sinit+0xc>
 800b2ae:	bf00      	nop
 800b2b0:	0800b1f5 	.word	0x0800b1f5
 800b2b4:	200081ac 	.word	0x200081ac

0800b2b8 <_fwalk_sglue>:
 800b2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2bc:	4607      	mov	r7, r0
 800b2be:	4688      	mov	r8, r1
 800b2c0:	4614      	mov	r4, r2
 800b2c2:	2600      	movs	r6, #0
 800b2c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2c8:	f1b9 0901 	subs.w	r9, r9, #1
 800b2cc:	d505      	bpl.n	800b2da <_fwalk_sglue+0x22>
 800b2ce:	6824      	ldr	r4, [r4, #0]
 800b2d0:	2c00      	cmp	r4, #0
 800b2d2:	d1f7      	bne.n	800b2c4 <_fwalk_sglue+0xc>
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2da:	89ab      	ldrh	r3, [r5, #12]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d907      	bls.n	800b2f0 <_fwalk_sglue+0x38>
 800b2e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	d003      	beq.n	800b2f0 <_fwalk_sglue+0x38>
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	47c0      	blx	r8
 800b2ee:	4306      	orrs	r6, r0
 800b2f0:	3568      	adds	r5, #104	; 0x68
 800b2f2:	e7e9      	b.n	800b2c8 <_fwalk_sglue+0x10>

0800b2f4 <sprintf>:
 800b2f4:	b40e      	push	{r1, r2, r3}
 800b2f6:	b500      	push	{lr}
 800b2f8:	b09c      	sub	sp, #112	; 0x70
 800b2fa:	ab1d      	add	r3, sp, #116	; 0x74
 800b2fc:	9002      	str	r0, [sp, #8]
 800b2fe:	9006      	str	r0, [sp, #24]
 800b300:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b304:	4809      	ldr	r0, [pc, #36]	; (800b32c <sprintf+0x38>)
 800b306:	9107      	str	r1, [sp, #28]
 800b308:	9104      	str	r1, [sp, #16]
 800b30a:	4909      	ldr	r1, [pc, #36]	; (800b330 <sprintf+0x3c>)
 800b30c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b310:	9105      	str	r1, [sp, #20]
 800b312:	6800      	ldr	r0, [r0, #0]
 800b314:	9301      	str	r3, [sp, #4]
 800b316:	a902      	add	r1, sp, #8
 800b318:	f001 fc3a 	bl	800cb90 <_svfprintf_r>
 800b31c:	9b02      	ldr	r3, [sp, #8]
 800b31e:	2200      	movs	r2, #0
 800b320:	701a      	strb	r2, [r3, #0]
 800b322:	b01c      	add	sp, #112	; 0x70
 800b324:	f85d eb04 	ldr.w	lr, [sp], #4
 800b328:	b003      	add	sp, #12
 800b32a:	4770      	bx	lr
 800b32c:	20000438 	.word	0x20000438
 800b330:	ffff0208 	.word	0xffff0208

0800b334 <__sread>:
 800b334:	b510      	push	{r4, lr}
 800b336:	460c      	mov	r4, r1
 800b338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b33c:	f000 f880 	bl	800b440 <_read_r>
 800b340:	2800      	cmp	r0, #0
 800b342:	bfab      	itete	ge
 800b344:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800b346:	89a3      	ldrhlt	r3, [r4, #12]
 800b348:	181b      	addge	r3, r3, r0
 800b34a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b34e:	bfac      	ite	ge
 800b350:	6523      	strge	r3, [r4, #80]	; 0x50
 800b352:	81a3      	strhlt	r3, [r4, #12]
 800b354:	bd10      	pop	{r4, pc}

0800b356 <__swrite>:
 800b356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b35a:	461f      	mov	r7, r3
 800b35c:	898b      	ldrh	r3, [r1, #12]
 800b35e:	05db      	lsls	r3, r3, #23
 800b360:	4605      	mov	r5, r0
 800b362:	460c      	mov	r4, r1
 800b364:	4616      	mov	r6, r2
 800b366:	d505      	bpl.n	800b374 <__swrite+0x1e>
 800b368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b36c:	2302      	movs	r3, #2
 800b36e:	2200      	movs	r2, #0
 800b370:	f000 f854 	bl	800b41c <_lseek_r>
 800b374:	89a3      	ldrh	r3, [r4, #12]
 800b376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b37a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b37e:	81a3      	strh	r3, [r4, #12]
 800b380:	4632      	mov	r2, r6
 800b382:	463b      	mov	r3, r7
 800b384:	4628      	mov	r0, r5
 800b386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b38a:	f000 b86b 	b.w	800b464 <_write_r>

0800b38e <__sseek>:
 800b38e:	b510      	push	{r4, lr}
 800b390:	460c      	mov	r4, r1
 800b392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b396:	f000 f841 	bl	800b41c <_lseek_r>
 800b39a:	1c43      	adds	r3, r0, #1
 800b39c:	89a3      	ldrh	r3, [r4, #12]
 800b39e:	bf15      	itete	ne
 800b3a0:	6520      	strne	r0, [r4, #80]	; 0x50
 800b3a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3aa:	81a3      	strheq	r3, [r4, #12]
 800b3ac:	bf18      	it	ne
 800b3ae:	81a3      	strhne	r3, [r4, #12]
 800b3b0:	bd10      	pop	{r4, pc}

0800b3b2 <__sclose>:
 800b3b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b6:	f000 b821 	b.w	800b3fc <_close_r>

0800b3ba <memset>:
 800b3ba:	4402      	add	r2, r0
 800b3bc:	4603      	mov	r3, r0
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d100      	bne.n	800b3c4 <memset+0xa>
 800b3c2:	4770      	bx	lr
 800b3c4:	f803 1b01 	strb.w	r1, [r3], #1
 800b3c8:	e7f9      	b.n	800b3be <memset+0x4>

0800b3ca <strncmp>:
 800b3ca:	b510      	push	{r4, lr}
 800b3cc:	b16a      	cbz	r2, 800b3ea <strncmp+0x20>
 800b3ce:	3901      	subs	r1, #1
 800b3d0:	1884      	adds	r4, r0, r2
 800b3d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d103      	bne.n	800b3e6 <strncmp+0x1c>
 800b3de:	42a0      	cmp	r0, r4
 800b3e0:	d001      	beq.n	800b3e6 <strncmp+0x1c>
 800b3e2:	2a00      	cmp	r2, #0
 800b3e4:	d1f5      	bne.n	800b3d2 <strncmp+0x8>
 800b3e6:	1ad0      	subs	r0, r2, r3
 800b3e8:	bd10      	pop	{r4, pc}
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	e7fc      	b.n	800b3e8 <strncmp+0x1e>
	...

0800b3f0 <__locale_mb_cur_max>:
 800b3f0:	4b01      	ldr	r3, [pc, #4]	; (800b3f8 <__locale_mb_cur_max+0x8>)
 800b3f2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800b3f6:	4770      	bx	lr
 800b3f8:	200001a8 	.word	0x200001a8

0800b3fc <_close_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	4d06      	ldr	r5, [pc, #24]	; (800b418 <_close_r+0x1c>)
 800b400:	2300      	movs	r3, #0
 800b402:	4604      	mov	r4, r0
 800b404:	4608      	mov	r0, r1
 800b406:	602b      	str	r3, [r5, #0]
 800b408:	f006 f902 	bl	8011610 <_close>
 800b40c:	1c43      	adds	r3, r0, #1
 800b40e:	d102      	bne.n	800b416 <_close_r+0x1a>
 800b410:	682b      	ldr	r3, [r5, #0]
 800b412:	b103      	cbz	r3, 800b416 <_close_r+0x1a>
 800b414:	6023      	str	r3, [r4, #0]
 800b416:	bd38      	pop	{r3, r4, r5, pc}
 800b418:	200081b0 	.word	0x200081b0

0800b41c <_lseek_r>:
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	4d07      	ldr	r5, [pc, #28]	; (800b43c <_lseek_r+0x20>)
 800b420:	4604      	mov	r4, r0
 800b422:	4608      	mov	r0, r1
 800b424:	4611      	mov	r1, r2
 800b426:	2200      	movs	r2, #0
 800b428:	602a      	str	r2, [r5, #0]
 800b42a:	461a      	mov	r2, r3
 800b42c:	f006 f918 	bl	8011660 <_lseek>
 800b430:	1c43      	adds	r3, r0, #1
 800b432:	d102      	bne.n	800b43a <_lseek_r+0x1e>
 800b434:	682b      	ldr	r3, [r5, #0]
 800b436:	b103      	cbz	r3, 800b43a <_lseek_r+0x1e>
 800b438:	6023      	str	r3, [r4, #0]
 800b43a:	bd38      	pop	{r3, r4, r5, pc}
 800b43c:	200081b0 	.word	0x200081b0

0800b440 <_read_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	4d07      	ldr	r5, [pc, #28]	; (800b460 <_read_r+0x20>)
 800b444:	4604      	mov	r4, r0
 800b446:	4608      	mov	r0, r1
 800b448:	4611      	mov	r1, r2
 800b44a:	2200      	movs	r2, #0
 800b44c:	602a      	str	r2, [r5, #0]
 800b44e:	461a      	mov	r2, r3
 800b450:	f006 f90e 	bl	8011670 <_read>
 800b454:	1c43      	adds	r3, r0, #1
 800b456:	d102      	bne.n	800b45e <_read_r+0x1e>
 800b458:	682b      	ldr	r3, [r5, #0]
 800b45a:	b103      	cbz	r3, 800b45e <_read_r+0x1e>
 800b45c:	6023      	str	r3, [r4, #0]
 800b45e:	bd38      	pop	{r3, r4, r5, pc}
 800b460:	200081b0 	.word	0x200081b0

0800b464 <_write_r>:
 800b464:	b538      	push	{r3, r4, r5, lr}
 800b466:	4d07      	ldr	r5, [pc, #28]	; (800b484 <_write_r+0x20>)
 800b468:	4604      	mov	r4, r0
 800b46a:	4608      	mov	r0, r1
 800b46c:	4611      	mov	r1, r2
 800b46e:	2200      	movs	r2, #0
 800b470:	602a      	str	r2, [r5, #0]
 800b472:	461a      	mov	r2, r3
 800b474:	f006 f912 	bl	801169c <_write>
 800b478:	1c43      	adds	r3, r0, #1
 800b47a:	d102      	bne.n	800b482 <_write_r+0x1e>
 800b47c:	682b      	ldr	r3, [r5, #0]
 800b47e:	b103      	cbz	r3, 800b482 <_write_r+0x1e>
 800b480:	6023      	str	r3, [r4, #0]
 800b482:	bd38      	pop	{r3, r4, r5, pc}
 800b484:	200081b0 	.word	0x200081b0

0800b488 <__errno>:
 800b488:	4b01      	ldr	r3, [pc, #4]	; (800b490 <__errno+0x8>)
 800b48a:	6818      	ldr	r0, [r3, #0]
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	20000438 	.word	0x20000438

0800b494 <__libc_init_array>:
 800b494:	b570      	push	{r4, r5, r6, lr}
 800b496:	4d0d      	ldr	r5, [pc, #52]	; (800b4cc <__libc_init_array+0x38>)
 800b498:	4c0d      	ldr	r4, [pc, #52]	; (800b4d0 <__libc_init_array+0x3c>)
 800b49a:	1b64      	subs	r4, r4, r5
 800b49c:	10a4      	asrs	r4, r4, #2
 800b49e:	2600      	movs	r6, #0
 800b4a0:	42a6      	cmp	r6, r4
 800b4a2:	d109      	bne.n	800b4b8 <__libc_init_array+0x24>
 800b4a4:	4d0b      	ldr	r5, [pc, #44]	; (800b4d4 <__libc_init_array+0x40>)
 800b4a6:	4c0c      	ldr	r4, [pc, #48]	; (800b4d8 <__libc_init_array+0x44>)
 800b4a8:	f006 f902 	bl	80116b0 <_init>
 800b4ac:	1b64      	subs	r4, r4, r5
 800b4ae:	10a4      	asrs	r4, r4, #2
 800b4b0:	2600      	movs	r6, #0
 800b4b2:	42a6      	cmp	r6, r4
 800b4b4:	d105      	bne.n	800b4c2 <__libc_init_array+0x2e>
 800b4b6:	bd70      	pop	{r4, r5, r6, pc}
 800b4b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4bc:	4798      	blx	r3
 800b4be:	3601      	adds	r6, #1
 800b4c0:	e7ee      	b.n	800b4a0 <__libc_init_array+0xc>
 800b4c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4c6:	4798      	blx	r3
 800b4c8:	3601      	adds	r6, #1
 800b4ca:	e7f2      	b.n	800b4b2 <__libc_init_array+0x1e>
 800b4cc:	08012af8 	.word	0x08012af8
 800b4d0:	08012af8 	.word	0x08012af8
 800b4d4:	08012af8 	.word	0x08012af8
 800b4d8:	08012b00 	.word	0x08012b00

0800b4dc <__retarget_lock_init_recursive>:
 800b4dc:	4770      	bx	lr

0800b4de <__retarget_lock_close_recursive>:
 800b4de:	4770      	bx	lr

0800b4e0 <__retarget_lock_acquire_recursive>:
 800b4e0:	4770      	bx	lr

0800b4e2 <__retarget_lock_release_recursive>:
 800b4e2:	4770      	bx	lr

0800b4e4 <memcpy>:
 800b4e4:	440a      	add	r2, r1
 800b4e6:	4291      	cmp	r1, r2
 800b4e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4ec:	d100      	bne.n	800b4f0 <memcpy+0xc>
 800b4ee:	4770      	bx	lr
 800b4f0:	b510      	push	{r4, lr}
 800b4f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4fa:	4291      	cmp	r1, r2
 800b4fc:	d1f9      	bne.n	800b4f2 <memcpy+0xe>
 800b4fe:	bd10      	pop	{r4, pc}

0800b500 <nan>:
 800b500:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b508 <nan+0x8>
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	00000000 	.word	0x00000000
 800b50c:	7ff80000 	.word	0x7ff80000

0800b510 <register_fini>:
 800b510:	4b02      	ldr	r3, [pc, #8]	; (800b51c <register_fini+0xc>)
 800b512:	b113      	cbz	r3, 800b51a <register_fini+0xa>
 800b514:	4802      	ldr	r0, [pc, #8]	; (800b520 <register_fini+0x10>)
 800b516:	f000 b805 	b.w	800b524 <atexit>
 800b51a:	4770      	bx	lr
 800b51c:	00000000 	.word	0x00000000
 800b520:	0800e1d1 	.word	0x0800e1d1

0800b524 <atexit>:
 800b524:	2300      	movs	r3, #0
 800b526:	4601      	mov	r1, r0
 800b528:	461a      	mov	r2, r3
 800b52a:	4618      	mov	r0, r3
 800b52c:	f002 bea8 	b.w	800e280 <__register_exitproc>

0800b530 <_malloc_trim_r>:
 800b530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b534:	4606      	mov	r6, r0
 800b536:	2008      	movs	r0, #8
 800b538:	460c      	mov	r4, r1
 800b53a:	f002 fe5d 	bl	800e1f8 <sysconf>
 800b53e:	4f23      	ldr	r7, [pc, #140]	; (800b5cc <_malloc_trim_r+0x9c>)
 800b540:	4680      	mov	r8, r0
 800b542:	4630      	mov	r0, r6
 800b544:	f000 feac 	bl	800c2a0 <__malloc_lock>
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	685d      	ldr	r5, [r3, #4]
 800b54c:	f025 0503 	bic.w	r5, r5, #3
 800b550:	1b2c      	subs	r4, r5, r4
 800b552:	3c11      	subs	r4, #17
 800b554:	4444      	add	r4, r8
 800b556:	fbb4 f4f8 	udiv	r4, r4, r8
 800b55a:	3c01      	subs	r4, #1
 800b55c:	fb08 f404 	mul.w	r4, r8, r4
 800b560:	45a0      	cmp	r8, r4
 800b562:	dd05      	ble.n	800b570 <_malloc_trim_r+0x40>
 800b564:	4630      	mov	r0, r6
 800b566:	f000 fea1 	bl	800c2ac <__malloc_unlock>
 800b56a:	2000      	movs	r0, #0
 800b56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b570:	2100      	movs	r1, #0
 800b572:	4630      	mov	r0, r6
 800b574:	f002 fe1c 	bl	800e1b0 <_sbrk_r>
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	442b      	add	r3, r5
 800b57c:	4298      	cmp	r0, r3
 800b57e:	d1f1      	bne.n	800b564 <_malloc_trim_r+0x34>
 800b580:	4261      	negs	r1, r4
 800b582:	4630      	mov	r0, r6
 800b584:	f002 fe14 	bl	800e1b0 <_sbrk_r>
 800b588:	3001      	adds	r0, #1
 800b58a:	d110      	bne.n	800b5ae <_malloc_trim_r+0x7e>
 800b58c:	2100      	movs	r1, #0
 800b58e:	4630      	mov	r0, r6
 800b590:	f002 fe0e 	bl	800e1b0 <_sbrk_r>
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	1a83      	subs	r3, r0, r2
 800b598:	2b0f      	cmp	r3, #15
 800b59a:	dde3      	ble.n	800b564 <_malloc_trim_r+0x34>
 800b59c:	490c      	ldr	r1, [pc, #48]	; (800b5d0 <_malloc_trim_r+0xa0>)
 800b59e:	6809      	ldr	r1, [r1, #0]
 800b5a0:	1a40      	subs	r0, r0, r1
 800b5a2:	490c      	ldr	r1, [pc, #48]	; (800b5d4 <_malloc_trim_r+0xa4>)
 800b5a4:	f043 0301 	orr.w	r3, r3, #1
 800b5a8:	6008      	str	r0, [r1, #0]
 800b5aa:	6053      	str	r3, [r2, #4]
 800b5ac:	e7da      	b.n	800b564 <_malloc_trim_r+0x34>
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	4a08      	ldr	r2, [pc, #32]	; (800b5d4 <_malloc_trim_r+0xa4>)
 800b5b2:	1b2d      	subs	r5, r5, r4
 800b5b4:	f045 0501 	orr.w	r5, r5, #1
 800b5b8:	605d      	str	r5, [r3, #4]
 800b5ba:	6813      	ldr	r3, [r2, #0]
 800b5bc:	4630      	mov	r0, r6
 800b5be:	1b1b      	subs	r3, r3, r4
 800b5c0:	6013      	str	r3, [r2, #0]
 800b5c2:	f000 fe73 	bl	800c2ac <__malloc_unlock>
 800b5c6:	2001      	movs	r0, #1
 800b5c8:	e7d0      	b.n	800b56c <_malloc_trim_r+0x3c>
 800b5ca:	bf00      	nop
 800b5cc:	20000440 	.word	0x20000440
 800b5d0:	20000848 	.word	0x20000848
 800b5d4:	200081bc 	.word	0x200081bc

0800b5d8 <_free_r>:
 800b5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5da:	4605      	mov	r5, r0
 800b5dc:	460f      	mov	r7, r1
 800b5de:	2900      	cmp	r1, #0
 800b5e0:	f000 80b1 	beq.w	800b746 <_free_r+0x16e>
 800b5e4:	f000 fe5c 	bl	800c2a0 <__malloc_lock>
 800b5e8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b5ec:	4856      	ldr	r0, [pc, #344]	; (800b748 <_free_r+0x170>)
 800b5ee:	f022 0401 	bic.w	r4, r2, #1
 800b5f2:	f1a7 0308 	sub.w	r3, r7, #8
 800b5f6:	eb03 0c04 	add.w	ip, r3, r4
 800b5fa:	6881      	ldr	r1, [r0, #8]
 800b5fc:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800b600:	4561      	cmp	r1, ip
 800b602:	f026 0603 	bic.w	r6, r6, #3
 800b606:	f002 0201 	and.w	r2, r2, #1
 800b60a:	d11b      	bne.n	800b644 <_free_r+0x6c>
 800b60c:	4426      	add	r6, r4
 800b60e:	b93a      	cbnz	r2, 800b620 <_free_r+0x48>
 800b610:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800b614:	1a9b      	subs	r3, r3, r2
 800b616:	4416      	add	r6, r2
 800b618:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800b61c:	60ca      	str	r2, [r1, #12]
 800b61e:	6091      	str	r1, [r2, #8]
 800b620:	f046 0201 	orr.w	r2, r6, #1
 800b624:	605a      	str	r2, [r3, #4]
 800b626:	6083      	str	r3, [r0, #8]
 800b628:	4b48      	ldr	r3, [pc, #288]	; (800b74c <_free_r+0x174>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	42b3      	cmp	r3, r6
 800b62e:	d804      	bhi.n	800b63a <_free_r+0x62>
 800b630:	4b47      	ldr	r3, [pc, #284]	; (800b750 <_free_r+0x178>)
 800b632:	4628      	mov	r0, r5
 800b634:	6819      	ldr	r1, [r3, #0]
 800b636:	f7ff ff7b 	bl	800b530 <_malloc_trim_r>
 800b63a:	4628      	mov	r0, r5
 800b63c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b640:	f000 be34 	b.w	800c2ac <__malloc_unlock>
 800b644:	f8cc 6004 	str.w	r6, [ip, #4]
 800b648:	2a00      	cmp	r2, #0
 800b64a:	d138      	bne.n	800b6be <_free_r+0xe6>
 800b64c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800b650:	1a5b      	subs	r3, r3, r1
 800b652:	440c      	add	r4, r1
 800b654:	6899      	ldr	r1, [r3, #8]
 800b656:	f100 0708 	add.w	r7, r0, #8
 800b65a:	42b9      	cmp	r1, r7
 800b65c:	d031      	beq.n	800b6c2 <_free_r+0xea>
 800b65e:	68df      	ldr	r7, [r3, #12]
 800b660:	60cf      	str	r7, [r1, #12]
 800b662:	60b9      	str	r1, [r7, #8]
 800b664:	eb0c 0106 	add.w	r1, ip, r6
 800b668:	6849      	ldr	r1, [r1, #4]
 800b66a:	07c9      	lsls	r1, r1, #31
 800b66c:	d40b      	bmi.n	800b686 <_free_r+0xae>
 800b66e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800b672:	4434      	add	r4, r6
 800b674:	bb3a      	cbnz	r2, 800b6c6 <_free_r+0xee>
 800b676:	4e37      	ldr	r6, [pc, #220]	; (800b754 <_free_r+0x17c>)
 800b678:	42b1      	cmp	r1, r6
 800b67a:	d124      	bne.n	800b6c6 <_free_r+0xee>
 800b67c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b680:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800b684:	2201      	movs	r2, #1
 800b686:	f044 0101 	orr.w	r1, r4, #1
 800b68a:	6059      	str	r1, [r3, #4]
 800b68c:	511c      	str	r4, [r3, r4]
 800b68e:	2a00      	cmp	r2, #0
 800b690:	d1d3      	bne.n	800b63a <_free_r+0x62>
 800b692:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800b696:	d21b      	bcs.n	800b6d0 <_free_r+0xf8>
 800b698:	08e2      	lsrs	r2, r4, #3
 800b69a:	2101      	movs	r1, #1
 800b69c:	0964      	lsrs	r4, r4, #5
 800b69e:	40a1      	lsls	r1, r4
 800b6a0:	6844      	ldr	r4, [r0, #4]
 800b6a2:	3201      	adds	r2, #1
 800b6a4:	4321      	orrs	r1, r4
 800b6a6:	6041      	str	r1, [r0, #4]
 800b6a8:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800b6ac:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800b6b0:	3908      	subs	r1, #8
 800b6b2:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800b6b6:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800b6ba:	60e3      	str	r3, [r4, #12]
 800b6bc:	e7bd      	b.n	800b63a <_free_r+0x62>
 800b6be:	2200      	movs	r2, #0
 800b6c0:	e7d0      	b.n	800b664 <_free_r+0x8c>
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	e7ce      	b.n	800b664 <_free_r+0x8c>
 800b6c6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800b6ca:	60ce      	str	r6, [r1, #12]
 800b6cc:	60b1      	str	r1, [r6, #8]
 800b6ce:	e7da      	b.n	800b686 <_free_r+0xae>
 800b6d0:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800b6d4:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800b6d8:	d214      	bcs.n	800b704 <_free_r+0x12c>
 800b6da:	09a2      	lsrs	r2, r4, #6
 800b6dc:	3238      	adds	r2, #56	; 0x38
 800b6de:	1c51      	adds	r1, r2, #1
 800b6e0:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800b6e4:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800b6e8:	428e      	cmp	r6, r1
 800b6ea:	d125      	bne.n	800b738 <_free_r+0x160>
 800b6ec:	2401      	movs	r4, #1
 800b6ee:	1092      	asrs	r2, r2, #2
 800b6f0:	fa04 f202 	lsl.w	r2, r4, r2
 800b6f4:	6844      	ldr	r4, [r0, #4]
 800b6f6:	4322      	orrs	r2, r4
 800b6f8:	6042      	str	r2, [r0, #4]
 800b6fa:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800b6fe:	60b3      	str	r3, [r6, #8]
 800b700:	60cb      	str	r3, [r1, #12]
 800b702:	e79a      	b.n	800b63a <_free_r+0x62>
 800b704:	2a14      	cmp	r2, #20
 800b706:	d801      	bhi.n	800b70c <_free_r+0x134>
 800b708:	325b      	adds	r2, #91	; 0x5b
 800b70a:	e7e8      	b.n	800b6de <_free_r+0x106>
 800b70c:	2a54      	cmp	r2, #84	; 0x54
 800b70e:	d802      	bhi.n	800b716 <_free_r+0x13e>
 800b710:	0b22      	lsrs	r2, r4, #12
 800b712:	326e      	adds	r2, #110	; 0x6e
 800b714:	e7e3      	b.n	800b6de <_free_r+0x106>
 800b716:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800b71a:	d802      	bhi.n	800b722 <_free_r+0x14a>
 800b71c:	0be2      	lsrs	r2, r4, #15
 800b71e:	3277      	adds	r2, #119	; 0x77
 800b720:	e7dd      	b.n	800b6de <_free_r+0x106>
 800b722:	f240 5154 	movw	r1, #1364	; 0x554
 800b726:	428a      	cmp	r2, r1
 800b728:	bf9a      	itte	ls
 800b72a:	0ca2      	lsrls	r2, r4, #18
 800b72c:	327c      	addls	r2, #124	; 0x7c
 800b72e:	227e      	movhi	r2, #126	; 0x7e
 800b730:	e7d5      	b.n	800b6de <_free_r+0x106>
 800b732:	6889      	ldr	r1, [r1, #8]
 800b734:	428e      	cmp	r6, r1
 800b736:	d004      	beq.n	800b742 <_free_r+0x16a>
 800b738:	684a      	ldr	r2, [r1, #4]
 800b73a:	f022 0203 	bic.w	r2, r2, #3
 800b73e:	42a2      	cmp	r2, r4
 800b740:	d8f7      	bhi.n	800b732 <_free_r+0x15a>
 800b742:	68ce      	ldr	r6, [r1, #12]
 800b744:	e7d9      	b.n	800b6fa <_free_r+0x122>
 800b746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b748:	20000440 	.word	0x20000440
 800b74c:	2000084c 	.word	0x2000084c
 800b750:	200081ec 	.word	0x200081ec
 800b754:	20000448 	.word	0x20000448

0800b758 <rshift>:
 800b758:	6903      	ldr	r3, [r0, #16]
 800b75a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b75e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b762:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b766:	f100 0414 	add.w	r4, r0, #20
 800b76a:	dd45      	ble.n	800b7f8 <rshift+0xa0>
 800b76c:	f011 011f 	ands.w	r1, r1, #31
 800b770:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b774:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b778:	d10c      	bne.n	800b794 <rshift+0x3c>
 800b77a:	f100 0710 	add.w	r7, r0, #16
 800b77e:	4629      	mov	r1, r5
 800b780:	42b1      	cmp	r1, r6
 800b782:	d334      	bcc.n	800b7ee <rshift+0x96>
 800b784:	1a9b      	subs	r3, r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	1eea      	subs	r2, r5, #3
 800b78a:	4296      	cmp	r6, r2
 800b78c:	bf38      	it	cc
 800b78e:	2300      	movcc	r3, #0
 800b790:	4423      	add	r3, r4
 800b792:	e015      	b.n	800b7c0 <rshift+0x68>
 800b794:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b798:	f1c1 0820 	rsb	r8, r1, #32
 800b79c:	40cf      	lsrs	r7, r1
 800b79e:	f105 0e04 	add.w	lr, r5, #4
 800b7a2:	46a1      	mov	r9, r4
 800b7a4:	4576      	cmp	r6, lr
 800b7a6:	46f4      	mov	ip, lr
 800b7a8:	d815      	bhi.n	800b7d6 <rshift+0x7e>
 800b7aa:	1a9a      	subs	r2, r3, r2
 800b7ac:	0092      	lsls	r2, r2, #2
 800b7ae:	3a04      	subs	r2, #4
 800b7b0:	3501      	adds	r5, #1
 800b7b2:	42ae      	cmp	r6, r5
 800b7b4:	bf38      	it	cc
 800b7b6:	2200      	movcc	r2, #0
 800b7b8:	18a3      	adds	r3, r4, r2
 800b7ba:	50a7      	str	r7, [r4, r2]
 800b7bc:	b107      	cbz	r7, 800b7c0 <rshift+0x68>
 800b7be:	3304      	adds	r3, #4
 800b7c0:	1b1a      	subs	r2, r3, r4
 800b7c2:	42a3      	cmp	r3, r4
 800b7c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b7c8:	bf08      	it	eq
 800b7ca:	2300      	moveq	r3, #0
 800b7cc:	6102      	str	r2, [r0, #16]
 800b7ce:	bf08      	it	eq
 800b7d0:	6143      	streq	r3, [r0, #20]
 800b7d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7d6:	f8dc c000 	ldr.w	ip, [ip]
 800b7da:	fa0c fc08 	lsl.w	ip, ip, r8
 800b7de:	ea4c 0707 	orr.w	r7, ip, r7
 800b7e2:	f849 7b04 	str.w	r7, [r9], #4
 800b7e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b7ea:	40cf      	lsrs	r7, r1
 800b7ec:	e7da      	b.n	800b7a4 <rshift+0x4c>
 800b7ee:	f851 cb04 	ldr.w	ip, [r1], #4
 800b7f2:	f847 cf04 	str.w	ip, [r7, #4]!
 800b7f6:	e7c3      	b.n	800b780 <rshift+0x28>
 800b7f8:	4623      	mov	r3, r4
 800b7fa:	e7e1      	b.n	800b7c0 <rshift+0x68>

0800b7fc <__hexdig_fun>:
 800b7fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b800:	2b09      	cmp	r3, #9
 800b802:	d802      	bhi.n	800b80a <__hexdig_fun+0xe>
 800b804:	3820      	subs	r0, #32
 800b806:	b2c0      	uxtb	r0, r0
 800b808:	4770      	bx	lr
 800b80a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b80e:	2b05      	cmp	r3, #5
 800b810:	d801      	bhi.n	800b816 <__hexdig_fun+0x1a>
 800b812:	3847      	subs	r0, #71	; 0x47
 800b814:	e7f7      	b.n	800b806 <__hexdig_fun+0xa>
 800b816:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b81a:	2b05      	cmp	r3, #5
 800b81c:	d801      	bhi.n	800b822 <__hexdig_fun+0x26>
 800b81e:	3827      	subs	r0, #39	; 0x27
 800b820:	e7f1      	b.n	800b806 <__hexdig_fun+0xa>
 800b822:	2000      	movs	r0, #0
 800b824:	4770      	bx	lr
	...

0800b828 <__gethex>:
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	4617      	mov	r7, r2
 800b82e:	680a      	ldr	r2, [r1, #0]
 800b830:	b085      	sub	sp, #20
 800b832:	f102 0b02 	add.w	fp, r2, #2
 800b836:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b83a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b83e:	4681      	mov	r9, r0
 800b840:	468a      	mov	sl, r1
 800b842:	9302      	str	r3, [sp, #8]
 800b844:	32fe      	adds	r2, #254	; 0xfe
 800b846:	eb02 030b 	add.w	r3, r2, fp
 800b84a:	46d8      	mov	r8, fp
 800b84c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b850:	9301      	str	r3, [sp, #4]
 800b852:	2830      	cmp	r0, #48	; 0x30
 800b854:	d0f7      	beq.n	800b846 <__gethex+0x1e>
 800b856:	f7ff ffd1 	bl	800b7fc <__hexdig_fun>
 800b85a:	4604      	mov	r4, r0
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d138      	bne.n	800b8d2 <__gethex+0xaa>
 800b860:	49a7      	ldr	r1, [pc, #668]	; (800bb00 <__gethex+0x2d8>)
 800b862:	2201      	movs	r2, #1
 800b864:	4640      	mov	r0, r8
 800b866:	f7ff fdb0 	bl	800b3ca <strncmp>
 800b86a:	4606      	mov	r6, r0
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d169      	bne.n	800b944 <__gethex+0x11c>
 800b870:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b874:	465d      	mov	r5, fp
 800b876:	f7ff ffc1 	bl	800b7fc <__hexdig_fun>
 800b87a:	2800      	cmp	r0, #0
 800b87c:	d064      	beq.n	800b948 <__gethex+0x120>
 800b87e:	465a      	mov	r2, fp
 800b880:	7810      	ldrb	r0, [r2, #0]
 800b882:	2830      	cmp	r0, #48	; 0x30
 800b884:	4690      	mov	r8, r2
 800b886:	f102 0201 	add.w	r2, r2, #1
 800b88a:	d0f9      	beq.n	800b880 <__gethex+0x58>
 800b88c:	f7ff ffb6 	bl	800b7fc <__hexdig_fun>
 800b890:	2301      	movs	r3, #1
 800b892:	fab0 f480 	clz	r4, r0
 800b896:	0964      	lsrs	r4, r4, #5
 800b898:	465e      	mov	r6, fp
 800b89a:	9301      	str	r3, [sp, #4]
 800b89c:	4642      	mov	r2, r8
 800b89e:	4615      	mov	r5, r2
 800b8a0:	3201      	adds	r2, #1
 800b8a2:	7828      	ldrb	r0, [r5, #0]
 800b8a4:	f7ff ffaa 	bl	800b7fc <__hexdig_fun>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	d1f8      	bne.n	800b89e <__gethex+0x76>
 800b8ac:	4994      	ldr	r1, [pc, #592]	; (800bb00 <__gethex+0x2d8>)
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f7ff fd8a 	bl	800b3ca <strncmp>
 800b8b6:	b978      	cbnz	r0, 800b8d8 <__gethex+0xb0>
 800b8b8:	b946      	cbnz	r6, 800b8cc <__gethex+0xa4>
 800b8ba:	1c6e      	adds	r6, r5, #1
 800b8bc:	4632      	mov	r2, r6
 800b8be:	4615      	mov	r5, r2
 800b8c0:	3201      	adds	r2, #1
 800b8c2:	7828      	ldrb	r0, [r5, #0]
 800b8c4:	f7ff ff9a 	bl	800b7fc <__hexdig_fun>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	d1f8      	bne.n	800b8be <__gethex+0x96>
 800b8cc:	1b73      	subs	r3, r6, r5
 800b8ce:	009e      	lsls	r6, r3, #2
 800b8d0:	e004      	b.n	800b8dc <__gethex+0xb4>
 800b8d2:	2400      	movs	r4, #0
 800b8d4:	4626      	mov	r6, r4
 800b8d6:	e7e1      	b.n	800b89c <__gethex+0x74>
 800b8d8:	2e00      	cmp	r6, #0
 800b8da:	d1f7      	bne.n	800b8cc <__gethex+0xa4>
 800b8dc:	782b      	ldrb	r3, [r5, #0]
 800b8de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b8e2:	2b50      	cmp	r3, #80	; 0x50
 800b8e4:	d13d      	bne.n	800b962 <__gethex+0x13a>
 800b8e6:	786b      	ldrb	r3, [r5, #1]
 800b8e8:	2b2b      	cmp	r3, #43	; 0x2b
 800b8ea:	d02f      	beq.n	800b94c <__gethex+0x124>
 800b8ec:	2b2d      	cmp	r3, #45	; 0x2d
 800b8ee:	d031      	beq.n	800b954 <__gethex+0x12c>
 800b8f0:	1c69      	adds	r1, r5, #1
 800b8f2:	f04f 0b00 	mov.w	fp, #0
 800b8f6:	7808      	ldrb	r0, [r1, #0]
 800b8f8:	f7ff ff80 	bl	800b7fc <__hexdig_fun>
 800b8fc:	1e42      	subs	r2, r0, #1
 800b8fe:	b2d2      	uxtb	r2, r2
 800b900:	2a18      	cmp	r2, #24
 800b902:	d82e      	bhi.n	800b962 <__gethex+0x13a>
 800b904:	f1a0 0210 	sub.w	r2, r0, #16
 800b908:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b90c:	f7ff ff76 	bl	800b7fc <__hexdig_fun>
 800b910:	f100 3cff 	add.w	ip, r0, #4294967295
 800b914:	fa5f fc8c 	uxtb.w	ip, ip
 800b918:	f1bc 0f18 	cmp.w	ip, #24
 800b91c:	d91d      	bls.n	800b95a <__gethex+0x132>
 800b91e:	f1bb 0f00 	cmp.w	fp, #0
 800b922:	d000      	beq.n	800b926 <__gethex+0xfe>
 800b924:	4252      	negs	r2, r2
 800b926:	4416      	add	r6, r2
 800b928:	f8ca 1000 	str.w	r1, [sl]
 800b92c:	b1dc      	cbz	r4, 800b966 <__gethex+0x13e>
 800b92e:	9b01      	ldr	r3, [sp, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	bf14      	ite	ne
 800b934:	f04f 0800 	movne.w	r8, #0
 800b938:	f04f 0806 	moveq.w	r8, #6
 800b93c:	4640      	mov	r0, r8
 800b93e:	b005      	add	sp, #20
 800b940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b944:	4645      	mov	r5, r8
 800b946:	4626      	mov	r6, r4
 800b948:	2401      	movs	r4, #1
 800b94a:	e7c7      	b.n	800b8dc <__gethex+0xb4>
 800b94c:	f04f 0b00 	mov.w	fp, #0
 800b950:	1ca9      	adds	r1, r5, #2
 800b952:	e7d0      	b.n	800b8f6 <__gethex+0xce>
 800b954:	f04f 0b01 	mov.w	fp, #1
 800b958:	e7fa      	b.n	800b950 <__gethex+0x128>
 800b95a:	230a      	movs	r3, #10
 800b95c:	fb03 0002 	mla	r0, r3, r2, r0
 800b960:	e7d0      	b.n	800b904 <__gethex+0xdc>
 800b962:	4629      	mov	r1, r5
 800b964:	e7e0      	b.n	800b928 <__gethex+0x100>
 800b966:	eba5 0308 	sub.w	r3, r5, r8
 800b96a:	3b01      	subs	r3, #1
 800b96c:	4621      	mov	r1, r4
 800b96e:	2b07      	cmp	r3, #7
 800b970:	dc0a      	bgt.n	800b988 <__gethex+0x160>
 800b972:	4648      	mov	r0, r9
 800b974:	f000 fca0 	bl	800c2b8 <_Balloc>
 800b978:	4604      	mov	r4, r0
 800b97a:	b940      	cbnz	r0, 800b98e <__gethex+0x166>
 800b97c:	4b61      	ldr	r3, [pc, #388]	; (800bb04 <__gethex+0x2dc>)
 800b97e:	4602      	mov	r2, r0
 800b980:	21e4      	movs	r1, #228	; 0xe4
 800b982:	4861      	ldr	r0, [pc, #388]	; (800bb08 <__gethex+0x2e0>)
 800b984:	f002 fcbc 	bl	800e300 <__assert_func>
 800b988:	3101      	adds	r1, #1
 800b98a:	105b      	asrs	r3, r3, #1
 800b98c:	e7ef      	b.n	800b96e <__gethex+0x146>
 800b98e:	f100 0a14 	add.w	sl, r0, #20
 800b992:	2300      	movs	r3, #0
 800b994:	495a      	ldr	r1, [pc, #360]	; (800bb00 <__gethex+0x2d8>)
 800b996:	f8cd a004 	str.w	sl, [sp, #4]
 800b99a:	469b      	mov	fp, r3
 800b99c:	45a8      	cmp	r8, r5
 800b99e:	d342      	bcc.n	800ba26 <__gethex+0x1fe>
 800b9a0:	9801      	ldr	r0, [sp, #4]
 800b9a2:	f840 bb04 	str.w	fp, [r0], #4
 800b9a6:	eba0 000a 	sub.w	r0, r0, sl
 800b9aa:	1080      	asrs	r0, r0, #2
 800b9ac:	6120      	str	r0, [r4, #16]
 800b9ae:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b9b2:	4658      	mov	r0, fp
 800b9b4:	f000 fd3e 	bl	800c434 <__hi0bits>
 800b9b8:	683d      	ldr	r5, [r7, #0]
 800b9ba:	eba8 0000 	sub.w	r0, r8, r0
 800b9be:	42a8      	cmp	r0, r5
 800b9c0:	dd59      	ble.n	800ba76 <__gethex+0x24e>
 800b9c2:	eba0 0805 	sub.w	r8, r0, r5
 800b9c6:	4641      	mov	r1, r8
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f001 f8b3 	bl	800cb34 <__any_on>
 800b9ce:	4683      	mov	fp, r0
 800b9d0:	b1b8      	cbz	r0, 800ba02 <__gethex+0x1da>
 800b9d2:	f108 33ff 	add.w	r3, r8, #4294967295
 800b9d6:	1159      	asrs	r1, r3, #5
 800b9d8:	f003 021f 	and.w	r2, r3, #31
 800b9dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b9e0:	f04f 0b01 	mov.w	fp, #1
 800b9e4:	fa0b f202 	lsl.w	r2, fp, r2
 800b9e8:	420a      	tst	r2, r1
 800b9ea:	d00a      	beq.n	800ba02 <__gethex+0x1da>
 800b9ec:	455b      	cmp	r3, fp
 800b9ee:	dd06      	ble.n	800b9fe <__gethex+0x1d6>
 800b9f0:	f1a8 0102 	sub.w	r1, r8, #2
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	f001 f89d 	bl	800cb34 <__any_on>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	d138      	bne.n	800ba70 <__gethex+0x248>
 800b9fe:	f04f 0b02 	mov.w	fp, #2
 800ba02:	4641      	mov	r1, r8
 800ba04:	4620      	mov	r0, r4
 800ba06:	f7ff fea7 	bl	800b758 <rshift>
 800ba0a:	4446      	add	r6, r8
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	42b3      	cmp	r3, r6
 800ba10:	da41      	bge.n	800ba96 <__gethex+0x26e>
 800ba12:	4621      	mov	r1, r4
 800ba14:	4648      	mov	r0, r9
 800ba16:	f000 fc74 	bl	800c302 <_Bfree>
 800ba1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	6013      	str	r3, [r2, #0]
 800ba20:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ba24:	e78a      	b.n	800b93c <__gethex+0x114>
 800ba26:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ba2a:	2a2e      	cmp	r2, #46	; 0x2e
 800ba2c:	d014      	beq.n	800ba58 <__gethex+0x230>
 800ba2e:	2b20      	cmp	r3, #32
 800ba30:	d106      	bne.n	800ba40 <__gethex+0x218>
 800ba32:	9b01      	ldr	r3, [sp, #4]
 800ba34:	f843 bb04 	str.w	fp, [r3], #4
 800ba38:	f04f 0b00 	mov.w	fp, #0
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	465b      	mov	r3, fp
 800ba40:	7828      	ldrb	r0, [r5, #0]
 800ba42:	9303      	str	r3, [sp, #12]
 800ba44:	f7ff feda 	bl	800b7fc <__hexdig_fun>
 800ba48:	9b03      	ldr	r3, [sp, #12]
 800ba4a:	f000 000f 	and.w	r0, r0, #15
 800ba4e:	4098      	lsls	r0, r3
 800ba50:	ea4b 0b00 	orr.w	fp, fp, r0
 800ba54:	3304      	adds	r3, #4
 800ba56:	e7a1      	b.n	800b99c <__gethex+0x174>
 800ba58:	45a8      	cmp	r8, r5
 800ba5a:	d8e8      	bhi.n	800ba2e <__gethex+0x206>
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	4628      	mov	r0, r5
 800ba60:	9303      	str	r3, [sp, #12]
 800ba62:	f7ff fcb2 	bl	800b3ca <strncmp>
 800ba66:	4926      	ldr	r1, [pc, #152]	; (800bb00 <__gethex+0x2d8>)
 800ba68:	9b03      	ldr	r3, [sp, #12]
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	d1df      	bne.n	800ba2e <__gethex+0x206>
 800ba6e:	e795      	b.n	800b99c <__gethex+0x174>
 800ba70:	f04f 0b03 	mov.w	fp, #3
 800ba74:	e7c5      	b.n	800ba02 <__gethex+0x1da>
 800ba76:	da0b      	bge.n	800ba90 <__gethex+0x268>
 800ba78:	eba5 0800 	sub.w	r8, r5, r0
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	4642      	mov	r2, r8
 800ba80:	4648      	mov	r0, r9
 800ba82:	f000 fe25 	bl	800c6d0 <__lshift>
 800ba86:	eba6 0608 	sub.w	r6, r6, r8
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	f100 0a14 	add.w	sl, r0, #20
 800ba90:	f04f 0b00 	mov.w	fp, #0
 800ba94:	e7ba      	b.n	800ba0c <__gethex+0x1e4>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	42b3      	cmp	r3, r6
 800ba9a:	dd73      	ble.n	800bb84 <__gethex+0x35c>
 800ba9c:	1b9e      	subs	r6, r3, r6
 800ba9e:	42b5      	cmp	r5, r6
 800baa0:	dc34      	bgt.n	800bb0c <__gethex+0x2e4>
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	d023      	beq.n	800baf0 <__gethex+0x2c8>
 800baa8:	2b03      	cmp	r3, #3
 800baaa:	d025      	beq.n	800baf8 <__gethex+0x2d0>
 800baac:	2b01      	cmp	r3, #1
 800baae:	d115      	bne.n	800badc <__gethex+0x2b4>
 800bab0:	42b5      	cmp	r5, r6
 800bab2:	d113      	bne.n	800badc <__gethex+0x2b4>
 800bab4:	2d01      	cmp	r5, #1
 800bab6:	d10b      	bne.n	800bad0 <__gethex+0x2a8>
 800bab8:	9a02      	ldr	r2, [sp, #8]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6013      	str	r3, [r2, #0]
 800babe:	2301      	movs	r3, #1
 800bac0:	6123      	str	r3, [r4, #16]
 800bac2:	f8ca 3000 	str.w	r3, [sl]
 800bac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bac8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bacc:	601c      	str	r4, [r3, #0]
 800bace:	e735      	b.n	800b93c <__gethex+0x114>
 800bad0:	1e69      	subs	r1, r5, #1
 800bad2:	4620      	mov	r0, r4
 800bad4:	f001 f82e 	bl	800cb34 <__any_on>
 800bad8:	2800      	cmp	r0, #0
 800bada:	d1ed      	bne.n	800bab8 <__gethex+0x290>
 800badc:	4621      	mov	r1, r4
 800bade:	4648      	mov	r0, r9
 800bae0:	f000 fc0f 	bl	800c302 <_Bfree>
 800bae4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bae6:	2300      	movs	r3, #0
 800bae8:	6013      	str	r3, [r2, #0]
 800baea:	f04f 0850 	mov.w	r8, #80	; 0x50
 800baee:	e725      	b.n	800b93c <__gethex+0x114>
 800baf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1f2      	bne.n	800badc <__gethex+0x2b4>
 800baf6:	e7df      	b.n	800bab8 <__gethex+0x290>
 800baf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1dc      	bne.n	800bab8 <__gethex+0x290>
 800bafe:	e7ed      	b.n	800badc <__gethex+0x2b4>
 800bb00:	080124d2 	.word	0x080124d2
 800bb04:	08012631 	.word	0x08012631
 800bb08:	08012642 	.word	0x08012642
 800bb0c:	f106 38ff 	add.w	r8, r6, #4294967295
 800bb10:	f1bb 0f00 	cmp.w	fp, #0
 800bb14:	d133      	bne.n	800bb7e <__gethex+0x356>
 800bb16:	f1b8 0f00 	cmp.w	r8, #0
 800bb1a:	d004      	beq.n	800bb26 <__gethex+0x2fe>
 800bb1c:	4641      	mov	r1, r8
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f001 f808 	bl	800cb34 <__any_on>
 800bb24:	4683      	mov	fp, r0
 800bb26:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bb30:	f008 081f 	and.w	r8, r8, #31
 800bb34:	fa03 f308 	lsl.w	r3, r3, r8
 800bb38:	4213      	tst	r3, r2
 800bb3a:	4631      	mov	r1, r6
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	bf18      	it	ne
 800bb40:	f04b 0b02 	orrne.w	fp, fp, #2
 800bb44:	1bad      	subs	r5, r5, r6
 800bb46:	f7ff fe07 	bl	800b758 <rshift>
 800bb4a:	687e      	ldr	r6, [r7, #4]
 800bb4c:	f04f 0802 	mov.w	r8, #2
 800bb50:	f1bb 0f00 	cmp.w	fp, #0
 800bb54:	d04a      	beq.n	800bbec <__gethex+0x3c4>
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	d016      	beq.n	800bb8a <__gethex+0x362>
 800bb5c:	2b03      	cmp	r3, #3
 800bb5e:	d018      	beq.n	800bb92 <__gethex+0x36a>
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d109      	bne.n	800bb78 <__gethex+0x350>
 800bb64:	f01b 0f02 	tst.w	fp, #2
 800bb68:	d006      	beq.n	800bb78 <__gethex+0x350>
 800bb6a:	f8da 3000 	ldr.w	r3, [sl]
 800bb6e:	ea4b 0b03 	orr.w	fp, fp, r3
 800bb72:	f01b 0f01 	tst.w	fp, #1
 800bb76:	d10f      	bne.n	800bb98 <__gethex+0x370>
 800bb78:	f048 0810 	orr.w	r8, r8, #16
 800bb7c:	e036      	b.n	800bbec <__gethex+0x3c4>
 800bb7e:	f04f 0b01 	mov.w	fp, #1
 800bb82:	e7d0      	b.n	800bb26 <__gethex+0x2fe>
 800bb84:	f04f 0801 	mov.w	r8, #1
 800bb88:	e7e2      	b.n	800bb50 <__gethex+0x328>
 800bb8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb8c:	f1c3 0301 	rsb	r3, r3, #1
 800bb90:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d0ef      	beq.n	800bb78 <__gethex+0x350>
 800bb98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bb9c:	f104 0214 	add.w	r2, r4, #20
 800bba0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bba4:	9301      	str	r3, [sp, #4]
 800bba6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bbaa:	2300      	movs	r3, #0
 800bbac:	4694      	mov	ip, r2
 800bbae:	f852 1b04 	ldr.w	r1, [r2], #4
 800bbb2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800bbb6:	d01e      	beq.n	800bbf6 <__gethex+0x3ce>
 800bbb8:	3101      	adds	r1, #1
 800bbba:	f8cc 1000 	str.w	r1, [ip]
 800bbbe:	f1b8 0f02 	cmp.w	r8, #2
 800bbc2:	f104 0214 	add.w	r2, r4, #20
 800bbc6:	d13d      	bne.n	800bc44 <__gethex+0x41c>
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	3b01      	subs	r3, #1
 800bbcc:	42ab      	cmp	r3, r5
 800bbce:	d10b      	bne.n	800bbe8 <__gethex+0x3c0>
 800bbd0:	1169      	asrs	r1, r5, #5
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	f005 051f 	and.w	r5, r5, #31
 800bbd8:	fa03 f505 	lsl.w	r5, r3, r5
 800bbdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbe0:	421d      	tst	r5, r3
 800bbe2:	bf18      	it	ne
 800bbe4:	f04f 0801 	movne.w	r8, #1
 800bbe8:	f048 0820 	orr.w	r8, r8, #32
 800bbec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbee:	601c      	str	r4, [r3, #0]
 800bbf0:	9b02      	ldr	r3, [sp, #8]
 800bbf2:	601e      	str	r6, [r3, #0]
 800bbf4:	e6a2      	b.n	800b93c <__gethex+0x114>
 800bbf6:	4290      	cmp	r0, r2
 800bbf8:	f842 3c04 	str.w	r3, [r2, #-4]
 800bbfc:	d8d6      	bhi.n	800bbac <__gethex+0x384>
 800bbfe:	68a2      	ldr	r2, [r4, #8]
 800bc00:	4593      	cmp	fp, r2
 800bc02:	db17      	blt.n	800bc34 <__gethex+0x40c>
 800bc04:	6861      	ldr	r1, [r4, #4]
 800bc06:	4648      	mov	r0, r9
 800bc08:	3101      	adds	r1, #1
 800bc0a:	f000 fb55 	bl	800c2b8 <_Balloc>
 800bc0e:	4682      	mov	sl, r0
 800bc10:	b918      	cbnz	r0, 800bc1a <__gethex+0x3f2>
 800bc12:	4b1b      	ldr	r3, [pc, #108]	; (800bc80 <__gethex+0x458>)
 800bc14:	4602      	mov	r2, r0
 800bc16:	2184      	movs	r1, #132	; 0x84
 800bc18:	e6b3      	b.n	800b982 <__gethex+0x15a>
 800bc1a:	6922      	ldr	r2, [r4, #16]
 800bc1c:	3202      	adds	r2, #2
 800bc1e:	f104 010c 	add.w	r1, r4, #12
 800bc22:	0092      	lsls	r2, r2, #2
 800bc24:	300c      	adds	r0, #12
 800bc26:	f7ff fc5d 	bl	800b4e4 <memcpy>
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	4648      	mov	r0, r9
 800bc2e:	f000 fb68 	bl	800c302 <_Bfree>
 800bc32:	4654      	mov	r4, sl
 800bc34:	6922      	ldr	r2, [r4, #16]
 800bc36:	1c51      	adds	r1, r2, #1
 800bc38:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bc3c:	6121      	str	r1, [r4, #16]
 800bc3e:	2101      	movs	r1, #1
 800bc40:	6151      	str	r1, [r2, #20]
 800bc42:	e7bc      	b.n	800bbbe <__gethex+0x396>
 800bc44:	6921      	ldr	r1, [r4, #16]
 800bc46:	4559      	cmp	r1, fp
 800bc48:	dd0b      	ble.n	800bc62 <__gethex+0x43a>
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f7ff fd83 	bl	800b758 <rshift>
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	3601      	adds	r6, #1
 800bc56:	42b3      	cmp	r3, r6
 800bc58:	f6ff aedb 	blt.w	800ba12 <__gethex+0x1ea>
 800bc5c:	f04f 0801 	mov.w	r8, #1
 800bc60:	e7c2      	b.n	800bbe8 <__gethex+0x3c0>
 800bc62:	f015 051f 	ands.w	r5, r5, #31
 800bc66:	d0f9      	beq.n	800bc5c <__gethex+0x434>
 800bc68:	9b01      	ldr	r3, [sp, #4]
 800bc6a:	441a      	add	r2, r3
 800bc6c:	f1c5 0520 	rsb	r5, r5, #32
 800bc70:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bc74:	f000 fbde 	bl	800c434 <__hi0bits>
 800bc78:	42a8      	cmp	r0, r5
 800bc7a:	dbe6      	blt.n	800bc4a <__gethex+0x422>
 800bc7c:	e7ee      	b.n	800bc5c <__gethex+0x434>
 800bc7e:	bf00      	nop
 800bc80:	08012631 	.word	0x08012631

0800bc84 <L_shift>:
 800bc84:	f1c2 0208 	rsb	r2, r2, #8
 800bc88:	0092      	lsls	r2, r2, #2
 800bc8a:	b570      	push	{r4, r5, r6, lr}
 800bc8c:	f1c2 0620 	rsb	r6, r2, #32
 800bc90:	6843      	ldr	r3, [r0, #4]
 800bc92:	6804      	ldr	r4, [r0, #0]
 800bc94:	fa03 f506 	lsl.w	r5, r3, r6
 800bc98:	432c      	orrs	r4, r5
 800bc9a:	40d3      	lsrs	r3, r2
 800bc9c:	6004      	str	r4, [r0, #0]
 800bc9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800bca2:	4288      	cmp	r0, r1
 800bca4:	d3f4      	bcc.n	800bc90 <L_shift+0xc>
 800bca6:	bd70      	pop	{r4, r5, r6, pc}

0800bca8 <__match>:
 800bca8:	b530      	push	{r4, r5, lr}
 800bcaa:	6803      	ldr	r3, [r0, #0]
 800bcac:	3301      	adds	r3, #1
 800bcae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcb2:	b914      	cbnz	r4, 800bcba <__match+0x12>
 800bcb4:	6003      	str	r3, [r0, #0]
 800bcb6:	2001      	movs	r0, #1
 800bcb8:	bd30      	pop	{r4, r5, pc}
 800bcba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bcc2:	2d19      	cmp	r5, #25
 800bcc4:	bf98      	it	ls
 800bcc6:	3220      	addls	r2, #32
 800bcc8:	42a2      	cmp	r2, r4
 800bcca:	d0f0      	beq.n	800bcae <__match+0x6>
 800bccc:	2000      	movs	r0, #0
 800bcce:	e7f3      	b.n	800bcb8 <__match+0x10>

0800bcd0 <__hexnan>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	680b      	ldr	r3, [r1, #0]
 800bcd6:	6801      	ldr	r1, [r0, #0]
 800bcd8:	115e      	asrs	r6, r3, #5
 800bcda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bcde:	f013 031f 	ands.w	r3, r3, #31
 800bce2:	b087      	sub	sp, #28
 800bce4:	bf18      	it	ne
 800bce6:	3604      	addne	r6, #4
 800bce8:	2500      	movs	r5, #0
 800bcea:	1f37      	subs	r7, r6, #4
 800bcec:	4682      	mov	sl, r0
 800bcee:	4690      	mov	r8, r2
 800bcf0:	9301      	str	r3, [sp, #4]
 800bcf2:	f846 5c04 	str.w	r5, [r6, #-4]
 800bcf6:	46b9      	mov	r9, r7
 800bcf8:	463c      	mov	r4, r7
 800bcfa:	9502      	str	r5, [sp, #8]
 800bcfc:	46ab      	mov	fp, r5
 800bcfe:	784a      	ldrb	r2, [r1, #1]
 800bd00:	1c4b      	adds	r3, r1, #1
 800bd02:	9303      	str	r3, [sp, #12]
 800bd04:	b342      	cbz	r2, 800bd58 <__hexnan+0x88>
 800bd06:	4610      	mov	r0, r2
 800bd08:	9105      	str	r1, [sp, #20]
 800bd0a:	9204      	str	r2, [sp, #16]
 800bd0c:	f7ff fd76 	bl	800b7fc <__hexdig_fun>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d14f      	bne.n	800bdb4 <__hexnan+0xe4>
 800bd14:	9a04      	ldr	r2, [sp, #16]
 800bd16:	9905      	ldr	r1, [sp, #20]
 800bd18:	2a20      	cmp	r2, #32
 800bd1a:	d818      	bhi.n	800bd4e <__hexnan+0x7e>
 800bd1c:	9b02      	ldr	r3, [sp, #8]
 800bd1e:	459b      	cmp	fp, r3
 800bd20:	dd13      	ble.n	800bd4a <__hexnan+0x7a>
 800bd22:	454c      	cmp	r4, r9
 800bd24:	d206      	bcs.n	800bd34 <__hexnan+0x64>
 800bd26:	2d07      	cmp	r5, #7
 800bd28:	dc04      	bgt.n	800bd34 <__hexnan+0x64>
 800bd2a:	462a      	mov	r2, r5
 800bd2c:	4649      	mov	r1, r9
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f7ff ffa8 	bl	800bc84 <L_shift>
 800bd34:	4544      	cmp	r4, r8
 800bd36:	d950      	bls.n	800bdda <__hexnan+0x10a>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	f1a4 0904 	sub.w	r9, r4, #4
 800bd3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd42:	f8cd b008 	str.w	fp, [sp, #8]
 800bd46:	464c      	mov	r4, r9
 800bd48:	461d      	mov	r5, r3
 800bd4a:	9903      	ldr	r1, [sp, #12]
 800bd4c:	e7d7      	b.n	800bcfe <__hexnan+0x2e>
 800bd4e:	2a29      	cmp	r2, #41	; 0x29
 800bd50:	d155      	bne.n	800bdfe <__hexnan+0x12e>
 800bd52:	3102      	adds	r1, #2
 800bd54:	f8ca 1000 	str.w	r1, [sl]
 800bd58:	f1bb 0f00 	cmp.w	fp, #0
 800bd5c:	d04f      	beq.n	800bdfe <__hexnan+0x12e>
 800bd5e:	454c      	cmp	r4, r9
 800bd60:	d206      	bcs.n	800bd70 <__hexnan+0xa0>
 800bd62:	2d07      	cmp	r5, #7
 800bd64:	dc04      	bgt.n	800bd70 <__hexnan+0xa0>
 800bd66:	462a      	mov	r2, r5
 800bd68:	4649      	mov	r1, r9
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f7ff ff8a 	bl	800bc84 <L_shift>
 800bd70:	4544      	cmp	r4, r8
 800bd72:	d934      	bls.n	800bdde <__hexnan+0x10e>
 800bd74:	f1a8 0204 	sub.w	r2, r8, #4
 800bd78:	4623      	mov	r3, r4
 800bd7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bd7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bd82:	429f      	cmp	r7, r3
 800bd84:	d2f9      	bcs.n	800bd7a <__hexnan+0xaa>
 800bd86:	1b3b      	subs	r3, r7, r4
 800bd88:	f023 0303 	bic.w	r3, r3, #3
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	3e03      	subs	r6, #3
 800bd90:	3401      	adds	r4, #1
 800bd92:	42a6      	cmp	r6, r4
 800bd94:	bf38      	it	cc
 800bd96:	2304      	movcc	r3, #4
 800bd98:	4443      	add	r3, r8
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f843 2b04 	str.w	r2, [r3], #4
 800bda0:	429f      	cmp	r7, r3
 800bda2:	d2fb      	bcs.n	800bd9c <__hexnan+0xcc>
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	b91b      	cbnz	r3, 800bdb0 <__hexnan+0xe0>
 800bda8:	4547      	cmp	r7, r8
 800bdaa:	d126      	bne.n	800bdfa <__hexnan+0x12a>
 800bdac:	2301      	movs	r3, #1
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	2005      	movs	r0, #5
 800bdb2:	e025      	b.n	800be00 <__hexnan+0x130>
 800bdb4:	3501      	adds	r5, #1
 800bdb6:	2d08      	cmp	r5, #8
 800bdb8:	f10b 0b01 	add.w	fp, fp, #1
 800bdbc:	dd06      	ble.n	800bdcc <__hexnan+0xfc>
 800bdbe:	4544      	cmp	r4, r8
 800bdc0:	d9c3      	bls.n	800bd4a <__hexnan+0x7a>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f844 3c04 	str.w	r3, [r4, #-4]
 800bdc8:	2501      	movs	r5, #1
 800bdca:	3c04      	subs	r4, #4
 800bdcc:	6822      	ldr	r2, [r4, #0]
 800bdce:	f000 000f 	and.w	r0, r0, #15
 800bdd2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bdd6:	6020      	str	r0, [r4, #0]
 800bdd8:	e7b7      	b.n	800bd4a <__hexnan+0x7a>
 800bdda:	2508      	movs	r5, #8
 800bddc:	e7b5      	b.n	800bd4a <__hexnan+0x7a>
 800bdde:	9b01      	ldr	r3, [sp, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d0df      	beq.n	800bda4 <__hexnan+0xd4>
 800bde4:	f1c3 0320 	rsb	r3, r3, #32
 800bde8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdec:	40da      	lsrs	r2, r3
 800bdee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	f846 3c04 	str.w	r3, [r6, #-4]
 800bdf8:	e7d4      	b.n	800bda4 <__hexnan+0xd4>
 800bdfa:	3f04      	subs	r7, #4
 800bdfc:	e7d2      	b.n	800bda4 <__hexnan+0xd4>
 800bdfe:	2004      	movs	r0, #4
 800be00:	b007      	add	sp, #28
 800be02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800be08 <_malloc_r>:
 800be08:	f101 030b 	add.w	r3, r1, #11
 800be0c:	2b16      	cmp	r3, #22
 800be0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be12:	4605      	mov	r5, r0
 800be14:	d906      	bls.n	800be24 <_malloc_r+0x1c>
 800be16:	f033 0707 	bics.w	r7, r3, #7
 800be1a:	d504      	bpl.n	800be26 <_malloc_r+0x1e>
 800be1c:	230c      	movs	r3, #12
 800be1e:	602b      	str	r3, [r5, #0]
 800be20:	2400      	movs	r4, #0
 800be22:	e1a3      	b.n	800c16c <_malloc_r+0x364>
 800be24:	2710      	movs	r7, #16
 800be26:	42b9      	cmp	r1, r7
 800be28:	d8f8      	bhi.n	800be1c <_malloc_r+0x14>
 800be2a:	4628      	mov	r0, r5
 800be2c:	f000 fa38 	bl	800c2a0 <__malloc_lock>
 800be30:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800be34:	4eaf      	ldr	r6, [pc, #700]	; (800c0f4 <_malloc_r+0x2ec>)
 800be36:	d237      	bcs.n	800bea8 <_malloc_r+0xa0>
 800be38:	f107 0208 	add.w	r2, r7, #8
 800be3c:	4432      	add	r2, r6
 800be3e:	f1a2 0108 	sub.w	r1, r2, #8
 800be42:	6854      	ldr	r4, [r2, #4]
 800be44:	428c      	cmp	r4, r1
 800be46:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800be4a:	d102      	bne.n	800be52 <_malloc_r+0x4a>
 800be4c:	68d4      	ldr	r4, [r2, #12]
 800be4e:	42a2      	cmp	r2, r4
 800be50:	d010      	beq.n	800be74 <_malloc_r+0x6c>
 800be52:	6863      	ldr	r3, [r4, #4]
 800be54:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800be58:	f023 0303 	bic.w	r3, r3, #3
 800be5c:	60ca      	str	r2, [r1, #12]
 800be5e:	4423      	add	r3, r4
 800be60:	6091      	str	r1, [r2, #8]
 800be62:	685a      	ldr	r2, [r3, #4]
 800be64:	f042 0201 	orr.w	r2, r2, #1
 800be68:	605a      	str	r2, [r3, #4]
 800be6a:	4628      	mov	r0, r5
 800be6c:	f000 fa1e 	bl	800c2ac <__malloc_unlock>
 800be70:	3408      	adds	r4, #8
 800be72:	e17b      	b.n	800c16c <_malloc_r+0x364>
 800be74:	3302      	adds	r3, #2
 800be76:	6934      	ldr	r4, [r6, #16]
 800be78:	499f      	ldr	r1, [pc, #636]	; (800c0f8 <_malloc_r+0x2f0>)
 800be7a:	428c      	cmp	r4, r1
 800be7c:	d077      	beq.n	800bf6e <_malloc_r+0x166>
 800be7e:	6862      	ldr	r2, [r4, #4]
 800be80:	f022 0c03 	bic.w	ip, r2, #3
 800be84:	ebac 0007 	sub.w	r0, ip, r7
 800be88:	280f      	cmp	r0, #15
 800be8a:	dd48      	ble.n	800bf1e <_malloc_r+0x116>
 800be8c:	19e2      	adds	r2, r4, r7
 800be8e:	f040 0301 	orr.w	r3, r0, #1
 800be92:	f047 0701 	orr.w	r7, r7, #1
 800be96:	6067      	str	r7, [r4, #4]
 800be98:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800be9c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800bea0:	6053      	str	r3, [r2, #4]
 800bea2:	f844 000c 	str.w	r0, [r4, ip]
 800bea6:	e7e0      	b.n	800be6a <_malloc_r+0x62>
 800bea8:	0a7b      	lsrs	r3, r7, #9
 800beaa:	d02a      	beq.n	800bf02 <_malloc_r+0xfa>
 800beac:	2b04      	cmp	r3, #4
 800beae:	d812      	bhi.n	800bed6 <_malloc_r+0xce>
 800beb0:	09bb      	lsrs	r3, r7, #6
 800beb2:	3338      	adds	r3, #56	; 0x38
 800beb4:	1c5a      	adds	r2, r3, #1
 800beb6:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800beba:	f1a2 0c08 	sub.w	ip, r2, #8
 800bebe:	6854      	ldr	r4, [r2, #4]
 800bec0:	4564      	cmp	r4, ip
 800bec2:	d006      	beq.n	800bed2 <_malloc_r+0xca>
 800bec4:	6862      	ldr	r2, [r4, #4]
 800bec6:	f022 0203 	bic.w	r2, r2, #3
 800beca:	1bd0      	subs	r0, r2, r7
 800becc:	280f      	cmp	r0, #15
 800bece:	dd1c      	ble.n	800bf0a <_malloc_r+0x102>
 800bed0:	3b01      	subs	r3, #1
 800bed2:	3301      	adds	r3, #1
 800bed4:	e7cf      	b.n	800be76 <_malloc_r+0x6e>
 800bed6:	2b14      	cmp	r3, #20
 800bed8:	d801      	bhi.n	800bede <_malloc_r+0xd6>
 800beda:	335b      	adds	r3, #91	; 0x5b
 800bedc:	e7ea      	b.n	800beb4 <_malloc_r+0xac>
 800bede:	2b54      	cmp	r3, #84	; 0x54
 800bee0:	d802      	bhi.n	800bee8 <_malloc_r+0xe0>
 800bee2:	0b3b      	lsrs	r3, r7, #12
 800bee4:	336e      	adds	r3, #110	; 0x6e
 800bee6:	e7e5      	b.n	800beb4 <_malloc_r+0xac>
 800bee8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800beec:	d802      	bhi.n	800bef4 <_malloc_r+0xec>
 800beee:	0bfb      	lsrs	r3, r7, #15
 800bef0:	3377      	adds	r3, #119	; 0x77
 800bef2:	e7df      	b.n	800beb4 <_malloc_r+0xac>
 800bef4:	f240 5254 	movw	r2, #1364	; 0x554
 800bef8:	4293      	cmp	r3, r2
 800befa:	d804      	bhi.n	800bf06 <_malloc_r+0xfe>
 800befc:	0cbb      	lsrs	r3, r7, #18
 800befe:	337c      	adds	r3, #124	; 0x7c
 800bf00:	e7d8      	b.n	800beb4 <_malloc_r+0xac>
 800bf02:	233f      	movs	r3, #63	; 0x3f
 800bf04:	e7d6      	b.n	800beb4 <_malloc_r+0xac>
 800bf06:	237e      	movs	r3, #126	; 0x7e
 800bf08:	e7d4      	b.n	800beb4 <_malloc_r+0xac>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	68e1      	ldr	r1, [r4, #12]
 800bf0e:	db04      	blt.n	800bf1a <_malloc_r+0x112>
 800bf10:	68a3      	ldr	r3, [r4, #8]
 800bf12:	60d9      	str	r1, [r3, #12]
 800bf14:	608b      	str	r3, [r1, #8]
 800bf16:	18a3      	adds	r3, r4, r2
 800bf18:	e7a3      	b.n	800be62 <_malloc_r+0x5a>
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	e7d0      	b.n	800bec0 <_malloc_r+0xb8>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800bf24:	db07      	blt.n	800bf36 <_malloc_r+0x12e>
 800bf26:	44a4      	add	ip, r4
 800bf28:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800bf2c:	f043 0301 	orr.w	r3, r3, #1
 800bf30:	f8cc 3004 	str.w	r3, [ip, #4]
 800bf34:	e799      	b.n	800be6a <_malloc_r+0x62>
 800bf36:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800bf3a:	6870      	ldr	r0, [r6, #4]
 800bf3c:	f080 8095 	bcs.w	800c06a <_malloc_r+0x262>
 800bf40:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800bf44:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800bf48:	f04f 0c01 	mov.w	ip, #1
 800bf4c:	3201      	adds	r2, #1
 800bf4e:	fa0c fc0e 	lsl.w	ip, ip, lr
 800bf52:	ea4c 0000 	orr.w	r0, ip, r0
 800bf56:	6070      	str	r0, [r6, #4]
 800bf58:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800bf5c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800bf60:	3808      	subs	r0, #8
 800bf62:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800bf66:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800bf6a:	f8cc 400c 	str.w	r4, [ip, #12]
 800bf6e:	1098      	asrs	r0, r3, #2
 800bf70:	2201      	movs	r2, #1
 800bf72:	4082      	lsls	r2, r0
 800bf74:	6870      	ldr	r0, [r6, #4]
 800bf76:	4290      	cmp	r0, r2
 800bf78:	d326      	bcc.n	800bfc8 <_malloc_r+0x1c0>
 800bf7a:	4210      	tst	r0, r2
 800bf7c:	d106      	bne.n	800bf8c <_malloc_r+0x184>
 800bf7e:	f023 0303 	bic.w	r3, r3, #3
 800bf82:	0052      	lsls	r2, r2, #1
 800bf84:	4210      	tst	r0, r2
 800bf86:	f103 0304 	add.w	r3, r3, #4
 800bf8a:	d0fa      	beq.n	800bf82 <_malloc_r+0x17a>
 800bf8c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800bf90:	46c1      	mov	r9, r8
 800bf92:	469e      	mov	lr, r3
 800bf94:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800bf98:	454c      	cmp	r4, r9
 800bf9a:	f040 80b9 	bne.w	800c110 <_malloc_r+0x308>
 800bf9e:	f10e 0e01 	add.w	lr, lr, #1
 800bfa2:	f01e 0f03 	tst.w	lr, #3
 800bfa6:	f109 0908 	add.w	r9, r9, #8
 800bfaa:	d1f3      	bne.n	800bf94 <_malloc_r+0x18c>
 800bfac:	0798      	lsls	r0, r3, #30
 800bfae:	f040 80e3 	bne.w	800c178 <_malloc_r+0x370>
 800bfb2:	6873      	ldr	r3, [r6, #4]
 800bfb4:	ea23 0302 	bic.w	r3, r3, r2
 800bfb8:	6073      	str	r3, [r6, #4]
 800bfba:	6870      	ldr	r0, [r6, #4]
 800bfbc:	0052      	lsls	r2, r2, #1
 800bfbe:	4290      	cmp	r0, r2
 800bfc0:	d302      	bcc.n	800bfc8 <_malloc_r+0x1c0>
 800bfc2:	2a00      	cmp	r2, #0
 800bfc4:	f040 80e5 	bne.w	800c192 <_malloc_r+0x38a>
 800bfc8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800bfcc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bfd0:	f023 0903 	bic.w	r9, r3, #3
 800bfd4:	45b9      	cmp	r9, r7
 800bfd6:	d304      	bcc.n	800bfe2 <_malloc_r+0x1da>
 800bfd8:	eba9 0207 	sub.w	r2, r9, r7
 800bfdc:	2a0f      	cmp	r2, #15
 800bfde:	f300 8141 	bgt.w	800c264 <_malloc_r+0x45c>
 800bfe2:	4b46      	ldr	r3, [pc, #280]	; (800c0fc <_malloc_r+0x2f4>)
 800bfe4:	6819      	ldr	r1, [r3, #0]
 800bfe6:	3110      	adds	r1, #16
 800bfe8:	4439      	add	r1, r7
 800bfea:	2008      	movs	r0, #8
 800bfec:	9101      	str	r1, [sp, #4]
 800bfee:	f002 f903 	bl	800e1f8 <sysconf>
 800bff2:	4a43      	ldr	r2, [pc, #268]	; (800c100 <_malloc_r+0x2f8>)
 800bff4:	9901      	ldr	r1, [sp, #4]
 800bff6:	6813      	ldr	r3, [r2, #0]
 800bff8:	3301      	adds	r3, #1
 800bffa:	bf1f      	itttt	ne
 800bffc:	f101 31ff 	addne.w	r1, r1, #4294967295
 800c000:	1809      	addne	r1, r1, r0
 800c002:	4243      	negne	r3, r0
 800c004:	4019      	andne	r1, r3
 800c006:	4680      	mov	r8, r0
 800c008:	4628      	mov	r0, r5
 800c00a:	9101      	str	r1, [sp, #4]
 800c00c:	f002 f8d0 	bl	800e1b0 <_sbrk_r>
 800c010:	1c42      	adds	r2, r0, #1
 800c012:	eb0a 0b09 	add.w	fp, sl, r9
 800c016:	4604      	mov	r4, r0
 800c018:	f000 80f7 	beq.w	800c20a <_malloc_r+0x402>
 800c01c:	4583      	cmp	fp, r0
 800c01e:	9901      	ldr	r1, [sp, #4]
 800c020:	4a37      	ldr	r2, [pc, #220]	; (800c100 <_malloc_r+0x2f8>)
 800c022:	d902      	bls.n	800c02a <_malloc_r+0x222>
 800c024:	45b2      	cmp	sl, r6
 800c026:	f040 80f0 	bne.w	800c20a <_malloc_r+0x402>
 800c02a:	4b36      	ldr	r3, [pc, #216]	; (800c104 <_malloc_r+0x2fc>)
 800c02c:	6818      	ldr	r0, [r3, #0]
 800c02e:	45a3      	cmp	fp, r4
 800c030:	eb00 0e01 	add.w	lr, r0, r1
 800c034:	f8c3 e000 	str.w	lr, [r3]
 800c038:	f108 3cff 	add.w	ip, r8, #4294967295
 800c03c:	f040 80ab 	bne.w	800c196 <_malloc_r+0x38e>
 800c040:	ea1b 0f0c 	tst.w	fp, ip
 800c044:	f040 80a7 	bne.w	800c196 <_malloc_r+0x38e>
 800c048:	68b2      	ldr	r2, [r6, #8]
 800c04a:	4449      	add	r1, r9
 800c04c:	f041 0101 	orr.w	r1, r1, #1
 800c050:	6051      	str	r1, [r2, #4]
 800c052:	4a2d      	ldr	r2, [pc, #180]	; (800c108 <_malloc_r+0x300>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	6811      	ldr	r1, [r2, #0]
 800c058:	428b      	cmp	r3, r1
 800c05a:	bf88      	it	hi
 800c05c:	6013      	strhi	r3, [r2, #0]
 800c05e:	4a2b      	ldr	r2, [pc, #172]	; (800c10c <_malloc_r+0x304>)
 800c060:	6811      	ldr	r1, [r2, #0]
 800c062:	428b      	cmp	r3, r1
 800c064:	bf88      	it	hi
 800c066:	6013      	strhi	r3, [r2, #0]
 800c068:	e0cf      	b.n	800c20a <_malloc_r+0x402>
 800c06a:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800c06e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800c072:	d218      	bcs.n	800c0a6 <_malloc_r+0x29e>
 800c074:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800c078:	3238      	adds	r2, #56	; 0x38
 800c07a:	f102 0e01 	add.w	lr, r2, #1
 800c07e:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800c082:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800c086:	45f0      	cmp	r8, lr
 800c088:	d12b      	bne.n	800c0e2 <_malloc_r+0x2da>
 800c08a:	1092      	asrs	r2, r2, #2
 800c08c:	f04f 0c01 	mov.w	ip, #1
 800c090:	fa0c f202 	lsl.w	r2, ip, r2
 800c094:	4302      	orrs	r2, r0
 800c096:	6072      	str	r2, [r6, #4]
 800c098:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800c09c:	f8c8 4008 	str.w	r4, [r8, #8]
 800c0a0:	f8ce 400c 	str.w	r4, [lr, #12]
 800c0a4:	e763      	b.n	800bf6e <_malloc_r+0x166>
 800c0a6:	2a14      	cmp	r2, #20
 800c0a8:	d801      	bhi.n	800c0ae <_malloc_r+0x2a6>
 800c0aa:	325b      	adds	r2, #91	; 0x5b
 800c0ac:	e7e5      	b.n	800c07a <_malloc_r+0x272>
 800c0ae:	2a54      	cmp	r2, #84	; 0x54
 800c0b0:	d803      	bhi.n	800c0ba <_malloc_r+0x2b2>
 800c0b2:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800c0b6:	326e      	adds	r2, #110	; 0x6e
 800c0b8:	e7df      	b.n	800c07a <_malloc_r+0x272>
 800c0ba:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c0be:	d803      	bhi.n	800c0c8 <_malloc_r+0x2c0>
 800c0c0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800c0c4:	3277      	adds	r2, #119	; 0x77
 800c0c6:	e7d8      	b.n	800c07a <_malloc_r+0x272>
 800c0c8:	f240 5e54 	movw	lr, #1364	; 0x554
 800c0cc:	4572      	cmp	r2, lr
 800c0ce:	bf9a      	itte	ls
 800c0d0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800c0d4:	327c      	addls	r2, #124	; 0x7c
 800c0d6:	227e      	movhi	r2, #126	; 0x7e
 800c0d8:	e7cf      	b.n	800c07a <_malloc_r+0x272>
 800c0da:	f8de e008 	ldr.w	lr, [lr, #8]
 800c0de:	45f0      	cmp	r8, lr
 800c0e0:	d005      	beq.n	800c0ee <_malloc_r+0x2e6>
 800c0e2:	f8de 2004 	ldr.w	r2, [lr, #4]
 800c0e6:	f022 0203 	bic.w	r2, r2, #3
 800c0ea:	4562      	cmp	r2, ip
 800c0ec:	d8f5      	bhi.n	800c0da <_malloc_r+0x2d2>
 800c0ee:	f8de 800c 	ldr.w	r8, [lr, #12]
 800c0f2:	e7d1      	b.n	800c098 <_malloc_r+0x290>
 800c0f4:	20000440 	.word	0x20000440
 800c0f8:	20000448 	.word	0x20000448
 800c0fc:	200081ec 	.word	0x200081ec
 800c100:	20000848 	.word	0x20000848
 800c104:	200081bc 	.word	0x200081bc
 800c108:	200081e4 	.word	0x200081e4
 800c10c:	200081e8 	.word	0x200081e8
 800c110:	6860      	ldr	r0, [r4, #4]
 800c112:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800c116:	f020 0003 	bic.w	r0, r0, #3
 800c11a:	eba0 0a07 	sub.w	sl, r0, r7
 800c11e:	f1ba 0f0f 	cmp.w	sl, #15
 800c122:	dd12      	ble.n	800c14a <_malloc_r+0x342>
 800c124:	68a3      	ldr	r3, [r4, #8]
 800c126:	19e2      	adds	r2, r4, r7
 800c128:	f047 0701 	orr.w	r7, r7, #1
 800c12c:	6067      	str	r7, [r4, #4]
 800c12e:	f8c3 c00c 	str.w	ip, [r3, #12]
 800c132:	f8cc 3008 	str.w	r3, [ip, #8]
 800c136:	f04a 0301 	orr.w	r3, sl, #1
 800c13a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800c13e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800c142:	6053      	str	r3, [r2, #4]
 800c144:	f844 a000 	str.w	sl, [r4, r0]
 800c148:	e68f      	b.n	800be6a <_malloc_r+0x62>
 800c14a:	f1ba 0f00 	cmp.w	sl, #0
 800c14e:	db11      	blt.n	800c174 <_malloc_r+0x36c>
 800c150:	4420      	add	r0, r4
 800c152:	6843      	ldr	r3, [r0, #4]
 800c154:	f043 0301 	orr.w	r3, r3, #1
 800c158:	6043      	str	r3, [r0, #4]
 800c15a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800c15e:	4628      	mov	r0, r5
 800c160:	f8c3 c00c 	str.w	ip, [r3, #12]
 800c164:	f8cc 3008 	str.w	r3, [ip, #8]
 800c168:	f000 f8a0 	bl	800c2ac <__malloc_unlock>
 800c16c:	4620      	mov	r0, r4
 800c16e:	b003      	add	sp, #12
 800c170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c174:	4664      	mov	r4, ip
 800c176:	e70f      	b.n	800bf98 <_malloc_r+0x190>
 800c178:	f858 0908 	ldr.w	r0, [r8], #-8
 800c17c:	4540      	cmp	r0, r8
 800c17e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c182:	f43f af13 	beq.w	800bfac <_malloc_r+0x1a4>
 800c186:	e718      	b.n	800bfba <_malloc_r+0x1b2>
 800c188:	3304      	adds	r3, #4
 800c18a:	0052      	lsls	r2, r2, #1
 800c18c:	4210      	tst	r0, r2
 800c18e:	d0fb      	beq.n	800c188 <_malloc_r+0x380>
 800c190:	e6fc      	b.n	800bf8c <_malloc_r+0x184>
 800c192:	4673      	mov	r3, lr
 800c194:	e7fa      	b.n	800c18c <_malloc_r+0x384>
 800c196:	6810      	ldr	r0, [r2, #0]
 800c198:	3001      	adds	r0, #1
 800c19a:	bf1b      	ittet	ne
 800c19c:	eba4 0b0b 	subne.w	fp, r4, fp
 800c1a0:	eb0b 020e 	addne.w	r2, fp, lr
 800c1a4:	6014      	streq	r4, [r2, #0]
 800c1a6:	601a      	strne	r2, [r3, #0]
 800c1a8:	f014 0b07 	ands.w	fp, r4, #7
 800c1ac:	bf1a      	itte	ne
 800c1ae:	f1cb 0008 	rsbne	r0, fp, #8
 800c1b2:	1824      	addne	r4, r4, r0
 800c1b4:	4658      	moveq	r0, fp
 800c1b6:	1862      	adds	r2, r4, r1
 800c1b8:	ea02 010c 	and.w	r1, r2, ip
 800c1bc:	4480      	add	r8, r0
 800c1be:	eba8 0801 	sub.w	r8, r8, r1
 800c1c2:	ea08 080c 	and.w	r8, r8, ip
 800c1c6:	4641      	mov	r1, r8
 800c1c8:	4628      	mov	r0, r5
 800c1ca:	9201      	str	r2, [sp, #4]
 800c1cc:	f001 fff0 	bl	800e1b0 <_sbrk_r>
 800c1d0:	1c43      	adds	r3, r0, #1
 800c1d2:	9a01      	ldr	r2, [sp, #4]
 800c1d4:	4b28      	ldr	r3, [pc, #160]	; (800c278 <_malloc_r+0x470>)
 800c1d6:	d107      	bne.n	800c1e8 <_malloc_r+0x3e0>
 800c1d8:	f1bb 0f00 	cmp.w	fp, #0
 800c1dc:	d023      	beq.n	800c226 <_malloc_r+0x41e>
 800c1de:	f1ab 0008 	sub.w	r0, fp, #8
 800c1e2:	4410      	add	r0, r2
 800c1e4:	f04f 0800 	mov.w	r8, #0
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	60b4      	str	r4, [r6, #8]
 800c1ec:	1b00      	subs	r0, r0, r4
 800c1ee:	4440      	add	r0, r8
 800c1f0:	4442      	add	r2, r8
 800c1f2:	f040 0001 	orr.w	r0, r0, #1
 800c1f6:	45b2      	cmp	sl, r6
 800c1f8:	601a      	str	r2, [r3, #0]
 800c1fa:	6060      	str	r0, [r4, #4]
 800c1fc:	f43f af29 	beq.w	800c052 <_malloc_r+0x24a>
 800c200:	f1b9 0f0f 	cmp.w	r9, #15
 800c204:	d812      	bhi.n	800c22c <_malloc_r+0x424>
 800c206:	2301      	movs	r3, #1
 800c208:	6063      	str	r3, [r4, #4]
 800c20a:	68b3      	ldr	r3, [r6, #8]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	f023 0303 	bic.w	r3, r3, #3
 800c212:	42bb      	cmp	r3, r7
 800c214:	eba3 0207 	sub.w	r2, r3, r7
 800c218:	d301      	bcc.n	800c21e <_malloc_r+0x416>
 800c21a:	2a0f      	cmp	r2, #15
 800c21c:	dc22      	bgt.n	800c264 <_malloc_r+0x45c>
 800c21e:	4628      	mov	r0, r5
 800c220:	f000 f844 	bl	800c2ac <__malloc_unlock>
 800c224:	e5fc      	b.n	800be20 <_malloc_r+0x18>
 800c226:	4610      	mov	r0, r2
 800c228:	46d8      	mov	r8, fp
 800c22a:	e7dd      	b.n	800c1e8 <_malloc_r+0x3e0>
 800c22c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800c230:	f1a9 090c 	sub.w	r9, r9, #12
 800c234:	f029 0907 	bic.w	r9, r9, #7
 800c238:	f002 0201 	and.w	r2, r2, #1
 800c23c:	ea42 0209 	orr.w	r2, r2, r9
 800c240:	f8ca 2004 	str.w	r2, [sl, #4]
 800c244:	2105      	movs	r1, #5
 800c246:	eb0a 0209 	add.w	r2, sl, r9
 800c24a:	f1b9 0f0f 	cmp.w	r9, #15
 800c24e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800c252:	f67f aefe 	bls.w	800c052 <_malloc_r+0x24a>
 800c256:	f10a 0108 	add.w	r1, sl, #8
 800c25a:	4628      	mov	r0, r5
 800c25c:	f7ff f9bc 	bl	800b5d8 <_free_r>
 800c260:	4b05      	ldr	r3, [pc, #20]	; (800c278 <_malloc_r+0x470>)
 800c262:	e6f6      	b.n	800c052 <_malloc_r+0x24a>
 800c264:	68b4      	ldr	r4, [r6, #8]
 800c266:	f047 0301 	orr.w	r3, r7, #1
 800c26a:	4427      	add	r7, r4
 800c26c:	f042 0201 	orr.w	r2, r2, #1
 800c270:	6063      	str	r3, [r4, #4]
 800c272:	60b7      	str	r7, [r6, #8]
 800c274:	607a      	str	r2, [r7, #4]
 800c276:	e5f8      	b.n	800be6a <_malloc_r+0x62>
 800c278:	200081bc 	.word	0x200081bc

0800c27c <__ascii_mbtowc>:
 800c27c:	b082      	sub	sp, #8
 800c27e:	b901      	cbnz	r1, 800c282 <__ascii_mbtowc+0x6>
 800c280:	a901      	add	r1, sp, #4
 800c282:	b142      	cbz	r2, 800c296 <__ascii_mbtowc+0x1a>
 800c284:	b14b      	cbz	r3, 800c29a <__ascii_mbtowc+0x1e>
 800c286:	7813      	ldrb	r3, [r2, #0]
 800c288:	600b      	str	r3, [r1, #0]
 800c28a:	7812      	ldrb	r2, [r2, #0]
 800c28c:	1e10      	subs	r0, r2, #0
 800c28e:	bf18      	it	ne
 800c290:	2001      	movne	r0, #1
 800c292:	b002      	add	sp, #8
 800c294:	4770      	bx	lr
 800c296:	4610      	mov	r0, r2
 800c298:	e7fb      	b.n	800c292 <__ascii_mbtowc+0x16>
 800c29a:	f06f 0001 	mvn.w	r0, #1
 800c29e:	e7f8      	b.n	800c292 <__ascii_mbtowc+0x16>

0800c2a0 <__malloc_lock>:
 800c2a0:	4801      	ldr	r0, [pc, #4]	; (800c2a8 <__malloc_lock+0x8>)
 800c2a2:	f7ff b91d 	b.w	800b4e0 <__retarget_lock_acquire_recursive>
 800c2a6:	bf00      	nop
 800c2a8:	200081b5 	.word	0x200081b5

0800c2ac <__malloc_unlock>:
 800c2ac:	4801      	ldr	r0, [pc, #4]	; (800c2b4 <__malloc_unlock+0x8>)
 800c2ae:	f7ff b918 	b.w	800b4e2 <__retarget_lock_release_recursive>
 800c2b2:	bf00      	nop
 800c2b4:	200081b5 	.word	0x200081b5

0800c2b8 <_Balloc>:
 800c2b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c2ba:	b570      	push	{r4, r5, r6, lr}
 800c2bc:	4605      	mov	r5, r0
 800c2be:	460c      	mov	r4, r1
 800c2c0:	b17b      	cbz	r3, 800c2e2 <_Balloc+0x2a>
 800c2c2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800c2c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c2c8:	b9a0      	cbnz	r0, 800c2f4 <_Balloc+0x3c>
 800c2ca:	2101      	movs	r1, #1
 800c2cc:	fa01 f604 	lsl.w	r6, r1, r4
 800c2d0:	1d72      	adds	r2, r6, #5
 800c2d2:	0092      	lsls	r2, r2, #2
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	f002 f831 	bl	800e33c <_calloc_r>
 800c2da:	b148      	cbz	r0, 800c2f0 <_Balloc+0x38>
 800c2dc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800c2e0:	e00b      	b.n	800c2fa <_Balloc+0x42>
 800c2e2:	2221      	movs	r2, #33	; 0x21
 800c2e4:	2104      	movs	r1, #4
 800c2e6:	f002 f829 	bl	800e33c <_calloc_r>
 800c2ea:	6468      	str	r0, [r5, #68]	; 0x44
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d1e8      	bne.n	800c2c2 <_Balloc+0xa>
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	bd70      	pop	{r4, r5, r6, pc}
 800c2f4:	6802      	ldr	r2, [r0, #0]
 800c2f6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c300:	e7f7      	b.n	800c2f2 <_Balloc+0x3a>

0800c302 <_Bfree>:
 800c302:	b131      	cbz	r1, 800c312 <_Bfree+0x10>
 800c304:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c306:	684a      	ldr	r2, [r1, #4]
 800c308:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c30c:	6008      	str	r0, [r1, #0]
 800c30e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c312:	4770      	bx	lr

0800c314 <__multadd>:
 800c314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c318:	690d      	ldr	r5, [r1, #16]
 800c31a:	4607      	mov	r7, r0
 800c31c:	460c      	mov	r4, r1
 800c31e:	461e      	mov	r6, r3
 800c320:	f101 0c14 	add.w	ip, r1, #20
 800c324:	2000      	movs	r0, #0
 800c326:	f8dc 3000 	ldr.w	r3, [ip]
 800c32a:	b299      	uxth	r1, r3
 800c32c:	fb02 6101 	mla	r1, r2, r1, r6
 800c330:	0c1e      	lsrs	r6, r3, #16
 800c332:	0c0b      	lsrs	r3, r1, #16
 800c334:	fb02 3306 	mla	r3, r2, r6, r3
 800c338:	b289      	uxth	r1, r1
 800c33a:	3001      	adds	r0, #1
 800c33c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c340:	4285      	cmp	r5, r0
 800c342:	f84c 1b04 	str.w	r1, [ip], #4
 800c346:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c34a:	dcec      	bgt.n	800c326 <__multadd+0x12>
 800c34c:	b30e      	cbz	r6, 800c392 <__multadd+0x7e>
 800c34e:	68a3      	ldr	r3, [r4, #8]
 800c350:	42ab      	cmp	r3, r5
 800c352:	dc19      	bgt.n	800c388 <__multadd+0x74>
 800c354:	6861      	ldr	r1, [r4, #4]
 800c356:	4638      	mov	r0, r7
 800c358:	3101      	adds	r1, #1
 800c35a:	f7ff ffad 	bl	800c2b8 <_Balloc>
 800c35e:	4680      	mov	r8, r0
 800c360:	b928      	cbnz	r0, 800c36e <__multadd+0x5a>
 800c362:	4602      	mov	r2, r0
 800c364:	4b0c      	ldr	r3, [pc, #48]	; (800c398 <__multadd+0x84>)
 800c366:	480d      	ldr	r0, [pc, #52]	; (800c39c <__multadd+0x88>)
 800c368:	21ba      	movs	r1, #186	; 0xba
 800c36a:	f001 ffc9 	bl	800e300 <__assert_func>
 800c36e:	6922      	ldr	r2, [r4, #16]
 800c370:	3202      	adds	r2, #2
 800c372:	f104 010c 	add.w	r1, r4, #12
 800c376:	0092      	lsls	r2, r2, #2
 800c378:	300c      	adds	r0, #12
 800c37a:	f7ff f8b3 	bl	800b4e4 <memcpy>
 800c37e:	4621      	mov	r1, r4
 800c380:	4638      	mov	r0, r7
 800c382:	f7ff ffbe 	bl	800c302 <_Bfree>
 800c386:	4644      	mov	r4, r8
 800c388:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c38c:	3501      	adds	r5, #1
 800c38e:	615e      	str	r6, [r3, #20]
 800c390:	6125      	str	r5, [r4, #16]
 800c392:	4620      	mov	r0, r4
 800c394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c398:	08012631 	.word	0x08012631
 800c39c:	080126a2 	.word	0x080126a2

0800c3a0 <__s2b>:
 800c3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	4615      	mov	r5, r2
 800c3a8:	461f      	mov	r7, r3
 800c3aa:	2209      	movs	r2, #9
 800c3ac:	3308      	adds	r3, #8
 800c3ae:	4606      	mov	r6, r0
 800c3b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	db09      	blt.n	800c3d0 <__s2b+0x30>
 800c3bc:	4630      	mov	r0, r6
 800c3be:	f7ff ff7b 	bl	800c2b8 <_Balloc>
 800c3c2:	b940      	cbnz	r0, 800c3d6 <__s2b+0x36>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	4b19      	ldr	r3, [pc, #100]	; (800c42c <__s2b+0x8c>)
 800c3c8:	4819      	ldr	r0, [pc, #100]	; (800c430 <__s2b+0x90>)
 800c3ca:	21d3      	movs	r1, #211	; 0xd3
 800c3cc:	f001 ff98 	bl	800e300 <__assert_func>
 800c3d0:	0052      	lsls	r2, r2, #1
 800c3d2:	3101      	adds	r1, #1
 800c3d4:	e7f0      	b.n	800c3b8 <__s2b+0x18>
 800c3d6:	9b08      	ldr	r3, [sp, #32]
 800c3d8:	6143      	str	r3, [r0, #20]
 800c3da:	2d09      	cmp	r5, #9
 800c3dc:	f04f 0301 	mov.w	r3, #1
 800c3e0:	6103      	str	r3, [r0, #16]
 800c3e2:	dd16      	ble.n	800c412 <__s2b+0x72>
 800c3e4:	f104 0909 	add.w	r9, r4, #9
 800c3e8:	46c8      	mov	r8, r9
 800c3ea:	442c      	add	r4, r5
 800c3ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c3f0:	4601      	mov	r1, r0
 800c3f2:	3b30      	subs	r3, #48	; 0x30
 800c3f4:	220a      	movs	r2, #10
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	f7ff ff8c 	bl	800c314 <__multadd>
 800c3fc:	45a0      	cmp	r8, r4
 800c3fe:	d1f5      	bne.n	800c3ec <__s2b+0x4c>
 800c400:	f1a5 0408 	sub.w	r4, r5, #8
 800c404:	444c      	add	r4, r9
 800c406:	1b2d      	subs	r5, r5, r4
 800c408:	1963      	adds	r3, r4, r5
 800c40a:	42bb      	cmp	r3, r7
 800c40c:	db04      	blt.n	800c418 <__s2b+0x78>
 800c40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c412:	340a      	adds	r4, #10
 800c414:	2509      	movs	r5, #9
 800c416:	e7f6      	b.n	800c406 <__s2b+0x66>
 800c418:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c41c:	4601      	mov	r1, r0
 800c41e:	3b30      	subs	r3, #48	; 0x30
 800c420:	220a      	movs	r2, #10
 800c422:	4630      	mov	r0, r6
 800c424:	f7ff ff76 	bl	800c314 <__multadd>
 800c428:	e7ee      	b.n	800c408 <__s2b+0x68>
 800c42a:	bf00      	nop
 800c42c:	08012631 	.word	0x08012631
 800c430:	080126a2 	.word	0x080126a2

0800c434 <__hi0bits>:
 800c434:	0c03      	lsrs	r3, r0, #16
 800c436:	041b      	lsls	r3, r3, #16
 800c438:	b9d3      	cbnz	r3, 800c470 <__hi0bits+0x3c>
 800c43a:	0400      	lsls	r0, r0, #16
 800c43c:	2310      	movs	r3, #16
 800c43e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c442:	bf04      	itt	eq
 800c444:	0200      	lsleq	r0, r0, #8
 800c446:	3308      	addeq	r3, #8
 800c448:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c44c:	bf04      	itt	eq
 800c44e:	0100      	lsleq	r0, r0, #4
 800c450:	3304      	addeq	r3, #4
 800c452:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c456:	bf04      	itt	eq
 800c458:	0080      	lsleq	r0, r0, #2
 800c45a:	3302      	addeq	r3, #2
 800c45c:	2800      	cmp	r0, #0
 800c45e:	db05      	blt.n	800c46c <__hi0bits+0x38>
 800c460:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c464:	f103 0301 	add.w	r3, r3, #1
 800c468:	bf08      	it	eq
 800c46a:	2320      	moveq	r3, #32
 800c46c:	4618      	mov	r0, r3
 800c46e:	4770      	bx	lr
 800c470:	2300      	movs	r3, #0
 800c472:	e7e4      	b.n	800c43e <__hi0bits+0xa>

0800c474 <__lo0bits>:
 800c474:	6803      	ldr	r3, [r0, #0]
 800c476:	f013 0207 	ands.w	r2, r3, #7
 800c47a:	d00c      	beq.n	800c496 <__lo0bits+0x22>
 800c47c:	07d9      	lsls	r1, r3, #31
 800c47e:	d422      	bmi.n	800c4c6 <__lo0bits+0x52>
 800c480:	079a      	lsls	r2, r3, #30
 800c482:	bf49      	itett	mi
 800c484:	085b      	lsrmi	r3, r3, #1
 800c486:	089b      	lsrpl	r3, r3, #2
 800c488:	6003      	strmi	r3, [r0, #0]
 800c48a:	2201      	movmi	r2, #1
 800c48c:	bf5c      	itt	pl
 800c48e:	6003      	strpl	r3, [r0, #0]
 800c490:	2202      	movpl	r2, #2
 800c492:	4610      	mov	r0, r2
 800c494:	4770      	bx	lr
 800c496:	b299      	uxth	r1, r3
 800c498:	b909      	cbnz	r1, 800c49e <__lo0bits+0x2a>
 800c49a:	0c1b      	lsrs	r3, r3, #16
 800c49c:	2210      	movs	r2, #16
 800c49e:	b2d9      	uxtb	r1, r3
 800c4a0:	b909      	cbnz	r1, 800c4a6 <__lo0bits+0x32>
 800c4a2:	3208      	adds	r2, #8
 800c4a4:	0a1b      	lsrs	r3, r3, #8
 800c4a6:	0719      	lsls	r1, r3, #28
 800c4a8:	bf04      	itt	eq
 800c4aa:	091b      	lsreq	r3, r3, #4
 800c4ac:	3204      	addeq	r2, #4
 800c4ae:	0799      	lsls	r1, r3, #30
 800c4b0:	bf04      	itt	eq
 800c4b2:	089b      	lsreq	r3, r3, #2
 800c4b4:	3202      	addeq	r2, #2
 800c4b6:	07d9      	lsls	r1, r3, #31
 800c4b8:	d403      	bmi.n	800c4c2 <__lo0bits+0x4e>
 800c4ba:	085b      	lsrs	r3, r3, #1
 800c4bc:	f102 0201 	add.w	r2, r2, #1
 800c4c0:	d003      	beq.n	800c4ca <__lo0bits+0x56>
 800c4c2:	6003      	str	r3, [r0, #0]
 800c4c4:	e7e5      	b.n	800c492 <__lo0bits+0x1e>
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	e7e3      	b.n	800c492 <__lo0bits+0x1e>
 800c4ca:	2220      	movs	r2, #32
 800c4cc:	e7e1      	b.n	800c492 <__lo0bits+0x1e>
	...

0800c4d0 <__i2b>:
 800c4d0:	b510      	push	{r4, lr}
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	2101      	movs	r1, #1
 800c4d6:	f7ff feef 	bl	800c2b8 <_Balloc>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	b928      	cbnz	r0, 800c4ea <__i2b+0x1a>
 800c4de:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <__i2b+0x24>)
 800c4e0:	4805      	ldr	r0, [pc, #20]	; (800c4f8 <__i2b+0x28>)
 800c4e2:	f240 1145 	movw	r1, #325	; 0x145
 800c4e6:	f001 ff0b 	bl	800e300 <__assert_func>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	6144      	str	r4, [r0, #20]
 800c4ee:	6103      	str	r3, [r0, #16]
 800c4f0:	bd10      	pop	{r4, pc}
 800c4f2:	bf00      	nop
 800c4f4:	08012631 	.word	0x08012631
 800c4f8:	080126a2 	.word	0x080126a2

0800c4fc <__multiply>:
 800c4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c500:	4691      	mov	r9, r2
 800c502:	690a      	ldr	r2, [r1, #16]
 800c504:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c508:	429a      	cmp	r2, r3
 800c50a:	bfb8      	it	lt
 800c50c:	460b      	movlt	r3, r1
 800c50e:	460c      	mov	r4, r1
 800c510:	bfbc      	itt	lt
 800c512:	464c      	movlt	r4, r9
 800c514:	4699      	movlt	r9, r3
 800c516:	6927      	ldr	r7, [r4, #16]
 800c518:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c51c:	68a3      	ldr	r3, [r4, #8]
 800c51e:	6861      	ldr	r1, [r4, #4]
 800c520:	eb07 060a 	add.w	r6, r7, sl
 800c524:	42b3      	cmp	r3, r6
 800c526:	b085      	sub	sp, #20
 800c528:	bfb8      	it	lt
 800c52a:	3101      	addlt	r1, #1
 800c52c:	f7ff fec4 	bl	800c2b8 <_Balloc>
 800c530:	b930      	cbnz	r0, 800c540 <__multiply+0x44>
 800c532:	4602      	mov	r2, r0
 800c534:	4b44      	ldr	r3, [pc, #272]	; (800c648 <__multiply+0x14c>)
 800c536:	4845      	ldr	r0, [pc, #276]	; (800c64c <__multiply+0x150>)
 800c538:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c53c:	f001 fee0 	bl	800e300 <__assert_func>
 800c540:	f100 0514 	add.w	r5, r0, #20
 800c544:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c548:	462b      	mov	r3, r5
 800c54a:	2200      	movs	r2, #0
 800c54c:	4543      	cmp	r3, r8
 800c54e:	d321      	bcc.n	800c594 <__multiply+0x98>
 800c550:	f104 0314 	add.w	r3, r4, #20
 800c554:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c558:	f109 0314 	add.w	r3, r9, #20
 800c55c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c560:	9202      	str	r2, [sp, #8]
 800c562:	1b3a      	subs	r2, r7, r4
 800c564:	3a15      	subs	r2, #21
 800c566:	f022 0203 	bic.w	r2, r2, #3
 800c56a:	3204      	adds	r2, #4
 800c56c:	f104 0115 	add.w	r1, r4, #21
 800c570:	428f      	cmp	r7, r1
 800c572:	bf38      	it	cc
 800c574:	2204      	movcc	r2, #4
 800c576:	9201      	str	r2, [sp, #4]
 800c578:	9a02      	ldr	r2, [sp, #8]
 800c57a:	9303      	str	r3, [sp, #12]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d80c      	bhi.n	800c59a <__multiply+0x9e>
 800c580:	2e00      	cmp	r6, #0
 800c582:	dd03      	ble.n	800c58c <__multiply+0x90>
 800c584:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d05b      	beq.n	800c644 <__multiply+0x148>
 800c58c:	6106      	str	r6, [r0, #16]
 800c58e:	b005      	add	sp, #20
 800c590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c594:	f843 2b04 	str.w	r2, [r3], #4
 800c598:	e7d8      	b.n	800c54c <__multiply+0x50>
 800c59a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c59e:	f1ba 0f00 	cmp.w	sl, #0
 800c5a2:	d024      	beq.n	800c5ee <__multiply+0xf2>
 800c5a4:	f104 0e14 	add.w	lr, r4, #20
 800c5a8:	46a9      	mov	r9, r5
 800c5aa:	f04f 0c00 	mov.w	ip, #0
 800c5ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c5b2:	f8d9 1000 	ldr.w	r1, [r9]
 800c5b6:	fa1f fb82 	uxth.w	fp, r2
 800c5ba:	b289      	uxth	r1, r1
 800c5bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800c5c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c5c4:	f8d9 2000 	ldr.w	r2, [r9]
 800c5c8:	4461      	add	r1, ip
 800c5ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c5ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800c5d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c5d6:	b289      	uxth	r1, r1
 800c5d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c5dc:	4577      	cmp	r7, lr
 800c5de:	f849 1b04 	str.w	r1, [r9], #4
 800c5e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c5e6:	d8e2      	bhi.n	800c5ae <__multiply+0xb2>
 800c5e8:	9a01      	ldr	r2, [sp, #4]
 800c5ea:	f845 c002 	str.w	ip, [r5, r2]
 800c5ee:	9a03      	ldr	r2, [sp, #12]
 800c5f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c5f4:	3304      	adds	r3, #4
 800c5f6:	f1b9 0f00 	cmp.w	r9, #0
 800c5fa:	d021      	beq.n	800c640 <__multiply+0x144>
 800c5fc:	6829      	ldr	r1, [r5, #0]
 800c5fe:	f104 0c14 	add.w	ip, r4, #20
 800c602:	46ae      	mov	lr, r5
 800c604:	f04f 0a00 	mov.w	sl, #0
 800c608:	f8bc b000 	ldrh.w	fp, [ip]
 800c60c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c610:	fb09 220b 	mla	r2, r9, fp, r2
 800c614:	4452      	add	r2, sl
 800c616:	b289      	uxth	r1, r1
 800c618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c61c:	f84e 1b04 	str.w	r1, [lr], #4
 800c620:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c624:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c628:	f8be 1000 	ldrh.w	r1, [lr]
 800c62c:	fb09 110a 	mla	r1, r9, sl, r1
 800c630:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c634:	4567      	cmp	r7, ip
 800c636:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c63a:	d8e5      	bhi.n	800c608 <__multiply+0x10c>
 800c63c:	9a01      	ldr	r2, [sp, #4]
 800c63e:	50a9      	str	r1, [r5, r2]
 800c640:	3504      	adds	r5, #4
 800c642:	e799      	b.n	800c578 <__multiply+0x7c>
 800c644:	3e01      	subs	r6, #1
 800c646:	e79b      	b.n	800c580 <__multiply+0x84>
 800c648:	08012631 	.word	0x08012631
 800c64c:	080126a2 	.word	0x080126a2

0800c650 <__pow5mult>:
 800c650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c654:	4615      	mov	r5, r2
 800c656:	f012 0203 	ands.w	r2, r2, #3
 800c65a:	4606      	mov	r6, r0
 800c65c:	460f      	mov	r7, r1
 800c65e:	d007      	beq.n	800c670 <__pow5mult+0x20>
 800c660:	4c1a      	ldr	r4, [pc, #104]	; (800c6cc <__pow5mult+0x7c>)
 800c662:	3a01      	subs	r2, #1
 800c664:	2300      	movs	r3, #0
 800c666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c66a:	f7ff fe53 	bl	800c314 <__multadd>
 800c66e:	4607      	mov	r7, r0
 800c670:	10ad      	asrs	r5, r5, #2
 800c672:	d027      	beq.n	800c6c4 <__pow5mult+0x74>
 800c674:	6c34      	ldr	r4, [r6, #64]	; 0x40
 800c676:	b944      	cbnz	r4, 800c68a <__pow5mult+0x3a>
 800c678:	f240 2171 	movw	r1, #625	; 0x271
 800c67c:	4630      	mov	r0, r6
 800c67e:	f7ff ff27 	bl	800c4d0 <__i2b>
 800c682:	2300      	movs	r3, #0
 800c684:	6430      	str	r0, [r6, #64]	; 0x40
 800c686:	4604      	mov	r4, r0
 800c688:	6003      	str	r3, [r0, #0]
 800c68a:	f04f 0900 	mov.w	r9, #0
 800c68e:	07eb      	lsls	r3, r5, #31
 800c690:	d50a      	bpl.n	800c6a8 <__pow5mult+0x58>
 800c692:	4639      	mov	r1, r7
 800c694:	4622      	mov	r2, r4
 800c696:	4630      	mov	r0, r6
 800c698:	f7ff ff30 	bl	800c4fc <__multiply>
 800c69c:	4639      	mov	r1, r7
 800c69e:	4680      	mov	r8, r0
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	f7ff fe2e 	bl	800c302 <_Bfree>
 800c6a6:	4647      	mov	r7, r8
 800c6a8:	106d      	asrs	r5, r5, #1
 800c6aa:	d00b      	beq.n	800c6c4 <__pow5mult+0x74>
 800c6ac:	6820      	ldr	r0, [r4, #0]
 800c6ae:	b938      	cbnz	r0, 800c6c0 <__pow5mult+0x70>
 800c6b0:	4622      	mov	r2, r4
 800c6b2:	4621      	mov	r1, r4
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f7ff ff21 	bl	800c4fc <__multiply>
 800c6ba:	6020      	str	r0, [r4, #0]
 800c6bc:	f8c0 9000 	str.w	r9, [r0]
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	e7e4      	b.n	800c68e <__pow5mult+0x3e>
 800c6c4:	4638      	mov	r0, r7
 800c6c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ca:	bf00      	nop
 800c6cc:	080127f0 	.word	0x080127f0

0800c6d0 <__lshift>:
 800c6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d4:	460c      	mov	r4, r1
 800c6d6:	6849      	ldr	r1, [r1, #4]
 800c6d8:	6923      	ldr	r3, [r4, #16]
 800c6da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6de:	68a3      	ldr	r3, [r4, #8]
 800c6e0:	4607      	mov	r7, r0
 800c6e2:	4691      	mov	r9, r2
 800c6e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6e8:	f108 0601 	add.w	r6, r8, #1
 800c6ec:	42b3      	cmp	r3, r6
 800c6ee:	db0b      	blt.n	800c708 <__lshift+0x38>
 800c6f0:	4638      	mov	r0, r7
 800c6f2:	f7ff fde1 	bl	800c2b8 <_Balloc>
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	b948      	cbnz	r0, 800c70e <__lshift+0x3e>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	4b28      	ldr	r3, [pc, #160]	; (800c7a0 <__lshift+0xd0>)
 800c6fe:	4829      	ldr	r0, [pc, #164]	; (800c7a4 <__lshift+0xd4>)
 800c700:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c704:	f001 fdfc 	bl	800e300 <__assert_func>
 800c708:	3101      	adds	r1, #1
 800c70a:	005b      	lsls	r3, r3, #1
 800c70c:	e7ee      	b.n	800c6ec <__lshift+0x1c>
 800c70e:	2300      	movs	r3, #0
 800c710:	f100 0114 	add.w	r1, r0, #20
 800c714:	f100 0210 	add.w	r2, r0, #16
 800c718:	4618      	mov	r0, r3
 800c71a:	4553      	cmp	r3, sl
 800c71c:	db33      	blt.n	800c786 <__lshift+0xb6>
 800c71e:	6920      	ldr	r0, [r4, #16]
 800c720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c724:	f104 0314 	add.w	r3, r4, #20
 800c728:	f019 091f 	ands.w	r9, r9, #31
 800c72c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c730:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c734:	d02b      	beq.n	800c78e <__lshift+0xbe>
 800c736:	f1c9 0e20 	rsb	lr, r9, #32
 800c73a:	468a      	mov	sl, r1
 800c73c:	2200      	movs	r2, #0
 800c73e:	6818      	ldr	r0, [r3, #0]
 800c740:	fa00 f009 	lsl.w	r0, r0, r9
 800c744:	4310      	orrs	r0, r2
 800c746:	f84a 0b04 	str.w	r0, [sl], #4
 800c74a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c74e:	459c      	cmp	ip, r3
 800c750:	fa22 f20e 	lsr.w	r2, r2, lr
 800c754:	d8f3      	bhi.n	800c73e <__lshift+0x6e>
 800c756:	ebac 0304 	sub.w	r3, ip, r4
 800c75a:	3b15      	subs	r3, #21
 800c75c:	f023 0303 	bic.w	r3, r3, #3
 800c760:	3304      	adds	r3, #4
 800c762:	f104 0015 	add.w	r0, r4, #21
 800c766:	4584      	cmp	ip, r0
 800c768:	bf38      	it	cc
 800c76a:	2304      	movcc	r3, #4
 800c76c:	50ca      	str	r2, [r1, r3]
 800c76e:	b10a      	cbz	r2, 800c774 <__lshift+0xa4>
 800c770:	f108 0602 	add.w	r6, r8, #2
 800c774:	3e01      	subs	r6, #1
 800c776:	4638      	mov	r0, r7
 800c778:	612e      	str	r6, [r5, #16]
 800c77a:	4621      	mov	r1, r4
 800c77c:	f7ff fdc1 	bl	800c302 <_Bfree>
 800c780:	4628      	mov	r0, r5
 800c782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c786:	f842 0f04 	str.w	r0, [r2, #4]!
 800c78a:	3301      	adds	r3, #1
 800c78c:	e7c5      	b.n	800c71a <__lshift+0x4a>
 800c78e:	3904      	subs	r1, #4
 800c790:	f853 2b04 	ldr.w	r2, [r3], #4
 800c794:	f841 2f04 	str.w	r2, [r1, #4]!
 800c798:	459c      	cmp	ip, r3
 800c79a:	d8f9      	bhi.n	800c790 <__lshift+0xc0>
 800c79c:	e7ea      	b.n	800c774 <__lshift+0xa4>
 800c79e:	bf00      	nop
 800c7a0:	08012631 	.word	0x08012631
 800c7a4:	080126a2 	.word	0x080126a2

0800c7a8 <__mcmp>:
 800c7a8:	b530      	push	{r4, r5, lr}
 800c7aa:	6902      	ldr	r2, [r0, #16]
 800c7ac:	690c      	ldr	r4, [r1, #16]
 800c7ae:	1b12      	subs	r2, r2, r4
 800c7b0:	d10e      	bne.n	800c7d0 <__mcmp+0x28>
 800c7b2:	f100 0314 	add.w	r3, r0, #20
 800c7b6:	3114      	adds	r1, #20
 800c7b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c7bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c7c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c7c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c7c8:	42a5      	cmp	r5, r4
 800c7ca:	d003      	beq.n	800c7d4 <__mcmp+0x2c>
 800c7cc:	d305      	bcc.n	800c7da <__mcmp+0x32>
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	4610      	mov	r0, r2
 800c7d2:	bd30      	pop	{r4, r5, pc}
 800c7d4:	4283      	cmp	r3, r0
 800c7d6:	d3f3      	bcc.n	800c7c0 <__mcmp+0x18>
 800c7d8:	e7fa      	b.n	800c7d0 <__mcmp+0x28>
 800c7da:	f04f 32ff 	mov.w	r2, #4294967295
 800c7de:	e7f7      	b.n	800c7d0 <__mcmp+0x28>

0800c7e0 <__mdiff>:
 800c7e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e4:	460c      	mov	r4, r1
 800c7e6:	4606      	mov	r6, r0
 800c7e8:	4611      	mov	r1, r2
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	4690      	mov	r8, r2
 800c7ee:	f7ff ffdb 	bl	800c7a8 <__mcmp>
 800c7f2:	1e05      	subs	r5, r0, #0
 800c7f4:	d110      	bne.n	800c818 <__mdiff+0x38>
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	f7ff fd5d 	bl	800c2b8 <_Balloc>
 800c7fe:	b930      	cbnz	r0, 800c80e <__mdiff+0x2e>
 800c800:	4b3a      	ldr	r3, [pc, #232]	; (800c8ec <__mdiff+0x10c>)
 800c802:	4602      	mov	r2, r0
 800c804:	f240 2137 	movw	r1, #567	; 0x237
 800c808:	4839      	ldr	r0, [pc, #228]	; (800c8f0 <__mdiff+0x110>)
 800c80a:	f001 fd79 	bl	800e300 <__assert_func>
 800c80e:	2301      	movs	r3, #1
 800c810:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c818:	bfa4      	itt	ge
 800c81a:	4643      	movge	r3, r8
 800c81c:	46a0      	movge	r8, r4
 800c81e:	4630      	mov	r0, r6
 800c820:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c824:	bfa6      	itte	ge
 800c826:	461c      	movge	r4, r3
 800c828:	2500      	movge	r5, #0
 800c82a:	2501      	movlt	r5, #1
 800c82c:	f7ff fd44 	bl	800c2b8 <_Balloc>
 800c830:	b920      	cbnz	r0, 800c83c <__mdiff+0x5c>
 800c832:	4b2e      	ldr	r3, [pc, #184]	; (800c8ec <__mdiff+0x10c>)
 800c834:	4602      	mov	r2, r0
 800c836:	f240 2145 	movw	r1, #581	; 0x245
 800c83a:	e7e5      	b.n	800c808 <__mdiff+0x28>
 800c83c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c840:	6926      	ldr	r6, [r4, #16]
 800c842:	60c5      	str	r5, [r0, #12]
 800c844:	f104 0914 	add.w	r9, r4, #20
 800c848:	f108 0514 	add.w	r5, r8, #20
 800c84c:	f100 0e14 	add.w	lr, r0, #20
 800c850:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c854:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c858:	f108 0210 	add.w	r2, r8, #16
 800c85c:	46f2      	mov	sl, lr
 800c85e:	2100      	movs	r1, #0
 800c860:	f859 3b04 	ldr.w	r3, [r9], #4
 800c864:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c868:	fa11 f88b 	uxtah	r8, r1, fp
 800c86c:	b299      	uxth	r1, r3
 800c86e:	0c1b      	lsrs	r3, r3, #16
 800c870:	eba8 0801 	sub.w	r8, r8, r1
 800c874:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c878:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c87c:	fa1f f888 	uxth.w	r8, r8
 800c880:	1419      	asrs	r1, r3, #16
 800c882:	454e      	cmp	r6, r9
 800c884:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c888:	f84a 3b04 	str.w	r3, [sl], #4
 800c88c:	d8e8      	bhi.n	800c860 <__mdiff+0x80>
 800c88e:	1b33      	subs	r3, r6, r4
 800c890:	3b15      	subs	r3, #21
 800c892:	f023 0303 	bic.w	r3, r3, #3
 800c896:	3304      	adds	r3, #4
 800c898:	3415      	adds	r4, #21
 800c89a:	42a6      	cmp	r6, r4
 800c89c:	bf38      	it	cc
 800c89e:	2304      	movcc	r3, #4
 800c8a0:	441d      	add	r5, r3
 800c8a2:	4473      	add	r3, lr
 800c8a4:	469e      	mov	lr, r3
 800c8a6:	462e      	mov	r6, r5
 800c8a8:	4566      	cmp	r6, ip
 800c8aa:	d30e      	bcc.n	800c8ca <__mdiff+0xea>
 800c8ac:	f10c 0203 	add.w	r2, ip, #3
 800c8b0:	1b52      	subs	r2, r2, r5
 800c8b2:	f022 0203 	bic.w	r2, r2, #3
 800c8b6:	3d03      	subs	r5, #3
 800c8b8:	45ac      	cmp	ip, r5
 800c8ba:	bf38      	it	cc
 800c8bc:	2200      	movcc	r2, #0
 800c8be:	4413      	add	r3, r2
 800c8c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c8c4:	b17a      	cbz	r2, 800c8e6 <__mdiff+0x106>
 800c8c6:	6107      	str	r7, [r0, #16]
 800c8c8:	e7a4      	b.n	800c814 <__mdiff+0x34>
 800c8ca:	f856 8b04 	ldr.w	r8, [r6], #4
 800c8ce:	fa11 f288 	uxtah	r2, r1, r8
 800c8d2:	1414      	asrs	r4, r2, #16
 800c8d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c8d8:	b292      	uxth	r2, r2
 800c8da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c8de:	f84e 2b04 	str.w	r2, [lr], #4
 800c8e2:	1421      	asrs	r1, r4, #16
 800c8e4:	e7e0      	b.n	800c8a8 <__mdiff+0xc8>
 800c8e6:	3f01      	subs	r7, #1
 800c8e8:	e7ea      	b.n	800c8c0 <__mdiff+0xe0>
 800c8ea:	bf00      	nop
 800c8ec:	08012631 	.word	0x08012631
 800c8f0:	080126a2 	.word	0x080126a2

0800c8f4 <__ulp>:
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	ed8d 0b00 	vstr	d0, [sp]
 800c8fa:	9a01      	ldr	r2, [sp, #4]
 800c8fc:	4b0f      	ldr	r3, [pc, #60]	; (800c93c <__ulp+0x48>)
 800c8fe:	4013      	ands	r3, r2
 800c900:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c904:	2b00      	cmp	r3, #0
 800c906:	dc08      	bgt.n	800c91a <__ulp+0x26>
 800c908:	425b      	negs	r3, r3
 800c90a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c90e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c912:	da04      	bge.n	800c91e <__ulp+0x2a>
 800c914:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c918:	4113      	asrs	r3, r2
 800c91a:	2200      	movs	r2, #0
 800c91c:	e008      	b.n	800c930 <__ulp+0x3c>
 800c91e:	f1a2 0314 	sub.w	r3, r2, #20
 800c922:	2b1e      	cmp	r3, #30
 800c924:	bfda      	itte	le
 800c926:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c92a:	40da      	lsrle	r2, r3
 800c92c:	2201      	movgt	r2, #1
 800c92e:	2300      	movs	r3, #0
 800c930:	4619      	mov	r1, r3
 800c932:	4610      	mov	r0, r2
 800c934:	ec41 0b10 	vmov	d0, r0, r1
 800c938:	b002      	add	sp, #8
 800c93a:	4770      	bx	lr
 800c93c:	7ff00000 	.word	0x7ff00000

0800c940 <__b2d>:
 800c940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c944:	6906      	ldr	r6, [r0, #16]
 800c946:	f100 0814 	add.w	r8, r0, #20
 800c94a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c94e:	1f37      	subs	r7, r6, #4
 800c950:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c954:	4610      	mov	r0, r2
 800c956:	f7ff fd6d 	bl	800c434 <__hi0bits>
 800c95a:	f1c0 0320 	rsb	r3, r0, #32
 800c95e:	280a      	cmp	r0, #10
 800c960:	600b      	str	r3, [r1, #0]
 800c962:	491b      	ldr	r1, [pc, #108]	; (800c9d0 <__b2d+0x90>)
 800c964:	dc15      	bgt.n	800c992 <__b2d+0x52>
 800c966:	f1c0 0c0b 	rsb	ip, r0, #11
 800c96a:	fa22 f30c 	lsr.w	r3, r2, ip
 800c96e:	45b8      	cmp	r8, r7
 800c970:	ea43 0501 	orr.w	r5, r3, r1
 800c974:	bf34      	ite	cc
 800c976:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c97a:	2300      	movcs	r3, #0
 800c97c:	3015      	adds	r0, #21
 800c97e:	fa02 f000 	lsl.w	r0, r2, r0
 800c982:	fa23 f30c 	lsr.w	r3, r3, ip
 800c986:	4303      	orrs	r3, r0
 800c988:	461c      	mov	r4, r3
 800c98a:	ec45 4b10 	vmov	d0, r4, r5
 800c98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c992:	45b8      	cmp	r8, r7
 800c994:	bf3a      	itte	cc
 800c996:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c99a:	f1a6 0708 	subcc.w	r7, r6, #8
 800c99e:	2300      	movcs	r3, #0
 800c9a0:	380b      	subs	r0, #11
 800c9a2:	d012      	beq.n	800c9ca <__b2d+0x8a>
 800c9a4:	f1c0 0120 	rsb	r1, r0, #32
 800c9a8:	fa23 f401 	lsr.w	r4, r3, r1
 800c9ac:	4082      	lsls	r2, r0
 800c9ae:	4322      	orrs	r2, r4
 800c9b0:	4547      	cmp	r7, r8
 800c9b2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c9b6:	bf8c      	ite	hi
 800c9b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c9bc:	2200      	movls	r2, #0
 800c9be:	4083      	lsls	r3, r0
 800c9c0:	40ca      	lsrs	r2, r1
 800c9c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	e7de      	b.n	800c988 <__b2d+0x48>
 800c9ca:	ea42 0501 	orr.w	r5, r2, r1
 800c9ce:	e7db      	b.n	800c988 <__b2d+0x48>
 800c9d0:	3ff00000 	.word	0x3ff00000

0800c9d4 <__d2b>:
 800c9d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9d8:	460f      	mov	r7, r1
 800c9da:	2101      	movs	r1, #1
 800c9dc:	ec59 8b10 	vmov	r8, r9, d0
 800c9e0:	4616      	mov	r6, r2
 800c9e2:	f7ff fc69 	bl	800c2b8 <_Balloc>
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	b930      	cbnz	r0, 800c9f8 <__d2b+0x24>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	4b24      	ldr	r3, [pc, #144]	; (800ca80 <__d2b+0xac>)
 800c9ee:	4825      	ldr	r0, [pc, #148]	; (800ca84 <__d2b+0xb0>)
 800c9f0:	f240 310f 	movw	r1, #783	; 0x30f
 800c9f4:	f001 fc84 	bl	800e300 <__assert_func>
 800c9f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c9fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca00:	bb2d      	cbnz	r5, 800ca4e <__d2b+0x7a>
 800ca02:	9301      	str	r3, [sp, #4]
 800ca04:	f1b8 0300 	subs.w	r3, r8, #0
 800ca08:	d026      	beq.n	800ca58 <__d2b+0x84>
 800ca0a:	4668      	mov	r0, sp
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	f7ff fd31 	bl	800c474 <__lo0bits>
 800ca12:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca16:	b1e8      	cbz	r0, 800ca54 <__d2b+0x80>
 800ca18:	f1c0 0320 	rsb	r3, r0, #32
 800ca1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca20:	430b      	orrs	r3, r1
 800ca22:	40c2      	lsrs	r2, r0
 800ca24:	6163      	str	r3, [r4, #20]
 800ca26:	9201      	str	r2, [sp, #4]
 800ca28:	9b01      	ldr	r3, [sp, #4]
 800ca2a:	61a3      	str	r3, [r4, #24]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	bf14      	ite	ne
 800ca30:	2202      	movne	r2, #2
 800ca32:	2201      	moveq	r2, #1
 800ca34:	6122      	str	r2, [r4, #16]
 800ca36:	b1bd      	cbz	r5, 800ca68 <__d2b+0x94>
 800ca38:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca3c:	4405      	add	r5, r0
 800ca3e:	603d      	str	r5, [r7, #0]
 800ca40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca44:	6030      	str	r0, [r6, #0]
 800ca46:	4620      	mov	r0, r4
 800ca48:	b003      	add	sp, #12
 800ca4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca52:	e7d6      	b.n	800ca02 <__d2b+0x2e>
 800ca54:	6161      	str	r1, [r4, #20]
 800ca56:	e7e7      	b.n	800ca28 <__d2b+0x54>
 800ca58:	a801      	add	r0, sp, #4
 800ca5a:	f7ff fd0b 	bl	800c474 <__lo0bits>
 800ca5e:	9b01      	ldr	r3, [sp, #4]
 800ca60:	6163      	str	r3, [r4, #20]
 800ca62:	3020      	adds	r0, #32
 800ca64:	2201      	movs	r2, #1
 800ca66:	e7e5      	b.n	800ca34 <__d2b+0x60>
 800ca68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca70:	6038      	str	r0, [r7, #0]
 800ca72:	6918      	ldr	r0, [r3, #16]
 800ca74:	f7ff fcde 	bl	800c434 <__hi0bits>
 800ca78:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca7c:	e7e2      	b.n	800ca44 <__d2b+0x70>
 800ca7e:	bf00      	nop
 800ca80:	08012631 	.word	0x08012631
 800ca84:	080126a2 	.word	0x080126a2

0800ca88 <__ratio>:
 800ca88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca8c:	4688      	mov	r8, r1
 800ca8e:	4669      	mov	r1, sp
 800ca90:	4681      	mov	r9, r0
 800ca92:	f7ff ff55 	bl	800c940 <__b2d>
 800ca96:	a901      	add	r1, sp, #4
 800ca98:	4640      	mov	r0, r8
 800ca9a:	ec55 4b10 	vmov	r4, r5, d0
 800ca9e:	f7ff ff4f 	bl	800c940 <__b2d>
 800caa2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800caa6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800caaa:	eba3 0c02 	sub.w	ip, r3, r2
 800caae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cab2:	1a9b      	subs	r3, r3, r2
 800cab4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cab8:	ec51 0b10 	vmov	r0, r1, d0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	bfd6      	itet	le
 800cac0:	460a      	movle	r2, r1
 800cac2:	462a      	movgt	r2, r5
 800cac4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cac8:	468b      	mov	fp, r1
 800caca:	462f      	mov	r7, r5
 800cacc:	bfd4      	ite	le
 800cace:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cad2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cad6:	4620      	mov	r0, r4
 800cad8:	ee10 2a10 	vmov	r2, s0
 800cadc:	465b      	mov	r3, fp
 800cade:	4639      	mov	r1, r7
 800cae0:	f7f3 fecc 	bl	800087c <__aeabi_ddiv>
 800cae4:	ec41 0b10 	vmov	d0, r0, r1
 800cae8:	b003      	add	sp, #12
 800caea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800caee <__copybits>:
 800caee:	3901      	subs	r1, #1
 800caf0:	b570      	push	{r4, r5, r6, lr}
 800caf2:	1149      	asrs	r1, r1, #5
 800caf4:	6914      	ldr	r4, [r2, #16]
 800caf6:	3101      	adds	r1, #1
 800caf8:	f102 0314 	add.w	r3, r2, #20
 800cafc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cb00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cb04:	1f05      	subs	r5, r0, #4
 800cb06:	42a3      	cmp	r3, r4
 800cb08:	d30c      	bcc.n	800cb24 <__copybits+0x36>
 800cb0a:	1aa3      	subs	r3, r4, r2
 800cb0c:	3b11      	subs	r3, #17
 800cb0e:	f023 0303 	bic.w	r3, r3, #3
 800cb12:	3211      	adds	r2, #17
 800cb14:	42a2      	cmp	r2, r4
 800cb16:	bf88      	it	hi
 800cb18:	2300      	movhi	r3, #0
 800cb1a:	4418      	add	r0, r3
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	4288      	cmp	r0, r1
 800cb20:	d305      	bcc.n	800cb2e <__copybits+0x40>
 800cb22:	bd70      	pop	{r4, r5, r6, pc}
 800cb24:	f853 6b04 	ldr.w	r6, [r3], #4
 800cb28:	f845 6f04 	str.w	r6, [r5, #4]!
 800cb2c:	e7eb      	b.n	800cb06 <__copybits+0x18>
 800cb2e:	f840 3b04 	str.w	r3, [r0], #4
 800cb32:	e7f4      	b.n	800cb1e <__copybits+0x30>

0800cb34 <__any_on>:
 800cb34:	f100 0214 	add.w	r2, r0, #20
 800cb38:	6900      	ldr	r0, [r0, #16]
 800cb3a:	114b      	asrs	r3, r1, #5
 800cb3c:	4298      	cmp	r0, r3
 800cb3e:	b510      	push	{r4, lr}
 800cb40:	db11      	blt.n	800cb66 <__any_on+0x32>
 800cb42:	dd0a      	ble.n	800cb5a <__any_on+0x26>
 800cb44:	f011 011f 	ands.w	r1, r1, #31
 800cb48:	d007      	beq.n	800cb5a <__any_on+0x26>
 800cb4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb4e:	fa24 f001 	lsr.w	r0, r4, r1
 800cb52:	fa00 f101 	lsl.w	r1, r0, r1
 800cb56:	428c      	cmp	r4, r1
 800cb58:	d10b      	bne.n	800cb72 <__any_on+0x3e>
 800cb5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d803      	bhi.n	800cb6a <__any_on+0x36>
 800cb62:	2000      	movs	r0, #0
 800cb64:	bd10      	pop	{r4, pc}
 800cb66:	4603      	mov	r3, r0
 800cb68:	e7f7      	b.n	800cb5a <__any_on+0x26>
 800cb6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb6e:	2900      	cmp	r1, #0
 800cb70:	d0f5      	beq.n	800cb5e <__any_on+0x2a>
 800cb72:	2001      	movs	r0, #1
 800cb74:	e7f6      	b.n	800cb64 <__any_on+0x30>

0800cb76 <__ascii_wctomb>:
 800cb76:	b149      	cbz	r1, 800cb8c <__ascii_wctomb+0x16>
 800cb78:	2aff      	cmp	r2, #255	; 0xff
 800cb7a:	bf85      	ittet	hi
 800cb7c:	238a      	movhi	r3, #138	; 0x8a
 800cb7e:	6003      	strhi	r3, [r0, #0]
 800cb80:	700a      	strbls	r2, [r1, #0]
 800cb82:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb86:	bf98      	it	ls
 800cb88:	2001      	movls	r0, #1
 800cb8a:	4770      	bx	lr
 800cb8c:	4608      	mov	r0, r1
 800cb8e:	4770      	bx	lr

0800cb90 <_svfprintf_r>:
 800cb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb94:	ed2d 8b04 	vpush	{d8-d9}
 800cb98:	b0cf      	sub	sp, #316	; 0x13c
 800cb9a:	4689      	mov	r9, r1
 800cb9c:	9203      	str	r2, [sp, #12]
 800cb9e:	461d      	mov	r5, r3
 800cba0:	4682      	mov	sl, r0
 800cba2:	f001 fb01 	bl	800e1a8 <_localeconv_r>
 800cba6:	6803      	ldr	r3, [r0, #0]
 800cba8:	9313      	str	r3, [sp, #76]	; 0x4c
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7f3 fb22 	bl	80001f4 <strlen>
 800cbb0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800cbb4:	900e      	str	r0, [sp, #56]	; 0x38
 800cbb6:	0619      	lsls	r1, r3, #24
 800cbb8:	d51a      	bpl.n	800cbf0 <_svfprintf_r+0x60>
 800cbba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbbe:	b9bb      	cbnz	r3, 800cbf0 <_svfprintf_r+0x60>
 800cbc0:	2140      	movs	r1, #64	; 0x40
 800cbc2:	4650      	mov	r0, sl
 800cbc4:	f7ff f920 	bl	800be08 <_malloc_r>
 800cbc8:	f8c9 0000 	str.w	r0, [r9]
 800cbcc:	f8c9 0010 	str.w	r0, [r9, #16]
 800cbd0:	b958      	cbnz	r0, 800cbea <_svfprintf_r+0x5a>
 800cbd2:	230c      	movs	r3, #12
 800cbd4:	f8ca 3000 	str.w	r3, [sl]
 800cbd8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbdc:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbde:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800cbe0:	b04f      	add	sp, #316	; 0x13c
 800cbe2:	ecbd 8b04 	vpop	{d8-d9}
 800cbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbea:	2340      	movs	r3, #64	; 0x40
 800cbec:	f8c9 3014 	str.w	r3, [r9, #20]
 800cbf0:	ed9f 7b91 	vldr	d7, [pc, #580]	; 800ce38 <_svfprintf_r+0x2a8>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 800cbfa:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800cbfe:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 800cc02:	ac25      	add	r4, sp, #148	; 0x94
 800cc04:	9422      	str	r4, [sp, #136]	; 0x88
 800cc06:	9305      	str	r3, [sp, #20]
 800cc08:	9309      	str	r3, [sp, #36]	; 0x24
 800cc0a:	9311      	str	r3, [sp, #68]	; 0x44
 800cc0c:	9314      	str	r3, [sp, #80]	; 0x50
 800cc0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc10:	9b03      	ldr	r3, [sp, #12]
 800cc12:	461e      	mov	r6, r3
 800cc14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc18:	b10a      	cbz	r2, 800cc1e <_svfprintf_r+0x8e>
 800cc1a:	2a25      	cmp	r2, #37	; 0x25
 800cc1c:	d1f9      	bne.n	800cc12 <_svfprintf_r+0x82>
 800cc1e:	9b03      	ldr	r3, [sp, #12]
 800cc20:	1af7      	subs	r7, r6, r3
 800cc22:	d00d      	beq.n	800cc40 <_svfprintf_r+0xb0>
 800cc24:	e9c4 3700 	strd	r3, r7, [r4]
 800cc28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cc2a:	443b      	add	r3, r7
 800cc2c:	9324      	str	r3, [sp, #144]	; 0x90
 800cc2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cc30:	3301      	adds	r3, #1
 800cc32:	2b07      	cmp	r3, #7
 800cc34:	9323      	str	r3, [sp, #140]	; 0x8c
 800cc36:	dc78      	bgt.n	800cd2a <_svfprintf_r+0x19a>
 800cc38:	3408      	adds	r4, #8
 800cc3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc3c:	443b      	add	r3, r7
 800cc3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc40:	7833      	ldrb	r3, [r6, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	f001 815a 	beq.w	800defc <_svfprintf_r+0x136c>
 800cc48:	2300      	movs	r3, #0
 800cc4a:	3601      	adds	r6, #1
 800cc4c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800cc50:	f04f 38ff 	mov.w	r8, #4294967295
 800cc54:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc56:	469b      	mov	fp, r3
 800cc58:	270a      	movs	r7, #10
 800cc5a:	212b      	movs	r1, #43	; 0x2b
 800cc5c:	4633      	mov	r3, r6
 800cc5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc62:	9207      	str	r2, [sp, #28]
 800cc64:	930a      	str	r3, [sp, #40]	; 0x28
 800cc66:	9b07      	ldr	r3, [sp, #28]
 800cc68:	3b20      	subs	r3, #32
 800cc6a:	2b5a      	cmp	r3, #90	; 0x5a
 800cc6c:	f200 85c6 	bhi.w	800d7fc <_svfprintf_r+0xc6c>
 800cc70:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cc74:	05c4007e 	.word	0x05c4007e
 800cc78:	008605c4 	.word	0x008605c4
 800cc7c:	05c405c4 	.word	0x05c405c4
 800cc80:	006505c4 	.word	0x006505c4
 800cc84:	05c405c4 	.word	0x05c405c4
 800cc88:	00930089 	.word	0x00930089
 800cc8c:	009005c4 	.word	0x009005c4
 800cc90:	05c40096 	.word	0x05c40096
 800cc94:	00b200af 	.word	0x00b200af
 800cc98:	00b200b2 	.word	0x00b200b2
 800cc9c:	00b200b2 	.word	0x00b200b2
 800cca0:	00b200b2 	.word	0x00b200b2
 800cca4:	00b200b2 	.word	0x00b200b2
 800cca8:	05c405c4 	.word	0x05c405c4
 800ccac:	05c405c4 	.word	0x05c405c4
 800ccb0:	05c405c4 	.word	0x05c405c4
 800ccb4:	012905c4 	.word	0x012905c4
 800ccb8:	00e605c4 	.word	0x00e605c4
 800ccbc:	012900f9 	.word	0x012900f9
 800ccc0:	01290129 	.word	0x01290129
 800ccc4:	05c405c4 	.word	0x05c405c4
 800ccc8:	05c405c4 	.word	0x05c405c4
 800cccc:	05c400c2 	.word	0x05c400c2
 800ccd0:	049105c4 	.word	0x049105c4
 800ccd4:	05c405c4 	.word	0x05c405c4
 800ccd8:	04db05c4 	.word	0x04db05c4
 800ccdc:	050105c4 	.word	0x050105c4
 800cce0:	05c405c4 	.word	0x05c405c4
 800cce4:	05c40523 	.word	0x05c40523
 800cce8:	05c405c4 	.word	0x05c405c4
 800ccec:	05c405c4 	.word	0x05c405c4
 800ccf0:	05c405c4 	.word	0x05c405c4
 800ccf4:	012905c4 	.word	0x012905c4
 800ccf8:	00e605c4 	.word	0x00e605c4
 800ccfc:	012900fb 	.word	0x012900fb
 800cd00:	01290129 	.word	0x01290129
 800cd04:	00fb00c5 	.word	0x00fb00c5
 800cd08:	05c400d9 	.word	0x05c400d9
 800cd0c:	05c400d2 	.word	0x05c400d2
 800cd10:	0493046c 	.word	0x0493046c
 800cd14:	00d904ca 	.word	0x00d904ca
 800cd18:	04db05c4 	.word	0x04db05c4
 800cd1c:	0503007c 	.word	0x0503007c
 800cd20:	05c405c4 	.word	0x05c405c4
 800cd24:	05c40542 	.word	0x05c40542
 800cd28:	007c      	.short	0x007c
 800cd2a:	aa22      	add	r2, sp, #136	; 0x88
 800cd2c:	4649      	mov	r1, r9
 800cd2e:	4650      	mov	r0, sl
 800cd30:	f002 f9aa 	bl	800f088 <__ssprint_r>
 800cd34:	2800      	cmp	r0, #0
 800cd36:	f040 8137 	bne.w	800cfa8 <_svfprintf_r+0x418>
 800cd3a:	ac25      	add	r4, sp, #148	; 0x94
 800cd3c:	e77d      	b.n	800cc3a <_svfprintf_r+0xaa>
 800cd3e:	4650      	mov	r0, sl
 800cd40:	f001 fa32 	bl	800e1a8 <_localeconv_r>
 800cd44:	6843      	ldr	r3, [r0, #4]
 800cd46:	9314      	str	r3, [sp, #80]	; 0x50
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7f3 fa53 	bl	80001f4 <strlen>
 800cd4e:	9011      	str	r0, [sp, #68]	; 0x44
 800cd50:	4650      	mov	r0, sl
 800cd52:	f001 fa29 	bl	800e1a8 <_localeconv_r>
 800cd56:	6883      	ldr	r3, [r0, #8]
 800cd58:	9309      	str	r3, [sp, #36]	; 0x24
 800cd5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cd5c:	212b      	movs	r1, #43	; 0x2b
 800cd5e:	b12b      	cbz	r3, 800cd6c <_svfprintf_r+0x1dc>
 800cd60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd62:	b11b      	cbz	r3, 800cd6c <_svfprintf_r+0x1dc>
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	b10b      	cbz	r3, 800cd6c <_svfprintf_r+0x1dc>
 800cd68:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 800cd6c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cd6e:	e775      	b.n	800cc5c <_svfprintf_r+0xcc>
 800cd70:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1f9      	bne.n	800cd6c <_svfprintf_r+0x1dc>
 800cd78:	2320      	movs	r3, #32
 800cd7a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800cd7e:	e7f5      	b.n	800cd6c <_svfprintf_r+0x1dc>
 800cd80:	f04b 0b01 	orr.w	fp, fp, #1
 800cd84:	e7f2      	b.n	800cd6c <_svfprintf_r+0x1dc>
 800cd86:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd8a:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	daed      	bge.n	800cd6c <_svfprintf_r+0x1dc>
 800cd90:	425b      	negs	r3, r3
 800cd92:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd94:	f04b 0b04 	orr.w	fp, fp, #4
 800cd98:	e7e8      	b.n	800cd6c <_svfprintf_r+0x1dc>
 800cd9a:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 800cd9e:	e7e5      	b.n	800cd6c <_svfprintf_r+0x1dc>
 800cda0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cda6:	9207      	str	r2, [sp, #28]
 800cda8:	2a2a      	cmp	r2, #42	; 0x2a
 800cdaa:	d10f      	bne.n	800cdcc <_svfprintf_r+0x23c>
 800cdac:	f855 2b04 	ldr.w	r2, [r5], #4
 800cdb0:	930a      	str	r3, [sp, #40]	; 0x28
 800cdb2:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800cdb6:	e7d9      	b.n	800cd6c <_svfprintf_r+0x1dc>
 800cdb8:	fb07 2808 	mla	r8, r7, r8, r2
 800cdbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdc0:	9207      	str	r2, [sp, #28]
 800cdc2:	9a07      	ldr	r2, [sp, #28]
 800cdc4:	3a30      	subs	r2, #48	; 0x30
 800cdc6:	2a09      	cmp	r2, #9
 800cdc8:	d9f6      	bls.n	800cdb8 <_svfprintf_r+0x228>
 800cdca:	e74b      	b.n	800cc64 <_svfprintf_r+0xd4>
 800cdcc:	f04f 0800 	mov.w	r8, #0
 800cdd0:	e7f7      	b.n	800cdc2 <_svfprintf_r+0x232>
 800cdd2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800cdd6:	e7c9      	b.n	800cd6c <_svfprintf_r+0x1dc>
 800cdd8:	2200      	movs	r2, #0
 800cdda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cddc:	920f      	str	r2, [sp, #60]	; 0x3c
 800cdde:	9a07      	ldr	r2, [sp, #28]
 800cde0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800cde2:	3a30      	subs	r2, #48	; 0x30
 800cde4:	fb07 2200 	mla	r2, r7, r0, r2
 800cde8:	920f      	str	r2, [sp, #60]	; 0x3c
 800cdea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdee:	9207      	str	r2, [sp, #28]
 800cdf0:	3a30      	subs	r2, #48	; 0x30
 800cdf2:	2a09      	cmp	r2, #9
 800cdf4:	d9f3      	bls.n	800cdde <_svfprintf_r+0x24e>
 800cdf6:	e735      	b.n	800cc64 <_svfprintf_r+0xd4>
 800cdf8:	f04b 0b08 	orr.w	fp, fp, #8
 800cdfc:	e7b6      	b.n	800cd6c <_svfprintf_r+0x1dc>
 800cdfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	2b68      	cmp	r3, #104	; 0x68
 800ce04:	bf01      	itttt	eq
 800ce06:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 800ce08:	3301      	addeq	r3, #1
 800ce0a:	930a      	streq	r3, [sp, #40]	; 0x28
 800ce0c:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 800ce10:	bf18      	it	ne
 800ce12:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 800ce16:	e7a9      	b.n	800cd6c <_svfprintf_r+0x1dc>
 800ce18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	2b6c      	cmp	r3, #108	; 0x6c
 800ce1e:	d105      	bne.n	800ce2c <_svfprintf_r+0x29c>
 800ce20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce22:	3301      	adds	r3, #1
 800ce24:	930a      	str	r3, [sp, #40]	; 0x28
 800ce26:	f04b 0b20 	orr.w	fp, fp, #32
 800ce2a:	e79f      	b.n	800cd6c <_svfprintf_r+0x1dc>
 800ce2c:	f04b 0b10 	orr.w	fp, fp, #16
 800ce30:	e79c      	b.n	800cd6c <_svfprintf_r+0x1dc>
 800ce32:	bf00      	nop
 800ce34:	f3af 8000 	nop.w
	...
 800ce40:	462a      	mov	r2, r5
 800ce42:	f852 3b04 	ldr.w	r3, [r2], #4
 800ce46:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	9206      	str	r2, [sp, #24]
 800ce4e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800ce52:	9304      	str	r3, [sp, #16]
 800ce54:	461f      	mov	r7, r3
 800ce56:	461e      	mov	r6, r3
 800ce58:	9308      	str	r3, [sp, #32]
 800ce5a:	461d      	mov	r5, r3
 800ce5c:	ab35      	add	r3, sp, #212	; 0xd4
 800ce5e:	f04f 0801 	mov.w	r8, #1
 800ce62:	9303      	str	r3, [sp, #12]
 800ce64:	e1b9      	b.n	800d1da <_svfprintf_r+0x64a>
 800ce66:	f04b 0b10 	orr.w	fp, fp, #16
 800ce6a:	f01b 0f20 	tst.w	fp, #32
 800ce6e:	d012      	beq.n	800ce96 <_svfprintf_r+0x306>
 800ce70:	3507      	adds	r5, #7
 800ce72:	f025 0307 	bic.w	r3, r5, #7
 800ce76:	461a      	mov	r2, r3
 800ce78:	685e      	ldr	r6, [r3, #4]
 800ce7a:	f852 5b08 	ldr.w	r5, [r2], #8
 800ce7e:	9206      	str	r2, [sp, #24]
 800ce80:	2e00      	cmp	r6, #0
 800ce82:	da06      	bge.n	800ce92 <_svfprintf_r+0x302>
 800ce84:	426d      	negs	r5, r5
 800ce86:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800ce8a:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 800ce8e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800ce92:	2301      	movs	r3, #1
 800ce94:	e392      	b.n	800d5bc <_svfprintf_r+0xa2c>
 800ce96:	462b      	mov	r3, r5
 800ce98:	f01b 0f10 	tst.w	fp, #16
 800ce9c:	f853 6b04 	ldr.w	r6, [r3], #4
 800cea0:	9306      	str	r3, [sp, #24]
 800cea2:	d002      	beq.n	800ceaa <_svfprintf_r+0x31a>
 800cea4:	4635      	mov	r5, r6
 800cea6:	17f6      	asrs	r6, r6, #31
 800cea8:	e7ea      	b.n	800ce80 <_svfprintf_r+0x2f0>
 800ceaa:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800ceae:	d003      	beq.n	800ceb8 <_svfprintf_r+0x328>
 800ceb0:	b235      	sxth	r5, r6
 800ceb2:	f346 36c0 	sbfx	r6, r6, #15, #1
 800ceb6:	e7e3      	b.n	800ce80 <_svfprintf_r+0x2f0>
 800ceb8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800cebc:	d0f2      	beq.n	800cea4 <_svfprintf_r+0x314>
 800cebe:	b275      	sxtb	r5, r6
 800cec0:	f346 16c0 	sbfx	r6, r6, #7, #1
 800cec4:	e7dc      	b.n	800ce80 <_svfprintf_r+0x2f0>
 800cec6:	3507      	adds	r5, #7
 800cec8:	f025 0307 	bic.w	r3, r5, #7
 800cecc:	ecb3 7b02 	vldmia	r3!, {d7}
 800ced0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ced4:	9306      	str	r3, [sp, #24]
 800ced6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ced8:	ee09 3a10 	vmov	s18, r3
 800cedc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cee2:	ee09 3a90 	vmov	s19, r3
 800cee6:	f04f 32ff 	mov.w	r2, #4294967295
 800ceea:	4b34      	ldr	r3, [pc, #208]	; (800cfbc <_svfprintf_r+0x42c>)
 800ceec:	ec51 0b19 	vmov	r0, r1, d9
 800cef0:	f7f3 fe34 	bl	8000b5c <__aeabi_dcmpun>
 800cef4:	bb18      	cbnz	r0, 800cf3e <_svfprintf_r+0x3ae>
 800cef6:	4b31      	ldr	r3, [pc, #196]	; (800cfbc <_svfprintf_r+0x42c>)
 800cef8:	ec51 0b19 	vmov	r0, r1, d9
 800cefc:	f04f 32ff 	mov.w	r2, #4294967295
 800cf00:	f7f3 fe0e 	bl	8000b20 <__aeabi_dcmple>
 800cf04:	b9d8      	cbnz	r0, 800cf3e <_svfprintf_r+0x3ae>
 800cf06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	f7f3 fdfd 	bl	8000b0c <__aeabi_dcmplt>
 800cf12:	b110      	cbz	r0, 800cf1a <_svfprintf_r+0x38a>
 800cf14:	232d      	movs	r3, #45	; 0x2d
 800cf16:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800cf1a:	4a29      	ldr	r2, [pc, #164]	; (800cfc0 <_svfprintf_r+0x430>)
 800cf1c:	4b29      	ldr	r3, [pc, #164]	; (800cfc4 <_svfprintf_r+0x434>)
 800cf1e:	9907      	ldr	r1, [sp, #28]
 800cf20:	2947      	cmp	r1, #71	; 0x47
 800cf22:	bfc8      	it	gt
 800cf24:	461a      	movgt	r2, r3
 800cf26:	2300      	movs	r3, #0
 800cf28:	9203      	str	r2, [sp, #12]
 800cf2a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 800cf2e:	9304      	str	r3, [sp, #16]
 800cf30:	f04f 0803 	mov.w	r8, #3
 800cf34:	461f      	mov	r7, r3
 800cf36:	461e      	mov	r6, r3
 800cf38:	9308      	str	r3, [sp, #32]
 800cf3a:	461d      	mov	r5, r3
 800cf3c:	e14d      	b.n	800d1da <_svfprintf_r+0x64a>
 800cf3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cf42:	4610      	mov	r0, r2
 800cf44:	4619      	mov	r1, r3
 800cf46:	f7f3 fe09 	bl	8000b5c <__aeabi_dcmpun>
 800cf4a:	b140      	cbz	r0, 800cf5e <_svfprintf_r+0x3ce>
 800cf4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf4e:	4a1e      	ldr	r2, [pc, #120]	; (800cfc8 <_svfprintf_r+0x438>)
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	bfbc      	itt	lt
 800cf54:	232d      	movlt	r3, #45	; 0x2d
 800cf56:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800cf5a:	4b1c      	ldr	r3, [pc, #112]	; (800cfcc <_svfprintf_r+0x43c>)
 800cf5c:	e7df      	b.n	800cf1e <_svfprintf_r+0x38e>
 800cf5e:	9b07      	ldr	r3, [sp, #28]
 800cf60:	f023 0320 	bic.w	r3, r3, #32
 800cf64:	2b41      	cmp	r3, #65	; 0x41
 800cf66:	9308      	str	r3, [sp, #32]
 800cf68:	d132      	bne.n	800cfd0 <_svfprintf_r+0x440>
 800cf6a:	2330      	movs	r3, #48	; 0x30
 800cf6c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800cf70:	9b07      	ldr	r3, [sp, #28]
 800cf72:	2b61      	cmp	r3, #97	; 0x61
 800cf74:	bf0c      	ite	eq
 800cf76:	2378      	moveq	r3, #120	; 0x78
 800cf78:	2358      	movne	r3, #88	; 0x58
 800cf7a:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 800cf7e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800cf82:	f04b 0b02 	orr.w	fp, fp, #2
 800cf86:	f340 8204 	ble.w	800d392 <_svfprintf_r+0x802>
 800cf8a:	f108 0101 	add.w	r1, r8, #1
 800cf8e:	4650      	mov	r0, sl
 800cf90:	f7fe ff3a 	bl	800be08 <_malloc_r>
 800cf94:	9003      	str	r0, [sp, #12]
 800cf96:	2800      	cmp	r0, #0
 800cf98:	f040 81ff 	bne.w	800d39a <_svfprintf_r+0x80a>
 800cf9c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800cfa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfa4:	f8a9 300c 	strh.w	r3, [r9, #12]
 800cfa8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800cfac:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cfb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfb2:	bf18      	it	ne
 800cfb4:	f04f 33ff 	movne.w	r3, #4294967295
 800cfb8:	e610      	b.n	800cbdc <_svfprintf_r+0x4c>
 800cfba:	bf00      	nop
 800cfbc:	7fefffff 	.word	0x7fefffff
 800cfc0:	080127fc 	.word	0x080127fc
 800cfc4:	08012800 	.word	0x08012800
 800cfc8:	08012804 	.word	0x08012804
 800cfcc:	08012808 	.word	0x08012808
 800cfd0:	f1b8 3fff 	cmp.w	r8, #4294967295
 800cfd4:	f000 81e4 	beq.w	800d3a0 <_svfprintf_r+0x810>
 800cfd8:	9b08      	ldr	r3, [sp, #32]
 800cfda:	2b47      	cmp	r3, #71	; 0x47
 800cfdc:	f040 81e4 	bne.w	800d3a8 <_svfprintf_r+0x818>
 800cfe0:	f1b8 0f00 	cmp.w	r8, #0
 800cfe4:	f040 81e0 	bne.w	800d3a8 <_svfprintf_r+0x818>
 800cfe8:	f8cd 8010 	str.w	r8, [sp, #16]
 800cfec:	f04f 0801 	mov.w	r8, #1
 800cff0:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 800cff4:	9310      	str	r3, [sp, #64]	; 0x40
 800cff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	f280 81d7 	bge.w	800d3ac <_svfprintf_r+0x81c>
 800cffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d000:	ee08 3a10 	vmov	s16, r3
 800d004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d006:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d00a:	ee08 3a90 	vmov	s17, r3
 800d00e:	232d      	movs	r3, #45	; 0x2d
 800d010:	9318      	str	r3, [sp, #96]	; 0x60
 800d012:	9b08      	ldr	r3, [sp, #32]
 800d014:	2b41      	cmp	r3, #65	; 0x41
 800d016:	f040 81e7 	bne.w	800d3e8 <_svfprintf_r+0x858>
 800d01a:	eeb0 0a48 	vmov.f32	s0, s16
 800d01e:	eef0 0a68 	vmov.f32	s1, s17
 800d022:	a81c      	add	r0, sp, #112	; 0x70
 800d024:	f001 f8f4 	bl	800e210 <frexp>
 800d028:	2200      	movs	r2, #0
 800d02a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d02e:	ec51 0b10 	vmov	r0, r1, d0
 800d032:	f7f3 faf9 	bl	8000628 <__aeabi_dmul>
 800d036:	2200      	movs	r2, #0
 800d038:	2300      	movs	r3, #0
 800d03a:	4606      	mov	r6, r0
 800d03c:	460f      	mov	r7, r1
 800d03e:	f7f3 fd5b 	bl	8000af8 <__aeabi_dcmpeq>
 800d042:	b108      	cbz	r0, 800d048 <_svfprintf_r+0x4b8>
 800d044:	2301      	movs	r3, #1
 800d046:	931c      	str	r3, [sp, #112]	; 0x70
 800d048:	4bac      	ldr	r3, [pc, #688]	; (800d2fc <_svfprintf_r+0x76c>)
 800d04a:	4aad      	ldr	r2, [pc, #692]	; (800d300 <_svfprintf_r+0x770>)
 800d04c:	9907      	ldr	r1, [sp, #28]
 800d04e:	9d03      	ldr	r5, [sp, #12]
 800d050:	2961      	cmp	r1, #97	; 0x61
 800d052:	bf18      	it	ne
 800d054:	461a      	movne	r2, r3
 800d056:	f108 33ff 	add.w	r3, r8, #4294967295
 800d05a:	9217      	str	r2, [sp, #92]	; 0x5c
 800d05c:	9305      	str	r3, [sp, #20]
 800d05e:	4ba9      	ldr	r3, [pc, #676]	; (800d304 <_svfprintf_r+0x774>)
 800d060:	2200      	movs	r2, #0
 800d062:	4630      	mov	r0, r6
 800d064:	4639      	mov	r1, r7
 800d066:	f7f3 fadf 	bl	8000628 <__aeabi_dmul>
 800d06a:	460f      	mov	r7, r1
 800d06c:	4606      	mov	r6, r0
 800d06e:	f7f3 fd8b 	bl	8000b88 <__aeabi_d2iz>
 800d072:	9019      	str	r0, [sp, #100]	; 0x64
 800d074:	f7f3 fa6e 	bl	8000554 <__aeabi_i2d>
 800d078:	4602      	mov	r2, r0
 800d07a:	460b      	mov	r3, r1
 800d07c:	4630      	mov	r0, r6
 800d07e:	4639      	mov	r1, r7
 800d080:	f7f3 f91a 	bl	80002b8 <__aeabi_dsub>
 800d084:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d086:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d088:	5c9b      	ldrb	r3, [r3, r2]
 800d08a:	f805 3b01 	strb.w	r3, [r5], #1
 800d08e:	9b05      	ldr	r3, [sp, #20]
 800d090:	9312      	str	r3, [sp, #72]	; 0x48
 800d092:	1c5a      	adds	r2, r3, #1
 800d094:	4606      	mov	r6, r0
 800d096:	460f      	mov	r7, r1
 800d098:	d007      	beq.n	800d0aa <_svfprintf_r+0x51a>
 800d09a:	3b01      	subs	r3, #1
 800d09c:	9305      	str	r3, [sp, #20]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	f7f3 fd29 	bl	8000af8 <__aeabi_dcmpeq>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	d0d9      	beq.n	800d05e <_svfprintf_r+0x4ce>
 800d0aa:	4b97      	ldr	r3, [pc, #604]	; (800d308 <_svfprintf_r+0x778>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	4639      	mov	r1, r7
 800d0b2:	f7f3 fd49 	bl	8000b48 <__aeabi_dcmpgt>
 800d0b6:	b960      	cbnz	r0, 800d0d2 <_svfprintf_r+0x542>
 800d0b8:	4b93      	ldr	r3, [pc, #588]	; (800d308 <_svfprintf_r+0x778>)
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	4630      	mov	r0, r6
 800d0be:	4639      	mov	r1, r7
 800d0c0:	f7f3 fd1a 	bl	8000af8 <__aeabi_dcmpeq>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	f000 818a 	beq.w	800d3de <_svfprintf_r+0x84e>
 800d0ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d0cc:	07de      	lsls	r6, r3, #31
 800d0ce:	f140 8186 	bpl.w	800d3de <_svfprintf_r+0x84e>
 800d0d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d0d4:	9520      	str	r5, [sp, #128]	; 0x80
 800d0d6:	7bd9      	ldrb	r1, [r3, #15]
 800d0d8:	2030      	movs	r0, #48	; 0x30
 800d0da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d0dc:	1e53      	subs	r3, r2, #1
 800d0de:	9320      	str	r3, [sp, #128]	; 0x80
 800d0e0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800d0e4:	428b      	cmp	r3, r1
 800d0e6:	f000 8169 	beq.w	800d3bc <_svfprintf_r+0x82c>
 800d0ea:	2b39      	cmp	r3, #57	; 0x39
 800d0ec:	bf0b      	itete	eq
 800d0ee:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800d0f0:	3301      	addne	r3, #1
 800d0f2:	7a9b      	ldrbeq	r3, [r3, #10]
 800d0f4:	b2db      	uxtbne	r3, r3
 800d0f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d0fa:	9b03      	ldr	r3, [sp, #12]
 800d0fc:	1aeb      	subs	r3, r5, r3
 800d0fe:	9305      	str	r3, [sp, #20]
 800d100:	9b08      	ldr	r3, [sp, #32]
 800d102:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800d104:	2b47      	cmp	r3, #71	; 0x47
 800d106:	f040 81b9 	bne.w	800d47c <_svfprintf_r+0x8ec>
 800d10a:	1ce8      	adds	r0, r5, #3
 800d10c:	db02      	blt.n	800d114 <_svfprintf_r+0x584>
 800d10e:	45a8      	cmp	r8, r5
 800d110:	f280 81d7 	bge.w	800d4c2 <_svfprintf_r+0x932>
 800d114:	9b07      	ldr	r3, [sp, #28]
 800d116:	3b02      	subs	r3, #2
 800d118:	9307      	str	r3, [sp, #28]
 800d11a:	9907      	ldr	r1, [sp, #28]
 800d11c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800d120:	f021 0120 	bic.w	r1, r1, #32
 800d124:	2941      	cmp	r1, #65	; 0x41
 800d126:	bf08      	it	eq
 800d128:	320f      	addeq	r2, #15
 800d12a:	f105 33ff 	add.w	r3, r5, #4294967295
 800d12e:	bf06      	itte	eq
 800d130:	b2d2      	uxtbeq	r2, r2
 800d132:	2101      	moveq	r1, #1
 800d134:	2100      	movne	r1, #0
 800d136:	2b00      	cmp	r3, #0
 800d138:	931c      	str	r3, [sp, #112]	; 0x70
 800d13a:	bfb8      	it	lt
 800d13c:	f1c5 0301 	rsblt	r3, r5, #1
 800d140:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800d144:	bfb4      	ite	lt
 800d146:	222d      	movlt	r2, #45	; 0x2d
 800d148:	222b      	movge	r2, #43	; 0x2b
 800d14a:	2b09      	cmp	r3, #9
 800d14c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 800d150:	f340 81aa 	ble.w	800d4a8 <_svfprintf_r+0x918>
 800d154:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 800d158:	260a      	movs	r6, #10
 800d15a:	4602      	mov	r2, r0
 800d15c:	fb93 f5f6 	sdiv	r5, r3, r6
 800d160:	fb06 3115 	mls	r1, r6, r5, r3
 800d164:	3130      	adds	r1, #48	; 0x30
 800d166:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d16a:	4619      	mov	r1, r3
 800d16c:	2963      	cmp	r1, #99	; 0x63
 800d16e:	f100 30ff 	add.w	r0, r0, #4294967295
 800d172:	462b      	mov	r3, r5
 800d174:	dcf1      	bgt.n	800d15a <_svfprintf_r+0x5ca>
 800d176:	3330      	adds	r3, #48	; 0x30
 800d178:	1e91      	subs	r1, r2, #2
 800d17a:	f800 3c01 	strb.w	r3, [r0, #-1]
 800d17e:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 800d182:	460b      	mov	r3, r1
 800d184:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 800d188:	4283      	cmp	r3, r0
 800d18a:	f0c0 8188 	bcc.w	800d49e <_svfprintf_r+0x90e>
 800d18e:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 800d192:	1a9b      	subs	r3, r3, r2
 800d194:	4281      	cmp	r1, r0
 800d196:	bf88      	it	hi
 800d198:	2300      	movhi	r3, #0
 800d19a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800d19e:	441a      	add	r2, r3
 800d1a0:	ab1e      	add	r3, sp, #120	; 0x78
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	9a05      	ldr	r2, [sp, #20]
 800d1a6:	9315      	str	r3, [sp, #84]	; 0x54
 800d1a8:	2a01      	cmp	r2, #1
 800d1aa:	eb03 0802 	add.w	r8, r3, r2
 800d1ae:	dc02      	bgt.n	800d1b6 <_svfprintf_r+0x626>
 800d1b0:	f01b 0f01 	tst.w	fp, #1
 800d1b4:	d001      	beq.n	800d1ba <_svfprintf_r+0x62a>
 800d1b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1b8:	4498      	add	r8, r3
 800d1ba:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 800d1be:	2600      	movs	r6, #0
 800d1c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1c4:	9310      	str	r3, [sp, #64]	; 0x40
 800d1c6:	9608      	str	r6, [sp, #32]
 800d1c8:	4635      	mov	r5, r6
 800d1ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d1cc:	b113      	cbz	r3, 800d1d4 <_svfprintf_r+0x644>
 800d1ce:	232d      	movs	r3, #45	; 0x2d
 800d1d0:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800d1d4:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800d1d8:	2700      	movs	r7, #0
 800d1da:	4547      	cmp	r7, r8
 800d1dc:	463b      	mov	r3, r7
 800d1de:	bfb8      	it	lt
 800d1e0:	4643      	movlt	r3, r8
 800d1e2:	9310      	str	r3, [sp, #64]	; 0x40
 800d1e4:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800d1e8:	b113      	cbz	r3, 800d1f0 <_svfprintf_r+0x660>
 800d1ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	9310      	str	r3, [sp, #64]	; 0x40
 800d1f0:	f01b 0302 	ands.w	r3, fp, #2
 800d1f4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d1f6:	bf1e      	ittt	ne
 800d1f8:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 800d1fa:	3302      	addne	r3, #2
 800d1fc:	9310      	strne	r3, [sp, #64]	; 0x40
 800d1fe:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800d202:	9318      	str	r3, [sp, #96]	; 0x60
 800d204:	d122      	bne.n	800d24c <_svfprintf_r+0x6bc>
 800d206:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800d20a:	1a9b      	subs	r3, r3, r2
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	9312      	str	r3, [sp, #72]	; 0x48
 800d210:	dd1c      	ble.n	800d24c <_svfprintf_r+0x6bc>
 800d212:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d214:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800d218:	2810      	cmp	r0, #16
 800d21a:	483c      	ldr	r0, [pc, #240]	; (800d30c <_svfprintf_r+0x77c>)
 800d21c:	6020      	str	r0, [r4, #0]
 800d21e:	f102 0201 	add.w	r2, r2, #1
 800d222:	f104 0108 	add.w	r1, r4, #8
 800d226:	f300 82f7 	bgt.w	800d818 <_svfprintf_r+0xc88>
 800d22a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d22c:	6060      	str	r0, [r4, #4]
 800d22e:	4403      	add	r3, r0
 800d230:	2a07      	cmp	r2, #7
 800d232:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800d236:	f340 8304 	ble.w	800d842 <_svfprintf_r+0xcb2>
 800d23a:	aa22      	add	r2, sp, #136	; 0x88
 800d23c:	4649      	mov	r1, r9
 800d23e:	4650      	mov	r0, sl
 800d240:	f001 ff22 	bl	800f088 <__ssprint_r>
 800d244:	2800      	cmp	r0, #0
 800d246:	f040 8637 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800d24a:	ac25      	add	r4, sp, #148	; 0x94
 800d24c:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800d250:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d252:	b16a      	cbz	r2, 800d270 <_svfprintf_r+0x6e0>
 800d254:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 800d258:	6022      	str	r2, [r4, #0]
 800d25a:	2201      	movs	r2, #1
 800d25c:	4413      	add	r3, r2
 800d25e:	9324      	str	r3, [sp, #144]	; 0x90
 800d260:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d262:	6062      	str	r2, [r4, #4]
 800d264:	4413      	add	r3, r2
 800d266:	2b07      	cmp	r3, #7
 800d268:	9323      	str	r3, [sp, #140]	; 0x8c
 800d26a:	f300 82ec 	bgt.w	800d846 <_svfprintf_r+0xcb6>
 800d26e:	3408      	adds	r4, #8
 800d270:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d272:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d274:	b162      	cbz	r2, 800d290 <_svfprintf_r+0x700>
 800d276:	aa1b      	add	r2, sp, #108	; 0x6c
 800d278:	6022      	str	r2, [r4, #0]
 800d27a:	2202      	movs	r2, #2
 800d27c:	4413      	add	r3, r2
 800d27e:	9324      	str	r3, [sp, #144]	; 0x90
 800d280:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d282:	6062      	str	r2, [r4, #4]
 800d284:	3301      	adds	r3, #1
 800d286:	2b07      	cmp	r3, #7
 800d288:	9323      	str	r3, [sp, #140]	; 0x8c
 800d28a:	f300 82e6 	bgt.w	800d85a <_svfprintf_r+0xcca>
 800d28e:	3408      	adds	r4, #8
 800d290:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d292:	2b80      	cmp	r3, #128	; 0x80
 800d294:	d122      	bne.n	800d2dc <_svfprintf_r+0x74c>
 800d296:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800d29a:	1a9b      	subs	r3, r3, r2
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	9312      	str	r3, [sp, #72]	; 0x48
 800d2a0:	dd1c      	ble.n	800d2dc <_svfprintf_r+0x74c>
 800d2a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d2a4:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800d2a8:	2810      	cmp	r0, #16
 800d2aa:	4819      	ldr	r0, [pc, #100]	; (800d310 <_svfprintf_r+0x780>)
 800d2ac:	6020      	str	r0, [r4, #0]
 800d2ae:	f102 0201 	add.w	r2, r2, #1
 800d2b2:	f104 0108 	add.w	r1, r4, #8
 800d2b6:	f300 82da 	bgt.w	800d86e <_svfprintf_r+0xcde>
 800d2ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d2bc:	6060      	str	r0, [r4, #4]
 800d2be:	4403      	add	r3, r0
 800d2c0:	2a07      	cmp	r2, #7
 800d2c2:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800d2c6:	f340 82e7 	ble.w	800d898 <_svfprintf_r+0xd08>
 800d2ca:	aa22      	add	r2, sp, #136	; 0x88
 800d2cc:	4649      	mov	r1, r9
 800d2ce:	4650      	mov	r0, sl
 800d2d0:	f001 feda 	bl	800f088 <__ssprint_r>
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	f040 85ef 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800d2da:	ac25      	add	r4, sp, #148	; 0x94
 800d2dc:	eba7 0708 	sub.w	r7, r7, r8
 800d2e0:	2f00      	cmp	r7, #0
 800d2e2:	dd27      	ble.n	800d334 <_svfprintf_r+0x7a4>
 800d2e4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800d2e8:	4809      	ldr	r0, [pc, #36]	; (800d310 <_svfprintf_r+0x780>)
 800d2ea:	6020      	str	r0, [r4, #0]
 800d2ec:	2f10      	cmp	r7, #16
 800d2ee:	f103 0301 	add.w	r3, r3, #1
 800d2f2:	f104 0108 	add.w	r1, r4, #8
 800d2f6:	f300 82d1 	bgt.w	800d89c <_svfprintf_r+0xd0c>
 800d2fa:	e00b      	b.n	800d314 <_svfprintf_r+0x784>
 800d2fc:	0801281d 	.word	0x0801281d
 800d300:	0801280c 	.word	0x0801280c
 800d304:	40300000 	.word	0x40300000
 800d308:	3fe00000 	.word	0x3fe00000
 800d30c:	08012830 	.word	0x08012830
 800d310:	08012840 	.word	0x08012840
 800d314:	6067      	str	r7, [r4, #4]
 800d316:	2b07      	cmp	r3, #7
 800d318:	4417      	add	r7, r2
 800d31a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800d31e:	f340 82d0 	ble.w	800d8c2 <_svfprintf_r+0xd32>
 800d322:	aa22      	add	r2, sp, #136	; 0x88
 800d324:	4649      	mov	r1, r9
 800d326:	4650      	mov	r0, sl
 800d328:	f001 feae 	bl	800f088 <__ssprint_r>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	f040 85c3 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800d332:	ac25      	add	r4, sp, #148	; 0x94
 800d334:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d338:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800d33a:	f040 82c9 	bne.w	800d8d0 <_svfprintf_r+0xd40>
 800d33e:	9b03      	ldr	r3, [sp, #12]
 800d340:	e9c4 3800 	strd	r3, r8, [r4]
 800d344:	4447      	add	r7, r8
 800d346:	9724      	str	r7, [sp, #144]	; 0x90
 800d348:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d34a:	3301      	adds	r3, #1
 800d34c:	2b07      	cmp	r3, #7
 800d34e:	9323      	str	r3, [sp, #140]	; 0x8c
 800d350:	f300 8303 	bgt.w	800d95a <_svfprintf_r+0xdca>
 800d354:	3408      	adds	r4, #8
 800d356:	f01b 0f04 	tst.w	fp, #4
 800d35a:	f040 858f 	bne.w	800de7c <_svfprintf_r+0x12ec>
 800d35e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800d362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d364:	428a      	cmp	r2, r1
 800d366:	bfac      	ite	ge
 800d368:	189b      	addge	r3, r3, r2
 800d36a:	185b      	addlt	r3, r3, r1
 800d36c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d36e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d370:	b13b      	cbz	r3, 800d382 <_svfprintf_r+0x7f2>
 800d372:	aa22      	add	r2, sp, #136	; 0x88
 800d374:	4649      	mov	r1, r9
 800d376:	4650      	mov	r0, sl
 800d378:	f001 fe86 	bl	800f088 <__ssprint_r>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	f040 859b 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800d382:	2300      	movs	r3, #0
 800d384:	9323      	str	r3, [sp, #140]	; 0x8c
 800d386:	9b04      	ldr	r3, [sp, #16]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	f040 85b1 	bne.w	800def0 <_svfprintf_r+0x1360>
 800d38e:	ac25      	add	r4, sp, #148	; 0x94
 800d390:	e0e7      	b.n	800d562 <_svfprintf_r+0x9d2>
 800d392:	ab35      	add	r3, sp, #212	; 0xd4
 800d394:	9004      	str	r0, [sp, #16]
 800d396:	9303      	str	r3, [sp, #12]
 800d398:	e62a      	b.n	800cff0 <_svfprintf_r+0x460>
 800d39a:	9b03      	ldr	r3, [sp, #12]
 800d39c:	9304      	str	r3, [sp, #16]
 800d39e:	e627      	b.n	800cff0 <_svfprintf_r+0x460>
 800d3a0:	9004      	str	r0, [sp, #16]
 800d3a2:	f04f 0806 	mov.w	r8, #6
 800d3a6:	e623      	b.n	800cff0 <_svfprintf_r+0x460>
 800d3a8:	9004      	str	r0, [sp, #16]
 800d3aa:	e621      	b.n	800cff0 <_svfprintf_r+0x460>
 800d3ac:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	eeb0 8a47 	vmov.f32	s16, s14
 800d3b6:	eef0 8a67 	vmov.f32	s17, s15
 800d3ba:	e629      	b.n	800d010 <_svfprintf_r+0x480>
 800d3bc:	f802 0c01 	strb.w	r0, [r2, #-1]
 800d3c0:	e68b      	b.n	800d0da <_svfprintf_r+0x54a>
 800d3c2:	f803 0b01 	strb.w	r0, [r3], #1
 800d3c6:	1aca      	subs	r2, r1, r3
 800d3c8:	2a00      	cmp	r2, #0
 800d3ca:	dafa      	bge.n	800d3c2 <_svfprintf_r+0x832>
 800d3cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d3ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3d0:	3201      	adds	r2, #1
 800d3d2:	f103 0301 	add.w	r3, r3, #1
 800d3d6:	bfb8      	it	lt
 800d3d8:	2300      	movlt	r3, #0
 800d3da:	441d      	add	r5, r3
 800d3dc:	e68d      	b.n	800d0fa <_svfprintf_r+0x56a>
 800d3de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d3e0:	462b      	mov	r3, r5
 800d3e2:	18a9      	adds	r1, r5, r2
 800d3e4:	2030      	movs	r0, #48	; 0x30
 800d3e6:	e7ee      	b.n	800d3c6 <_svfprintf_r+0x836>
 800d3e8:	9b08      	ldr	r3, [sp, #32]
 800d3ea:	2b46      	cmp	r3, #70	; 0x46
 800d3ec:	d005      	beq.n	800d3fa <_svfprintf_r+0x86a>
 800d3ee:	2b45      	cmp	r3, #69	; 0x45
 800d3f0:	d11d      	bne.n	800d42e <_svfprintf_r+0x89e>
 800d3f2:	f108 0501 	add.w	r5, r8, #1
 800d3f6:	2102      	movs	r1, #2
 800d3f8:	e001      	b.n	800d3fe <_svfprintf_r+0x86e>
 800d3fa:	4645      	mov	r5, r8
 800d3fc:	2103      	movs	r1, #3
 800d3fe:	ab20      	add	r3, sp, #128	; 0x80
 800d400:	9301      	str	r3, [sp, #4]
 800d402:	ab1d      	add	r3, sp, #116	; 0x74
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	462a      	mov	r2, r5
 800d408:	ab1c      	add	r3, sp, #112	; 0x70
 800d40a:	4650      	mov	r0, sl
 800d40c:	eeb0 0a48 	vmov.f32	s0, s16
 800d410:	eef0 0a68 	vmov.f32	s1, s17
 800d414:	f001 f850 	bl	800e4b8 <_dtoa_r>
 800d418:	9b08      	ldr	r3, [sp, #32]
 800d41a:	9003      	str	r0, [sp, #12]
 800d41c:	2b47      	cmp	r3, #71	; 0x47
 800d41e:	d108      	bne.n	800d432 <_svfprintf_r+0x8a2>
 800d420:	f01b 0f01 	tst.w	fp, #1
 800d424:	d105      	bne.n	800d432 <_svfprintf_r+0x8a2>
 800d426:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d428:	9a03      	ldr	r2, [sp, #12]
 800d42a:	1a9b      	subs	r3, r3, r2
 800d42c:	e667      	b.n	800d0fe <_svfprintf_r+0x56e>
 800d42e:	4645      	mov	r5, r8
 800d430:	e7e1      	b.n	800d3f6 <_svfprintf_r+0x866>
 800d432:	9b03      	ldr	r3, [sp, #12]
 800d434:	195e      	adds	r6, r3, r5
 800d436:	9b08      	ldr	r3, [sp, #32]
 800d438:	2b46      	cmp	r3, #70	; 0x46
 800d43a:	d10f      	bne.n	800d45c <_svfprintf_r+0x8cc>
 800d43c:	9b03      	ldr	r3, [sp, #12]
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	2b30      	cmp	r3, #48	; 0x30
 800d442:	d109      	bne.n	800d458 <_svfprintf_r+0x8c8>
 800d444:	ec51 0b18 	vmov	r0, r1, d8
 800d448:	2200      	movs	r2, #0
 800d44a:	2300      	movs	r3, #0
 800d44c:	f7f3 fb54 	bl	8000af8 <__aeabi_dcmpeq>
 800d450:	b910      	cbnz	r0, 800d458 <_svfprintf_r+0x8c8>
 800d452:	f1c5 0501 	rsb	r5, r5, #1
 800d456:	951c      	str	r5, [sp, #112]	; 0x70
 800d458:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d45a:	441e      	add	r6, r3
 800d45c:	ec51 0b18 	vmov	r0, r1, d8
 800d460:	2200      	movs	r2, #0
 800d462:	2300      	movs	r3, #0
 800d464:	f7f3 fb48 	bl	8000af8 <__aeabi_dcmpeq>
 800d468:	b100      	cbz	r0, 800d46c <_svfprintf_r+0x8dc>
 800d46a:	9620      	str	r6, [sp, #128]	; 0x80
 800d46c:	2230      	movs	r2, #48	; 0x30
 800d46e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d470:	429e      	cmp	r6, r3
 800d472:	d9d8      	bls.n	800d426 <_svfprintf_r+0x896>
 800d474:	1c59      	adds	r1, r3, #1
 800d476:	9120      	str	r1, [sp, #128]	; 0x80
 800d478:	701a      	strb	r2, [r3, #0]
 800d47a:	e7f8      	b.n	800d46e <_svfprintf_r+0x8de>
 800d47c:	9b08      	ldr	r3, [sp, #32]
 800d47e:	2b46      	cmp	r3, #70	; 0x46
 800d480:	f47f ae4b 	bne.w	800d11a <_svfprintf_r+0x58a>
 800d484:	f00b 0301 	and.w	r3, fp, #1
 800d488:	2d00      	cmp	r5, #0
 800d48a:	ea43 0308 	orr.w	r3, r3, r8
 800d48e:	dd25      	ble.n	800d4dc <_svfprintf_r+0x94c>
 800d490:	b383      	cbz	r3, 800d4f4 <_svfprintf_r+0x964>
 800d492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d494:	18eb      	adds	r3, r5, r3
 800d496:	4498      	add	r8, r3
 800d498:	2366      	movs	r3, #102	; 0x66
 800d49a:	9307      	str	r3, [sp, #28]
 800d49c:	e030      	b.n	800d500 <_svfprintf_r+0x970>
 800d49e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d4a2:	f805 6f01 	strb.w	r6, [r5, #1]!
 800d4a6:	e66f      	b.n	800d188 <_svfprintf_r+0x5f8>
 800d4a8:	b941      	cbnz	r1, 800d4bc <_svfprintf_r+0x92c>
 800d4aa:	2230      	movs	r2, #48	; 0x30
 800d4ac:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800d4b0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800d4b4:	3330      	adds	r3, #48	; 0x30
 800d4b6:	f802 3b01 	strb.w	r3, [r2], #1
 800d4ba:	e671      	b.n	800d1a0 <_svfprintf_r+0x610>
 800d4bc:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800d4c0:	e7f8      	b.n	800d4b4 <_svfprintf_r+0x924>
 800d4c2:	9b05      	ldr	r3, [sp, #20]
 800d4c4:	42ab      	cmp	r3, r5
 800d4c6:	dd0d      	ble.n	800d4e4 <_svfprintf_r+0x954>
 800d4c8:	9b05      	ldr	r3, [sp, #20]
 800d4ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4cc:	2d00      	cmp	r5, #0
 800d4ce:	eb03 0802 	add.w	r8, r3, r2
 800d4d2:	dc0d      	bgt.n	800d4f0 <_svfprintf_r+0x960>
 800d4d4:	f1c5 0301 	rsb	r3, r5, #1
 800d4d8:	4498      	add	r8, r3
 800d4da:	e009      	b.n	800d4f0 <_svfprintf_r+0x960>
 800d4dc:	b163      	cbz	r3, 800d4f8 <_svfprintf_r+0x968>
 800d4de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	e7d8      	b.n	800d496 <_svfprintf_r+0x906>
 800d4e4:	f01b 0f01 	tst.w	fp, #1
 800d4e8:	d01d      	beq.n	800d526 <_svfprintf_r+0x996>
 800d4ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4ec:	eb05 0803 	add.w	r8, r5, r3
 800d4f0:	2367      	movs	r3, #103	; 0x67
 800d4f2:	e7d2      	b.n	800d49a <_svfprintf_r+0x90a>
 800d4f4:	46a8      	mov	r8, r5
 800d4f6:	e7cf      	b.n	800d498 <_svfprintf_r+0x908>
 800d4f8:	2366      	movs	r3, #102	; 0x66
 800d4fa:	9307      	str	r3, [sp, #28]
 800d4fc:	f04f 0801 	mov.w	r8, #1
 800d500:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800d504:	9308      	str	r3, [sp, #32]
 800d506:	d01f      	beq.n	800d548 <_svfprintf_r+0x9b8>
 800d508:	2600      	movs	r6, #0
 800d50a:	2d00      	cmp	r5, #0
 800d50c:	9608      	str	r6, [sp, #32]
 800d50e:	f77f ae5c 	ble.w	800d1ca <_svfprintf_r+0x63a>
 800d512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	2bff      	cmp	r3, #255	; 0xff
 800d518:	d107      	bne.n	800d52a <_svfprintf_r+0x99a>
 800d51a:	9b08      	ldr	r3, [sp, #32]
 800d51c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d51e:	4433      	add	r3, r6
 800d520:	fb02 8803 	mla	r8, r2, r3, r8
 800d524:	e651      	b.n	800d1ca <_svfprintf_r+0x63a>
 800d526:	46a8      	mov	r8, r5
 800d528:	e7e2      	b.n	800d4f0 <_svfprintf_r+0x960>
 800d52a:	42ab      	cmp	r3, r5
 800d52c:	daf5      	bge.n	800d51a <_svfprintf_r+0x98a>
 800d52e:	1aed      	subs	r5, r5, r3
 800d530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d532:	785b      	ldrb	r3, [r3, #1]
 800d534:	b133      	cbz	r3, 800d544 <_svfprintf_r+0x9b4>
 800d536:	9b08      	ldr	r3, [sp, #32]
 800d538:	3301      	adds	r3, #1
 800d53a:	9308      	str	r3, [sp, #32]
 800d53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d53e:	3301      	adds	r3, #1
 800d540:	9309      	str	r3, [sp, #36]	; 0x24
 800d542:	e7e6      	b.n	800d512 <_svfprintf_r+0x982>
 800d544:	3601      	adds	r6, #1
 800d546:	e7e4      	b.n	800d512 <_svfprintf_r+0x982>
 800d548:	9e08      	ldr	r6, [sp, #32]
 800d54a:	e63e      	b.n	800d1ca <_svfprintf_r+0x63a>
 800d54c:	1d2b      	adds	r3, r5, #4
 800d54e:	f01b 0f20 	tst.w	fp, #32
 800d552:	9306      	str	r3, [sp, #24]
 800d554:	d00a      	beq.n	800d56c <_svfprintf_r+0x9dc>
 800d556:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d558:	682b      	ldr	r3, [r5, #0]
 800d55a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d55c:	17d2      	asrs	r2, r2, #31
 800d55e:	e9c3 1200 	strd	r1, r2, [r3]
 800d562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d564:	9d06      	ldr	r5, [sp, #24]
 800d566:	9303      	str	r3, [sp, #12]
 800d568:	f7ff bb52 	b.w	800cc10 <_svfprintf_r+0x80>
 800d56c:	f01b 0f10 	tst.w	fp, #16
 800d570:	d003      	beq.n	800d57a <_svfprintf_r+0x9ea>
 800d572:	682b      	ldr	r3, [r5, #0]
 800d574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d576:	601a      	str	r2, [r3, #0]
 800d578:	e7f3      	b.n	800d562 <_svfprintf_r+0x9d2>
 800d57a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800d57e:	d003      	beq.n	800d588 <_svfprintf_r+0x9f8>
 800d580:	682b      	ldr	r3, [r5, #0]
 800d582:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d584:	801a      	strh	r2, [r3, #0]
 800d586:	e7ec      	b.n	800d562 <_svfprintf_r+0x9d2>
 800d588:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800d58c:	d0f1      	beq.n	800d572 <_svfprintf_r+0x9e2>
 800d58e:	682b      	ldr	r3, [r5, #0]
 800d590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d592:	701a      	strb	r2, [r3, #0]
 800d594:	e7e5      	b.n	800d562 <_svfprintf_r+0x9d2>
 800d596:	f04b 0b10 	orr.w	fp, fp, #16
 800d59a:	f01b 0320 	ands.w	r3, fp, #32
 800d59e:	d020      	beq.n	800d5e2 <_svfprintf_r+0xa52>
 800d5a0:	3507      	adds	r5, #7
 800d5a2:	f025 0307 	bic.w	r3, r5, #7
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	685e      	ldr	r6, [r3, #4]
 800d5aa:	f852 5b08 	ldr.w	r5, [r2], #8
 800d5ae:	9206      	str	r2, [sp, #24]
 800d5b0:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800d5bc:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d5c0:	f000 84a7 	beq.w	800df12 <_svfprintf_r+0x1382>
 800d5c4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 800d5c8:	9204      	str	r2, [sp, #16]
 800d5ca:	ea55 0206 	orrs.w	r2, r5, r6
 800d5ce:	f040 84a6 	bne.w	800df1e <_svfprintf_r+0x138e>
 800d5d2:	f1b8 0f00 	cmp.w	r8, #0
 800d5d6:	f000 8107 	beq.w	800d7e8 <_svfprintf_r+0xc58>
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	f040 84a2 	bne.w	800df24 <_svfprintf_r+0x1394>
 800d5e0:	e0a3      	b.n	800d72a <_svfprintf_r+0xb9a>
 800d5e2:	462a      	mov	r2, r5
 800d5e4:	f01b 0610 	ands.w	r6, fp, #16
 800d5e8:	f852 5b04 	ldr.w	r5, [r2], #4
 800d5ec:	9206      	str	r2, [sp, #24]
 800d5ee:	d001      	beq.n	800d5f4 <_svfprintf_r+0xa64>
 800d5f0:	461e      	mov	r6, r3
 800d5f2:	e7dd      	b.n	800d5b0 <_svfprintf_r+0xa20>
 800d5f4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800d5f8:	d001      	beq.n	800d5fe <_svfprintf_r+0xa6e>
 800d5fa:	b2ad      	uxth	r5, r5
 800d5fc:	e7d8      	b.n	800d5b0 <_svfprintf_r+0xa20>
 800d5fe:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800d602:	d0d5      	beq.n	800d5b0 <_svfprintf_r+0xa20>
 800d604:	b2ed      	uxtb	r5, r5
 800d606:	e7f3      	b.n	800d5f0 <_svfprintf_r+0xa60>
 800d608:	462b      	mov	r3, r5
 800d60a:	2278      	movs	r2, #120	; 0x78
 800d60c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d610:	9306      	str	r3, [sp, #24]
 800d612:	f647 0330 	movw	r3, #30768	; 0x7830
 800d616:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800d61a:	4bab      	ldr	r3, [pc, #684]	; (800d8c8 <_svfprintf_r+0xd38>)
 800d61c:	9316      	str	r3, [sp, #88]	; 0x58
 800d61e:	2600      	movs	r6, #0
 800d620:	f04b 0b02 	orr.w	fp, fp, #2
 800d624:	2302      	movs	r3, #2
 800d626:	9207      	str	r2, [sp, #28]
 800d628:	e7c5      	b.n	800d5b6 <_svfprintf_r+0xa26>
 800d62a:	462b      	mov	r3, r5
 800d62c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800d630:	f853 2b04 	ldr.w	r2, [r3], #4
 800d634:	9203      	str	r2, [sp, #12]
 800d636:	f04f 0500 	mov.w	r5, #0
 800d63a:	9306      	str	r3, [sp, #24]
 800d63c:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800d640:	d010      	beq.n	800d664 <_svfprintf_r+0xad4>
 800d642:	9803      	ldr	r0, [sp, #12]
 800d644:	4642      	mov	r2, r8
 800d646:	4629      	mov	r1, r5
 800d648:	f7f2 fde2 	bl	8000210 <memchr>
 800d64c:	9004      	str	r0, [sp, #16]
 800d64e:	2800      	cmp	r0, #0
 800d650:	f000 80e0 	beq.w	800d814 <_svfprintf_r+0xc84>
 800d654:	9a03      	ldr	r2, [sp, #12]
 800d656:	9504      	str	r5, [sp, #16]
 800d658:	eba0 0802 	sub.w	r8, r0, r2
 800d65c:	462f      	mov	r7, r5
 800d65e:	462e      	mov	r6, r5
 800d660:	9508      	str	r5, [sp, #32]
 800d662:	e5ba      	b.n	800d1da <_svfprintf_r+0x64a>
 800d664:	9803      	ldr	r0, [sp, #12]
 800d666:	f7f2 fdc5 	bl	80001f4 <strlen>
 800d66a:	462f      	mov	r7, r5
 800d66c:	4680      	mov	r8, r0
 800d66e:	9504      	str	r5, [sp, #16]
 800d670:	463e      	mov	r6, r7
 800d672:	463b      	mov	r3, r7
 800d674:	e460      	b.n	800cf38 <_svfprintf_r+0x3a8>
 800d676:	f04b 0b10 	orr.w	fp, fp, #16
 800d67a:	f01b 0320 	ands.w	r3, fp, #32
 800d67e:	d009      	beq.n	800d694 <_svfprintf_r+0xb04>
 800d680:	3507      	adds	r5, #7
 800d682:	f025 0307 	bic.w	r3, r5, #7
 800d686:	461a      	mov	r2, r3
 800d688:	685e      	ldr	r6, [r3, #4]
 800d68a:	f852 5b08 	ldr.w	r5, [r2], #8
 800d68e:	9206      	str	r2, [sp, #24]
 800d690:	2301      	movs	r3, #1
 800d692:	e790      	b.n	800d5b6 <_svfprintf_r+0xa26>
 800d694:	462a      	mov	r2, r5
 800d696:	f01b 0610 	ands.w	r6, fp, #16
 800d69a:	f852 5b04 	ldr.w	r5, [r2], #4
 800d69e:	9206      	str	r2, [sp, #24]
 800d6a0:	d001      	beq.n	800d6a6 <_svfprintf_r+0xb16>
 800d6a2:	461e      	mov	r6, r3
 800d6a4:	e7f4      	b.n	800d690 <_svfprintf_r+0xb00>
 800d6a6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800d6aa:	d001      	beq.n	800d6b0 <_svfprintf_r+0xb20>
 800d6ac:	b2ad      	uxth	r5, r5
 800d6ae:	e7ef      	b.n	800d690 <_svfprintf_r+0xb00>
 800d6b0:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800d6b4:	d0ec      	beq.n	800d690 <_svfprintf_r+0xb00>
 800d6b6:	b2ed      	uxtb	r5, r5
 800d6b8:	e7f3      	b.n	800d6a2 <_svfprintf_r+0xb12>
 800d6ba:	4b84      	ldr	r3, [pc, #528]	; (800d8cc <_svfprintf_r+0xd3c>)
 800d6bc:	9316      	str	r3, [sp, #88]	; 0x58
 800d6be:	f01b 0320 	ands.w	r3, fp, #32
 800d6c2:	d01b      	beq.n	800d6fc <_svfprintf_r+0xb6c>
 800d6c4:	3507      	adds	r5, #7
 800d6c6:	f025 0307 	bic.w	r3, r5, #7
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	685e      	ldr	r6, [r3, #4]
 800d6ce:	f852 5b08 	ldr.w	r5, [r2], #8
 800d6d2:	9206      	str	r2, [sp, #24]
 800d6d4:	f01b 0f01 	tst.w	fp, #1
 800d6d8:	d00a      	beq.n	800d6f0 <_svfprintf_r+0xb60>
 800d6da:	ea55 0306 	orrs.w	r3, r5, r6
 800d6de:	d007      	beq.n	800d6f0 <_svfprintf_r+0xb60>
 800d6e0:	2330      	movs	r3, #48	; 0x30
 800d6e2:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800d6e6:	9b07      	ldr	r3, [sp, #28]
 800d6e8:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800d6ec:	f04b 0b02 	orr.w	fp, fp, #2
 800d6f0:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800d6f4:	2302      	movs	r3, #2
 800d6f6:	e75e      	b.n	800d5b6 <_svfprintf_r+0xa26>
 800d6f8:	4b73      	ldr	r3, [pc, #460]	; (800d8c8 <_svfprintf_r+0xd38>)
 800d6fa:	e7df      	b.n	800d6bc <_svfprintf_r+0xb2c>
 800d6fc:	462a      	mov	r2, r5
 800d6fe:	f01b 0610 	ands.w	r6, fp, #16
 800d702:	f852 5b04 	ldr.w	r5, [r2], #4
 800d706:	9206      	str	r2, [sp, #24]
 800d708:	d001      	beq.n	800d70e <_svfprintf_r+0xb7e>
 800d70a:	461e      	mov	r6, r3
 800d70c:	e7e2      	b.n	800d6d4 <_svfprintf_r+0xb44>
 800d70e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800d712:	d001      	beq.n	800d718 <_svfprintf_r+0xb88>
 800d714:	b2ad      	uxth	r5, r5
 800d716:	e7dd      	b.n	800d6d4 <_svfprintf_r+0xb44>
 800d718:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800d71c:	d0da      	beq.n	800d6d4 <_svfprintf_r+0xb44>
 800d71e:	b2ed      	uxtb	r5, r5
 800d720:	e7f3      	b.n	800d70a <_svfprintf_r+0xb7a>
 800d722:	2d0a      	cmp	r5, #10
 800d724:	f176 0300 	sbcs.w	r3, r6, #0
 800d728:	d206      	bcs.n	800d738 <_svfprintf_r+0xba8>
 800d72a:	3530      	adds	r5, #48	; 0x30
 800d72c:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 800d730:	f20d 1337 	addw	r3, sp, #311	; 0x137
 800d734:	f000 bc16 	b.w	800df64 <_svfprintf_r+0x13d4>
 800d738:	2300      	movs	r3, #0
 800d73a:	9305      	str	r3, [sp, #20]
 800d73c:	9b04      	ldr	r3, [sp, #16]
 800d73e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d742:	af4e      	add	r7, sp, #312	; 0x138
 800d744:	9308      	str	r3, [sp, #32]
 800d746:	220a      	movs	r2, #10
 800d748:	2300      	movs	r3, #0
 800d74a:	4628      	mov	r0, r5
 800d74c:	4631      	mov	r1, r6
 800d74e:	f7f3 fab3 	bl	8000cb8 <__aeabi_uldivmod>
 800d752:	1e7b      	subs	r3, r7, #1
 800d754:	9303      	str	r3, [sp, #12]
 800d756:	9b05      	ldr	r3, [sp, #20]
 800d758:	9010      	str	r0, [sp, #64]	; 0x40
 800d75a:	3301      	adds	r3, #1
 800d75c:	9305      	str	r3, [sp, #20]
 800d75e:	9b08      	ldr	r3, [sp, #32]
 800d760:	3230      	adds	r2, #48	; 0x30
 800d762:	468b      	mov	fp, r1
 800d764:	f807 2c01 	strb.w	r2, [r7, #-1]
 800d768:	b1d3      	cbz	r3, 800d7a0 <_svfprintf_r+0xc10>
 800d76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d76c:	9a05      	ldr	r2, [sp, #20]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	429a      	cmp	r2, r3
 800d772:	d115      	bne.n	800d7a0 <_svfprintf_r+0xc10>
 800d774:	2aff      	cmp	r2, #255	; 0xff
 800d776:	d013      	beq.n	800d7a0 <_svfprintf_r+0xc10>
 800d778:	2d0a      	cmp	r5, #10
 800d77a:	f176 0300 	sbcs.w	r3, r6, #0
 800d77e:	d30f      	bcc.n	800d7a0 <_svfprintf_r+0xc10>
 800d780:	9b03      	ldr	r3, [sp, #12]
 800d782:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d784:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d786:	1a9b      	subs	r3, r3, r2
 800d788:	4618      	mov	r0, r3
 800d78a:	9303      	str	r3, [sp, #12]
 800d78c:	f000 fcf9 	bl	800e182 <strncpy>
 800d790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d792:	785b      	ldrb	r3, [r3, #1]
 800d794:	b11b      	cbz	r3, 800d79e <_svfprintf_r+0xc0e>
 800d796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d798:	3301      	adds	r3, #1
 800d79a:	9309      	str	r3, [sp, #36]	; 0x24
 800d79c:	2300      	movs	r3, #0
 800d79e:	9305      	str	r3, [sp, #20]
 800d7a0:	2d0a      	cmp	r5, #10
 800d7a2:	f176 0600 	sbcs.w	r6, r6, #0
 800d7a6:	d20b      	bcs.n	800d7c0 <_svfprintf_r+0xc30>
 800d7a8:	9b03      	ldr	r3, [sp, #12]
 800d7aa:	f8dd b010 	ldr.w	fp, [sp, #16]
 800d7ae:	aa4e      	add	r2, sp, #312	; 0x138
 800d7b0:	4647      	mov	r7, r8
 800d7b2:	eba2 0803 	sub.w	r8, r2, r3
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	9304      	str	r3, [sp, #16]
 800d7ba:	461e      	mov	r6, r3
 800d7bc:	f7ff bbbc 	b.w	800cf38 <_svfprintf_r+0x3a8>
 800d7c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d7c2:	9f03      	ldr	r7, [sp, #12]
 800d7c4:	465e      	mov	r6, fp
 800d7c6:	e7be      	b.n	800d746 <_svfprintf_r+0xbb6>
 800d7c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d7ca:	f005 030f 	and.w	r3, r5, #15
 800d7ce:	092d      	lsrs	r5, r5, #4
 800d7d0:	5cd3      	ldrb	r3, [r2, r3]
 800d7d2:	9a03      	ldr	r2, [sp, #12]
 800d7d4:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 800d7d8:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800d7dc:	0936      	lsrs	r6, r6, #4
 800d7de:	ea55 0306 	orrs.w	r3, r5, r6
 800d7e2:	9203      	str	r2, [sp, #12]
 800d7e4:	d1f0      	bne.n	800d7c8 <_svfprintf_r+0xc38>
 800d7e6:	e7df      	b.n	800d7a8 <_svfprintf_r+0xc18>
 800d7e8:	b933      	cbnz	r3, 800d7f8 <_svfprintf_r+0xc68>
 800d7ea:	f01b 0f01 	tst.w	fp, #1
 800d7ee:	d003      	beq.n	800d7f8 <_svfprintf_r+0xc68>
 800d7f0:	2330      	movs	r3, #48	; 0x30
 800d7f2:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800d7f6:	e79b      	b.n	800d730 <_svfprintf_r+0xba0>
 800d7f8:	ab4e      	add	r3, sp, #312	; 0x138
 800d7fa:	e3b3      	b.n	800df64 <_svfprintf_r+0x13d4>
 800d7fc:	9b07      	ldr	r3, [sp, #28]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f000 837c 	beq.w	800defc <_svfprintf_r+0x136c>
 800d804:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800d808:	2300      	movs	r3, #0
 800d80a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800d80e:	9506      	str	r5, [sp, #24]
 800d810:	f7ff bb1f 	b.w	800ce52 <_svfprintf_r+0x2c2>
 800d814:	9f04      	ldr	r7, [sp, #16]
 800d816:	e72b      	b.n	800d670 <_svfprintf_r+0xae0>
 800d818:	2010      	movs	r0, #16
 800d81a:	4403      	add	r3, r0
 800d81c:	2a07      	cmp	r2, #7
 800d81e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800d822:	6060      	str	r0, [r4, #4]
 800d824:	dd08      	ble.n	800d838 <_svfprintf_r+0xca8>
 800d826:	aa22      	add	r2, sp, #136	; 0x88
 800d828:	4649      	mov	r1, r9
 800d82a:	4650      	mov	r0, sl
 800d82c:	f001 fc2c 	bl	800f088 <__ssprint_r>
 800d830:	2800      	cmp	r0, #0
 800d832:	f040 8341 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800d836:	a925      	add	r1, sp, #148	; 0x94
 800d838:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d83a:	3b10      	subs	r3, #16
 800d83c:	9312      	str	r3, [sp, #72]	; 0x48
 800d83e:	460c      	mov	r4, r1
 800d840:	e4e7      	b.n	800d212 <_svfprintf_r+0x682>
 800d842:	460c      	mov	r4, r1
 800d844:	e502      	b.n	800d24c <_svfprintf_r+0x6bc>
 800d846:	aa22      	add	r2, sp, #136	; 0x88
 800d848:	4649      	mov	r1, r9
 800d84a:	4650      	mov	r0, sl
 800d84c:	f001 fc1c 	bl	800f088 <__ssprint_r>
 800d850:	2800      	cmp	r0, #0
 800d852:	f040 8331 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800d856:	ac25      	add	r4, sp, #148	; 0x94
 800d858:	e50a      	b.n	800d270 <_svfprintf_r+0x6e0>
 800d85a:	aa22      	add	r2, sp, #136	; 0x88
 800d85c:	4649      	mov	r1, r9
 800d85e:	4650      	mov	r0, sl
 800d860:	f001 fc12 	bl	800f088 <__ssprint_r>
 800d864:	2800      	cmp	r0, #0
 800d866:	f040 8327 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800d86a:	ac25      	add	r4, sp, #148	; 0x94
 800d86c:	e510      	b.n	800d290 <_svfprintf_r+0x700>
 800d86e:	2010      	movs	r0, #16
 800d870:	4403      	add	r3, r0
 800d872:	2a07      	cmp	r2, #7
 800d874:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800d878:	6060      	str	r0, [r4, #4]
 800d87a:	dd08      	ble.n	800d88e <_svfprintf_r+0xcfe>
 800d87c:	aa22      	add	r2, sp, #136	; 0x88
 800d87e:	4649      	mov	r1, r9
 800d880:	4650      	mov	r0, sl
 800d882:	f001 fc01 	bl	800f088 <__ssprint_r>
 800d886:	2800      	cmp	r0, #0
 800d888:	f040 8316 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800d88c:	a925      	add	r1, sp, #148	; 0x94
 800d88e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d890:	3b10      	subs	r3, #16
 800d892:	9312      	str	r3, [sp, #72]	; 0x48
 800d894:	460c      	mov	r4, r1
 800d896:	e504      	b.n	800d2a2 <_svfprintf_r+0x712>
 800d898:	460c      	mov	r4, r1
 800d89a:	e51f      	b.n	800d2dc <_svfprintf_r+0x74c>
 800d89c:	2010      	movs	r0, #16
 800d89e:	4402      	add	r2, r0
 800d8a0:	2b07      	cmp	r3, #7
 800d8a2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800d8a6:	6060      	str	r0, [r4, #4]
 800d8a8:	dd08      	ble.n	800d8bc <_svfprintf_r+0xd2c>
 800d8aa:	aa22      	add	r2, sp, #136	; 0x88
 800d8ac:	4649      	mov	r1, r9
 800d8ae:	4650      	mov	r0, sl
 800d8b0:	f001 fbea 	bl	800f088 <__ssprint_r>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	f040 82ff 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800d8ba:	a925      	add	r1, sp, #148	; 0x94
 800d8bc:	3f10      	subs	r7, #16
 800d8be:	460c      	mov	r4, r1
 800d8c0:	e510      	b.n	800d2e4 <_svfprintf_r+0x754>
 800d8c2:	460c      	mov	r4, r1
 800d8c4:	e536      	b.n	800d334 <_svfprintf_r+0x7a4>
 800d8c6:	bf00      	nop
 800d8c8:	0801280c 	.word	0x0801280c
 800d8cc:	0801281d 	.word	0x0801281d
 800d8d0:	9b07      	ldr	r3, [sp, #28]
 800d8d2:	2b65      	cmp	r3, #101	; 0x65
 800d8d4:	f340 823a 	ble.w	800dd4c <_svfprintf_r+0x11bc>
 800d8d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d8dc:	2200      	movs	r2, #0
 800d8de:	2300      	movs	r3, #0
 800d8e0:	f7f3 f90a 	bl	8000af8 <__aeabi_dcmpeq>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d068      	beq.n	800d9ba <_svfprintf_r+0xe2a>
 800d8e8:	4b6d      	ldr	r3, [pc, #436]	; (800daa0 <_svfprintf_r+0xf10>)
 800d8ea:	6023      	str	r3, [r4, #0]
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	441f      	add	r7, r3
 800d8f0:	6063      	str	r3, [r4, #4]
 800d8f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d8f4:	9724      	str	r7, [sp, #144]	; 0x90
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	2b07      	cmp	r3, #7
 800d8fa:	9323      	str	r3, [sp, #140]	; 0x8c
 800d8fc:	dc37      	bgt.n	800d96e <_svfprintf_r+0xdde>
 800d8fe:	3408      	adds	r4, #8
 800d900:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d902:	9a05      	ldr	r2, [sp, #20]
 800d904:	4293      	cmp	r3, r2
 800d906:	db03      	blt.n	800d910 <_svfprintf_r+0xd80>
 800d908:	f01b 0f01 	tst.w	fp, #1
 800d90c:	f43f ad23 	beq.w	800d356 <_svfprintf_r+0x7c6>
 800d910:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d912:	6023      	str	r3, [r4, #0]
 800d914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d916:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d918:	6063      	str	r3, [r4, #4]
 800d91a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d91c:	4413      	add	r3, r2
 800d91e:	9324      	str	r3, [sp, #144]	; 0x90
 800d920:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d922:	3301      	adds	r3, #1
 800d924:	2b07      	cmp	r3, #7
 800d926:	9323      	str	r3, [sp, #140]	; 0x8c
 800d928:	dc2b      	bgt.n	800d982 <_svfprintf_r+0xdf2>
 800d92a:	3408      	adds	r4, #8
 800d92c:	9b05      	ldr	r3, [sp, #20]
 800d92e:	1e5d      	subs	r5, r3, #1
 800d930:	2d00      	cmp	r5, #0
 800d932:	f77f ad10 	ble.w	800d356 <_svfprintf_r+0x7c6>
 800d936:	4e5b      	ldr	r6, [pc, #364]	; (800daa4 <_svfprintf_r+0xf14>)
 800d938:	2710      	movs	r7, #16
 800d93a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800d93e:	2d10      	cmp	r5, #16
 800d940:	f103 0301 	add.w	r3, r3, #1
 800d944:	f104 0108 	add.w	r1, r4, #8
 800d948:	6026      	str	r6, [r4, #0]
 800d94a:	dc24      	bgt.n	800d996 <_svfprintf_r+0xe06>
 800d94c:	6065      	str	r5, [r4, #4]
 800d94e:	4415      	add	r5, r2
 800d950:	9524      	str	r5, [sp, #144]	; 0x90
 800d952:	2b07      	cmp	r3, #7
 800d954:	9323      	str	r3, [sp, #140]	; 0x8c
 800d956:	f340 828e 	ble.w	800de76 <_svfprintf_r+0x12e6>
 800d95a:	aa22      	add	r2, sp, #136	; 0x88
 800d95c:	4649      	mov	r1, r9
 800d95e:	4650      	mov	r0, sl
 800d960:	f001 fb92 	bl	800f088 <__ssprint_r>
 800d964:	2800      	cmp	r0, #0
 800d966:	f040 82a7 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800d96a:	ac25      	add	r4, sp, #148	; 0x94
 800d96c:	e4f3      	b.n	800d356 <_svfprintf_r+0x7c6>
 800d96e:	aa22      	add	r2, sp, #136	; 0x88
 800d970:	4649      	mov	r1, r9
 800d972:	4650      	mov	r0, sl
 800d974:	f001 fb88 	bl	800f088 <__ssprint_r>
 800d978:	2800      	cmp	r0, #0
 800d97a:	f040 829d 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800d97e:	ac25      	add	r4, sp, #148	; 0x94
 800d980:	e7be      	b.n	800d900 <_svfprintf_r+0xd70>
 800d982:	aa22      	add	r2, sp, #136	; 0x88
 800d984:	4649      	mov	r1, r9
 800d986:	4650      	mov	r0, sl
 800d988:	f001 fb7e 	bl	800f088 <__ssprint_r>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	f040 8293 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800d992:	ac25      	add	r4, sp, #148	; 0x94
 800d994:	e7ca      	b.n	800d92c <_svfprintf_r+0xd9c>
 800d996:	3210      	adds	r2, #16
 800d998:	2b07      	cmp	r3, #7
 800d99a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800d99e:	6067      	str	r7, [r4, #4]
 800d9a0:	dd08      	ble.n	800d9b4 <_svfprintf_r+0xe24>
 800d9a2:	aa22      	add	r2, sp, #136	; 0x88
 800d9a4:	4649      	mov	r1, r9
 800d9a6:	4650      	mov	r0, sl
 800d9a8:	f001 fb6e 	bl	800f088 <__ssprint_r>
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	f040 8283 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800d9b2:	a925      	add	r1, sp, #148	; 0x94
 800d9b4:	3d10      	subs	r5, #16
 800d9b6:	460c      	mov	r4, r1
 800d9b8:	e7bf      	b.n	800d93a <_svfprintf_r+0xdaa>
 800d9ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	dc73      	bgt.n	800daa8 <_svfprintf_r+0xf18>
 800d9c0:	4b37      	ldr	r3, [pc, #220]	; (800daa0 <_svfprintf_r+0xf10>)
 800d9c2:	6023      	str	r3, [r4, #0]
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	441f      	add	r7, r3
 800d9c8:	6063      	str	r3, [r4, #4]
 800d9ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d9cc:	9724      	str	r7, [sp, #144]	; 0x90
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	2b07      	cmp	r3, #7
 800d9d2:	9323      	str	r3, [sp, #140]	; 0x8c
 800d9d4:	dc3d      	bgt.n	800da52 <_svfprintf_r+0xec2>
 800d9d6:	3408      	adds	r4, #8
 800d9d8:	9905      	ldr	r1, [sp, #20]
 800d9da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d9dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d9de:	430b      	orrs	r3, r1
 800d9e0:	f00b 0101 	and.w	r1, fp, #1
 800d9e4:	430b      	orrs	r3, r1
 800d9e6:	f43f acb6 	beq.w	800d356 <_svfprintf_r+0x7c6>
 800d9ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d9ec:	6023      	str	r3, [r4, #0]
 800d9ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9f0:	6063      	str	r3, [r4, #4]
 800d9f2:	441a      	add	r2, r3
 800d9f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d9f6:	9224      	str	r2, [sp, #144]	; 0x90
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	2b07      	cmp	r3, #7
 800d9fc:	9323      	str	r3, [sp, #140]	; 0x8c
 800d9fe:	dc32      	bgt.n	800da66 <_svfprintf_r+0xed6>
 800da00:	3408      	adds	r4, #8
 800da02:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800da04:	2d00      	cmp	r5, #0
 800da06:	da1b      	bge.n	800da40 <_svfprintf_r+0xeb0>
 800da08:	4e26      	ldr	r6, [pc, #152]	; (800daa4 <_svfprintf_r+0xf14>)
 800da0a:	426d      	negs	r5, r5
 800da0c:	4623      	mov	r3, r4
 800da0e:	2710      	movs	r7, #16
 800da10:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800da14:	2d10      	cmp	r5, #16
 800da16:	f102 0201 	add.w	r2, r2, #1
 800da1a:	f104 0408 	add.w	r4, r4, #8
 800da1e:	601e      	str	r6, [r3, #0]
 800da20:	dc2b      	bgt.n	800da7a <_svfprintf_r+0xeea>
 800da22:	605d      	str	r5, [r3, #4]
 800da24:	2a07      	cmp	r2, #7
 800da26:	440d      	add	r5, r1
 800da28:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800da2c:	dd08      	ble.n	800da40 <_svfprintf_r+0xeb0>
 800da2e:	aa22      	add	r2, sp, #136	; 0x88
 800da30:	4649      	mov	r1, r9
 800da32:	4650      	mov	r0, sl
 800da34:	f001 fb28 	bl	800f088 <__ssprint_r>
 800da38:	2800      	cmp	r0, #0
 800da3a:	f040 823d 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800da3e:	ac25      	add	r4, sp, #148	; 0x94
 800da40:	9b03      	ldr	r3, [sp, #12]
 800da42:	6023      	str	r3, [r4, #0]
 800da44:	9b05      	ldr	r3, [sp, #20]
 800da46:	9a05      	ldr	r2, [sp, #20]
 800da48:	6063      	str	r3, [r4, #4]
 800da4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800da4c:	4413      	add	r3, r2
 800da4e:	9324      	str	r3, [sp, #144]	; 0x90
 800da50:	e47a      	b.n	800d348 <_svfprintf_r+0x7b8>
 800da52:	aa22      	add	r2, sp, #136	; 0x88
 800da54:	4649      	mov	r1, r9
 800da56:	4650      	mov	r0, sl
 800da58:	f001 fb16 	bl	800f088 <__ssprint_r>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	f040 822b 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800da62:	ac25      	add	r4, sp, #148	; 0x94
 800da64:	e7b8      	b.n	800d9d8 <_svfprintf_r+0xe48>
 800da66:	aa22      	add	r2, sp, #136	; 0x88
 800da68:	4649      	mov	r1, r9
 800da6a:	4650      	mov	r0, sl
 800da6c:	f001 fb0c 	bl	800f088 <__ssprint_r>
 800da70:	2800      	cmp	r0, #0
 800da72:	f040 8221 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800da76:	ac25      	add	r4, sp, #148	; 0x94
 800da78:	e7c3      	b.n	800da02 <_svfprintf_r+0xe72>
 800da7a:	3110      	adds	r1, #16
 800da7c:	2a07      	cmp	r2, #7
 800da7e:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800da82:	605f      	str	r7, [r3, #4]
 800da84:	dd08      	ble.n	800da98 <_svfprintf_r+0xf08>
 800da86:	aa22      	add	r2, sp, #136	; 0x88
 800da88:	4649      	mov	r1, r9
 800da8a:	4650      	mov	r0, sl
 800da8c:	f001 fafc 	bl	800f088 <__ssprint_r>
 800da90:	2800      	cmp	r0, #0
 800da92:	f040 8211 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800da96:	ac25      	add	r4, sp, #148	; 0x94
 800da98:	3d10      	subs	r5, #16
 800da9a:	4623      	mov	r3, r4
 800da9c:	e7b8      	b.n	800da10 <_svfprintf_r+0xe80>
 800da9e:	bf00      	nop
 800daa0:	0801282e 	.word	0x0801282e
 800daa4:	08012840 	.word	0x08012840
 800daa8:	9b05      	ldr	r3, [sp, #20]
 800daaa:	42ab      	cmp	r3, r5
 800daac:	bfa8      	it	ge
 800daae:	462b      	movge	r3, r5
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	4698      	mov	r8, r3
 800dab4:	dd0a      	ble.n	800dacc <_svfprintf_r+0xf3c>
 800dab6:	9b03      	ldr	r3, [sp, #12]
 800dab8:	e9c4 3800 	strd	r3, r8, [r4]
 800dabc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dabe:	3301      	adds	r3, #1
 800dac0:	4447      	add	r7, r8
 800dac2:	2b07      	cmp	r3, #7
 800dac4:	9724      	str	r7, [sp, #144]	; 0x90
 800dac6:	9323      	str	r3, [sp, #140]	; 0x8c
 800dac8:	dc7b      	bgt.n	800dbc2 <_svfprintf_r+0x1032>
 800daca:	3408      	adds	r4, #8
 800dacc:	f1b8 0f00 	cmp.w	r8, #0
 800dad0:	bfac      	ite	ge
 800dad2:	eba5 0708 	subge.w	r7, r5, r8
 800dad6:	462f      	movlt	r7, r5
 800dad8:	2f00      	cmp	r7, #0
 800dada:	dd1a      	ble.n	800db12 <_svfprintf_r+0xf82>
 800dadc:	f8df 8368 	ldr.w	r8, [pc, #872]	; 800de48 <_svfprintf_r+0x12b8>
 800dae0:	f8c4 8000 	str.w	r8, [r4]
 800dae4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800dae8:	2f10      	cmp	r7, #16
 800daea:	f103 0301 	add.w	r3, r3, #1
 800daee:	f104 0108 	add.w	r1, r4, #8
 800daf2:	dc70      	bgt.n	800dbd6 <_svfprintf_r+0x1046>
 800daf4:	6067      	str	r7, [r4, #4]
 800daf6:	2b07      	cmp	r3, #7
 800daf8:	4417      	add	r7, r2
 800dafa:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800dafe:	dd7d      	ble.n	800dbfc <_svfprintf_r+0x106c>
 800db00:	aa22      	add	r2, sp, #136	; 0x88
 800db02:	4649      	mov	r1, r9
 800db04:	4650      	mov	r0, sl
 800db06:	f001 fabf 	bl	800f088 <__ssprint_r>
 800db0a:	2800      	cmp	r0, #0
 800db0c:	f040 81d4 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800db10:	ac25      	add	r4, sp, #148	; 0x94
 800db12:	9b03      	ldr	r3, [sp, #12]
 800db14:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800db18:	441d      	add	r5, r3
 800db1a:	d00a      	beq.n	800db32 <_svfprintf_r+0xfa2>
 800db1c:	9b08      	ldr	r3, [sp, #32]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d16e      	bne.n	800dc00 <_svfprintf_r+0x1070>
 800db22:	2e00      	cmp	r6, #0
 800db24:	d16e      	bne.n	800dc04 <_svfprintf_r+0x1074>
 800db26:	9b03      	ldr	r3, [sp, #12]
 800db28:	9a05      	ldr	r2, [sp, #20]
 800db2a:	4413      	add	r3, r2
 800db2c:	429d      	cmp	r5, r3
 800db2e:	bf28      	it	cs
 800db30:	461d      	movcs	r5, r3
 800db32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800db34:	9a05      	ldr	r2, [sp, #20]
 800db36:	4293      	cmp	r3, r2
 800db38:	db02      	blt.n	800db40 <_svfprintf_r+0xfb0>
 800db3a:	f01b 0f01 	tst.w	fp, #1
 800db3e:	d00e      	beq.n	800db5e <_svfprintf_r+0xfce>
 800db40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800db42:	6023      	str	r3, [r4, #0]
 800db44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db48:	6063      	str	r3, [r4, #4]
 800db4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800db4c:	4413      	add	r3, r2
 800db4e:	9324      	str	r3, [sp, #144]	; 0x90
 800db50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800db52:	3301      	adds	r3, #1
 800db54:	2b07      	cmp	r3, #7
 800db56:	9323      	str	r3, [sp, #140]	; 0x8c
 800db58:	f300 80d2 	bgt.w	800dd00 <_svfprintf_r+0x1170>
 800db5c:	3408      	adds	r4, #8
 800db5e:	9b05      	ldr	r3, [sp, #20]
 800db60:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800db62:	9a05      	ldr	r2, [sp, #20]
 800db64:	1b9e      	subs	r6, r3, r6
 800db66:	9b03      	ldr	r3, [sp, #12]
 800db68:	4413      	add	r3, r2
 800db6a:	1b5b      	subs	r3, r3, r5
 800db6c:	429e      	cmp	r6, r3
 800db6e:	bfa8      	it	ge
 800db70:	461e      	movge	r6, r3
 800db72:	2e00      	cmp	r6, #0
 800db74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800db76:	dd0a      	ble.n	800db8e <_svfprintf_r+0xffe>
 800db78:	4433      	add	r3, r6
 800db7a:	9324      	str	r3, [sp, #144]	; 0x90
 800db7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800db7e:	3301      	adds	r3, #1
 800db80:	2b07      	cmp	r3, #7
 800db82:	e9c4 5600 	strd	r5, r6, [r4]
 800db86:	9323      	str	r3, [sp, #140]	; 0x8c
 800db88:	f300 80c4 	bgt.w	800dd14 <_svfprintf_r+0x1184>
 800db8c:	3408      	adds	r4, #8
 800db8e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800db90:	9b05      	ldr	r3, [sp, #20]
 800db92:	2e00      	cmp	r6, #0
 800db94:	eba3 0505 	sub.w	r5, r3, r5
 800db98:	bfa8      	it	ge
 800db9a:	1bad      	subge	r5, r5, r6
 800db9c:	2d00      	cmp	r5, #0
 800db9e:	f77f abda 	ble.w	800d356 <_svfprintf_r+0x7c6>
 800dba2:	4ea9      	ldr	r6, [pc, #676]	; (800de48 <_svfprintf_r+0x12b8>)
 800dba4:	2710      	movs	r7, #16
 800dba6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800dbaa:	2d10      	cmp	r5, #16
 800dbac:	f103 0301 	add.w	r3, r3, #1
 800dbb0:	f104 0108 	add.w	r1, r4, #8
 800dbb4:	6026      	str	r6, [r4, #0]
 800dbb6:	f300 80b7 	bgt.w	800dd28 <_svfprintf_r+0x1198>
 800dbba:	442a      	add	r2, r5
 800dbbc:	6065      	str	r5, [r4, #4]
 800dbbe:	9224      	str	r2, [sp, #144]	; 0x90
 800dbc0:	e6c7      	b.n	800d952 <_svfprintf_r+0xdc2>
 800dbc2:	aa22      	add	r2, sp, #136	; 0x88
 800dbc4:	4649      	mov	r1, r9
 800dbc6:	4650      	mov	r0, sl
 800dbc8:	f001 fa5e 	bl	800f088 <__ssprint_r>
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	f040 8173 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800dbd2:	ac25      	add	r4, sp, #148	; 0x94
 800dbd4:	e77a      	b.n	800dacc <_svfprintf_r+0xf3c>
 800dbd6:	2010      	movs	r0, #16
 800dbd8:	4402      	add	r2, r0
 800dbda:	2b07      	cmp	r3, #7
 800dbdc:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800dbe0:	6060      	str	r0, [r4, #4]
 800dbe2:	dd08      	ble.n	800dbf6 <_svfprintf_r+0x1066>
 800dbe4:	aa22      	add	r2, sp, #136	; 0x88
 800dbe6:	4649      	mov	r1, r9
 800dbe8:	4650      	mov	r0, sl
 800dbea:	f001 fa4d 	bl	800f088 <__ssprint_r>
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	f040 8162 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800dbf4:	a925      	add	r1, sp, #148	; 0x94
 800dbf6:	3f10      	subs	r7, #16
 800dbf8:	460c      	mov	r4, r1
 800dbfa:	e771      	b.n	800dae0 <_svfprintf_r+0xf50>
 800dbfc:	460c      	mov	r4, r1
 800dbfe:	e788      	b.n	800db12 <_svfprintf_r+0xf82>
 800dc00:	2e00      	cmp	r6, #0
 800dc02:	d04d      	beq.n	800dca0 <_svfprintf_r+0x1110>
 800dc04:	3e01      	subs	r6, #1
 800dc06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc08:	6023      	str	r3, [r4, #0]
 800dc0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dc0e:	6063      	str	r3, [r4, #4]
 800dc10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dc12:	4413      	add	r3, r2
 800dc14:	9324      	str	r3, [sp, #144]	; 0x90
 800dc16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dc18:	3301      	adds	r3, #1
 800dc1a:	2b07      	cmp	r3, #7
 800dc1c:	9323      	str	r3, [sp, #140]	; 0x8c
 800dc1e:	dc46      	bgt.n	800dcae <_svfprintf_r+0x111e>
 800dc20:	3408      	adds	r4, #8
 800dc22:	9b03      	ldr	r3, [sp, #12]
 800dc24:	9a05      	ldr	r2, [sp, #20]
 800dc26:	eb03 0802 	add.w	r8, r3, r2
 800dc2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	eba8 0805 	sub.w	r8, r8, r5
 800dc32:	4598      	cmp	r8, r3
 800dc34:	bfa8      	it	ge
 800dc36:	4698      	movge	r8, r3
 800dc38:	f1b8 0f00 	cmp.w	r8, #0
 800dc3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dc3e:	dd09      	ble.n	800dc54 <_svfprintf_r+0x10c4>
 800dc40:	4443      	add	r3, r8
 800dc42:	9324      	str	r3, [sp, #144]	; 0x90
 800dc44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dc46:	3301      	adds	r3, #1
 800dc48:	2b07      	cmp	r3, #7
 800dc4a:	e9c4 5800 	strd	r5, r8, [r4]
 800dc4e:	9323      	str	r3, [sp, #140]	; 0x8c
 800dc50:	dc37      	bgt.n	800dcc2 <_svfprintf_r+0x1132>
 800dc52:	3408      	adds	r4, #8
 800dc54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc56:	781f      	ldrb	r7, [r3, #0]
 800dc58:	f1b8 0f00 	cmp.w	r8, #0
 800dc5c:	bfa8      	it	ge
 800dc5e:	eba7 0708 	subge.w	r7, r7, r8
 800dc62:	2f00      	cmp	r7, #0
 800dc64:	dd18      	ble.n	800dc98 <_svfprintf_r+0x1108>
 800dc66:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800dc6a:	4877      	ldr	r0, [pc, #476]	; (800de48 <_svfprintf_r+0x12b8>)
 800dc6c:	6020      	str	r0, [r4, #0]
 800dc6e:	2f10      	cmp	r7, #16
 800dc70:	f103 0301 	add.w	r3, r3, #1
 800dc74:	f104 0108 	add.w	r1, r4, #8
 800dc78:	dc2d      	bgt.n	800dcd6 <_svfprintf_r+0x1146>
 800dc7a:	443a      	add	r2, r7
 800dc7c:	2b07      	cmp	r3, #7
 800dc7e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800dc82:	6067      	str	r7, [r4, #4]
 800dc84:	dd3a      	ble.n	800dcfc <_svfprintf_r+0x116c>
 800dc86:	aa22      	add	r2, sp, #136	; 0x88
 800dc88:	4649      	mov	r1, r9
 800dc8a:	4650      	mov	r0, sl
 800dc8c:	f001 f9fc 	bl	800f088 <__ssprint_r>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	f040 8111 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800dc96:	ac25      	add	r4, sp, #148	; 0x94
 800dc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	441d      	add	r5, r3
 800dc9e:	e73d      	b.n	800db1c <_svfprintf_r+0xf8c>
 800dca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dca2:	3b01      	subs	r3, #1
 800dca4:	9309      	str	r3, [sp, #36]	; 0x24
 800dca6:	9b08      	ldr	r3, [sp, #32]
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	9308      	str	r3, [sp, #32]
 800dcac:	e7ab      	b.n	800dc06 <_svfprintf_r+0x1076>
 800dcae:	aa22      	add	r2, sp, #136	; 0x88
 800dcb0:	4649      	mov	r1, r9
 800dcb2:	4650      	mov	r0, sl
 800dcb4:	f001 f9e8 	bl	800f088 <__ssprint_r>
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	f040 80fd 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800dcbe:	ac25      	add	r4, sp, #148	; 0x94
 800dcc0:	e7af      	b.n	800dc22 <_svfprintf_r+0x1092>
 800dcc2:	aa22      	add	r2, sp, #136	; 0x88
 800dcc4:	4649      	mov	r1, r9
 800dcc6:	4650      	mov	r0, sl
 800dcc8:	f001 f9de 	bl	800f088 <__ssprint_r>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	f040 80f3 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800dcd2:	ac25      	add	r4, sp, #148	; 0x94
 800dcd4:	e7be      	b.n	800dc54 <_svfprintf_r+0x10c4>
 800dcd6:	2010      	movs	r0, #16
 800dcd8:	4402      	add	r2, r0
 800dcda:	2b07      	cmp	r3, #7
 800dcdc:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800dce0:	6060      	str	r0, [r4, #4]
 800dce2:	dd08      	ble.n	800dcf6 <_svfprintf_r+0x1166>
 800dce4:	aa22      	add	r2, sp, #136	; 0x88
 800dce6:	4649      	mov	r1, r9
 800dce8:	4650      	mov	r0, sl
 800dcea:	f001 f9cd 	bl	800f088 <__ssprint_r>
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	f040 80e2 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800dcf4:	a925      	add	r1, sp, #148	; 0x94
 800dcf6:	3f10      	subs	r7, #16
 800dcf8:	460c      	mov	r4, r1
 800dcfa:	e7b4      	b.n	800dc66 <_svfprintf_r+0x10d6>
 800dcfc:	460c      	mov	r4, r1
 800dcfe:	e7cb      	b.n	800dc98 <_svfprintf_r+0x1108>
 800dd00:	aa22      	add	r2, sp, #136	; 0x88
 800dd02:	4649      	mov	r1, r9
 800dd04:	4650      	mov	r0, sl
 800dd06:	f001 f9bf 	bl	800f088 <__ssprint_r>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	f040 80d4 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800dd10:	ac25      	add	r4, sp, #148	; 0x94
 800dd12:	e724      	b.n	800db5e <_svfprintf_r+0xfce>
 800dd14:	aa22      	add	r2, sp, #136	; 0x88
 800dd16:	4649      	mov	r1, r9
 800dd18:	4650      	mov	r0, sl
 800dd1a:	f001 f9b5 	bl	800f088 <__ssprint_r>
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	f040 80ca 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800dd24:	ac25      	add	r4, sp, #148	; 0x94
 800dd26:	e732      	b.n	800db8e <_svfprintf_r+0xffe>
 800dd28:	3210      	adds	r2, #16
 800dd2a:	2b07      	cmp	r3, #7
 800dd2c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800dd30:	6067      	str	r7, [r4, #4]
 800dd32:	dd08      	ble.n	800dd46 <_svfprintf_r+0x11b6>
 800dd34:	aa22      	add	r2, sp, #136	; 0x88
 800dd36:	4649      	mov	r1, r9
 800dd38:	4650      	mov	r0, sl
 800dd3a:	f001 f9a5 	bl	800f088 <__ssprint_r>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	f040 80ba 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800dd44:	a925      	add	r1, sp, #148	; 0x94
 800dd46:	3d10      	subs	r5, #16
 800dd48:	460c      	mov	r4, r1
 800dd4a:	e72c      	b.n	800dba6 <_svfprintf_r+0x1016>
 800dd4c:	9a05      	ldr	r2, [sp, #20]
 800dd4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd50:	2a01      	cmp	r2, #1
 800dd52:	9a03      	ldr	r2, [sp, #12]
 800dd54:	6022      	str	r2, [r4, #0]
 800dd56:	f107 0701 	add.w	r7, r7, #1
 800dd5a:	f103 0301 	add.w	r3, r3, #1
 800dd5e:	f04f 0201 	mov.w	r2, #1
 800dd62:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800dd66:	f104 0508 	add.w	r5, r4, #8
 800dd6a:	6062      	str	r2, [r4, #4]
 800dd6c:	dc02      	bgt.n	800dd74 <_svfprintf_r+0x11e4>
 800dd6e:	f01b 0f01 	tst.w	fp, #1
 800dd72:	d07b      	beq.n	800de6c <_svfprintf_r+0x12dc>
 800dd74:	2b07      	cmp	r3, #7
 800dd76:	dd08      	ble.n	800dd8a <_svfprintf_r+0x11fa>
 800dd78:	aa22      	add	r2, sp, #136	; 0x88
 800dd7a:	4649      	mov	r1, r9
 800dd7c:	4650      	mov	r0, sl
 800dd7e:	f001 f983 	bl	800f088 <__ssprint_r>
 800dd82:	2800      	cmp	r0, #0
 800dd84:	f040 8098 	bne.w	800deb8 <_svfprintf_r+0x1328>
 800dd88:	ad25      	add	r5, sp, #148	; 0x94
 800dd8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dd8c:	602b      	str	r3, [r5, #0]
 800dd8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd92:	606b      	str	r3, [r5, #4]
 800dd94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800dd96:	4413      	add	r3, r2
 800dd98:	9324      	str	r3, [sp, #144]	; 0x90
 800dd9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	2b07      	cmp	r3, #7
 800dda0:	9323      	str	r3, [sp, #140]	; 0x8c
 800dda2:	dc32      	bgt.n	800de0a <_svfprintf_r+0x127a>
 800dda4:	3508      	adds	r5, #8
 800dda6:	9b05      	ldr	r3, [sp, #20]
 800dda8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ddac:	1e5c      	subs	r4, r3, #1
 800ddae:	2200      	movs	r2, #0
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 800ddb6:	f7f2 fe9f 	bl	8000af8 <__aeabi_dcmpeq>
 800ddba:	2800      	cmp	r0, #0
 800ddbc:	d12e      	bne.n	800de1c <_svfprintf_r+0x128c>
 800ddbe:	9b03      	ldr	r3, [sp, #12]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	e9c5 3400 	strd	r3, r4, [r5]
 800ddc6:	9b05      	ldr	r3, [sp, #20]
 800ddc8:	3701      	adds	r7, #1
 800ddca:	3e01      	subs	r6, #1
 800ddcc:	441e      	add	r6, r3
 800ddce:	2f07      	cmp	r7, #7
 800ddd0:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 800ddd4:	dd4d      	ble.n	800de72 <_svfprintf_r+0x12e2>
 800ddd6:	aa22      	add	r2, sp, #136	; 0x88
 800ddd8:	4649      	mov	r1, r9
 800ddda:	4650      	mov	r0, sl
 800dddc:	f001 f954 	bl	800f088 <__ssprint_r>
 800dde0:	2800      	cmp	r0, #0
 800dde2:	d169      	bne.n	800deb8 <_svfprintf_r+0x1328>
 800dde4:	ad25      	add	r5, sp, #148	; 0x94
 800dde6:	ab1e      	add	r3, sp, #120	; 0x78
 800dde8:	602b      	str	r3, [r5, #0]
 800ddea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ddee:	606b      	str	r3, [r5, #4]
 800ddf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ddf2:	4413      	add	r3, r2
 800ddf4:	9324      	str	r3, [sp, #144]	; 0x90
 800ddf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	2b07      	cmp	r3, #7
 800ddfc:	9323      	str	r3, [sp, #140]	; 0x8c
 800ddfe:	f73f adac 	bgt.w	800d95a <_svfprintf_r+0xdca>
 800de02:	f105 0408 	add.w	r4, r5, #8
 800de06:	f7ff baa6 	b.w	800d356 <_svfprintf_r+0x7c6>
 800de0a:	aa22      	add	r2, sp, #136	; 0x88
 800de0c:	4649      	mov	r1, r9
 800de0e:	4650      	mov	r0, sl
 800de10:	f001 f93a 	bl	800f088 <__ssprint_r>
 800de14:	2800      	cmp	r0, #0
 800de16:	d14f      	bne.n	800deb8 <_svfprintf_r+0x1328>
 800de18:	ad25      	add	r5, sp, #148	; 0x94
 800de1a:	e7c4      	b.n	800dda6 <_svfprintf_r+0x1216>
 800de1c:	2c00      	cmp	r4, #0
 800de1e:	dde2      	ble.n	800dde6 <_svfprintf_r+0x1256>
 800de20:	4e09      	ldr	r6, [pc, #36]	; (800de48 <_svfprintf_r+0x12b8>)
 800de22:	2710      	movs	r7, #16
 800de24:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800de28:	2c10      	cmp	r4, #16
 800de2a:	f103 0301 	add.w	r3, r3, #1
 800de2e:	f105 0108 	add.w	r1, r5, #8
 800de32:	602e      	str	r6, [r5, #0]
 800de34:	dc0a      	bgt.n	800de4c <_svfprintf_r+0x12bc>
 800de36:	606c      	str	r4, [r5, #4]
 800de38:	2b07      	cmp	r3, #7
 800de3a:	4414      	add	r4, r2
 800de3c:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800de40:	dcc9      	bgt.n	800ddd6 <_svfprintf_r+0x1246>
 800de42:	460d      	mov	r5, r1
 800de44:	e7cf      	b.n	800dde6 <_svfprintf_r+0x1256>
 800de46:	bf00      	nop
 800de48:	08012840 	.word	0x08012840
 800de4c:	3210      	adds	r2, #16
 800de4e:	2b07      	cmp	r3, #7
 800de50:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800de54:	606f      	str	r7, [r5, #4]
 800de56:	dd06      	ble.n	800de66 <_svfprintf_r+0x12d6>
 800de58:	aa22      	add	r2, sp, #136	; 0x88
 800de5a:	4649      	mov	r1, r9
 800de5c:	4650      	mov	r0, sl
 800de5e:	f001 f913 	bl	800f088 <__ssprint_r>
 800de62:	bb48      	cbnz	r0, 800deb8 <_svfprintf_r+0x1328>
 800de64:	a925      	add	r1, sp, #148	; 0x94
 800de66:	3c10      	subs	r4, #16
 800de68:	460d      	mov	r5, r1
 800de6a:	e7db      	b.n	800de24 <_svfprintf_r+0x1294>
 800de6c:	2b07      	cmp	r3, #7
 800de6e:	ddba      	ble.n	800dde6 <_svfprintf_r+0x1256>
 800de70:	e7b1      	b.n	800ddd6 <_svfprintf_r+0x1246>
 800de72:	3508      	adds	r5, #8
 800de74:	e7b7      	b.n	800dde6 <_svfprintf_r+0x1256>
 800de76:	460c      	mov	r4, r1
 800de78:	f7ff ba6d 	b.w	800d356 <_svfprintf_r+0x7c6>
 800de7c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800de80:	1a9d      	subs	r5, r3, r2
 800de82:	2d00      	cmp	r5, #0
 800de84:	f77f aa6b 	ble.w	800d35e <_svfprintf_r+0x7ce>
 800de88:	4e37      	ldr	r6, [pc, #220]	; (800df68 <_svfprintf_r+0x13d8>)
 800de8a:	2710      	movs	r7, #16
 800de8c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800de90:	2d10      	cmp	r5, #16
 800de92:	f103 0301 	add.w	r3, r3, #1
 800de96:	6026      	str	r6, [r4, #0]
 800de98:	dc18      	bgt.n	800decc <_svfprintf_r+0x133c>
 800de9a:	6065      	str	r5, [r4, #4]
 800de9c:	2b07      	cmp	r3, #7
 800de9e:	4415      	add	r5, r2
 800dea0:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800dea4:	f77f aa5b 	ble.w	800d35e <_svfprintf_r+0x7ce>
 800dea8:	aa22      	add	r2, sp, #136	; 0x88
 800deaa:	4649      	mov	r1, r9
 800deac:	4650      	mov	r0, sl
 800deae:	f001 f8eb 	bl	800f088 <__ssprint_r>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	f43f aa53 	beq.w	800d35e <_svfprintf_r+0x7ce>
 800deb8:	9b04      	ldr	r3, [sp, #16]
 800deba:	2b00      	cmp	r3, #0
 800debc:	f43f a874 	beq.w	800cfa8 <_svfprintf_r+0x418>
 800dec0:	4619      	mov	r1, r3
 800dec2:	4650      	mov	r0, sl
 800dec4:	f7fd fb88 	bl	800b5d8 <_free_r>
 800dec8:	f7ff b86e 	b.w	800cfa8 <_svfprintf_r+0x418>
 800decc:	3210      	adds	r2, #16
 800dece:	2b07      	cmp	r3, #7
 800ded0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800ded4:	6067      	str	r7, [r4, #4]
 800ded6:	dc02      	bgt.n	800dede <_svfprintf_r+0x134e>
 800ded8:	3408      	adds	r4, #8
 800deda:	3d10      	subs	r5, #16
 800dedc:	e7d6      	b.n	800de8c <_svfprintf_r+0x12fc>
 800dede:	aa22      	add	r2, sp, #136	; 0x88
 800dee0:	4649      	mov	r1, r9
 800dee2:	4650      	mov	r0, sl
 800dee4:	f001 f8d0 	bl	800f088 <__ssprint_r>
 800dee8:	2800      	cmp	r0, #0
 800deea:	d1e5      	bne.n	800deb8 <_svfprintf_r+0x1328>
 800deec:	ac25      	add	r4, sp, #148	; 0x94
 800deee:	e7f4      	b.n	800deda <_svfprintf_r+0x134a>
 800def0:	9904      	ldr	r1, [sp, #16]
 800def2:	4650      	mov	r0, sl
 800def4:	f7fd fb70 	bl	800b5d8 <_free_r>
 800def8:	f7ff ba49 	b.w	800d38e <_svfprintf_r+0x7fe>
 800defc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800defe:	2b00      	cmp	r3, #0
 800df00:	f43f a852 	beq.w	800cfa8 <_svfprintf_r+0x418>
 800df04:	aa22      	add	r2, sp, #136	; 0x88
 800df06:	4649      	mov	r1, r9
 800df08:	4650      	mov	r0, sl
 800df0a:	f001 f8bd 	bl	800f088 <__ssprint_r>
 800df0e:	f7ff b84b 	b.w	800cfa8 <_svfprintf_r+0x418>
 800df12:	ea55 0206 	orrs.w	r2, r5, r6
 800df16:	f8cd b010 	str.w	fp, [sp, #16]
 800df1a:	f43f ab5e 	beq.w	800d5da <_svfprintf_r+0xa4a>
 800df1e:	2b01      	cmp	r3, #1
 800df20:	f43f abff 	beq.w	800d722 <_svfprintf_r+0xb92>
 800df24:	2b02      	cmp	r3, #2
 800df26:	ab4e      	add	r3, sp, #312	; 0x138
 800df28:	9303      	str	r3, [sp, #12]
 800df2a:	f43f ac4d 	beq.w	800d7c8 <_svfprintf_r+0xc38>
 800df2e:	9a03      	ldr	r2, [sp, #12]
 800df30:	f005 0307 	and.w	r3, r5, #7
 800df34:	4611      	mov	r1, r2
 800df36:	3330      	adds	r3, #48	; 0x30
 800df38:	f801 3d01 	strb.w	r3, [r1, #-1]!
 800df3c:	08ed      	lsrs	r5, r5, #3
 800df3e:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 800df42:	08f6      	lsrs	r6, r6, #3
 800df44:	9103      	str	r1, [sp, #12]
 800df46:	ea55 0106 	orrs.w	r1, r5, r6
 800df4a:	d1f0      	bne.n	800df2e <_svfprintf_r+0x139e>
 800df4c:	9904      	ldr	r1, [sp, #16]
 800df4e:	07c9      	lsls	r1, r1, #31
 800df50:	f57f ac2a 	bpl.w	800d7a8 <_svfprintf_r+0xc18>
 800df54:	2b30      	cmp	r3, #48	; 0x30
 800df56:	f43f ac27 	beq.w	800d7a8 <_svfprintf_r+0xc18>
 800df5a:	9903      	ldr	r1, [sp, #12]
 800df5c:	2330      	movs	r3, #48	; 0x30
 800df5e:	f801 3c01 	strb.w	r3, [r1, #-1]
 800df62:	1e93      	subs	r3, r2, #2
 800df64:	9303      	str	r3, [sp, #12]
 800df66:	e41f      	b.n	800d7a8 <_svfprintf_r+0xc18>
 800df68:	08012830 	.word	0x08012830

0800df6c <_fclose_r>:
 800df6c:	b570      	push	{r4, r5, r6, lr}
 800df6e:	4606      	mov	r6, r0
 800df70:	460c      	mov	r4, r1
 800df72:	b911      	cbnz	r1, 800df7a <_fclose_r+0xe>
 800df74:	2500      	movs	r5, #0
 800df76:	4628      	mov	r0, r5
 800df78:	bd70      	pop	{r4, r5, r6, pc}
 800df7a:	b118      	cbz	r0, 800df84 <_fclose_r+0x18>
 800df7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800df7e:	b90b      	cbnz	r3, 800df84 <_fclose_r+0x18>
 800df80:	f7fd f982 	bl	800b288 <__sinit>
 800df84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df86:	07d8      	lsls	r0, r3, #31
 800df88:	d405      	bmi.n	800df96 <_fclose_r+0x2a>
 800df8a:	89a3      	ldrh	r3, [r4, #12]
 800df8c:	0599      	lsls	r1, r3, #22
 800df8e:	d402      	bmi.n	800df96 <_fclose_r+0x2a>
 800df90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df92:	f7fd faa5 	bl	800b4e0 <__retarget_lock_acquire_recursive>
 800df96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df9a:	b93b      	cbnz	r3, 800dfac <_fclose_r+0x40>
 800df9c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800df9e:	f015 0501 	ands.w	r5, r5, #1
 800dfa2:	d1e7      	bne.n	800df74 <_fclose_r+0x8>
 800dfa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfa6:	f7fd fa9c 	bl	800b4e2 <__retarget_lock_release_recursive>
 800dfaa:	e7e4      	b.n	800df76 <_fclose_r+0xa>
 800dfac:	4621      	mov	r1, r4
 800dfae:	4630      	mov	r0, r6
 800dfb0:	f000 f834 	bl	800e01c <__sflush_r>
 800dfb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dfb6:	4605      	mov	r5, r0
 800dfb8:	b133      	cbz	r3, 800dfc8 <_fclose_r+0x5c>
 800dfba:	69e1      	ldr	r1, [r4, #28]
 800dfbc:	4630      	mov	r0, r6
 800dfbe:	4798      	blx	r3
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	bfb8      	it	lt
 800dfc4:	f04f 35ff 	movlt.w	r5, #4294967295
 800dfc8:	89a3      	ldrh	r3, [r4, #12]
 800dfca:	061a      	lsls	r2, r3, #24
 800dfcc:	d503      	bpl.n	800dfd6 <_fclose_r+0x6a>
 800dfce:	6921      	ldr	r1, [r4, #16]
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	f7fd fb01 	bl	800b5d8 <_free_r>
 800dfd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800dfd8:	b141      	cbz	r1, 800dfec <_fclose_r+0x80>
 800dfda:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800dfde:	4299      	cmp	r1, r3
 800dfe0:	d002      	beq.n	800dfe8 <_fclose_r+0x7c>
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	f7fd faf8 	bl	800b5d8 <_free_r>
 800dfe8:	2300      	movs	r3, #0
 800dfea:	6323      	str	r3, [r4, #48]	; 0x30
 800dfec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800dfee:	b121      	cbz	r1, 800dffa <_fclose_r+0x8e>
 800dff0:	4630      	mov	r0, r6
 800dff2:	f7fd faf1 	bl	800b5d8 <_free_r>
 800dff6:	2300      	movs	r3, #0
 800dff8:	6463      	str	r3, [r4, #68]	; 0x44
 800dffa:	f7fd f939 	bl	800b270 <__sfp_lock_acquire>
 800dffe:	2300      	movs	r3, #0
 800e000:	81a3      	strh	r3, [r4, #12]
 800e002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e004:	07db      	lsls	r3, r3, #31
 800e006:	d402      	bmi.n	800e00e <_fclose_r+0xa2>
 800e008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e00a:	f7fd fa6a 	bl	800b4e2 <__retarget_lock_release_recursive>
 800e00e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e010:	f7fd fa65 	bl	800b4de <__retarget_lock_close_recursive>
 800e014:	f7fd f932 	bl	800b27c <__sfp_lock_release>
 800e018:	e7ad      	b.n	800df76 <_fclose_r+0xa>
	...

0800e01c <__sflush_r>:
 800e01c:	898b      	ldrh	r3, [r1, #12]
 800e01e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e026:	4605      	mov	r5, r0
 800e028:	0718      	lsls	r0, r3, #28
 800e02a:	460c      	mov	r4, r1
 800e02c:	d45f      	bmi.n	800e0ee <__sflush_r+0xd2>
 800e02e:	684b      	ldr	r3, [r1, #4]
 800e030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e034:	2b00      	cmp	r3, #0
 800e036:	818a      	strh	r2, [r1, #12]
 800e038:	dc05      	bgt.n	800e046 <__sflush_r+0x2a>
 800e03a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	dc02      	bgt.n	800e046 <__sflush_r+0x2a>
 800e040:	2000      	movs	r0, #0
 800e042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e046:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e048:	2e00      	cmp	r6, #0
 800e04a:	d0f9      	beq.n	800e040 <__sflush_r+0x24>
 800e04c:	2300      	movs	r3, #0
 800e04e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e052:	682f      	ldr	r7, [r5, #0]
 800e054:	69e1      	ldr	r1, [r4, #28]
 800e056:	602b      	str	r3, [r5, #0]
 800e058:	d036      	beq.n	800e0c8 <__sflush_r+0xac>
 800e05a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e05c:	89a3      	ldrh	r3, [r4, #12]
 800e05e:	075a      	lsls	r2, r3, #29
 800e060:	d505      	bpl.n	800e06e <__sflush_r+0x52>
 800e062:	6863      	ldr	r3, [r4, #4]
 800e064:	1ac0      	subs	r0, r0, r3
 800e066:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e068:	b10b      	cbz	r3, 800e06e <__sflush_r+0x52>
 800e06a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e06c:	1ac0      	subs	r0, r0, r3
 800e06e:	2300      	movs	r3, #0
 800e070:	4602      	mov	r2, r0
 800e072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e074:	69e1      	ldr	r1, [r4, #28]
 800e076:	4628      	mov	r0, r5
 800e078:	47b0      	blx	r6
 800e07a:	1c43      	adds	r3, r0, #1
 800e07c:	89a3      	ldrh	r3, [r4, #12]
 800e07e:	d106      	bne.n	800e08e <__sflush_r+0x72>
 800e080:	6829      	ldr	r1, [r5, #0]
 800e082:	291d      	cmp	r1, #29
 800e084:	d82f      	bhi.n	800e0e6 <__sflush_r+0xca>
 800e086:	4a2b      	ldr	r2, [pc, #172]	; (800e134 <__sflush_r+0x118>)
 800e088:	410a      	asrs	r2, r1
 800e08a:	07d6      	lsls	r6, r2, #31
 800e08c:	d42b      	bmi.n	800e0e6 <__sflush_r+0xca>
 800e08e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e092:	b21b      	sxth	r3, r3
 800e094:	2200      	movs	r2, #0
 800e096:	6062      	str	r2, [r4, #4]
 800e098:	04d9      	lsls	r1, r3, #19
 800e09a:	6922      	ldr	r2, [r4, #16]
 800e09c:	81a3      	strh	r3, [r4, #12]
 800e09e:	6022      	str	r2, [r4, #0]
 800e0a0:	d504      	bpl.n	800e0ac <__sflush_r+0x90>
 800e0a2:	1c42      	adds	r2, r0, #1
 800e0a4:	d101      	bne.n	800e0aa <__sflush_r+0x8e>
 800e0a6:	682b      	ldr	r3, [r5, #0]
 800e0a8:	b903      	cbnz	r3, 800e0ac <__sflush_r+0x90>
 800e0aa:	6520      	str	r0, [r4, #80]	; 0x50
 800e0ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e0ae:	602f      	str	r7, [r5, #0]
 800e0b0:	2900      	cmp	r1, #0
 800e0b2:	d0c5      	beq.n	800e040 <__sflush_r+0x24>
 800e0b4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800e0b8:	4299      	cmp	r1, r3
 800e0ba:	d002      	beq.n	800e0c2 <__sflush_r+0xa6>
 800e0bc:	4628      	mov	r0, r5
 800e0be:	f7fd fa8b 	bl	800b5d8 <_free_r>
 800e0c2:	2000      	movs	r0, #0
 800e0c4:	6320      	str	r0, [r4, #48]	; 0x30
 800e0c6:	e7bc      	b.n	800e042 <__sflush_r+0x26>
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	47b0      	blx	r6
 800e0ce:	1c41      	adds	r1, r0, #1
 800e0d0:	d1c4      	bne.n	800e05c <__sflush_r+0x40>
 800e0d2:	682b      	ldr	r3, [r5, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d0c1      	beq.n	800e05c <__sflush_r+0x40>
 800e0d8:	2b1d      	cmp	r3, #29
 800e0da:	d001      	beq.n	800e0e0 <__sflush_r+0xc4>
 800e0dc:	2b16      	cmp	r3, #22
 800e0de:	d101      	bne.n	800e0e4 <__sflush_r+0xc8>
 800e0e0:	602f      	str	r7, [r5, #0]
 800e0e2:	e7ad      	b.n	800e040 <__sflush_r+0x24>
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0ea:	81a3      	strh	r3, [r4, #12]
 800e0ec:	e7a9      	b.n	800e042 <__sflush_r+0x26>
 800e0ee:	690f      	ldr	r7, [r1, #16]
 800e0f0:	2f00      	cmp	r7, #0
 800e0f2:	d0a5      	beq.n	800e040 <__sflush_r+0x24>
 800e0f4:	079b      	lsls	r3, r3, #30
 800e0f6:	680e      	ldr	r6, [r1, #0]
 800e0f8:	bf08      	it	eq
 800e0fa:	694b      	ldreq	r3, [r1, #20]
 800e0fc:	600f      	str	r7, [r1, #0]
 800e0fe:	bf18      	it	ne
 800e100:	2300      	movne	r3, #0
 800e102:	eba6 0807 	sub.w	r8, r6, r7
 800e106:	608b      	str	r3, [r1, #8]
 800e108:	f1b8 0f00 	cmp.w	r8, #0
 800e10c:	dd98      	ble.n	800e040 <__sflush_r+0x24>
 800e10e:	69e1      	ldr	r1, [r4, #28]
 800e110:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e112:	4643      	mov	r3, r8
 800e114:	463a      	mov	r2, r7
 800e116:	4628      	mov	r0, r5
 800e118:	47b0      	blx	r6
 800e11a:	2800      	cmp	r0, #0
 800e11c:	dc06      	bgt.n	800e12c <__sflush_r+0x110>
 800e11e:	89a3      	ldrh	r3, [r4, #12]
 800e120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e124:	81a3      	strh	r3, [r4, #12]
 800e126:	f04f 30ff 	mov.w	r0, #4294967295
 800e12a:	e78a      	b.n	800e042 <__sflush_r+0x26>
 800e12c:	4407      	add	r7, r0
 800e12e:	eba8 0800 	sub.w	r8, r8, r0
 800e132:	e7e9      	b.n	800e108 <__sflush_r+0xec>
 800e134:	dfbffffe 	.word	0xdfbffffe

0800e138 <_fflush_r>:
 800e138:	b538      	push	{r3, r4, r5, lr}
 800e13a:	460c      	mov	r4, r1
 800e13c:	4605      	mov	r5, r0
 800e13e:	b118      	cbz	r0, 800e148 <_fflush_r+0x10>
 800e140:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e142:	b90b      	cbnz	r3, 800e148 <_fflush_r+0x10>
 800e144:	f7fd f8a0 	bl	800b288 <__sinit>
 800e148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e14c:	b1bb      	cbz	r3, 800e17e <_fflush_r+0x46>
 800e14e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e150:	07d0      	lsls	r0, r2, #31
 800e152:	d404      	bmi.n	800e15e <_fflush_r+0x26>
 800e154:	0599      	lsls	r1, r3, #22
 800e156:	d402      	bmi.n	800e15e <_fflush_r+0x26>
 800e158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e15a:	f7fd f9c1 	bl	800b4e0 <__retarget_lock_acquire_recursive>
 800e15e:	4628      	mov	r0, r5
 800e160:	4621      	mov	r1, r4
 800e162:	f7ff ff5b 	bl	800e01c <__sflush_r>
 800e166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e168:	07da      	lsls	r2, r3, #31
 800e16a:	4605      	mov	r5, r0
 800e16c:	d405      	bmi.n	800e17a <_fflush_r+0x42>
 800e16e:	89a3      	ldrh	r3, [r4, #12]
 800e170:	059b      	lsls	r3, r3, #22
 800e172:	d402      	bmi.n	800e17a <_fflush_r+0x42>
 800e174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e176:	f7fd f9b4 	bl	800b4e2 <__retarget_lock_release_recursive>
 800e17a:	4628      	mov	r0, r5
 800e17c:	bd38      	pop	{r3, r4, r5, pc}
 800e17e:	461d      	mov	r5, r3
 800e180:	e7fb      	b.n	800e17a <_fflush_r+0x42>

0800e182 <strncpy>:
 800e182:	b510      	push	{r4, lr}
 800e184:	3901      	subs	r1, #1
 800e186:	4603      	mov	r3, r0
 800e188:	b132      	cbz	r2, 800e198 <strncpy+0x16>
 800e18a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e18e:	f803 4b01 	strb.w	r4, [r3], #1
 800e192:	3a01      	subs	r2, #1
 800e194:	2c00      	cmp	r4, #0
 800e196:	d1f7      	bne.n	800e188 <strncpy+0x6>
 800e198:	441a      	add	r2, r3
 800e19a:	2100      	movs	r1, #0
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d100      	bne.n	800e1a2 <strncpy+0x20>
 800e1a0:	bd10      	pop	{r4, pc}
 800e1a2:	f803 1b01 	strb.w	r1, [r3], #1
 800e1a6:	e7f9      	b.n	800e19c <strncpy+0x1a>

0800e1a8 <_localeconv_r>:
 800e1a8:	4800      	ldr	r0, [pc, #0]	; (800e1ac <_localeconv_r+0x4>)
 800e1aa:	4770      	bx	lr
 800e1ac:	20000298 	.word	0x20000298

0800e1b0 <_sbrk_r>:
 800e1b0:	b538      	push	{r3, r4, r5, lr}
 800e1b2:	4d06      	ldr	r5, [pc, #24]	; (800e1cc <_sbrk_r+0x1c>)
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	4604      	mov	r4, r0
 800e1b8:	4608      	mov	r0, r1
 800e1ba:	602b      	str	r3, [r5, #0]
 800e1bc:	f003 fa60 	bl	8011680 <_sbrk>
 800e1c0:	1c43      	adds	r3, r0, #1
 800e1c2:	d102      	bne.n	800e1ca <_sbrk_r+0x1a>
 800e1c4:	682b      	ldr	r3, [r5, #0]
 800e1c6:	b103      	cbz	r3, 800e1ca <_sbrk_r+0x1a>
 800e1c8:	6023      	str	r3, [r4, #0]
 800e1ca:	bd38      	pop	{r3, r4, r5, pc}
 800e1cc:	200081b0 	.word	0x200081b0

0800e1d0 <__libc_fini_array>:
 800e1d0:	b538      	push	{r3, r4, r5, lr}
 800e1d2:	4d07      	ldr	r5, [pc, #28]	; (800e1f0 <__libc_fini_array+0x20>)
 800e1d4:	4c07      	ldr	r4, [pc, #28]	; (800e1f4 <__libc_fini_array+0x24>)
 800e1d6:	1b64      	subs	r4, r4, r5
 800e1d8:	10a4      	asrs	r4, r4, #2
 800e1da:	b91c      	cbnz	r4, 800e1e4 <__libc_fini_array+0x14>
 800e1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1e0:	f003 ba6c 	b.w	80116bc <_fini>
 800e1e4:	3c01      	subs	r4, #1
 800e1e6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800e1ea:	4798      	blx	r3
 800e1ec:	e7f5      	b.n	800e1da <__libc_fini_array+0xa>
 800e1ee:	bf00      	nop
 800e1f0:	08012b00 	.word	0x08012b00
 800e1f4:	08012b04 	.word	0x08012b04

0800e1f8 <sysconf>:
 800e1f8:	2808      	cmp	r0, #8
 800e1fa:	b508      	push	{r3, lr}
 800e1fc:	d006      	beq.n	800e20c <sysconf+0x14>
 800e1fe:	f7fd f943 	bl	800b488 <__errno>
 800e202:	2316      	movs	r3, #22
 800e204:	6003      	str	r3, [r0, #0]
 800e206:	f04f 30ff 	mov.w	r0, #4294967295
 800e20a:	bd08      	pop	{r3, pc}
 800e20c:	2080      	movs	r0, #128	; 0x80
 800e20e:	e7fc      	b.n	800e20a <sysconf+0x12>

0800e210 <frexp>:
 800e210:	b570      	push	{r4, r5, r6, lr}
 800e212:	2100      	movs	r1, #0
 800e214:	ec55 4b10 	vmov	r4, r5, d0
 800e218:	6001      	str	r1, [r0, #0]
 800e21a:	4916      	ldr	r1, [pc, #88]	; (800e274 <frexp+0x64>)
 800e21c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800e220:	428a      	cmp	r2, r1
 800e222:	4606      	mov	r6, r0
 800e224:	462b      	mov	r3, r5
 800e226:	dc22      	bgt.n	800e26e <frexp+0x5e>
 800e228:	ee10 1a10 	vmov	r1, s0
 800e22c:	4311      	orrs	r1, r2
 800e22e:	d01e      	beq.n	800e26e <frexp+0x5e>
 800e230:	4911      	ldr	r1, [pc, #68]	; (800e278 <frexp+0x68>)
 800e232:	4029      	ands	r1, r5
 800e234:	b969      	cbnz	r1, 800e252 <frexp+0x42>
 800e236:	4b11      	ldr	r3, [pc, #68]	; (800e27c <frexp+0x6c>)
 800e238:	2200      	movs	r2, #0
 800e23a:	ee10 0a10 	vmov	r0, s0
 800e23e:	4629      	mov	r1, r5
 800e240:	f7f2 f9f2 	bl	8000628 <__aeabi_dmul>
 800e244:	460b      	mov	r3, r1
 800e246:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e24a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800e24e:	4604      	mov	r4, r0
 800e250:	6031      	str	r1, [r6, #0]
 800e252:	6831      	ldr	r1, [r6, #0]
 800e254:	1512      	asrs	r2, r2, #20
 800e256:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e25a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800e25e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e262:	4411      	add	r1, r2
 800e264:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800e268:	6031      	str	r1, [r6, #0]
 800e26a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800e26e:	ec45 4b10 	vmov	d0, r4, r5
 800e272:	bd70      	pop	{r4, r5, r6, pc}
 800e274:	7fefffff 	.word	0x7fefffff
 800e278:	7ff00000 	.word	0x7ff00000
 800e27c:	43500000 	.word	0x43500000

0800e280 <__register_exitproc>:
 800e280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e284:	f8df a074 	ldr.w	sl, [pc, #116]	; 800e2fc <__register_exitproc+0x7c>
 800e288:	4606      	mov	r6, r0
 800e28a:	f8da 0000 	ldr.w	r0, [sl]
 800e28e:	4698      	mov	r8, r3
 800e290:	460f      	mov	r7, r1
 800e292:	4691      	mov	r9, r2
 800e294:	f7fd f924 	bl	800b4e0 <__retarget_lock_acquire_recursive>
 800e298:	4b16      	ldr	r3, [pc, #88]	; (800e2f4 <__register_exitproc+0x74>)
 800e29a:	681c      	ldr	r4, [r3, #0]
 800e29c:	b90c      	cbnz	r4, 800e2a2 <__register_exitproc+0x22>
 800e29e:	4c16      	ldr	r4, [pc, #88]	; (800e2f8 <__register_exitproc+0x78>)
 800e2a0:	601c      	str	r4, [r3, #0]
 800e2a2:	6865      	ldr	r5, [r4, #4]
 800e2a4:	f8da 0000 	ldr.w	r0, [sl]
 800e2a8:	2d1f      	cmp	r5, #31
 800e2aa:	dd05      	ble.n	800e2b8 <__register_exitproc+0x38>
 800e2ac:	f7fd f919 	bl	800b4e2 <__retarget_lock_release_recursive>
 800e2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2b8:	b19e      	cbz	r6, 800e2e2 <__register_exitproc+0x62>
 800e2ba:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800e2be:	2201      	movs	r2, #1
 800e2c0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800e2c4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800e2c8:	40aa      	lsls	r2, r5
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800e2d0:	2e02      	cmp	r6, #2
 800e2d2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800e2d6:	bf02      	ittt	eq
 800e2d8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800e2dc:	4313      	orreq	r3, r2
 800e2de:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800e2e2:	1c6b      	adds	r3, r5, #1
 800e2e4:	3502      	adds	r5, #2
 800e2e6:	6063      	str	r3, [r4, #4]
 800e2e8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800e2ec:	f7fd f8f9 	bl	800b4e2 <__retarget_lock_release_recursive>
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	e7df      	b.n	800e2b4 <__register_exitproc+0x34>
 800e2f4:	200081b8 	.word	0x200081b8
 800e2f8:	200081f0 	.word	0x200081f0
 800e2fc:	2000043c 	.word	0x2000043c

0800e300 <__assert_func>:
 800e300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e302:	4614      	mov	r4, r2
 800e304:	461a      	mov	r2, r3
 800e306:	4b09      	ldr	r3, [pc, #36]	; (800e32c <__assert_func+0x2c>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4605      	mov	r5, r0
 800e30c:	68d8      	ldr	r0, [r3, #12]
 800e30e:	b14c      	cbz	r4, 800e324 <__assert_func+0x24>
 800e310:	4b07      	ldr	r3, [pc, #28]	; (800e330 <__assert_func+0x30>)
 800e312:	9100      	str	r1, [sp, #0]
 800e314:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e318:	4906      	ldr	r1, [pc, #24]	; (800e334 <__assert_func+0x34>)
 800e31a:	462b      	mov	r3, r5
 800e31c:	f000 fea2 	bl	800f064 <fiprintf>
 800e320:	f001 fe5b 	bl	800ffda <abort>
 800e324:	4b04      	ldr	r3, [pc, #16]	; (800e338 <__assert_func+0x38>)
 800e326:	461c      	mov	r4, r3
 800e328:	e7f3      	b.n	800e312 <__assert_func+0x12>
 800e32a:	bf00      	nop
 800e32c:	20000438 	.word	0x20000438
 800e330:	08012850 	.word	0x08012850
 800e334:	0801285d 	.word	0x0801285d
 800e338:	0801288b 	.word	0x0801288b

0800e33c <_calloc_r>:
 800e33c:	b538      	push	{r3, r4, r5, lr}
 800e33e:	fba1 1502 	umull	r1, r5, r1, r2
 800e342:	b92d      	cbnz	r5, 800e350 <_calloc_r+0x14>
 800e344:	f7fd fd60 	bl	800be08 <_malloc_r>
 800e348:	4604      	mov	r4, r0
 800e34a:	b938      	cbnz	r0, 800e35c <_calloc_r+0x20>
 800e34c:	4620      	mov	r0, r4
 800e34e:	bd38      	pop	{r3, r4, r5, pc}
 800e350:	f7fd f89a 	bl	800b488 <__errno>
 800e354:	230c      	movs	r3, #12
 800e356:	6003      	str	r3, [r0, #0]
 800e358:	2400      	movs	r4, #0
 800e35a:	e7f7      	b.n	800e34c <_calloc_r+0x10>
 800e35c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e360:	f022 0203 	bic.w	r2, r2, #3
 800e364:	3a04      	subs	r2, #4
 800e366:	2a24      	cmp	r2, #36	; 0x24
 800e368:	d819      	bhi.n	800e39e <_calloc_r+0x62>
 800e36a:	2a13      	cmp	r2, #19
 800e36c:	d915      	bls.n	800e39a <_calloc_r+0x5e>
 800e36e:	2a1b      	cmp	r2, #27
 800e370:	e9c0 5500 	strd	r5, r5, [r0]
 800e374:	d806      	bhi.n	800e384 <_calloc_r+0x48>
 800e376:	f100 0308 	add.w	r3, r0, #8
 800e37a:	2200      	movs	r2, #0
 800e37c:	e9c3 2200 	strd	r2, r2, [r3]
 800e380:	609a      	str	r2, [r3, #8]
 800e382:	e7e3      	b.n	800e34c <_calloc_r+0x10>
 800e384:	2a24      	cmp	r2, #36	; 0x24
 800e386:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800e38a:	bf11      	iteee	ne
 800e38c:	f100 0310 	addne.w	r3, r0, #16
 800e390:	6105      	streq	r5, [r0, #16]
 800e392:	f100 0318 	addeq.w	r3, r0, #24
 800e396:	6145      	streq	r5, [r0, #20]
 800e398:	e7ef      	b.n	800e37a <_calloc_r+0x3e>
 800e39a:	4603      	mov	r3, r0
 800e39c:	e7ed      	b.n	800e37a <_calloc_r+0x3e>
 800e39e:	4629      	mov	r1, r5
 800e3a0:	f7fd f80b 	bl	800b3ba <memset>
 800e3a4:	e7d2      	b.n	800e34c <_calloc_r+0x10>

0800e3a6 <quorem>:
 800e3a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3aa:	6903      	ldr	r3, [r0, #16]
 800e3ac:	690c      	ldr	r4, [r1, #16]
 800e3ae:	42a3      	cmp	r3, r4
 800e3b0:	4607      	mov	r7, r0
 800e3b2:	db7e      	blt.n	800e4b2 <quorem+0x10c>
 800e3b4:	3c01      	subs	r4, #1
 800e3b6:	f101 0814 	add.w	r8, r1, #20
 800e3ba:	f100 0514 	add.w	r5, r0, #20
 800e3be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e3c2:	9301      	str	r3, [sp, #4]
 800e3c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e3c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e3d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e3d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e3dc:	d331      	bcc.n	800e442 <quorem+0x9c>
 800e3de:	f04f 0e00 	mov.w	lr, #0
 800e3e2:	4640      	mov	r0, r8
 800e3e4:	46ac      	mov	ip, r5
 800e3e6:	46f2      	mov	sl, lr
 800e3e8:	f850 2b04 	ldr.w	r2, [r0], #4
 800e3ec:	b293      	uxth	r3, r2
 800e3ee:	fb06 e303 	mla	r3, r6, r3, lr
 800e3f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e3f6:	0c1a      	lsrs	r2, r3, #16
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	ebaa 0303 	sub.w	r3, sl, r3
 800e3fe:	f8dc a000 	ldr.w	sl, [ip]
 800e402:	fa13 f38a 	uxtah	r3, r3, sl
 800e406:	fb06 220e 	mla	r2, r6, lr, r2
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	9b00      	ldr	r3, [sp, #0]
 800e40e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e412:	b292      	uxth	r2, r2
 800e414:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e418:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e41c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e420:	4581      	cmp	r9, r0
 800e422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e426:	f84c 3b04 	str.w	r3, [ip], #4
 800e42a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e42e:	d2db      	bcs.n	800e3e8 <quorem+0x42>
 800e430:	f855 300b 	ldr.w	r3, [r5, fp]
 800e434:	b92b      	cbnz	r3, 800e442 <quorem+0x9c>
 800e436:	9b01      	ldr	r3, [sp, #4]
 800e438:	3b04      	subs	r3, #4
 800e43a:	429d      	cmp	r5, r3
 800e43c:	461a      	mov	r2, r3
 800e43e:	d32c      	bcc.n	800e49a <quorem+0xf4>
 800e440:	613c      	str	r4, [r7, #16]
 800e442:	4638      	mov	r0, r7
 800e444:	f7fe f9b0 	bl	800c7a8 <__mcmp>
 800e448:	2800      	cmp	r0, #0
 800e44a:	db22      	blt.n	800e492 <quorem+0xec>
 800e44c:	3601      	adds	r6, #1
 800e44e:	4629      	mov	r1, r5
 800e450:	2000      	movs	r0, #0
 800e452:	f858 2b04 	ldr.w	r2, [r8], #4
 800e456:	f8d1 c000 	ldr.w	ip, [r1]
 800e45a:	b293      	uxth	r3, r2
 800e45c:	1ac3      	subs	r3, r0, r3
 800e45e:	0c12      	lsrs	r2, r2, #16
 800e460:	fa13 f38c 	uxtah	r3, r3, ip
 800e464:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e468:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e472:	45c1      	cmp	r9, r8
 800e474:	f841 3b04 	str.w	r3, [r1], #4
 800e478:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e47c:	d2e9      	bcs.n	800e452 <quorem+0xac>
 800e47e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e486:	b922      	cbnz	r2, 800e492 <quorem+0xec>
 800e488:	3b04      	subs	r3, #4
 800e48a:	429d      	cmp	r5, r3
 800e48c:	461a      	mov	r2, r3
 800e48e:	d30a      	bcc.n	800e4a6 <quorem+0x100>
 800e490:	613c      	str	r4, [r7, #16]
 800e492:	4630      	mov	r0, r6
 800e494:	b003      	add	sp, #12
 800e496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e49a:	6812      	ldr	r2, [r2, #0]
 800e49c:	3b04      	subs	r3, #4
 800e49e:	2a00      	cmp	r2, #0
 800e4a0:	d1ce      	bne.n	800e440 <quorem+0x9a>
 800e4a2:	3c01      	subs	r4, #1
 800e4a4:	e7c9      	b.n	800e43a <quorem+0x94>
 800e4a6:	6812      	ldr	r2, [r2, #0]
 800e4a8:	3b04      	subs	r3, #4
 800e4aa:	2a00      	cmp	r2, #0
 800e4ac:	d1f0      	bne.n	800e490 <quorem+0xea>
 800e4ae:	3c01      	subs	r4, #1
 800e4b0:	e7eb      	b.n	800e48a <quorem+0xe4>
 800e4b2:	2000      	movs	r0, #0
 800e4b4:	e7ee      	b.n	800e494 <quorem+0xee>
	...

0800e4b8 <_dtoa_r>:
 800e4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4bc:	ed2d 8b04 	vpush	{d8-d9}
 800e4c0:	b093      	sub	sp, #76	; 0x4c
 800e4c2:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e4c6:	9107      	str	r1, [sp, #28]
 800e4c8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800e4ca:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800e4cc:	920a      	str	r2, [sp, #40]	; 0x28
 800e4ce:	ec57 6b10 	vmov	r6, r7, d0
 800e4d2:	4604      	mov	r4, r0
 800e4d4:	930d      	str	r3, [sp, #52]	; 0x34
 800e4d6:	b141      	cbz	r1, 800e4ea <_dtoa_r+0x32>
 800e4d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e4da:	604a      	str	r2, [r1, #4]
 800e4dc:	2301      	movs	r3, #1
 800e4de:	4093      	lsls	r3, r2
 800e4e0:	608b      	str	r3, [r1, #8]
 800e4e2:	f7fd ff0e 	bl	800c302 <_Bfree>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	63a3      	str	r3, [r4, #56]	; 0x38
 800e4ea:	1e3b      	subs	r3, r7, #0
 800e4ec:	bfb9      	ittee	lt
 800e4ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e4f2:	9303      	strlt	r3, [sp, #12]
 800e4f4:	2300      	movge	r3, #0
 800e4f6:	602b      	strge	r3, [r5, #0]
 800e4f8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e4fc:	4ba2      	ldr	r3, [pc, #648]	; (800e788 <_dtoa_r+0x2d0>)
 800e4fe:	bfbc      	itt	lt
 800e500:	2201      	movlt	r2, #1
 800e502:	602a      	strlt	r2, [r5, #0]
 800e504:	ea33 0308 	bics.w	r3, r3, r8
 800e508:	d11b      	bne.n	800e542 <_dtoa_r+0x8a>
 800e50a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e50c:	f242 730f 	movw	r3, #9999	; 0x270f
 800e510:	6013      	str	r3, [r2, #0]
 800e512:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e516:	4333      	orrs	r3, r6
 800e518:	f000 858f 	beq.w	800f03a <_dtoa_r+0xb82>
 800e51c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e51e:	b90b      	cbnz	r3, 800e524 <_dtoa_r+0x6c>
 800e520:	4b9a      	ldr	r3, [pc, #616]	; (800e78c <_dtoa_r+0x2d4>)
 800e522:	e027      	b.n	800e574 <_dtoa_r+0xbc>
 800e524:	4b99      	ldr	r3, [pc, #612]	; (800e78c <_dtoa_r+0x2d4>)
 800e526:	9300      	str	r3, [sp, #0]
 800e528:	3303      	adds	r3, #3
 800e52a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e52c:	6013      	str	r3, [r2, #0]
 800e52e:	9800      	ldr	r0, [sp, #0]
 800e530:	b013      	add	sp, #76	; 0x4c
 800e532:	ecbd 8b04 	vpop	{d8-d9}
 800e536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e53a:	4b95      	ldr	r3, [pc, #596]	; (800e790 <_dtoa_r+0x2d8>)
 800e53c:	9300      	str	r3, [sp, #0]
 800e53e:	3308      	adds	r3, #8
 800e540:	e7f3      	b.n	800e52a <_dtoa_r+0x72>
 800e542:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e546:	2200      	movs	r2, #0
 800e548:	ec51 0b17 	vmov	r0, r1, d7
 800e54c:	eeb0 8a47 	vmov.f32	s16, s14
 800e550:	eef0 8a67 	vmov.f32	s17, s15
 800e554:	2300      	movs	r3, #0
 800e556:	f7f2 facf 	bl	8000af8 <__aeabi_dcmpeq>
 800e55a:	4681      	mov	r9, r0
 800e55c:	b160      	cbz	r0, 800e578 <_dtoa_r+0xc0>
 800e55e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e560:	2301      	movs	r3, #1
 800e562:	6013      	str	r3, [r2, #0]
 800e564:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 8564 	beq.w	800f034 <_dtoa_r+0xb7c>
 800e56c:	4b89      	ldr	r3, [pc, #548]	; (800e794 <_dtoa_r+0x2dc>)
 800e56e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e570:	6013      	str	r3, [r2, #0]
 800e572:	3b01      	subs	r3, #1
 800e574:	9300      	str	r3, [sp, #0]
 800e576:	e7da      	b.n	800e52e <_dtoa_r+0x76>
 800e578:	aa10      	add	r2, sp, #64	; 0x40
 800e57a:	a911      	add	r1, sp, #68	; 0x44
 800e57c:	4620      	mov	r0, r4
 800e57e:	eeb0 0a48 	vmov.f32	s0, s16
 800e582:	eef0 0a68 	vmov.f32	s1, s17
 800e586:	f7fe fa25 	bl	800c9d4 <__d2b>
 800e58a:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e58e:	4682      	mov	sl, r0
 800e590:	2d00      	cmp	r5, #0
 800e592:	d07e      	beq.n	800e692 <_dtoa_r+0x1da>
 800e594:	ee18 3a90 	vmov	r3, s17
 800e598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e59c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e5a0:	ec51 0b18 	vmov	r0, r1, d8
 800e5a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e5a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e5ac:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	4b78      	ldr	r3, [pc, #480]	; (800e798 <_dtoa_r+0x2e0>)
 800e5b6:	f7f1 fe7f 	bl	80002b8 <__aeabi_dsub>
 800e5ba:	a36d      	add	r3, pc, #436	; (adr r3, 800e770 <_dtoa_r+0x2b8>)
 800e5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c0:	f7f2 f832 	bl	8000628 <__aeabi_dmul>
 800e5c4:	a36c      	add	r3, pc, #432	; (adr r3, 800e778 <_dtoa_r+0x2c0>)
 800e5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ca:	f7f1 fe77 	bl	80002bc <__adddf3>
 800e5ce:	4606      	mov	r6, r0
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	460f      	mov	r7, r1
 800e5d4:	f7f1 ffbe 	bl	8000554 <__aeabi_i2d>
 800e5d8:	a369      	add	r3, pc, #420	; (adr r3, 800e780 <_dtoa_r+0x2c8>)
 800e5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5de:	f7f2 f823 	bl	8000628 <__aeabi_dmul>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	4630      	mov	r0, r6
 800e5e8:	4639      	mov	r1, r7
 800e5ea:	f7f1 fe67 	bl	80002bc <__adddf3>
 800e5ee:	4606      	mov	r6, r0
 800e5f0:	460f      	mov	r7, r1
 800e5f2:	f7f2 fac9 	bl	8000b88 <__aeabi_d2iz>
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	4683      	mov	fp, r0
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	4630      	mov	r0, r6
 800e5fe:	4639      	mov	r1, r7
 800e600:	f7f2 fa84 	bl	8000b0c <__aeabi_dcmplt>
 800e604:	b148      	cbz	r0, 800e61a <_dtoa_r+0x162>
 800e606:	4658      	mov	r0, fp
 800e608:	f7f1 ffa4 	bl	8000554 <__aeabi_i2d>
 800e60c:	4632      	mov	r2, r6
 800e60e:	463b      	mov	r3, r7
 800e610:	f7f2 fa72 	bl	8000af8 <__aeabi_dcmpeq>
 800e614:	b908      	cbnz	r0, 800e61a <_dtoa_r+0x162>
 800e616:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e61a:	f1bb 0f16 	cmp.w	fp, #22
 800e61e:	d856      	bhi.n	800e6ce <_dtoa_r+0x216>
 800e620:	4b5e      	ldr	r3, [pc, #376]	; (800e79c <_dtoa_r+0x2e4>)
 800e622:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e62a:	ec51 0b18 	vmov	r0, r1, d8
 800e62e:	f7f2 fa6d 	bl	8000b0c <__aeabi_dcmplt>
 800e632:	2800      	cmp	r0, #0
 800e634:	d04d      	beq.n	800e6d2 <_dtoa_r+0x21a>
 800e636:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e63a:	2300      	movs	r3, #0
 800e63c:	930c      	str	r3, [sp, #48]	; 0x30
 800e63e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e640:	1b5b      	subs	r3, r3, r5
 800e642:	1e5a      	subs	r2, r3, #1
 800e644:	bf45      	ittet	mi
 800e646:	f1c3 0301 	rsbmi	r3, r3, #1
 800e64a:	9305      	strmi	r3, [sp, #20]
 800e64c:	2300      	movpl	r3, #0
 800e64e:	2300      	movmi	r3, #0
 800e650:	9206      	str	r2, [sp, #24]
 800e652:	bf54      	ite	pl
 800e654:	9305      	strpl	r3, [sp, #20]
 800e656:	9306      	strmi	r3, [sp, #24]
 800e658:	f1bb 0f00 	cmp.w	fp, #0
 800e65c:	db3b      	blt.n	800e6d6 <_dtoa_r+0x21e>
 800e65e:	9b06      	ldr	r3, [sp, #24]
 800e660:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e664:	445b      	add	r3, fp
 800e666:	9306      	str	r3, [sp, #24]
 800e668:	2300      	movs	r3, #0
 800e66a:	9308      	str	r3, [sp, #32]
 800e66c:	9b07      	ldr	r3, [sp, #28]
 800e66e:	2b09      	cmp	r3, #9
 800e670:	d868      	bhi.n	800e744 <_dtoa_r+0x28c>
 800e672:	2b05      	cmp	r3, #5
 800e674:	bfc4      	itt	gt
 800e676:	3b04      	subgt	r3, #4
 800e678:	9307      	strgt	r3, [sp, #28]
 800e67a:	9b07      	ldr	r3, [sp, #28]
 800e67c:	f1a3 0302 	sub.w	r3, r3, #2
 800e680:	bfcc      	ite	gt
 800e682:	2500      	movgt	r5, #0
 800e684:	2501      	movle	r5, #1
 800e686:	2b03      	cmp	r3, #3
 800e688:	d867      	bhi.n	800e75a <_dtoa_r+0x2a2>
 800e68a:	e8df f003 	tbb	[pc, r3]
 800e68e:	3b2e      	.short	0x3b2e
 800e690:	5939      	.short	0x5939
 800e692:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e696:	441d      	add	r5, r3
 800e698:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e69c:	2b20      	cmp	r3, #32
 800e69e:	bfc1      	itttt	gt
 800e6a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e6a4:	fa08 f803 	lslgt.w	r8, r8, r3
 800e6a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e6ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e6b0:	bfd6      	itet	le
 800e6b2:	f1c3 0320 	rsble	r3, r3, #32
 800e6b6:	ea48 0003 	orrgt.w	r0, r8, r3
 800e6ba:	fa06 f003 	lslle.w	r0, r6, r3
 800e6be:	f7f1 ff39 	bl	8000534 <__aeabi_ui2d>
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e6c8:	3d01      	subs	r5, #1
 800e6ca:	920e      	str	r2, [sp, #56]	; 0x38
 800e6cc:	e770      	b.n	800e5b0 <_dtoa_r+0xf8>
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	e7b4      	b.n	800e63c <_dtoa_r+0x184>
 800e6d2:	900c      	str	r0, [sp, #48]	; 0x30
 800e6d4:	e7b3      	b.n	800e63e <_dtoa_r+0x186>
 800e6d6:	9b05      	ldr	r3, [sp, #20]
 800e6d8:	eba3 030b 	sub.w	r3, r3, fp
 800e6dc:	9305      	str	r3, [sp, #20]
 800e6de:	f1cb 0300 	rsb	r3, fp, #0
 800e6e2:	9308      	str	r3, [sp, #32]
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e6e8:	e7c0      	b.n	800e66c <_dtoa_r+0x1b4>
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	dc35      	bgt.n	800e760 <_dtoa_r+0x2a8>
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	9301      	str	r3, [sp, #4]
 800e6f8:	9304      	str	r3, [sp, #16]
 800e6fa:	461a      	mov	r2, r3
 800e6fc:	920a      	str	r2, [sp, #40]	; 0x28
 800e6fe:	e00b      	b.n	800e718 <_dtoa_r+0x260>
 800e700:	2301      	movs	r3, #1
 800e702:	e7f3      	b.n	800e6ec <_dtoa_r+0x234>
 800e704:	2300      	movs	r3, #0
 800e706:	9309      	str	r3, [sp, #36]	; 0x24
 800e708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e70a:	445b      	add	r3, fp
 800e70c:	9301      	str	r3, [sp, #4]
 800e70e:	3301      	adds	r3, #1
 800e710:	2b01      	cmp	r3, #1
 800e712:	9304      	str	r3, [sp, #16]
 800e714:	bfb8      	it	lt
 800e716:	2301      	movlt	r3, #1
 800e718:	2100      	movs	r1, #0
 800e71a:	2204      	movs	r2, #4
 800e71c:	f102 0014 	add.w	r0, r2, #20
 800e720:	4298      	cmp	r0, r3
 800e722:	d921      	bls.n	800e768 <_dtoa_r+0x2b0>
 800e724:	63e1      	str	r1, [r4, #60]	; 0x3c
 800e726:	4620      	mov	r0, r4
 800e728:	f7fd fdc6 	bl	800c2b8 <_Balloc>
 800e72c:	9000      	str	r0, [sp, #0]
 800e72e:	2800      	cmp	r0, #0
 800e730:	d13a      	bne.n	800e7a8 <_dtoa_r+0x2f0>
 800e732:	4b1b      	ldr	r3, [pc, #108]	; (800e7a0 <_dtoa_r+0x2e8>)
 800e734:	4602      	mov	r2, r0
 800e736:	f240 11af 	movw	r1, #431	; 0x1af
 800e73a:	481a      	ldr	r0, [pc, #104]	; (800e7a4 <_dtoa_r+0x2ec>)
 800e73c:	f7ff fde0 	bl	800e300 <__assert_func>
 800e740:	2301      	movs	r3, #1
 800e742:	e7e0      	b.n	800e706 <_dtoa_r+0x24e>
 800e744:	2501      	movs	r5, #1
 800e746:	2300      	movs	r3, #0
 800e748:	9307      	str	r3, [sp, #28]
 800e74a:	9509      	str	r5, [sp, #36]	; 0x24
 800e74c:	f04f 33ff 	mov.w	r3, #4294967295
 800e750:	9301      	str	r3, [sp, #4]
 800e752:	9304      	str	r3, [sp, #16]
 800e754:	2200      	movs	r2, #0
 800e756:	2312      	movs	r3, #18
 800e758:	e7d0      	b.n	800e6fc <_dtoa_r+0x244>
 800e75a:	2301      	movs	r3, #1
 800e75c:	9309      	str	r3, [sp, #36]	; 0x24
 800e75e:	e7f5      	b.n	800e74c <_dtoa_r+0x294>
 800e760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e762:	9301      	str	r3, [sp, #4]
 800e764:	9304      	str	r3, [sp, #16]
 800e766:	e7d7      	b.n	800e718 <_dtoa_r+0x260>
 800e768:	3101      	adds	r1, #1
 800e76a:	0052      	lsls	r2, r2, #1
 800e76c:	e7d6      	b.n	800e71c <_dtoa_r+0x264>
 800e76e:	bf00      	nop
 800e770:	636f4361 	.word	0x636f4361
 800e774:	3fd287a7 	.word	0x3fd287a7
 800e778:	8b60c8b3 	.word	0x8b60c8b3
 800e77c:	3fc68a28 	.word	0x3fc68a28
 800e780:	509f79fb 	.word	0x509f79fb
 800e784:	3fd34413 	.word	0x3fd34413
 800e788:	7ff00000 	.word	0x7ff00000
 800e78c:	08012895 	.word	0x08012895
 800e790:	0801288c 	.word	0x0801288c
 800e794:	0801282f 	.word	0x0801282f
 800e798:	3ff80000 	.word	0x3ff80000
 800e79c:	08012728 	.word	0x08012728
 800e7a0:	08012631 	.word	0x08012631
 800e7a4:	08012899 	.word	0x08012899
 800e7a8:	9b00      	ldr	r3, [sp, #0]
 800e7aa:	63a3      	str	r3, [r4, #56]	; 0x38
 800e7ac:	9b04      	ldr	r3, [sp, #16]
 800e7ae:	2b0e      	cmp	r3, #14
 800e7b0:	f200 80a8 	bhi.w	800e904 <_dtoa_r+0x44c>
 800e7b4:	2d00      	cmp	r5, #0
 800e7b6:	f000 80a5 	beq.w	800e904 <_dtoa_r+0x44c>
 800e7ba:	f1bb 0f00 	cmp.w	fp, #0
 800e7be:	dd38      	ble.n	800e832 <_dtoa_r+0x37a>
 800e7c0:	4bbf      	ldr	r3, [pc, #764]	; (800eac0 <_dtoa_r+0x608>)
 800e7c2:	f00b 020f 	and.w	r2, fp, #15
 800e7c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e7ce:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e7d2:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e7d6:	d019      	beq.n	800e80c <_dtoa_r+0x354>
 800e7d8:	4bba      	ldr	r3, [pc, #744]	; (800eac4 <_dtoa_r+0x60c>)
 800e7da:	ec51 0b18 	vmov	r0, r1, d8
 800e7de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e7e2:	f7f2 f84b 	bl	800087c <__aeabi_ddiv>
 800e7e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7ea:	f008 080f 	and.w	r8, r8, #15
 800e7ee:	2503      	movs	r5, #3
 800e7f0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800eac4 <_dtoa_r+0x60c>
 800e7f4:	f1b8 0f00 	cmp.w	r8, #0
 800e7f8:	d10a      	bne.n	800e810 <_dtoa_r+0x358>
 800e7fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7fe:	4632      	mov	r2, r6
 800e800:	463b      	mov	r3, r7
 800e802:	f7f2 f83b 	bl	800087c <__aeabi_ddiv>
 800e806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e80a:	e02b      	b.n	800e864 <_dtoa_r+0x3ac>
 800e80c:	2502      	movs	r5, #2
 800e80e:	e7ef      	b.n	800e7f0 <_dtoa_r+0x338>
 800e810:	f018 0f01 	tst.w	r8, #1
 800e814:	d008      	beq.n	800e828 <_dtoa_r+0x370>
 800e816:	4630      	mov	r0, r6
 800e818:	4639      	mov	r1, r7
 800e81a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e81e:	f7f1 ff03 	bl	8000628 <__aeabi_dmul>
 800e822:	3501      	adds	r5, #1
 800e824:	4606      	mov	r6, r0
 800e826:	460f      	mov	r7, r1
 800e828:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e82c:	f109 0908 	add.w	r9, r9, #8
 800e830:	e7e0      	b.n	800e7f4 <_dtoa_r+0x33c>
 800e832:	f000 809f 	beq.w	800e974 <_dtoa_r+0x4bc>
 800e836:	f1cb 0600 	rsb	r6, fp, #0
 800e83a:	4ba1      	ldr	r3, [pc, #644]	; (800eac0 <_dtoa_r+0x608>)
 800e83c:	4fa1      	ldr	r7, [pc, #644]	; (800eac4 <_dtoa_r+0x60c>)
 800e83e:	f006 020f 	and.w	r2, r6, #15
 800e842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84a:	ec51 0b18 	vmov	r0, r1, d8
 800e84e:	f7f1 feeb 	bl	8000628 <__aeabi_dmul>
 800e852:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e856:	1136      	asrs	r6, r6, #4
 800e858:	2300      	movs	r3, #0
 800e85a:	2502      	movs	r5, #2
 800e85c:	2e00      	cmp	r6, #0
 800e85e:	d17e      	bne.n	800e95e <_dtoa_r+0x4a6>
 800e860:	2b00      	cmp	r3, #0
 800e862:	d1d0      	bne.n	800e806 <_dtoa_r+0x34e>
 800e864:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e866:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f000 8084 	beq.w	800e978 <_dtoa_r+0x4c0>
 800e870:	4b95      	ldr	r3, [pc, #596]	; (800eac8 <_dtoa_r+0x610>)
 800e872:	2200      	movs	r2, #0
 800e874:	4640      	mov	r0, r8
 800e876:	4649      	mov	r1, r9
 800e878:	f7f2 f948 	bl	8000b0c <__aeabi_dcmplt>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	d07b      	beq.n	800e978 <_dtoa_r+0x4c0>
 800e880:	9b04      	ldr	r3, [sp, #16]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d078      	beq.n	800e978 <_dtoa_r+0x4c0>
 800e886:	9b01      	ldr	r3, [sp, #4]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	dd39      	ble.n	800e900 <_dtoa_r+0x448>
 800e88c:	4b8f      	ldr	r3, [pc, #572]	; (800eacc <_dtoa_r+0x614>)
 800e88e:	2200      	movs	r2, #0
 800e890:	4640      	mov	r0, r8
 800e892:	4649      	mov	r1, r9
 800e894:	f7f1 fec8 	bl	8000628 <__aeabi_dmul>
 800e898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e89c:	9e01      	ldr	r6, [sp, #4]
 800e89e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e8a2:	3501      	adds	r5, #1
 800e8a4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	f7f1 fe53 	bl	8000554 <__aeabi_i2d>
 800e8ae:	4642      	mov	r2, r8
 800e8b0:	464b      	mov	r3, r9
 800e8b2:	f7f1 feb9 	bl	8000628 <__aeabi_dmul>
 800e8b6:	4b86      	ldr	r3, [pc, #536]	; (800ead0 <_dtoa_r+0x618>)
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f7f1 fcff 	bl	80002bc <__adddf3>
 800e8be:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e8c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8c6:	9303      	str	r3, [sp, #12]
 800e8c8:	2e00      	cmp	r6, #0
 800e8ca:	d158      	bne.n	800e97e <_dtoa_r+0x4c6>
 800e8cc:	4b81      	ldr	r3, [pc, #516]	; (800ead4 <_dtoa_r+0x61c>)
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	4640      	mov	r0, r8
 800e8d2:	4649      	mov	r1, r9
 800e8d4:	f7f1 fcf0 	bl	80002b8 <__aeabi_dsub>
 800e8d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8dc:	4680      	mov	r8, r0
 800e8de:	4689      	mov	r9, r1
 800e8e0:	f7f2 f932 	bl	8000b48 <__aeabi_dcmpgt>
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	f040 8295 	bne.w	800ee14 <_dtoa_r+0x95c>
 800e8ea:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e8ee:	4640      	mov	r0, r8
 800e8f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e8f4:	4649      	mov	r1, r9
 800e8f6:	f7f2 f909 	bl	8000b0c <__aeabi_dcmplt>
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	f040 8288 	bne.w	800ee10 <_dtoa_r+0x958>
 800e900:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e904:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e906:	2b00      	cmp	r3, #0
 800e908:	f2c0 814d 	blt.w	800eba6 <_dtoa_r+0x6ee>
 800e90c:	f1bb 0f0e 	cmp.w	fp, #14
 800e910:	f300 8149 	bgt.w	800eba6 <_dtoa_r+0x6ee>
 800e914:	4b6a      	ldr	r3, [pc, #424]	; (800eac0 <_dtoa_r+0x608>)
 800e916:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e91a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e920:	2b00      	cmp	r3, #0
 800e922:	f280 80db 	bge.w	800eadc <_dtoa_r+0x624>
 800e926:	9b04      	ldr	r3, [sp, #16]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	f300 80d7 	bgt.w	800eadc <_dtoa_r+0x624>
 800e92e:	f040 826e 	bne.w	800ee0e <_dtoa_r+0x956>
 800e932:	4b68      	ldr	r3, [pc, #416]	; (800ead4 <_dtoa_r+0x61c>)
 800e934:	2200      	movs	r2, #0
 800e936:	4640      	mov	r0, r8
 800e938:	4649      	mov	r1, r9
 800e93a:	f7f1 fe75 	bl	8000628 <__aeabi_dmul>
 800e93e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e942:	f7f2 f8f7 	bl	8000b34 <__aeabi_dcmpge>
 800e946:	9e04      	ldr	r6, [sp, #16]
 800e948:	4637      	mov	r7, r6
 800e94a:	2800      	cmp	r0, #0
 800e94c:	f040 8244 	bne.w	800edd8 <_dtoa_r+0x920>
 800e950:	9d00      	ldr	r5, [sp, #0]
 800e952:	2331      	movs	r3, #49	; 0x31
 800e954:	f805 3b01 	strb.w	r3, [r5], #1
 800e958:	f10b 0b01 	add.w	fp, fp, #1
 800e95c:	e240      	b.n	800ede0 <_dtoa_r+0x928>
 800e95e:	07f2      	lsls	r2, r6, #31
 800e960:	d505      	bpl.n	800e96e <_dtoa_r+0x4b6>
 800e962:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e966:	f7f1 fe5f 	bl	8000628 <__aeabi_dmul>
 800e96a:	3501      	adds	r5, #1
 800e96c:	2301      	movs	r3, #1
 800e96e:	1076      	asrs	r6, r6, #1
 800e970:	3708      	adds	r7, #8
 800e972:	e773      	b.n	800e85c <_dtoa_r+0x3a4>
 800e974:	2502      	movs	r5, #2
 800e976:	e775      	b.n	800e864 <_dtoa_r+0x3ac>
 800e978:	9e04      	ldr	r6, [sp, #16]
 800e97a:	465f      	mov	r7, fp
 800e97c:	e792      	b.n	800e8a4 <_dtoa_r+0x3ec>
 800e97e:	9900      	ldr	r1, [sp, #0]
 800e980:	4b4f      	ldr	r3, [pc, #316]	; (800eac0 <_dtoa_r+0x608>)
 800e982:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e986:	4431      	add	r1, r6
 800e988:	9102      	str	r1, [sp, #8]
 800e98a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e98c:	eeb0 9a47 	vmov.f32	s18, s14
 800e990:	eef0 9a67 	vmov.f32	s19, s15
 800e994:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e998:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e99c:	2900      	cmp	r1, #0
 800e99e:	d044      	beq.n	800ea2a <_dtoa_r+0x572>
 800e9a0:	494d      	ldr	r1, [pc, #308]	; (800ead8 <_dtoa_r+0x620>)
 800e9a2:	2000      	movs	r0, #0
 800e9a4:	f7f1 ff6a 	bl	800087c <__aeabi_ddiv>
 800e9a8:	ec53 2b19 	vmov	r2, r3, d9
 800e9ac:	f7f1 fc84 	bl	80002b8 <__aeabi_dsub>
 800e9b0:	9d00      	ldr	r5, [sp, #0]
 800e9b2:	ec41 0b19 	vmov	d9, r0, r1
 800e9b6:	4649      	mov	r1, r9
 800e9b8:	4640      	mov	r0, r8
 800e9ba:	f7f2 f8e5 	bl	8000b88 <__aeabi_d2iz>
 800e9be:	4606      	mov	r6, r0
 800e9c0:	f7f1 fdc8 	bl	8000554 <__aeabi_i2d>
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	4640      	mov	r0, r8
 800e9ca:	4649      	mov	r1, r9
 800e9cc:	f7f1 fc74 	bl	80002b8 <__aeabi_dsub>
 800e9d0:	3630      	adds	r6, #48	; 0x30
 800e9d2:	f805 6b01 	strb.w	r6, [r5], #1
 800e9d6:	ec53 2b19 	vmov	r2, r3, d9
 800e9da:	4680      	mov	r8, r0
 800e9dc:	4689      	mov	r9, r1
 800e9de:	f7f2 f895 	bl	8000b0c <__aeabi_dcmplt>
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	d164      	bne.n	800eab0 <_dtoa_r+0x5f8>
 800e9e6:	4642      	mov	r2, r8
 800e9e8:	464b      	mov	r3, r9
 800e9ea:	4937      	ldr	r1, [pc, #220]	; (800eac8 <_dtoa_r+0x610>)
 800e9ec:	2000      	movs	r0, #0
 800e9ee:	f7f1 fc63 	bl	80002b8 <__aeabi_dsub>
 800e9f2:	ec53 2b19 	vmov	r2, r3, d9
 800e9f6:	f7f2 f889 	bl	8000b0c <__aeabi_dcmplt>
 800e9fa:	2800      	cmp	r0, #0
 800e9fc:	f040 80b5 	bne.w	800eb6a <_dtoa_r+0x6b2>
 800ea00:	9b02      	ldr	r3, [sp, #8]
 800ea02:	429d      	cmp	r5, r3
 800ea04:	f43f af7c 	beq.w	800e900 <_dtoa_r+0x448>
 800ea08:	4b30      	ldr	r3, [pc, #192]	; (800eacc <_dtoa_r+0x614>)
 800ea0a:	ec51 0b19 	vmov	r0, r1, d9
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f7f1 fe0a 	bl	8000628 <__aeabi_dmul>
 800ea14:	4b2d      	ldr	r3, [pc, #180]	; (800eacc <_dtoa_r+0x614>)
 800ea16:	ec41 0b19 	vmov	d9, r0, r1
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	4640      	mov	r0, r8
 800ea1e:	4649      	mov	r1, r9
 800ea20:	f7f1 fe02 	bl	8000628 <__aeabi_dmul>
 800ea24:	4680      	mov	r8, r0
 800ea26:	4689      	mov	r9, r1
 800ea28:	e7c5      	b.n	800e9b6 <_dtoa_r+0x4fe>
 800ea2a:	ec51 0b17 	vmov	r0, r1, d7
 800ea2e:	f7f1 fdfb 	bl	8000628 <__aeabi_dmul>
 800ea32:	9b02      	ldr	r3, [sp, #8]
 800ea34:	9d00      	ldr	r5, [sp, #0]
 800ea36:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea38:	ec41 0b19 	vmov	d9, r0, r1
 800ea3c:	4649      	mov	r1, r9
 800ea3e:	4640      	mov	r0, r8
 800ea40:	f7f2 f8a2 	bl	8000b88 <__aeabi_d2iz>
 800ea44:	4606      	mov	r6, r0
 800ea46:	f7f1 fd85 	bl	8000554 <__aeabi_i2d>
 800ea4a:	3630      	adds	r6, #48	; 0x30
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	460b      	mov	r3, r1
 800ea50:	4640      	mov	r0, r8
 800ea52:	4649      	mov	r1, r9
 800ea54:	f7f1 fc30 	bl	80002b8 <__aeabi_dsub>
 800ea58:	f805 6b01 	strb.w	r6, [r5], #1
 800ea5c:	9b02      	ldr	r3, [sp, #8]
 800ea5e:	429d      	cmp	r5, r3
 800ea60:	4680      	mov	r8, r0
 800ea62:	4689      	mov	r9, r1
 800ea64:	f04f 0200 	mov.w	r2, #0
 800ea68:	d124      	bne.n	800eab4 <_dtoa_r+0x5fc>
 800ea6a:	4b1b      	ldr	r3, [pc, #108]	; (800ead8 <_dtoa_r+0x620>)
 800ea6c:	ec51 0b19 	vmov	r0, r1, d9
 800ea70:	f7f1 fc24 	bl	80002bc <__adddf3>
 800ea74:	4602      	mov	r2, r0
 800ea76:	460b      	mov	r3, r1
 800ea78:	4640      	mov	r0, r8
 800ea7a:	4649      	mov	r1, r9
 800ea7c:	f7f2 f864 	bl	8000b48 <__aeabi_dcmpgt>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d172      	bne.n	800eb6a <_dtoa_r+0x6b2>
 800ea84:	ec53 2b19 	vmov	r2, r3, d9
 800ea88:	4913      	ldr	r1, [pc, #76]	; (800ead8 <_dtoa_r+0x620>)
 800ea8a:	2000      	movs	r0, #0
 800ea8c:	f7f1 fc14 	bl	80002b8 <__aeabi_dsub>
 800ea90:	4602      	mov	r2, r0
 800ea92:	460b      	mov	r3, r1
 800ea94:	4640      	mov	r0, r8
 800ea96:	4649      	mov	r1, r9
 800ea98:	f7f2 f838 	bl	8000b0c <__aeabi_dcmplt>
 800ea9c:	2800      	cmp	r0, #0
 800ea9e:	f43f af2f 	beq.w	800e900 <_dtoa_r+0x448>
 800eaa2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800eaa4:	1e6b      	subs	r3, r5, #1
 800eaa6:	930f      	str	r3, [sp, #60]	; 0x3c
 800eaa8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eaac:	2b30      	cmp	r3, #48	; 0x30
 800eaae:	d0f8      	beq.n	800eaa2 <_dtoa_r+0x5ea>
 800eab0:	46bb      	mov	fp, r7
 800eab2:	e049      	b.n	800eb48 <_dtoa_r+0x690>
 800eab4:	4b05      	ldr	r3, [pc, #20]	; (800eacc <_dtoa_r+0x614>)
 800eab6:	f7f1 fdb7 	bl	8000628 <__aeabi_dmul>
 800eaba:	4680      	mov	r8, r0
 800eabc:	4689      	mov	r9, r1
 800eabe:	e7bd      	b.n	800ea3c <_dtoa_r+0x584>
 800eac0:	08012728 	.word	0x08012728
 800eac4:	08012700 	.word	0x08012700
 800eac8:	3ff00000 	.word	0x3ff00000
 800eacc:	40240000 	.word	0x40240000
 800ead0:	401c0000 	.word	0x401c0000
 800ead4:	40140000 	.word	0x40140000
 800ead8:	3fe00000 	.word	0x3fe00000
 800eadc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eae0:	9d00      	ldr	r5, [sp, #0]
 800eae2:	4642      	mov	r2, r8
 800eae4:	464b      	mov	r3, r9
 800eae6:	4630      	mov	r0, r6
 800eae8:	4639      	mov	r1, r7
 800eaea:	f7f1 fec7 	bl	800087c <__aeabi_ddiv>
 800eaee:	f7f2 f84b 	bl	8000b88 <__aeabi_d2iz>
 800eaf2:	9001      	str	r0, [sp, #4]
 800eaf4:	f7f1 fd2e 	bl	8000554 <__aeabi_i2d>
 800eaf8:	4642      	mov	r2, r8
 800eafa:	464b      	mov	r3, r9
 800eafc:	f7f1 fd94 	bl	8000628 <__aeabi_dmul>
 800eb00:	4602      	mov	r2, r0
 800eb02:	460b      	mov	r3, r1
 800eb04:	4630      	mov	r0, r6
 800eb06:	4639      	mov	r1, r7
 800eb08:	f7f1 fbd6 	bl	80002b8 <__aeabi_dsub>
 800eb0c:	9e01      	ldr	r6, [sp, #4]
 800eb0e:	9f04      	ldr	r7, [sp, #16]
 800eb10:	3630      	adds	r6, #48	; 0x30
 800eb12:	f805 6b01 	strb.w	r6, [r5], #1
 800eb16:	9e00      	ldr	r6, [sp, #0]
 800eb18:	1bae      	subs	r6, r5, r6
 800eb1a:	42b7      	cmp	r7, r6
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	460b      	mov	r3, r1
 800eb20:	d134      	bne.n	800eb8c <_dtoa_r+0x6d4>
 800eb22:	f7f1 fbcb 	bl	80002bc <__adddf3>
 800eb26:	4642      	mov	r2, r8
 800eb28:	464b      	mov	r3, r9
 800eb2a:	4606      	mov	r6, r0
 800eb2c:	460f      	mov	r7, r1
 800eb2e:	f7f2 f80b 	bl	8000b48 <__aeabi_dcmpgt>
 800eb32:	b9c8      	cbnz	r0, 800eb68 <_dtoa_r+0x6b0>
 800eb34:	4642      	mov	r2, r8
 800eb36:	464b      	mov	r3, r9
 800eb38:	4630      	mov	r0, r6
 800eb3a:	4639      	mov	r1, r7
 800eb3c:	f7f1 ffdc 	bl	8000af8 <__aeabi_dcmpeq>
 800eb40:	b110      	cbz	r0, 800eb48 <_dtoa_r+0x690>
 800eb42:	9b01      	ldr	r3, [sp, #4]
 800eb44:	07db      	lsls	r3, r3, #31
 800eb46:	d40f      	bmi.n	800eb68 <_dtoa_r+0x6b0>
 800eb48:	4651      	mov	r1, sl
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	f7fd fbd9 	bl	800c302 <_Bfree>
 800eb50:	2300      	movs	r3, #0
 800eb52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eb54:	702b      	strb	r3, [r5, #0]
 800eb56:	f10b 0301 	add.w	r3, fp, #1
 800eb5a:	6013      	str	r3, [r2, #0]
 800eb5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	f43f ace5 	beq.w	800e52e <_dtoa_r+0x76>
 800eb64:	601d      	str	r5, [r3, #0]
 800eb66:	e4e2      	b.n	800e52e <_dtoa_r+0x76>
 800eb68:	465f      	mov	r7, fp
 800eb6a:	462b      	mov	r3, r5
 800eb6c:	461d      	mov	r5, r3
 800eb6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb72:	2a39      	cmp	r2, #57	; 0x39
 800eb74:	d106      	bne.n	800eb84 <_dtoa_r+0x6cc>
 800eb76:	9a00      	ldr	r2, [sp, #0]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d1f7      	bne.n	800eb6c <_dtoa_r+0x6b4>
 800eb7c:	9900      	ldr	r1, [sp, #0]
 800eb7e:	2230      	movs	r2, #48	; 0x30
 800eb80:	3701      	adds	r7, #1
 800eb82:	700a      	strb	r2, [r1, #0]
 800eb84:	781a      	ldrb	r2, [r3, #0]
 800eb86:	3201      	adds	r2, #1
 800eb88:	701a      	strb	r2, [r3, #0]
 800eb8a:	e791      	b.n	800eab0 <_dtoa_r+0x5f8>
 800eb8c:	4ba3      	ldr	r3, [pc, #652]	; (800ee1c <_dtoa_r+0x964>)
 800eb8e:	2200      	movs	r2, #0
 800eb90:	f7f1 fd4a 	bl	8000628 <__aeabi_dmul>
 800eb94:	2200      	movs	r2, #0
 800eb96:	2300      	movs	r3, #0
 800eb98:	4606      	mov	r6, r0
 800eb9a:	460f      	mov	r7, r1
 800eb9c:	f7f1 ffac 	bl	8000af8 <__aeabi_dcmpeq>
 800eba0:	2800      	cmp	r0, #0
 800eba2:	d09e      	beq.n	800eae2 <_dtoa_r+0x62a>
 800eba4:	e7d0      	b.n	800eb48 <_dtoa_r+0x690>
 800eba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eba8:	2a00      	cmp	r2, #0
 800ebaa:	f000 80ca 	beq.w	800ed42 <_dtoa_r+0x88a>
 800ebae:	9a07      	ldr	r2, [sp, #28]
 800ebb0:	2a01      	cmp	r2, #1
 800ebb2:	f300 80ad 	bgt.w	800ed10 <_dtoa_r+0x858>
 800ebb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebb8:	2a00      	cmp	r2, #0
 800ebba:	f000 80a5 	beq.w	800ed08 <_dtoa_r+0x850>
 800ebbe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ebc2:	9e08      	ldr	r6, [sp, #32]
 800ebc4:	9d05      	ldr	r5, [sp, #20]
 800ebc6:	9a05      	ldr	r2, [sp, #20]
 800ebc8:	441a      	add	r2, r3
 800ebca:	9205      	str	r2, [sp, #20]
 800ebcc:	9a06      	ldr	r2, [sp, #24]
 800ebce:	2101      	movs	r1, #1
 800ebd0:	441a      	add	r2, r3
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	9206      	str	r2, [sp, #24]
 800ebd6:	f7fd fc7b 	bl	800c4d0 <__i2b>
 800ebda:	4607      	mov	r7, r0
 800ebdc:	b165      	cbz	r5, 800ebf8 <_dtoa_r+0x740>
 800ebde:	9b06      	ldr	r3, [sp, #24]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	dd09      	ble.n	800ebf8 <_dtoa_r+0x740>
 800ebe4:	42ab      	cmp	r3, r5
 800ebe6:	9a05      	ldr	r2, [sp, #20]
 800ebe8:	bfa8      	it	ge
 800ebea:	462b      	movge	r3, r5
 800ebec:	1ad2      	subs	r2, r2, r3
 800ebee:	9205      	str	r2, [sp, #20]
 800ebf0:	9a06      	ldr	r2, [sp, #24]
 800ebf2:	1aed      	subs	r5, r5, r3
 800ebf4:	1ad3      	subs	r3, r2, r3
 800ebf6:	9306      	str	r3, [sp, #24]
 800ebf8:	9b08      	ldr	r3, [sp, #32]
 800ebfa:	b1f3      	cbz	r3, 800ec3a <_dtoa_r+0x782>
 800ebfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	f000 80a3 	beq.w	800ed4a <_dtoa_r+0x892>
 800ec04:	2e00      	cmp	r6, #0
 800ec06:	dd10      	ble.n	800ec2a <_dtoa_r+0x772>
 800ec08:	4639      	mov	r1, r7
 800ec0a:	4632      	mov	r2, r6
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	f7fd fd1f 	bl	800c650 <__pow5mult>
 800ec12:	4652      	mov	r2, sl
 800ec14:	4601      	mov	r1, r0
 800ec16:	4607      	mov	r7, r0
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f7fd fc6f 	bl	800c4fc <__multiply>
 800ec1e:	4651      	mov	r1, sl
 800ec20:	4680      	mov	r8, r0
 800ec22:	4620      	mov	r0, r4
 800ec24:	f7fd fb6d 	bl	800c302 <_Bfree>
 800ec28:	46c2      	mov	sl, r8
 800ec2a:	9b08      	ldr	r3, [sp, #32]
 800ec2c:	1b9a      	subs	r2, r3, r6
 800ec2e:	d004      	beq.n	800ec3a <_dtoa_r+0x782>
 800ec30:	4651      	mov	r1, sl
 800ec32:	4620      	mov	r0, r4
 800ec34:	f7fd fd0c 	bl	800c650 <__pow5mult>
 800ec38:	4682      	mov	sl, r0
 800ec3a:	2101      	movs	r1, #1
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	f7fd fc47 	bl	800c4d0 <__i2b>
 800ec42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	4606      	mov	r6, r0
 800ec48:	f340 8081 	ble.w	800ed4e <_dtoa_r+0x896>
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	4601      	mov	r1, r0
 800ec50:	4620      	mov	r0, r4
 800ec52:	f7fd fcfd 	bl	800c650 <__pow5mult>
 800ec56:	9b07      	ldr	r3, [sp, #28]
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	4606      	mov	r6, r0
 800ec5c:	dd7a      	ble.n	800ed54 <_dtoa_r+0x89c>
 800ec5e:	f04f 0800 	mov.w	r8, #0
 800ec62:	6933      	ldr	r3, [r6, #16]
 800ec64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ec68:	6918      	ldr	r0, [r3, #16]
 800ec6a:	f7fd fbe3 	bl	800c434 <__hi0bits>
 800ec6e:	f1c0 0020 	rsb	r0, r0, #32
 800ec72:	9b06      	ldr	r3, [sp, #24]
 800ec74:	4418      	add	r0, r3
 800ec76:	f010 001f 	ands.w	r0, r0, #31
 800ec7a:	f000 8094 	beq.w	800eda6 <_dtoa_r+0x8ee>
 800ec7e:	f1c0 0320 	rsb	r3, r0, #32
 800ec82:	2b04      	cmp	r3, #4
 800ec84:	f340 8085 	ble.w	800ed92 <_dtoa_r+0x8da>
 800ec88:	9b05      	ldr	r3, [sp, #20]
 800ec8a:	f1c0 001c 	rsb	r0, r0, #28
 800ec8e:	4403      	add	r3, r0
 800ec90:	9305      	str	r3, [sp, #20]
 800ec92:	9b06      	ldr	r3, [sp, #24]
 800ec94:	4403      	add	r3, r0
 800ec96:	4405      	add	r5, r0
 800ec98:	9306      	str	r3, [sp, #24]
 800ec9a:	9b05      	ldr	r3, [sp, #20]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	dd05      	ble.n	800ecac <_dtoa_r+0x7f4>
 800eca0:	4651      	mov	r1, sl
 800eca2:	461a      	mov	r2, r3
 800eca4:	4620      	mov	r0, r4
 800eca6:	f7fd fd13 	bl	800c6d0 <__lshift>
 800ecaa:	4682      	mov	sl, r0
 800ecac:	9b06      	ldr	r3, [sp, #24]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	dd05      	ble.n	800ecbe <_dtoa_r+0x806>
 800ecb2:	4631      	mov	r1, r6
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	f7fd fd0a 	bl	800c6d0 <__lshift>
 800ecbc:	4606      	mov	r6, r0
 800ecbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d072      	beq.n	800edaa <_dtoa_r+0x8f2>
 800ecc4:	4631      	mov	r1, r6
 800ecc6:	4650      	mov	r0, sl
 800ecc8:	f7fd fd6e 	bl	800c7a8 <__mcmp>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	da6c      	bge.n	800edaa <_dtoa_r+0x8f2>
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	4651      	mov	r1, sl
 800ecd4:	220a      	movs	r2, #10
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	f7fd fb1c 	bl	800c314 <__multadd>
 800ecdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecde:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ece2:	4682      	mov	sl, r0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	f000 81af 	beq.w	800f048 <_dtoa_r+0xb90>
 800ecea:	2300      	movs	r3, #0
 800ecec:	4639      	mov	r1, r7
 800ecee:	220a      	movs	r2, #10
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f7fd fb0f 	bl	800c314 <__multadd>
 800ecf6:	9b01      	ldr	r3, [sp, #4]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	4607      	mov	r7, r0
 800ecfc:	f300 8096 	bgt.w	800ee2c <_dtoa_r+0x974>
 800ed00:	9b07      	ldr	r3, [sp, #28]
 800ed02:	2b02      	cmp	r3, #2
 800ed04:	dc59      	bgt.n	800edba <_dtoa_r+0x902>
 800ed06:	e091      	b.n	800ee2c <_dtoa_r+0x974>
 800ed08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ed0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ed0e:	e758      	b.n	800ebc2 <_dtoa_r+0x70a>
 800ed10:	9b04      	ldr	r3, [sp, #16]
 800ed12:	1e5e      	subs	r6, r3, #1
 800ed14:	9b08      	ldr	r3, [sp, #32]
 800ed16:	42b3      	cmp	r3, r6
 800ed18:	bfbf      	itttt	lt
 800ed1a:	9b08      	ldrlt	r3, [sp, #32]
 800ed1c:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ed1e:	9608      	strlt	r6, [sp, #32]
 800ed20:	1af3      	sublt	r3, r6, r3
 800ed22:	bfb4      	ite	lt
 800ed24:	18d2      	addlt	r2, r2, r3
 800ed26:	1b9e      	subge	r6, r3, r6
 800ed28:	9b04      	ldr	r3, [sp, #16]
 800ed2a:	bfbc      	itt	lt
 800ed2c:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ed2e:	2600      	movlt	r6, #0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	bfb7      	itett	lt
 800ed34:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ed38:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ed3c:	1a9d      	sublt	r5, r3, r2
 800ed3e:	2300      	movlt	r3, #0
 800ed40:	e741      	b.n	800ebc6 <_dtoa_r+0x70e>
 800ed42:	9e08      	ldr	r6, [sp, #32]
 800ed44:	9d05      	ldr	r5, [sp, #20]
 800ed46:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ed48:	e748      	b.n	800ebdc <_dtoa_r+0x724>
 800ed4a:	9a08      	ldr	r2, [sp, #32]
 800ed4c:	e770      	b.n	800ec30 <_dtoa_r+0x778>
 800ed4e:	9b07      	ldr	r3, [sp, #28]
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	dc19      	bgt.n	800ed88 <_dtoa_r+0x8d0>
 800ed54:	9b02      	ldr	r3, [sp, #8]
 800ed56:	b9bb      	cbnz	r3, 800ed88 <_dtoa_r+0x8d0>
 800ed58:	9b03      	ldr	r3, [sp, #12]
 800ed5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed5e:	b99b      	cbnz	r3, 800ed88 <_dtoa_r+0x8d0>
 800ed60:	9b03      	ldr	r3, [sp, #12]
 800ed62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ed66:	0d1b      	lsrs	r3, r3, #20
 800ed68:	051b      	lsls	r3, r3, #20
 800ed6a:	b183      	cbz	r3, 800ed8e <_dtoa_r+0x8d6>
 800ed6c:	9b05      	ldr	r3, [sp, #20]
 800ed6e:	3301      	adds	r3, #1
 800ed70:	9305      	str	r3, [sp, #20]
 800ed72:	9b06      	ldr	r3, [sp, #24]
 800ed74:	3301      	adds	r3, #1
 800ed76:	9306      	str	r3, [sp, #24]
 800ed78:	f04f 0801 	mov.w	r8, #1
 800ed7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	f47f af6f 	bne.w	800ec62 <_dtoa_r+0x7aa>
 800ed84:	2001      	movs	r0, #1
 800ed86:	e774      	b.n	800ec72 <_dtoa_r+0x7ba>
 800ed88:	f04f 0800 	mov.w	r8, #0
 800ed8c:	e7f6      	b.n	800ed7c <_dtoa_r+0x8c4>
 800ed8e:	4698      	mov	r8, r3
 800ed90:	e7f4      	b.n	800ed7c <_dtoa_r+0x8c4>
 800ed92:	d082      	beq.n	800ec9a <_dtoa_r+0x7e2>
 800ed94:	9a05      	ldr	r2, [sp, #20]
 800ed96:	331c      	adds	r3, #28
 800ed98:	441a      	add	r2, r3
 800ed9a:	9205      	str	r2, [sp, #20]
 800ed9c:	9a06      	ldr	r2, [sp, #24]
 800ed9e:	441a      	add	r2, r3
 800eda0:	441d      	add	r5, r3
 800eda2:	9206      	str	r2, [sp, #24]
 800eda4:	e779      	b.n	800ec9a <_dtoa_r+0x7e2>
 800eda6:	4603      	mov	r3, r0
 800eda8:	e7f4      	b.n	800ed94 <_dtoa_r+0x8dc>
 800edaa:	9b04      	ldr	r3, [sp, #16]
 800edac:	2b00      	cmp	r3, #0
 800edae:	dc37      	bgt.n	800ee20 <_dtoa_r+0x968>
 800edb0:	9b07      	ldr	r3, [sp, #28]
 800edb2:	2b02      	cmp	r3, #2
 800edb4:	dd34      	ble.n	800ee20 <_dtoa_r+0x968>
 800edb6:	9b04      	ldr	r3, [sp, #16]
 800edb8:	9301      	str	r3, [sp, #4]
 800edba:	9b01      	ldr	r3, [sp, #4]
 800edbc:	b963      	cbnz	r3, 800edd8 <_dtoa_r+0x920>
 800edbe:	4631      	mov	r1, r6
 800edc0:	2205      	movs	r2, #5
 800edc2:	4620      	mov	r0, r4
 800edc4:	f7fd faa6 	bl	800c314 <__multadd>
 800edc8:	4601      	mov	r1, r0
 800edca:	4606      	mov	r6, r0
 800edcc:	4650      	mov	r0, sl
 800edce:	f7fd fceb 	bl	800c7a8 <__mcmp>
 800edd2:	2800      	cmp	r0, #0
 800edd4:	f73f adbc 	bgt.w	800e950 <_dtoa_r+0x498>
 800edd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edda:	9d00      	ldr	r5, [sp, #0]
 800eddc:	ea6f 0b03 	mvn.w	fp, r3
 800ede0:	f04f 0800 	mov.w	r8, #0
 800ede4:	4631      	mov	r1, r6
 800ede6:	4620      	mov	r0, r4
 800ede8:	f7fd fa8b 	bl	800c302 <_Bfree>
 800edec:	2f00      	cmp	r7, #0
 800edee:	f43f aeab 	beq.w	800eb48 <_dtoa_r+0x690>
 800edf2:	f1b8 0f00 	cmp.w	r8, #0
 800edf6:	d005      	beq.n	800ee04 <_dtoa_r+0x94c>
 800edf8:	45b8      	cmp	r8, r7
 800edfa:	d003      	beq.n	800ee04 <_dtoa_r+0x94c>
 800edfc:	4641      	mov	r1, r8
 800edfe:	4620      	mov	r0, r4
 800ee00:	f7fd fa7f 	bl	800c302 <_Bfree>
 800ee04:	4639      	mov	r1, r7
 800ee06:	4620      	mov	r0, r4
 800ee08:	f7fd fa7b 	bl	800c302 <_Bfree>
 800ee0c:	e69c      	b.n	800eb48 <_dtoa_r+0x690>
 800ee0e:	2600      	movs	r6, #0
 800ee10:	4637      	mov	r7, r6
 800ee12:	e7e1      	b.n	800edd8 <_dtoa_r+0x920>
 800ee14:	46bb      	mov	fp, r7
 800ee16:	4637      	mov	r7, r6
 800ee18:	e59a      	b.n	800e950 <_dtoa_r+0x498>
 800ee1a:	bf00      	nop
 800ee1c:	40240000 	.word	0x40240000
 800ee20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f000 80c7 	beq.w	800efb6 <_dtoa_r+0xafe>
 800ee28:	9b04      	ldr	r3, [sp, #16]
 800ee2a:	9301      	str	r3, [sp, #4]
 800ee2c:	2d00      	cmp	r5, #0
 800ee2e:	dd05      	ble.n	800ee3c <_dtoa_r+0x984>
 800ee30:	4639      	mov	r1, r7
 800ee32:	462a      	mov	r2, r5
 800ee34:	4620      	mov	r0, r4
 800ee36:	f7fd fc4b 	bl	800c6d0 <__lshift>
 800ee3a:	4607      	mov	r7, r0
 800ee3c:	f1b8 0f00 	cmp.w	r8, #0
 800ee40:	d05a      	beq.n	800eef8 <_dtoa_r+0xa40>
 800ee42:	6879      	ldr	r1, [r7, #4]
 800ee44:	4620      	mov	r0, r4
 800ee46:	f7fd fa37 	bl	800c2b8 <_Balloc>
 800ee4a:	4605      	mov	r5, r0
 800ee4c:	b920      	cbnz	r0, 800ee58 <_dtoa_r+0x9a0>
 800ee4e:	4b82      	ldr	r3, [pc, #520]	; (800f058 <_dtoa_r+0xba0>)
 800ee50:	4602      	mov	r2, r0
 800ee52:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ee56:	e470      	b.n	800e73a <_dtoa_r+0x282>
 800ee58:	693a      	ldr	r2, [r7, #16]
 800ee5a:	3202      	adds	r2, #2
 800ee5c:	0092      	lsls	r2, r2, #2
 800ee5e:	f107 010c 	add.w	r1, r7, #12
 800ee62:	300c      	adds	r0, #12
 800ee64:	f7fc fb3e 	bl	800b4e4 <memcpy>
 800ee68:	2201      	movs	r2, #1
 800ee6a:	4629      	mov	r1, r5
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	f7fd fc2f 	bl	800c6d0 <__lshift>
 800ee72:	9b00      	ldr	r3, [sp, #0]
 800ee74:	3301      	adds	r3, #1
 800ee76:	9304      	str	r3, [sp, #16]
 800ee78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee7c:	4413      	add	r3, r2
 800ee7e:	9308      	str	r3, [sp, #32]
 800ee80:	9b02      	ldr	r3, [sp, #8]
 800ee82:	f003 0301 	and.w	r3, r3, #1
 800ee86:	46b8      	mov	r8, r7
 800ee88:	9306      	str	r3, [sp, #24]
 800ee8a:	4607      	mov	r7, r0
 800ee8c:	9b04      	ldr	r3, [sp, #16]
 800ee8e:	4631      	mov	r1, r6
 800ee90:	3b01      	subs	r3, #1
 800ee92:	4650      	mov	r0, sl
 800ee94:	9301      	str	r3, [sp, #4]
 800ee96:	f7ff fa86 	bl	800e3a6 <quorem>
 800ee9a:	4641      	mov	r1, r8
 800ee9c:	9002      	str	r0, [sp, #8]
 800ee9e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800eea2:	4650      	mov	r0, sl
 800eea4:	f7fd fc80 	bl	800c7a8 <__mcmp>
 800eea8:	463a      	mov	r2, r7
 800eeaa:	9005      	str	r0, [sp, #20]
 800eeac:	4631      	mov	r1, r6
 800eeae:	4620      	mov	r0, r4
 800eeb0:	f7fd fc96 	bl	800c7e0 <__mdiff>
 800eeb4:	68c2      	ldr	r2, [r0, #12]
 800eeb6:	4605      	mov	r5, r0
 800eeb8:	bb02      	cbnz	r2, 800eefc <_dtoa_r+0xa44>
 800eeba:	4601      	mov	r1, r0
 800eebc:	4650      	mov	r0, sl
 800eebe:	f7fd fc73 	bl	800c7a8 <__mcmp>
 800eec2:	4602      	mov	r2, r0
 800eec4:	4629      	mov	r1, r5
 800eec6:	4620      	mov	r0, r4
 800eec8:	9209      	str	r2, [sp, #36]	; 0x24
 800eeca:	f7fd fa1a 	bl	800c302 <_Bfree>
 800eece:	9b07      	ldr	r3, [sp, #28]
 800eed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eed2:	9d04      	ldr	r5, [sp, #16]
 800eed4:	ea43 0102 	orr.w	r1, r3, r2
 800eed8:	9b06      	ldr	r3, [sp, #24]
 800eeda:	4319      	orrs	r1, r3
 800eedc:	d110      	bne.n	800ef00 <_dtoa_r+0xa48>
 800eede:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eee2:	d029      	beq.n	800ef38 <_dtoa_r+0xa80>
 800eee4:	9b05      	ldr	r3, [sp, #20]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	dd02      	ble.n	800eef0 <_dtoa_r+0xa38>
 800eeea:	9b02      	ldr	r3, [sp, #8]
 800eeec:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800eef0:	9b01      	ldr	r3, [sp, #4]
 800eef2:	f883 9000 	strb.w	r9, [r3]
 800eef6:	e775      	b.n	800ede4 <_dtoa_r+0x92c>
 800eef8:	4638      	mov	r0, r7
 800eefa:	e7ba      	b.n	800ee72 <_dtoa_r+0x9ba>
 800eefc:	2201      	movs	r2, #1
 800eefe:	e7e1      	b.n	800eec4 <_dtoa_r+0xa0c>
 800ef00:	9b05      	ldr	r3, [sp, #20]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	db04      	blt.n	800ef10 <_dtoa_r+0xa58>
 800ef06:	9907      	ldr	r1, [sp, #28]
 800ef08:	430b      	orrs	r3, r1
 800ef0a:	9906      	ldr	r1, [sp, #24]
 800ef0c:	430b      	orrs	r3, r1
 800ef0e:	d120      	bne.n	800ef52 <_dtoa_r+0xa9a>
 800ef10:	2a00      	cmp	r2, #0
 800ef12:	dded      	ble.n	800eef0 <_dtoa_r+0xa38>
 800ef14:	4651      	mov	r1, sl
 800ef16:	2201      	movs	r2, #1
 800ef18:	4620      	mov	r0, r4
 800ef1a:	f7fd fbd9 	bl	800c6d0 <__lshift>
 800ef1e:	4631      	mov	r1, r6
 800ef20:	4682      	mov	sl, r0
 800ef22:	f7fd fc41 	bl	800c7a8 <__mcmp>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	dc03      	bgt.n	800ef32 <_dtoa_r+0xa7a>
 800ef2a:	d1e1      	bne.n	800eef0 <_dtoa_r+0xa38>
 800ef2c:	f019 0f01 	tst.w	r9, #1
 800ef30:	d0de      	beq.n	800eef0 <_dtoa_r+0xa38>
 800ef32:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ef36:	d1d8      	bne.n	800eeea <_dtoa_r+0xa32>
 800ef38:	9a01      	ldr	r2, [sp, #4]
 800ef3a:	2339      	movs	r3, #57	; 0x39
 800ef3c:	7013      	strb	r3, [r2, #0]
 800ef3e:	462b      	mov	r3, r5
 800ef40:	461d      	mov	r5, r3
 800ef42:	3b01      	subs	r3, #1
 800ef44:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ef48:	2a39      	cmp	r2, #57	; 0x39
 800ef4a:	d06c      	beq.n	800f026 <_dtoa_r+0xb6e>
 800ef4c:	3201      	adds	r2, #1
 800ef4e:	701a      	strb	r2, [r3, #0]
 800ef50:	e748      	b.n	800ede4 <_dtoa_r+0x92c>
 800ef52:	2a00      	cmp	r2, #0
 800ef54:	dd07      	ble.n	800ef66 <_dtoa_r+0xaae>
 800ef56:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ef5a:	d0ed      	beq.n	800ef38 <_dtoa_r+0xa80>
 800ef5c:	9a01      	ldr	r2, [sp, #4]
 800ef5e:	f109 0301 	add.w	r3, r9, #1
 800ef62:	7013      	strb	r3, [r2, #0]
 800ef64:	e73e      	b.n	800ede4 <_dtoa_r+0x92c>
 800ef66:	9b04      	ldr	r3, [sp, #16]
 800ef68:	9a08      	ldr	r2, [sp, #32]
 800ef6a:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d043      	beq.n	800effa <_dtoa_r+0xb42>
 800ef72:	4651      	mov	r1, sl
 800ef74:	2300      	movs	r3, #0
 800ef76:	220a      	movs	r2, #10
 800ef78:	4620      	mov	r0, r4
 800ef7a:	f7fd f9cb 	bl	800c314 <__multadd>
 800ef7e:	45b8      	cmp	r8, r7
 800ef80:	4682      	mov	sl, r0
 800ef82:	f04f 0300 	mov.w	r3, #0
 800ef86:	f04f 020a 	mov.w	r2, #10
 800ef8a:	4641      	mov	r1, r8
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	d107      	bne.n	800efa0 <_dtoa_r+0xae8>
 800ef90:	f7fd f9c0 	bl	800c314 <__multadd>
 800ef94:	4680      	mov	r8, r0
 800ef96:	4607      	mov	r7, r0
 800ef98:	9b04      	ldr	r3, [sp, #16]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	9304      	str	r3, [sp, #16]
 800ef9e:	e775      	b.n	800ee8c <_dtoa_r+0x9d4>
 800efa0:	f7fd f9b8 	bl	800c314 <__multadd>
 800efa4:	4639      	mov	r1, r7
 800efa6:	4680      	mov	r8, r0
 800efa8:	2300      	movs	r3, #0
 800efaa:	220a      	movs	r2, #10
 800efac:	4620      	mov	r0, r4
 800efae:	f7fd f9b1 	bl	800c314 <__multadd>
 800efb2:	4607      	mov	r7, r0
 800efb4:	e7f0      	b.n	800ef98 <_dtoa_r+0xae0>
 800efb6:	9b04      	ldr	r3, [sp, #16]
 800efb8:	9301      	str	r3, [sp, #4]
 800efba:	9d00      	ldr	r5, [sp, #0]
 800efbc:	4631      	mov	r1, r6
 800efbe:	4650      	mov	r0, sl
 800efc0:	f7ff f9f1 	bl	800e3a6 <quorem>
 800efc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800efc8:	9b00      	ldr	r3, [sp, #0]
 800efca:	f805 9b01 	strb.w	r9, [r5], #1
 800efce:	1aea      	subs	r2, r5, r3
 800efd0:	9b01      	ldr	r3, [sp, #4]
 800efd2:	4293      	cmp	r3, r2
 800efd4:	dd07      	ble.n	800efe6 <_dtoa_r+0xb2e>
 800efd6:	4651      	mov	r1, sl
 800efd8:	2300      	movs	r3, #0
 800efda:	220a      	movs	r2, #10
 800efdc:	4620      	mov	r0, r4
 800efde:	f7fd f999 	bl	800c314 <__multadd>
 800efe2:	4682      	mov	sl, r0
 800efe4:	e7ea      	b.n	800efbc <_dtoa_r+0xb04>
 800efe6:	9b01      	ldr	r3, [sp, #4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	bfc8      	it	gt
 800efec:	461d      	movgt	r5, r3
 800efee:	9b00      	ldr	r3, [sp, #0]
 800eff0:	bfd8      	it	le
 800eff2:	2501      	movle	r5, #1
 800eff4:	441d      	add	r5, r3
 800eff6:	f04f 0800 	mov.w	r8, #0
 800effa:	4651      	mov	r1, sl
 800effc:	2201      	movs	r2, #1
 800effe:	4620      	mov	r0, r4
 800f000:	f7fd fb66 	bl	800c6d0 <__lshift>
 800f004:	4631      	mov	r1, r6
 800f006:	4682      	mov	sl, r0
 800f008:	f7fd fbce 	bl	800c7a8 <__mcmp>
 800f00c:	2800      	cmp	r0, #0
 800f00e:	dc96      	bgt.n	800ef3e <_dtoa_r+0xa86>
 800f010:	d102      	bne.n	800f018 <_dtoa_r+0xb60>
 800f012:	f019 0f01 	tst.w	r9, #1
 800f016:	d192      	bne.n	800ef3e <_dtoa_r+0xa86>
 800f018:	462b      	mov	r3, r5
 800f01a:	461d      	mov	r5, r3
 800f01c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f020:	2a30      	cmp	r2, #48	; 0x30
 800f022:	d0fa      	beq.n	800f01a <_dtoa_r+0xb62>
 800f024:	e6de      	b.n	800ede4 <_dtoa_r+0x92c>
 800f026:	9a00      	ldr	r2, [sp, #0]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d189      	bne.n	800ef40 <_dtoa_r+0xa88>
 800f02c:	f10b 0b01 	add.w	fp, fp, #1
 800f030:	2331      	movs	r3, #49	; 0x31
 800f032:	e796      	b.n	800ef62 <_dtoa_r+0xaaa>
 800f034:	4b09      	ldr	r3, [pc, #36]	; (800f05c <_dtoa_r+0xba4>)
 800f036:	f7ff ba9d 	b.w	800e574 <_dtoa_r+0xbc>
 800f03a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	f47f aa7c 	bne.w	800e53a <_dtoa_r+0x82>
 800f042:	4b07      	ldr	r3, [pc, #28]	; (800f060 <_dtoa_r+0xba8>)
 800f044:	f7ff ba96 	b.w	800e574 <_dtoa_r+0xbc>
 800f048:	9b01      	ldr	r3, [sp, #4]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	dcb5      	bgt.n	800efba <_dtoa_r+0xb02>
 800f04e:	9b07      	ldr	r3, [sp, #28]
 800f050:	2b02      	cmp	r3, #2
 800f052:	f73f aeb2 	bgt.w	800edba <_dtoa_r+0x902>
 800f056:	e7b0      	b.n	800efba <_dtoa_r+0xb02>
 800f058:	08012631 	.word	0x08012631
 800f05c:	0801282e 	.word	0x0801282e
 800f060:	0801288c 	.word	0x0801288c

0800f064 <fiprintf>:
 800f064:	b40e      	push	{r1, r2, r3}
 800f066:	b503      	push	{r0, r1, lr}
 800f068:	4601      	mov	r1, r0
 800f06a:	ab03      	add	r3, sp, #12
 800f06c:	4805      	ldr	r0, [pc, #20]	; (800f084 <fiprintf+0x20>)
 800f06e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f072:	6800      	ldr	r0, [r0, #0]
 800f074:	9301      	str	r3, [sp, #4]
 800f076:	f000 f8b7 	bl	800f1e8 <_vfiprintf_r>
 800f07a:	b002      	add	sp, #8
 800f07c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f080:	b003      	add	sp, #12
 800f082:	4770      	bx	lr
 800f084:	20000438 	.word	0x20000438

0800f088 <__ssprint_r>:
 800f088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f08c:	6813      	ldr	r3, [r2, #0]
 800f08e:	9301      	str	r3, [sp, #4]
 800f090:	6893      	ldr	r3, [r2, #8]
 800f092:	4680      	mov	r8, r0
 800f094:	460c      	mov	r4, r1
 800f096:	4617      	mov	r7, r2
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d157      	bne.n	800f14c <__ssprint_r+0xc4>
 800f09c:	2000      	movs	r0, #0
 800f09e:	2300      	movs	r3, #0
 800f0a0:	607b      	str	r3, [r7, #4]
 800f0a2:	b003      	add	sp, #12
 800f0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0a8:	9b01      	ldr	r3, [sp, #4]
 800f0aa:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800f0ae:	3308      	adds	r3, #8
 800f0b0:	9301      	str	r3, [sp, #4]
 800f0b2:	68a6      	ldr	r6, [r4, #8]
 800f0b4:	6820      	ldr	r0, [r4, #0]
 800f0b6:	f1bb 0f00 	cmp.w	fp, #0
 800f0ba:	d0f5      	beq.n	800f0a8 <__ssprint_r+0x20>
 800f0bc:	45b3      	cmp	fp, r6
 800f0be:	d32d      	bcc.n	800f11c <__ssprint_r+0x94>
 800f0c0:	89a2      	ldrh	r2, [r4, #12]
 800f0c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f0c6:	d029      	beq.n	800f11c <__ssprint_r+0x94>
 800f0c8:	6921      	ldr	r1, [r4, #16]
 800f0ca:	6965      	ldr	r5, [r4, #20]
 800f0cc:	eba0 0901 	sub.w	r9, r0, r1
 800f0d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0d8:	f109 0001 	add.w	r0, r9, #1
 800f0dc:	106d      	asrs	r5, r5, #1
 800f0de:	4458      	add	r0, fp
 800f0e0:	4285      	cmp	r5, r0
 800f0e2:	bf38      	it	cc
 800f0e4:	4605      	movcc	r5, r0
 800f0e6:	0553      	lsls	r3, r2, #21
 800f0e8:	d534      	bpl.n	800f154 <__ssprint_r+0xcc>
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	4640      	mov	r0, r8
 800f0ee:	f7fc fe8b 	bl	800be08 <_malloc_r>
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d038      	beq.n	800f16a <__ssprint_r+0xe2>
 800f0f8:	464a      	mov	r2, r9
 800f0fa:	6921      	ldr	r1, [r4, #16]
 800f0fc:	f7fc f9f2 	bl	800b4e4 <memcpy>
 800f100:	89a2      	ldrh	r2, [r4, #12]
 800f102:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800f106:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f10a:	81a2      	strh	r2, [r4, #12]
 800f10c:	6126      	str	r6, [r4, #16]
 800f10e:	6165      	str	r5, [r4, #20]
 800f110:	444e      	add	r6, r9
 800f112:	eba5 0509 	sub.w	r5, r5, r9
 800f116:	6026      	str	r6, [r4, #0]
 800f118:	60a5      	str	r5, [r4, #8]
 800f11a:	465e      	mov	r6, fp
 800f11c:	455e      	cmp	r6, fp
 800f11e:	bf28      	it	cs
 800f120:	465e      	movcs	r6, fp
 800f122:	4632      	mov	r2, r6
 800f124:	4651      	mov	r1, sl
 800f126:	6820      	ldr	r0, [r4, #0]
 800f128:	f000 ff3d 	bl	800ffa6 <memmove>
 800f12c:	68a2      	ldr	r2, [r4, #8]
 800f12e:	1b92      	subs	r2, r2, r6
 800f130:	60a2      	str	r2, [r4, #8]
 800f132:	6822      	ldr	r2, [r4, #0]
 800f134:	4432      	add	r2, r6
 800f136:	6022      	str	r2, [r4, #0]
 800f138:	68ba      	ldr	r2, [r7, #8]
 800f13a:	eba2 030b 	sub.w	r3, r2, fp
 800f13e:	44da      	add	sl, fp
 800f140:	60bb      	str	r3, [r7, #8]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d0aa      	beq.n	800f09c <__ssprint_r+0x14>
 800f146:	f04f 0b00 	mov.w	fp, #0
 800f14a:	e7b2      	b.n	800f0b2 <__ssprint_r+0x2a>
 800f14c:	f04f 0a00 	mov.w	sl, #0
 800f150:	46d3      	mov	fp, sl
 800f152:	e7ae      	b.n	800f0b2 <__ssprint_r+0x2a>
 800f154:	462a      	mov	r2, r5
 800f156:	4640      	mov	r0, r8
 800f158:	f000 ff46 	bl	800ffe8 <_realloc_r>
 800f15c:	4606      	mov	r6, r0
 800f15e:	2800      	cmp	r0, #0
 800f160:	d1d4      	bne.n	800f10c <__ssprint_r+0x84>
 800f162:	6921      	ldr	r1, [r4, #16]
 800f164:	4640      	mov	r0, r8
 800f166:	f7fc fa37 	bl	800b5d8 <_free_r>
 800f16a:	230c      	movs	r3, #12
 800f16c:	f8c8 3000 	str.w	r3, [r8]
 800f170:	89a3      	ldrh	r3, [r4, #12]
 800f172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f176:	81a3      	strh	r3, [r4, #12]
 800f178:	2300      	movs	r3, #0
 800f17a:	60bb      	str	r3, [r7, #8]
 800f17c:	f04f 30ff 	mov.w	r0, #4294967295
 800f180:	e78d      	b.n	800f09e <__ssprint_r+0x16>

0800f182 <__sprint_r>:
 800f182:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f186:	6893      	ldr	r3, [r2, #8]
 800f188:	4680      	mov	r8, r0
 800f18a:	460f      	mov	r7, r1
 800f18c:	4614      	mov	r4, r2
 800f18e:	b343      	cbz	r3, 800f1e2 <__sprint_r+0x60>
 800f190:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800f192:	049d      	lsls	r5, r3, #18
 800f194:	d522      	bpl.n	800f1dc <__sprint_r+0x5a>
 800f196:	6815      	ldr	r5, [r2, #0]
 800f198:	3508      	adds	r5, #8
 800f19a:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800f19e:	f04f 0900 	mov.w	r9, #0
 800f1a2:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800f1a6:	45ca      	cmp	sl, r9
 800f1a8:	dc0d      	bgt.n	800f1c6 <__sprint_r+0x44>
 800f1aa:	68a3      	ldr	r3, [r4, #8]
 800f1ac:	f026 0603 	bic.w	r6, r6, #3
 800f1b0:	1b98      	subs	r0, r3, r6
 800f1b2:	60a0      	str	r0, [r4, #8]
 800f1b4:	3508      	adds	r5, #8
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	d1ef      	bne.n	800f19a <__sprint_r+0x18>
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	60a3      	str	r3, [r4, #8]
 800f1be:	2300      	movs	r3, #0
 800f1c0:	6063      	str	r3, [r4, #4]
 800f1c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c6:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800f1ca:	463a      	mov	r2, r7
 800f1cc:	4640      	mov	r0, r8
 800f1ce:	f000 fec0 	bl	800ff52 <_fputwc_r>
 800f1d2:	1c43      	adds	r3, r0, #1
 800f1d4:	d0f1      	beq.n	800f1ba <__sprint_r+0x38>
 800f1d6:	f109 0901 	add.w	r9, r9, #1
 800f1da:	e7e4      	b.n	800f1a6 <__sprint_r+0x24>
 800f1dc:	f000 fcd6 	bl	800fb8c <__sfvwrite_r>
 800f1e0:	e7eb      	b.n	800f1ba <__sprint_r+0x38>
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	e7eb      	b.n	800f1be <__sprint_r+0x3c>
	...

0800f1e8 <_vfiprintf_r>:
 800f1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ec:	ed2d 8b02 	vpush	{d8}
 800f1f0:	b0bb      	sub	sp, #236	; 0xec
 800f1f2:	460f      	mov	r7, r1
 800f1f4:	9201      	str	r2, [sp, #4]
 800f1f6:	461d      	mov	r5, r3
 800f1f8:	461c      	mov	r4, r3
 800f1fa:	4681      	mov	r9, r0
 800f1fc:	b118      	cbz	r0, 800f206 <_vfiprintf_r+0x1e>
 800f1fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f200:	b90b      	cbnz	r3, 800f206 <_vfiprintf_r+0x1e>
 800f202:	f7fc f841 	bl	800b288 <__sinit>
 800f206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f208:	07d8      	lsls	r0, r3, #31
 800f20a:	d405      	bmi.n	800f218 <_vfiprintf_r+0x30>
 800f20c:	89bb      	ldrh	r3, [r7, #12]
 800f20e:	0599      	lsls	r1, r3, #22
 800f210:	d402      	bmi.n	800f218 <_vfiprintf_r+0x30>
 800f212:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f214:	f7fc f964 	bl	800b4e0 <__retarget_lock_acquire_recursive>
 800f218:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f21c:	049a      	lsls	r2, r3, #18
 800f21e:	d406      	bmi.n	800f22e <_vfiprintf_r+0x46>
 800f220:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f224:	81bb      	strh	r3, [r7, #12]
 800f226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f228:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f22c:	667b      	str	r3, [r7, #100]	; 0x64
 800f22e:	89bb      	ldrh	r3, [r7, #12]
 800f230:	071e      	lsls	r6, r3, #28
 800f232:	d501      	bpl.n	800f238 <_vfiprintf_r+0x50>
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	b9bb      	cbnz	r3, 800f268 <_vfiprintf_r+0x80>
 800f238:	4639      	mov	r1, r7
 800f23a:	4648      	mov	r0, r9
 800f23c:	f000 fdf0 	bl	800fe20 <__swsetup_r>
 800f240:	b190      	cbz	r0, 800f268 <_vfiprintf_r+0x80>
 800f242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f244:	07d8      	lsls	r0, r3, #31
 800f246:	d508      	bpl.n	800f25a <_vfiprintf_r+0x72>
 800f248:	f04f 33ff 	mov.w	r3, #4294967295
 800f24c:	9302      	str	r3, [sp, #8]
 800f24e:	9802      	ldr	r0, [sp, #8]
 800f250:	b03b      	add	sp, #236	; 0xec
 800f252:	ecbd 8b02 	vpop	{d8}
 800f256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f25a:	89bb      	ldrh	r3, [r7, #12]
 800f25c:	0599      	lsls	r1, r3, #22
 800f25e:	d4f3      	bmi.n	800f248 <_vfiprintf_r+0x60>
 800f260:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f262:	f7fc f93e 	bl	800b4e2 <__retarget_lock_release_recursive>
 800f266:	e7ef      	b.n	800f248 <_vfiprintf_r+0x60>
 800f268:	89bb      	ldrh	r3, [r7, #12]
 800f26a:	f003 021a 	and.w	r2, r3, #26
 800f26e:	2a0a      	cmp	r2, #10
 800f270:	d116      	bne.n	800f2a0 <_vfiprintf_r+0xb8>
 800f272:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f276:	2a00      	cmp	r2, #0
 800f278:	db12      	blt.n	800f2a0 <_vfiprintf_r+0xb8>
 800f27a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f27c:	07d2      	lsls	r2, r2, #31
 800f27e:	d404      	bmi.n	800f28a <_vfiprintf_r+0xa2>
 800f280:	059e      	lsls	r6, r3, #22
 800f282:	d402      	bmi.n	800f28a <_vfiprintf_r+0xa2>
 800f284:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f286:	f7fc f92c 	bl	800b4e2 <__retarget_lock_release_recursive>
 800f28a:	9a01      	ldr	r2, [sp, #4]
 800f28c:	462b      	mov	r3, r5
 800f28e:	4639      	mov	r1, r7
 800f290:	4648      	mov	r0, r9
 800f292:	b03b      	add	sp, #236	; 0xec
 800f294:	ecbd 8b02 	vpop	{d8}
 800f298:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f29c:	f000 bc36 	b.w	800fb0c <__sbprintf>
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800f2a6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800f2aa:	ae11      	add	r6, sp, #68	; 0x44
 800f2ac:	ee08 3a10 	vmov	s16, r3
 800f2b0:	960e      	str	r6, [sp, #56]	; 0x38
 800f2b2:	9307      	str	r3, [sp, #28]
 800f2b4:	9302      	str	r3, [sp, #8]
 800f2b6:	9b01      	ldr	r3, [sp, #4]
 800f2b8:	461d      	mov	r5, r3
 800f2ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2be:	b10a      	cbz	r2, 800f2c4 <_vfiprintf_r+0xdc>
 800f2c0:	2a25      	cmp	r2, #37	; 0x25
 800f2c2:	d1f9      	bne.n	800f2b8 <_vfiprintf_r+0xd0>
 800f2c4:	9b01      	ldr	r3, [sp, #4]
 800f2c6:	ebb5 0803 	subs.w	r8, r5, r3
 800f2ca:	d00d      	beq.n	800f2e8 <_vfiprintf_r+0x100>
 800f2cc:	e9c6 3800 	strd	r3, r8, [r6]
 800f2d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2d2:	4443      	add	r3, r8
 800f2d4:	9310      	str	r3, [sp, #64]	; 0x40
 800f2d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2d8:	3301      	adds	r3, #1
 800f2da:	2b07      	cmp	r3, #7
 800f2dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800f2de:	dc76      	bgt.n	800f3ce <_vfiprintf_r+0x1e6>
 800f2e0:	3608      	adds	r6, #8
 800f2e2:	9b02      	ldr	r3, [sp, #8]
 800f2e4:	4443      	add	r3, r8
 800f2e6:	9302      	str	r3, [sp, #8]
 800f2e8:	782b      	ldrb	r3, [r5, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	f000 83d0 	beq.w	800fa90 <_vfiprintf_r+0x8a8>
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f2f6:	3501      	adds	r5, #1
 800f2f8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f2fc:	9200      	str	r2, [sp, #0]
 800f2fe:	9303      	str	r3, [sp, #12]
 800f300:	469a      	mov	sl, r3
 800f302:	462a      	mov	r2, r5
 800f304:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f308:	9201      	str	r2, [sp, #4]
 800f30a:	f1a3 0220 	sub.w	r2, r3, #32
 800f30e:	2a5a      	cmp	r2, #90	; 0x5a
 800f310:	f200 831c 	bhi.w	800f94c <_vfiprintf_r+0x764>
 800f314:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f318:	031a007e 	.word	0x031a007e
 800f31c:	0086031a 	.word	0x0086031a
 800f320:	031a031a 	.word	0x031a031a
 800f324:	0065031a 	.word	0x0065031a
 800f328:	031a031a 	.word	0x031a031a
 800f32c:	00930089 	.word	0x00930089
 800f330:	0090031a 	.word	0x0090031a
 800f334:	031a0095 	.word	0x031a0095
 800f338:	00b300b0 	.word	0x00b300b0
 800f33c:	00b300b3 	.word	0x00b300b3
 800f340:	00b300b3 	.word	0x00b300b3
 800f344:	00b300b3 	.word	0x00b300b3
 800f348:	00b300b3 	.word	0x00b300b3
 800f34c:	031a031a 	.word	0x031a031a
 800f350:	031a031a 	.word	0x031a031a
 800f354:	031a031a 	.word	0x031a031a
 800f358:	031a031a 	.word	0x031a031a
 800f35c:	00dd031a 	.word	0x00dd031a
 800f360:	031a00eb 	.word	0x031a00eb
 800f364:	031a031a 	.word	0x031a031a
 800f368:	031a031a 	.word	0x031a031a
 800f36c:	031a031a 	.word	0x031a031a
 800f370:	031a031a 	.word	0x031a031a
 800f374:	013b031a 	.word	0x013b031a
 800f378:	031a031a 	.word	0x031a031a
 800f37c:	0180031a 	.word	0x0180031a
 800f380:	025e031a 	.word	0x025e031a
 800f384:	031a031a 	.word	0x031a031a
 800f388:	031a027e 	.word	0x031a027e
 800f38c:	031a031a 	.word	0x031a031a
 800f390:	031a031a 	.word	0x031a031a
 800f394:	031a031a 	.word	0x031a031a
 800f398:	031a031a 	.word	0x031a031a
 800f39c:	00dd031a 	.word	0x00dd031a
 800f3a0:	031a00ed 	.word	0x031a00ed
 800f3a4:	031a031a 	.word	0x031a031a
 800f3a8:	00ed00c3 	.word	0x00ed00c3
 800f3ac:	031a00d7 	.word	0x031a00d7
 800f3b0:	031a00d0 	.word	0x031a00d0
 800f3b4:	013d0119 	.word	0x013d0119
 800f3b8:	00d70172 	.word	0x00d70172
 800f3bc:	0180031a 	.word	0x0180031a
 800f3c0:	0260007c 	.word	0x0260007c
 800f3c4:	031a031a 	.word	0x031a031a
 800f3c8:	031a029a 	.word	0x031a029a
 800f3cc:	007c      	.short	0x007c
 800f3ce:	aa0e      	add	r2, sp, #56	; 0x38
 800f3d0:	4639      	mov	r1, r7
 800f3d2:	4648      	mov	r0, r9
 800f3d4:	f7ff fed5 	bl	800f182 <__sprint_r>
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	f040 8338 	bne.w	800fa4e <_vfiprintf_r+0x866>
 800f3de:	ae11      	add	r6, sp, #68	; 0x44
 800f3e0:	e77f      	b.n	800f2e2 <_vfiprintf_r+0xfa>
 800f3e2:	4648      	mov	r0, r9
 800f3e4:	f7fe fee0 	bl	800e1a8 <_localeconv_r>
 800f3e8:	6843      	ldr	r3, [r0, #4]
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	ee08 3a10 	vmov	s16, r3
 800f3f0:	f7f0 ff00 	bl	80001f4 <strlen>
 800f3f4:	9007      	str	r0, [sp, #28]
 800f3f6:	4648      	mov	r0, r9
 800f3f8:	f7fe fed6 	bl	800e1a8 <_localeconv_r>
 800f3fc:	6883      	ldr	r3, [r0, #8]
 800f3fe:	9306      	str	r3, [sp, #24]
 800f400:	9b07      	ldr	r3, [sp, #28]
 800f402:	b12b      	cbz	r3, 800f410 <_vfiprintf_r+0x228>
 800f404:	9b06      	ldr	r3, [sp, #24]
 800f406:	b11b      	cbz	r3, 800f410 <_vfiprintf_r+0x228>
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	b10b      	cbz	r3, 800f410 <_vfiprintf_r+0x228>
 800f40c:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800f410:	9d01      	ldr	r5, [sp, #4]
 800f412:	e776      	b.n	800f302 <_vfiprintf_r+0x11a>
 800f414:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d1f9      	bne.n	800f410 <_vfiprintf_r+0x228>
 800f41c:	2320      	movs	r3, #32
 800f41e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f422:	e7f5      	b.n	800f410 <_vfiprintf_r+0x228>
 800f424:	f04a 0a01 	orr.w	sl, sl, #1
 800f428:	e7f2      	b.n	800f410 <_vfiprintf_r+0x228>
 800f42a:	f854 3b04 	ldr.w	r3, [r4], #4
 800f42e:	9303      	str	r3, [sp, #12]
 800f430:	2b00      	cmp	r3, #0
 800f432:	daed      	bge.n	800f410 <_vfiprintf_r+0x228>
 800f434:	425b      	negs	r3, r3
 800f436:	9303      	str	r3, [sp, #12]
 800f438:	f04a 0a04 	orr.w	sl, sl, #4
 800f43c:	e7e8      	b.n	800f410 <_vfiprintf_r+0x228>
 800f43e:	232b      	movs	r3, #43	; 0x2b
 800f440:	e7ed      	b.n	800f41e <_vfiprintf_r+0x236>
 800f442:	9a01      	ldr	r2, [sp, #4]
 800f444:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f448:	2b2a      	cmp	r3, #42	; 0x2a
 800f44a:	d112      	bne.n	800f472 <_vfiprintf_r+0x28a>
 800f44c:	f854 3b04 	ldr.w	r3, [r4], #4
 800f450:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f454:	e9cd 3200 	strd	r3, r2, [sp]
 800f458:	e7da      	b.n	800f410 <_vfiprintf_r+0x228>
 800f45a:	9b00      	ldr	r3, [sp, #0]
 800f45c:	200a      	movs	r0, #10
 800f45e:	fb00 1303 	mla	r3, r0, r3, r1
 800f462:	9300      	str	r3, [sp, #0]
 800f464:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f468:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f46c:	2909      	cmp	r1, #9
 800f46e:	d9f4      	bls.n	800f45a <_vfiprintf_r+0x272>
 800f470:	e74a      	b.n	800f308 <_vfiprintf_r+0x120>
 800f472:	2100      	movs	r1, #0
 800f474:	9100      	str	r1, [sp, #0]
 800f476:	e7f7      	b.n	800f468 <_vfiprintf_r+0x280>
 800f478:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800f47c:	e7c8      	b.n	800f410 <_vfiprintf_r+0x228>
 800f47e:	2100      	movs	r1, #0
 800f480:	9a01      	ldr	r2, [sp, #4]
 800f482:	9103      	str	r1, [sp, #12]
 800f484:	9903      	ldr	r1, [sp, #12]
 800f486:	3b30      	subs	r3, #48	; 0x30
 800f488:	200a      	movs	r0, #10
 800f48a:	fb00 3301 	mla	r3, r0, r1, r3
 800f48e:	9303      	str	r3, [sp, #12]
 800f490:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f494:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f498:	2909      	cmp	r1, #9
 800f49a:	d9f3      	bls.n	800f484 <_vfiprintf_r+0x29c>
 800f49c:	e734      	b.n	800f308 <_vfiprintf_r+0x120>
 800f49e:	9b01      	ldr	r3, [sp, #4]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	2b68      	cmp	r3, #104	; 0x68
 800f4a4:	bf01      	itttt	eq
 800f4a6:	9b01      	ldreq	r3, [sp, #4]
 800f4a8:	3301      	addeq	r3, #1
 800f4aa:	9301      	streq	r3, [sp, #4]
 800f4ac:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800f4b0:	bf18      	it	ne
 800f4b2:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800f4b6:	e7ab      	b.n	800f410 <_vfiprintf_r+0x228>
 800f4b8:	9b01      	ldr	r3, [sp, #4]
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	2b6c      	cmp	r3, #108	; 0x6c
 800f4be:	d105      	bne.n	800f4cc <_vfiprintf_r+0x2e4>
 800f4c0:	9b01      	ldr	r3, [sp, #4]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	9301      	str	r3, [sp, #4]
 800f4c6:	f04a 0a20 	orr.w	sl, sl, #32
 800f4ca:	e7a1      	b.n	800f410 <_vfiprintf_r+0x228>
 800f4cc:	f04a 0a10 	orr.w	sl, sl, #16
 800f4d0:	e79e      	b.n	800f410 <_vfiprintf_r+0x228>
 800f4d2:	46a0      	mov	r8, r4
 800f4d4:	f858 3b04 	ldr.w	r3, [r8], #4
 800f4d8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800f4dc:	2300      	movs	r3, #0
 800f4de:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	9200      	str	r2, [sp, #0]
 800f4e6:	461d      	mov	r5, r3
 800f4e8:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 800f4ec:	e0a9      	b.n	800f642 <_vfiprintf_r+0x45a>
 800f4ee:	f04a 0a10 	orr.w	sl, sl, #16
 800f4f2:	f01a 0f20 	tst.w	sl, #32
 800f4f6:	d011      	beq.n	800f51c <_vfiprintf_r+0x334>
 800f4f8:	3407      	adds	r4, #7
 800f4fa:	f024 0307 	bic.w	r3, r4, #7
 800f4fe:	4698      	mov	r8, r3
 800f500:	685d      	ldr	r5, [r3, #4]
 800f502:	f858 4b08 	ldr.w	r4, [r8], #8
 800f506:	2d00      	cmp	r5, #0
 800f508:	da06      	bge.n	800f518 <_vfiprintf_r+0x330>
 800f50a:	4264      	negs	r4, r4
 800f50c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800f510:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800f514:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f518:	2301      	movs	r3, #1
 800f51a:	e04a      	b.n	800f5b2 <_vfiprintf_r+0x3ca>
 800f51c:	46a0      	mov	r8, r4
 800f51e:	f01a 0f10 	tst.w	sl, #16
 800f522:	f858 5b04 	ldr.w	r5, [r8], #4
 800f526:	d002      	beq.n	800f52e <_vfiprintf_r+0x346>
 800f528:	462c      	mov	r4, r5
 800f52a:	17ed      	asrs	r5, r5, #31
 800f52c:	e7eb      	b.n	800f506 <_vfiprintf_r+0x31e>
 800f52e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f532:	d003      	beq.n	800f53c <_vfiprintf_r+0x354>
 800f534:	b22c      	sxth	r4, r5
 800f536:	f345 35c0 	sbfx	r5, r5, #15, #1
 800f53a:	e7e4      	b.n	800f506 <_vfiprintf_r+0x31e>
 800f53c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f540:	d0f2      	beq.n	800f528 <_vfiprintf_r+0x340>
 800f542:	b26c      	sxtb	r4, r5
 800f544:	f345 15c0 	sbfx	r5, r5, #7, #1
 800f548:	e7dd      	b.n	800f506 <_vfiprintf_r+0x31e>
 800f54a:	f01a 0f20 	tst.w	sl, #32
 800f54e:	f104 0804 	add.w	r8, r4, #4
 800f552:	d007      	beq.n	800f564 <_vfiprintf_r+0x37c>
 800f554:	9a02      	ldr	r2, [sp, #8]
 800f556:	6823      	ldr	r3, [r4, #0]
 800f558:	9902      	ldr	r1, [sp, #8]
 800f55a:	17d2      	asrs	r2, r2, #31
 800f55c:	e9c3 1200 	strd	r1, r2, [r3]
 800f560:	4644      	mov	r4, r8
 800f562:	e6a8      	b.n	800f2b6 <_vfiprintf_r+0xce>
 800f564:	f01a 0f10 	tst.w	sl, #16
 800f568:	d003      	beq.n	800f572 <_vfiprintf_r+0x38a>
 800f56a:	6823      	ldr	r3, [r4, #0]
 800f56c:	9a02      	ldr	r2, [sp, #8]
 800f56e:	601a      	str	r2, [r3, #0]
 800f570:	e7f6      	b.n	800f560 <_vfiprintf_r+0x378>
 800f572:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f576:	d003      	beq.n	800f580 <_vfiprintf_r+0x398>
 800f578:	6823      	ldr	r3, [r4, #0]
 800f57a:	9a02      	ldr	r2, [sp, #8]
 800f57c:	801a      	strh	r2, [r3, #0]
 800f57e:	e7ef      	b.n	800f560 <_vfiprintf_r+0x378>
 800f580:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f584:	d0f1      	beq.n	800f56a <_vfiprintf_r+0x382>
 800f586:	6823      	ldr	r3, [r4, #0]
 800f588:	9a02      	ldr	r2, [sp, #8]
 800f58a:	701a      	strb	r2, [r3, #0]
 800f58c:	e7e8      	b.n	800f560 <_vfiprintf_r+0x378>
 800f58e:	f04a 0a10 	orr.w	sl, sl, #16
 800f592:	f01a 0320 	ands.w	r3, sl, #32
 800f596:	d01f      	beq.n	800f5d8 <_vfiprintf_r+0x3f0>
 800f598:	3407      	adds	r4, #7
 800f59a:	f024 0307 	bic.w	r3, r4, #7
 800f59e:	4698      	mov	r8, r3
 800f5a0:	685d      	ldr	r5, [r3, #4]
 800f5a2:	f858 4b08 	ldr.w	r4, [r8], #8
 800f5a6:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800f5b2:	9a00      	ldr	r2, [sp, #0]
 800f5b4:	3201      	adds	r2, #1
 800f5b6:	f000 8278 	beq.w	800faaa <_vfiprintf_r+0x8c2>
 800f5ba:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800f5be:	9204      	str	r2, [sp, #16]
 800f5c0:	ea54 0205 	orrs.w	r2, r4, r5
 800f5c4:	f040 8277 	bne.w	800fab6 <_vfiprintf_r+0x8ce>
 800f5c8:	9a00      	ldr	r2, [sp, #0]
 800f5ca:	2a00      	cmp	r2, #0
 800f5cc:	f000 81b3 	beq.w	800f936 <_vfiprintf_r+0x74e>
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	f040 8273 	bne.w	800fabc <_vfiprintf_r+0x8d4>
 800f5d6:	e151      	b.n	800f87c <_vfiprintf_r+0x694>
 800f5d8:	46a0      	mov	r8, r4
 800f5da:	f01a 0510 	ands.w	r5, sl, #16
 800f5de:	f858 4b04 	ldr.w	r4, [r8], #4
 800f5e2:	d001      	beq.n	800f5e8 <_vfiprintf_r+0x400>
 800f5e4:	461d      	mov	r5, r3
 800f5e6:	e7de      	b.n	800f5a6 <_vfiprintf_r+0x3be>
 800f5e8:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800f5ec:	d001      	beq.n	800f5f2 <_vfiprintf_r+0x40a>
 800f5ee:	b2a4      	uxth	r4, r4
 800f5f0:	e7d9      	b.n	800f5a6 <_vfiprintf_r+0x3be>
 800f5f2:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f5f6:	d0d6      	beq.n	800f5a6 <_vfiprintf_r+0x3be>
 800f5f8:	b2e4      	uxtb	r4, r4
 800f5fa:	e7f3      	b.n	800f5e4 <_vfiprintf_r+0x3fc>
 800f5fc:	46a0      	mov	r8, r4
 800f5fe:	f647 0330 	movw	r3, #30768	; 0x7830
 800f602:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f606:	f858 4b04 	ldr.w	r4, [r8], #4
 800f60a:	4b9f      	ldr	r3, [pc, #636]	; (800f888 <_vfiprintf_r+0x6a0>)
 800f60c:	9305      	str	r3, [sp, #20]
 800f60e:	2500      	movs	r5, #0
 800f610:	f04a 0a02 	orr.w	sl, sl, #2
 800f614:	2302      	movs	r3, #2
 800f616:	e7c9      	b.n	800f5ac <_vfiprintf_r+0x3c4>
 800f618:	9b00      	ldr	r3, [sp, #0]
 800f61a:	46a0      	mov	r8, r4
 800f61c:	2500      	movs	r5, #0
 800f61e:	1c5c      	adds	r4, r3, #1
 800f620:	f858 bb04 	ldr.w	fp, [r8], #4
 800f624:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800f628:	f000 80cf 	beq.w	800f7ca <_vfiprintf_r+0x5e2>
 800f62c:	461a      	mov	r2, r3
 800f62e:	4629      	mov	r1, r5
 800f630:	4658      	mov	r0, fp
 800f632:	f7f0 fded 	bl	8000210 <memchr>
 800f636:	2800      	cmp	r0, #0
 800f638:	f000 8192 	beq.w	800f960 <_vfiprintf_r+0x778>
 800f63c:	eba0 030b 	sub.w	r3, r0, fp
 800f640:	9300      	str	r3, [sp, #0]
 800f642:	9b00      	ldr	r3, [sp, #0]
 800f644:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800f648:	42ab      	cmp	r3, r5
 800f64a:	bfb8      	it	lt
 800f64c:	462b      	movlt	r3, r5
 800f64e:	9304      	str	r3, [sp, #16]
 800f650:	b10a      	cbz	r2, 800f656 <_vfiprintf_r+0x46e>
 800f652:	3301      	adds	r3, #1
 800f654:	9304      	str	r3, [sp, #16]
 800f656:	f01a 0302 	ands.w	r3, sl, #2
 800f65a:	9308      	str	r3, [sp, #32]
 800f65c:	bf1e      	ittt	ne
 800f65e:	9b04      	ldrne	r3, [sp, #16]
 800f660:	3302      	addne	r3, #2
 800f662:	9304      	strne	r3, [sp, #16]
 800f664:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800f668:	9309      	str	r3, [sp, #36]	; 0x24
 800f66a:	d11f      	bne.n	800f6ac <_vfiprintf_r+0x4c4>
 800f66c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f670:	1a9c      	subs	r4, r3, r2
 800f672:	2c00      	cmp	r4, #0
 800f674:	dd1a      	ble.n	800f6ac <_vfiprintf_r+0x4c4>
 800f676:	4b85      	ldr	r3, [pc, #532]	; (800f88c <_vfiprintf_r+0x6a4>)
 800f678:	6033      	str	r3, [r6, #0]
 800f67a:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800f67e:	2c10      	cmp	r4, #16
 800f680:	f102 0201 	add.w	r2, r2, #1
 800f684:	f106 0008 	add.w	r0, r6, #8
 800f688:	f300 816c 	bgt.w	800f964 <_vfiprintf_r+0x77c>
 800f68c:	6074      	str	r4, [r6, #4]
 800f68e:	2a07      	cmp	r2, #7
 800f690:	4464      	add	r4, ip
 800f692:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800f696:	f340 8178 	ble.w	800f98a <_vfiprintf_r+0x7a2>
 800f69a:	aa0e      	add	r2, sp, #56	; 0x38
 800f69c:	4639      	mov	r1, r7
 800f69e:	4648      	mov	r0, r9
 800f6a0:	f7ff fd6f 	bl	800f182 <__sprint_r>
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	f040 81d2 	bne.w	800fa4e <_vfiprintf_r+0x866>
 800f6aa:	ae11      	add	r6, sp, #68	; 0x44
 800f6ac:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800f6b0:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800f6b4:	b160      	cbz	r0, 800f6d0 <_vfiprintf_r+0x4e8>
 800f6b6:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 800f6ba:	3201      	adds	r2, #1
 800f6bc:	6030      	str	r0, [r6, #0]
 800f6be:	2001      	movs	r0, #1
 800f6c0:	4401      	add	r1, r0
 800f6c2:	2a07      	cmp	r2, #7
 800f6c4:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800f6c8:	6070      	str	r0, [r6, #4]
 800f6ca:	f300 8160 	bgt.w	800f98e <_vfiprintf_r+0x7a6>
 800f6ce:	3608      	adds	r6, #8
 800f6d0:	9b08      	ldr	r3, [sp, #32]
 800f6d2:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800f6d6:	b15b      	cbz	r3, 800f6f0 <_vfiprintf_r+0x508>
 800f6d8:	a80d      	add	r0, sp, #52	; 0x34
 800f6da:	3201      	adds	r2, #1
 800f6dc:	6030      	str	r0, [r6, #0]
 800f6de:	2002      	movs	r0, #2
 800f6e0:	4401      	add	r1, r0
 800f6e2:	2a07      	cmp	r2, #7
 800f6e4:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800f6e8:	6070      	str	r0, [r6, #4]
 800f6ea:	f300 8159 	bgt.w	800f9a0 <_vfiprintf_r+0x7b8>
 800f6ee:	3608      	adds	r6, #8
 800f6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6f2:	2b80      	cmp	r3, #128	; 0x80
 800f6f4:	d11f      	bne.n	800f736 <_vfiprintf_r+0x54e>
 800f6f6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f6fa:	1a9c      	subs	r4, r3, r2
 800f6fc:	2c00      	cmp	r4, #0
 800f6fe:	dd1a      	ble.n	800f736 <_vfiprintf_r+0x54e>
 800f700:	4b63      	ldr	r3, [pc, #396]	; (800f890 <_vfiprintf_r+0x6a8>)
 800f702:	6033      	str	r3, [r6, #0]
 800f704:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800f708:	2c10      	cmp	r4, #16
 800f70a:	f102 0201 	add.w	r2, r2, #1
 800f70e:	f106 0008 	add.w	r0, r6, #8
 800f712:	f300 814e 	bgt.w	800f9b2 <_vfiprintf_r+0x7ca>
 800f716:	6074      	str	r4, [r6, #4]
 800f718:	2a07      	cmp	r2, #7
 800f71a:	4464      	add	r4, ip
 800f71c:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800f720:	f340 815a 	ble.w	800f9d8 <_vfiprintf_r+0x7f0>
 800f724:	aa0e      	add	r2, sp, #56	; 0x38
 800f726:	4639      	mov	r1, r7
 800f728:	4648      	mov	r0, r9
 800f72a:	f7ff fd2a 	bl	800f182 <__sprint_r>
 800f72e:	2800      	cmp	r0, #0
 800f730:	f040 818d 	bne.w	800fa4e <_vfiprintf_r+0x866>
 800f734:	ae11      	add	r6, sp, #68	; 0x44
 800f736:	9b00      	ldr	r3, [sp, #0]
 800f738:	1aec      	subs	r4, r5, r3
 800f73a:	2c00      	cmp	r4, #0
 800f73c:	dd1b      	ble.n	800f776 <_vfiprintf_r+0x58e>
 800f73e:	4d54      	ldr	r5, [pc, #336]	; (800f890 <_vfiprintf_r+0x6a8>)
 800f740:	2310      	movs	r3, #16
 800f742:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800f746:	2c10      	cmp	r4, #16
 800f748:	f102 0201 	add.w	r2, r2, #1
 800f74c:	f106 0008 	add.w	r0, r6, #8
 800f750:	6035      	str	r5, [r6, #0]
 800f752:	f300 8143 	bgt.w	800f9dc <_vfiprintf_r+0x7f4>
 800f756:	6074      	str	r4, [r6, #4]
 800f758:	2a07      	cmp	r2, #7
 800f75a:	440c      	add	r4, r1
 800f75c:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800f760:	f340 814d 	ble.w	800f9fe <_vfiprintf_r+0x816>
 800f764:	aa0e      	add	r2, sp, #56	; 0x38
 800f766:	4639      	mov	r1, r7
 800f768:	4648      	mov	r0, r9
 800f76a:	f7ff fd0a 	bl	800f182 <__sprint_r>
 800f76e:	2800      	cmp	r0, #0
 800f770:	f040 816d 	bne.w	800fa4e <_vfiprintf_r+0x866>
 800f774:	ae11      	add	r6, sp, #68	; 0x44
 800f776:	9b00      	ldr	r3, [sp, #0]
 800f778:	9a00      	ldr	r2, [sp, #0]
 800f77a:	6073      	str	r3, [r6, #4]
 800f77c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f77e:	f8c6 b000 	str.w	fp, [r6]
 800f782:	4413      	add	r3, r2
 800f784:	9310      	str	r3, [sp, #64]	; 0x40
 800f786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f788:	3301      	adds	r3, #1
 800f78a:	2b07      	cmp	r3, #7
 800f78c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f78e:	f300 8138 	bgt.w	800fa02 <_vfiprintf_r+0x81a>
 800f792:	f106 0308 	add.w	r3, r6, #8
 800f796:	f01a 0f04 	tst.w	sl, #4
 800f79a:	f040 813a 	bne.w	800fa12 <_vfiprintf_r+0x82a>
 800f79e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f7a2:	9904      	ldr	r1, [sp, #16]
 800f7a4:	428a      	cmp	r2, r1
 800f7a6:	bfac      	ite	ge
 800f7a8:	189b      	addge	r3, r3, r2
 800f7aa:	185b      	addlt	r3, r3, r1
 800f7ac:	9302      	str	r3, [sp, #8]
 800f7ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f7b0:	b13b      	cbz	r3, 800f7c2 <_vfiprintf_r+0x5da>
 800f7b2:	aa0e      	add	r2, sp, #56	; 0x38
 800f7b4:	4639      	mov	r1, r7
 800f7b6:	4648      	mov	r0, r9
 800f7b8:	f7ff fce3 	bl	800f182 <__sprint_r>
 800f7bc:	2800      	cmp	r0, #0
 800f7be:	f040 8146 	bne.w	800fa4e <_vfiprintf_r+0x866>
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f7c6:	ae11      	add	r6, sp, #68	; 0x44
 800f7c8:	e6ca      	b.n	800f560 <_vfiprintf_r+0x378>
 800f7ca:	4658      	mov	r0, fp
 800f7cc:	f7f0 fd12 	bl	80001f4 <strlen>
 800f7d0:	9000      	str	r0, [sp, #0]
 800f7d2:	e736      	b.n	800f642 <_vfiprintf_r+0x45a>
 800f7d4:	f04a 0a10 	orr.w	sl, sl, #16
 800f7d8:	f01a 0320 	ands.w	r3, sl, #32
 800f7dc:	d008      	beq.n	800f7f0 <_vfiprintf_r+0x608>
 800f7de:	3407      	adds	r4, #7
 800f7e0:	f024 0307 	bic.w	r3, r4, #7
 800f7e4:	4698      	mov	r8, r3
 800f7e6:	685d      	ldr	r5, [r3, #4]
 800f7e8:	f858 4b08 	ldr.w	r4, [r8], #8
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	e6dd      	b.n	800f5ac <_vfiprintf_r+0x3c4>
 800f7f0:	46a0      	mov	r8, r4
 800f7f2:	f01a 0510 	ands.w	r5, sl, #16
 800f7f6:	f858 4b04 	ldr.w	r4, [r8], #4
 800f7fa:	d001      	beq.n	800f800 <_vfiprintf_r+0x618>
 800f7fc:	461d      	mov	r5, r3
 800f7fe:	e7f5      	b.n	800f7ec <_vfiprintf_r+0x604>
 800f800:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800f804:	d001      	beq.n	800f80a <_vfiprintf_r+0x622>
 800f806:	b2a4      	uxth	r4, r4
 800f808:	e7f0      	b.n	800f7ec <_vfiprintf_r+0x604>
 800f80a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f80e:	d0ed      	beq.n	800f7ec <_vfiprintf_r+0x604>
 800f810:	b2e4      	uxtb	r4, r4
 800f812:	e7f3      	b.n	800f7fc <_vfiprintf_r+0x614>
 800f814:	4a1f      	ldr	r2, [pc, #124]	; (800f894 <_vfiprintf_r+0x6ac>)
 800f816:	9205      	str	r2, [sp, #20]
 800f818:	f01a 0220 	ands.w	r2, sl, #32
 800f81c:	d018      	beq.n	800f850 <_vfiprintf_r+0x668>
 800f81e:	3407      	adds	r4, #7
 800f820:	f024 0207 	bic.w	r2, r4, #7
 800f824:	4690      	mov	r8, r2
 800f826:	6855      	ldr	r5, [r2, #4]
 800f828:	f858 4b08 	ldr.w	r4, [r8], #8
 800f82c:	f01a 0f01 	tst.w	sl, #1
 800f830:	d009      	beq.n	800f846 <_vfiprintf_r+0x65e>
 800f832:	ea54 0205 	orrs.w	r2, r4, r5
 800f836:	bf1f      	itttt	ne
 800f838:	2230      	movne	r2, #48	; 0x30
 800f83a:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800f83e:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800f842:	f04a 0a02 	orrne.w	sl, sl, #2
 800f846:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800f84a:	e6e3      	b.n	800f614 <_vfiprintf_r+0x42c>
 800f84c:	4a0e      	ldr	r2, [pc, #56]	; (800f888 <_vfiprintf_r+0x6a0>)
 800f84e:	e7e2      	b.n	800f816 <_vfiprintf_r+0x62e>
 800f850:	46a0      	mov	r8, r4
 800f852:	f01a 0510 	ands.w	r5, sl, #16
 800f856:	f858 4b04 	ldr.w	r4, [r8], #4
 800f85a:	d001      	beq.n	800f860 <_vfiprintf_r+0x678>
 800f85c:	4615      	mov	r5, r2
 800f85e:	e7e5      	b.n	800f82c <_vfiprintf_r+0x644>
 800f860:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800f864:	d001      	beq.n	800f86a <_vfiprintf_r+0x682>
 800f866:	b2a4      	uxth	r4, r4
 800f868:	e7e0      	b.n	800f82c <_vfiprintf_r+0x644>
 800f86a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800f86e:	d0dd      	beq.n	800f82c <_vfiprintf_r+0x644>
 800f870:	b2e4      	uxtb	r4, r4
 800f872:	e7f3      	b.n	800f85c <_vfiprintf_r+0x674>
 800f874:	2c0a      	cmp	r4, #10
 800f876:	f175 0300 	sbcs.w	r3, r5, #0
 800f87a:	d20d      	bcs.n	800f898 <_vfiprintf_r+0x6b0>
 800f87c:	3430      	adds	r4, #48	; 0x30
 800f87e:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800f882:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 800f886:	e135      	b.n	800faf4 <_vfiprintf_r+0x90c>
 800f888:	0801280c 	.word	0x0801280c
 800f88c:	080128f1 	.word	0x080128f1
 800f890:	08012901 	.word	0x08012901
 800f894:	0801281d 	.word	0x0801281d
 800f898:	ab3a      	add	r3, sp, #232	; 0xe8
 800f89a:	9308      	str	r3, [sp, #32]
 800f89c:	9b04      	ldr	r3, [sp, #16]
 800f89e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f8a2:	f04f 0a00 	mov.w	sl, #0
 800f8a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f8a8:	220a      	movs	r2, #10
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	4629      	mov	r1, r5
 800f8b0:	f7f1 fa02 	bl	8000cb8 <__aeabi_uldivmod>
 800f8b4:	9b08      	ldr	r3, [sp, #32]
 800f8b6:	3230      	adds	r2, #48	; 0x30
 800f8b8:	f103 3bff 	add.w	fp, r3, #4294967295
 800f8bc:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f8c6:	f10a 0a01 	add.w	sl, sl, #1
 800f8ca:	b1d3      	cbz	r3, 800f902 <_vfiprintf_r+0x71a>
 800f8cc:	9b06      	ldr	r3, [sp, #24]
 800f8ce:	781a      	ldrb	r2, [r3, #0]
 800f8d0:	4552      	cmp	r2, sl
 800f8d2:	d116      	bne.n	800f902 <_vfiprintf_r+0x71a>
 800f8d4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800f8d8:	d013      	beq.n	800f902 <_vfiprintf_r+0x71a>
 800f8da:	2c0a      	cmp	r4, #10
 800f8dc:	f175 0200 	sbcs.w	r2, r5, #0
 800f8e0:	d30f      	bcc.n	800f902 <_vfiprintf_r+0x71a>
 800f8e2:	9b07      	ldr	r3, [sp, #28]
 800f8e4:	ebab 0b03 	sub.w	fp, fp, r3
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	ee18 1a10 	vmov	r1, s16
 800f8ee:	4658      	mov	r0, fp
 800f8f0:	f7fe fc47 	bl	800e182 <strncpy>
 800f8f4:	9b06      	ldr	r3, [sp, #24]
 800f8f6:	785a      	ldrb	r2, [r3, #1]
 800f8f8:	b16a      	cbz	r2, 800f916 <_vfiprintf_r+0x72e>
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	9306      	str	r3, [sp, #24]
 800f8fe:	f04f 0a00 	mov.w	sl, #0
 800f902:	2c0a      	cmp	r4, #10
 800f904:	f175 0500 	sbcs.w	r5, r5, #0
 800f908:	f0c0 80f4 	bcc.w	800faf4 <_vfiprintf_r+0x90c>
 800f90c:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 800f910:	f8cd b020 	str.w	fp, [sp, #32]
 800f914:	e7c8      	b.n	800f8a8 <_vfiprintf_r+0x6c0>
 800f916:	4692      	mov	sl, r2
 800f918:	e7f3      	b.n	800f902 <_vfiprintf_r+0x71a>
 800f91a:	f004 020f 	and.w	r2, r4, #15
 800f91e:	9b05      	ldr	r3, [sp, #20]
 800f920:	0924      	lsrs	r4, r4, #4
 800f922:	5c9a      	ldrb	r2, [r3, r2]
 800f924:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800f928:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800f92c:	092d      	lsrs	r5, r5, #4
 800f92e:	ea54 0205 	orrs.w	r2, r4, r5
 800f932:	d1f2      	bne.n	800f91a <_vfiprintf_r+0x732>
 800f934:	e0de      	b.n	800faf4 <_vfiprintf_r+0x90c>
 800f936:	b933      	cbnz	r3, 800f946 <_vfiprintf_r+0x75e>
 800f938:	f01a 0f01 	tst.w	sl, #1
 800f93c:	d003      	beq.n	800f946 <_vfiprintf_r+0x75e>
 800f93e:	2330      	movs	r3, #48	; 0x30
 800f940:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800f944:	e79d      	b.n	800f882 <_vfiprintf_r+0x69a>
 800f946:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800f94a:	e0d3      	b.n	800faf4 <_vfiprintf_r+0x90c>
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	f000 809f 	beq.w	800fa90 <_vfiprintf_r+0x8a8>
 800f952:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800f956:	2300      	movs	r3, #0
 800f958:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f95c:	46a0      	mov	r8, r4
 800f95e:	e5c0      	b.n	800f4e2 <_vfiprintf_r+0x2fa>
 800f960:	4605      	mov	r5, r0
 800f962:	e66e      	b.n	800f642 <_vfiprintf_r+0x45a>
 800f964:	2110      	movs	r1, #16
 800f966:	6071      	str	r1, [r6, #4]
 800f968:	2a07      	cmp	r2, #7
 800f96a:	4461      	add	r1, ip
 800f96c:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800f970:	dd08      	ble.n	800f984 <_vfiprintf_r+0x79c>
 800f972:	aa0e      	add	r2, sp, #56	; 0x38
 800f974:	4639      	mov	r1, r7
 800f976:	4648      	mov	r0, r9
 800f978:	f7ff fc03 	bl	800f182 <__sprint_r>
 800f97c:	2800      	cmp	r0, #0
 800f97e:	d166      	bne.n	800fa4e <_vfiprintf_r+0x866>
 800f980:	4b60      	ldr	r3, [pc, #384]	; (800fb04 <_vfiprintf_r+0x91c>)
 800f982:	a811      	add	r0, sp, #68	; 0x44
 800f984:	3c10      	subs	r4, #16
 800f986:	4606      	mov	r6, r0
 800f988:	e676      	b.n	800f678 <_vfiprintf_r+0x490>
 800f98a:	4606      	mov	r6, r0
 800f98c:	e68e      	b.n	800f6ac <_vfiprintf_r+0x4c4>
 800f98e:	aa0e      	add	r2, sp, #56	; 0x38
 800f990:	4639      	mov	r1, r7
 800f992:	4648      	mov	r0, r9
 800f994:	f7ff fbf5 	bl	800f182 <__sprint_r>
 800f998:	2800      	cmp	r0, #0
 800f99a:	d158      	bne.n	800fa4e <_vfiprintf_r+0x866>
 800f99c:	ae11      	add	r6, sp, #68	; 0x44
 800f99e:	e697      	b.n	800f6d0 <_vfiprintf_r+0x4e8>
 800f9a0:	aa0e      	add	r2, sp, #56	; 0x38
 800f9a2:	4639      	mov	r1, r7
 800f9a4:	4648      	mov	r0, r9
 800f9a6:	f7ff fbec 	bl	800f182 <__sprint_r>
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	d14f      	bne.n	800fa4e <_vfiprintf_r+0x866>
 800f9ae:	ae11      	add	r6, sp, #68	; 0x44
 800f9b0:	e69e      	b.n	800f6f0 <_vfiprintf_r+0x508>
 800f9b2:	2110      	movs	r1, #16
 800f9b4:	6071      	str	r1, [r6, #4]
 800f9b6:	2a07      	cmp	r2, #7
 800f9b8:	4461      	add	r1, ip
 800f9ba:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800f9be:	dd08      	ble.n	800f9d2 <_vfiprintf_r+0x7ea>
 800f9c0:	aa0e      	add	r2, sp, #56	; 0x38
 800f9c2:	4639      	mov	r1, r7
 800f9c4:	4648      	mov	r0, r9
 800f9c6:	f7ff fbdc 	bl	800f182 <__sprint_r>
 800f9ca:	2800      	cmp	r0, #0
 800f9cc:	d13f      	bne.n	800fa4e <_vfiprintf_r+0x866>
 800f9ce:	4b4e      	ldr	r3, [pc, #312]	; (800fb08 <_vfiprintf_r+0x920>)
 800f9d0:	a811      	add	r0, sp, #68	; 0x44
 800f9d2:	3c10      	subs	r4, #16
 800f9d4:	4606      	mov	r6, r0
 800f9d6:	e694      	b.n	800f702 <_vfiprintf_r+0x51a>
 800f9d8:	4606      	mov	r6, r0
 800f9da:	e6ac      	b.n	800f736 <_vfiprintf_r+0x54e>
 800f9dc:	3110      	adds	r1, #16
 800f9de:	2a07      	cmp	r2, #7
 800f9e0:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800f9e4:	6073      	str	r3, [r6, #4]
 800f9e6:	dd07      	ble.n	800f9f8 <_vfiprintf_r+0x810>
 800f9e8:	aa0e      	add	r2, sp, #56	; 0x38
 800f9ea:	4639      	mov	r1, r7
 800f9ec:	4648      	mov	r0, r9
 800f9ee:	f7ff fbc8 	bl	800f182 <__sprint_r>
 800f9f2:	bb60      	cbnz	r0, 800fa4e <_vfiprintf_r+0x866>
 800f9f4:	a811      	add	r0, sp, #68	; 0x44
 800f9f6:	2310      	movs	r3, #16
 800f9f8:	3c10      	subs	r4, #16
 800f9fa:	4606      	mov	r6, r0
 800f9fc:	e6a1      	b.n	800f742 <_vfiprintf_r+0x55a>
 800f9fe:	4606      	mov	r6, r0
 800fa00:	e6b9      	b.n	800f776 <_vfiprintf_r+0x58e>
 800fa02:	aa0e      	add	r2, sp, #56	; 0x38
 800fa04:	4639      	mov	r1, r7
 800fa06:	4648      	mov	r0, r9
 800fa08:	f7ff fbbb 	bl	800f182 <__sprint_r>
 800fa0c:	b9f8      	cbnz	r0, 800fa4e <_vfiprintf_r+0x866>
 800fa0e:	ab11      	add	r3, sp, #68	; 0x44
 800fa10:	e6c1      	b.n	800f796 <_vfiprintf_r+0x5ae>
 800fa12:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800fa16:	1a54      	subs	r4, r2, r1
 800fa18:	2c00      	cmp	r4, #0
 800fa1a:	f77f aec0 	ble.w	800f79e <_vfiprintf_r+0x5b6>
 800fa1e:	4d39      	ldr	r5, [pc, #228]	; (800fb04 <_vfiprintf_r+0x91c>)
 800fa20:	2610      	movs	r6, #16
 800fa22:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800fa26:	2c10      	cmp	r4, #16
 800fa28:	f102 0201 	add.w	r2, r2, #1
 800fa2c:	601d      	str	r5, [r3, #0]
 800fa2e:	dc1d      	bgt.n	800fa6c <_vfiprintf_r+0x884>
 800fa30:	605c      	str	r4, [r3, #4]
 800fa32:	2a07      	cmp	r2, #7
 800fa34:	440c      	add	r4, r1
 800fa36:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800fa3a:	f77f aeb0 	ble.w	800f79e <_vfiprintf_r+0x5b6>
 800fa3e:	aa0e      	add	r2, sp, #56	; 0x38
 800fa40:	4639      	mov	r1, r7
 800fa42:	4648      	mov	r0, r9
 800fa44:	f7ff fb9d 	bl	800f182 <__sprint_r>
 800fa48:	2800      	cmp	r0, #0
 800fa4a:	f43f aea8 	beq.w	800f79e <_vfiprintf_r+0x5b6>
 800fa4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa50:	07d9      	lsls	r1, r3, #31
 800fa52:	d405      	bmi.n	800fa60 <_vfiprintf_r+0x878>
 800fa54:	89bb      	ldrh	r3, [r7, #12]
 800fa56:	059a      	lsls	r2, r3, #22
 800fa58:	d402      	bmi.n	800fa60 <_vfiprintf_r+0x878>
 800fa5a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fa5c:	f7fb fd41 	bl	800b4e2 <__retarget_lock_release_recursive>
 800fa60:	89bb      	ldrh	r3, [r7, #12]
 800fa62:	065b      	lsls	r3, r3, #25
 800fa64:	f57f abf3 	bpl.w	800f24e <_vfiprintf_r+0x66>
 800fa68:	f7ff bbee 	b.w	800f248 <_vfiprintf_r+0x60>
 800fa6c:	3110      	adds	r1, #16
 800fa6e:	2a07      	cmp	r2, #7
 800fa70:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800fa74:	605e      	str	r6, [r3, #4]
 800fa76:	dc02      	bgt.n	800fa7e <_vfiprintf_r+0x896>
 800fa78:	3308      	adds	r3, #8
 800fa7a:	3c10      	subs	r4, #16
 800fa7c:	e7d1      	b.n	800fa22 <_vfiprintf_r+0x83a>
 800fa7e:	aa0e      	add	r2, sp, #56	; 0x38
 800fa80:	4639      	mov	r1, r7
 800fa82:	4648      	mov	r0, r9
 800fa84:	f7ff fb7d 	bl	800f182 <__sprint_r>
 800fa88:	2800      	cmp	r0, #0
 800fa8a:	d1e0      	bne.n	800fa4e <_vfiprintf_r+0x866>
 800fa8c:	ab11      	add	r3, sp, #68	; 0x44
 800fa8e:	e7f4      	b.n	800fa7a <_vfiprintf_r+0x892>
 800fa90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fa92:	b913      	cbnz	r3, 800fa9a <_vfiprintf_r+0x8b2>
 800fa94:	2300      	movs	r3, #0
 800fa96:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa98:	e7d9      	b.n	800fa4e <_vfiprintf_r+0x866>
 800fa9a:	aa0e      	add	r2, sp, #56	; 0x38
 800fa9c:	4639      	mov	r1, r7
 800fa9e:	4648      	mov	r0, r9
 800faa0:	f7ff fb6f 	bl	800f182 <__sprint_r>
 800faa4:	2800      	cmp	r0, #0
 800faa6:	d0f5      	beq.n	800fa94 <_vfiprintf_r+0x8ac>
 800faa8:	e7d1      	b.n	800fa4e <_vfiprintf_r+0x866>
 800faaa:	ea54 0205 	orrs.w	r2, r4, r5
 800faae:	f8cd a010 	str.w	sl, [sp, #16]
 800fab2:	f43f ad8d 	beq.w	800f5d0 <_vfiprintf_r+0x3e8>
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	f43f aedc 	beq.w	800f874 <_vfiprintf_r+0x68c>
 800fabc:	2b02      	cmp	r3, #2
 800fabe:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800fac2:	f43f af2a 	beq.w	800f91a <_vfiprintf_r+0x732>
 800fac6:	f004 0207 	and.w	r2, r4, #7
 800faca:	08e4      	lsrs	r4, r4, #3
 800facc:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800fad0:	08ed      	lsrs	r5, r5, #3
 800fad2:	3230      	adds	r2, #48	; 0x30
 800fad4:	ea54 0005 	orrs.w	r0, r4, r5
 800fad8:	4659      	mov	r1, fp
 800fada:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800fade:	d1f2      	bne.n	800fac6 <_vfiprintf_r+0x8de>
 800fae0:	9b04      	ldr	r3, [sp, #16]
 800fae2:	07d8      	lsls	r0, r3, #31
 800fae4:	d506      	bpl.n	800faf4 <_vfiprintf_r+0x90c>
 800fae6:	2a30      	cmp	r2, #48	; 0x30
 800fae8:	d004      	beq.n	800faf4 <_vfiprintf_r+0x90c>
 800faea:	2230      	movs	r2, #48	; 0x30
 800faec:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800faf0:	f1a1 0b02 	sub.w	fp, r1, #2
 800faf4:	ab3a      	add	r3, sp, #232	; 0xe8
 800faf6:	eba3 030b 	sub.w	r3, r3, fp
 800fafa:	9d00      	ldr	r5, [sp, #0]
 800fafc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800fb00:	9300      	str	r3, [sp, #0]
 800fb02:	e59e      	b.n	800f642 <_vfiprintf_r+0x45a>
 800fb04:	080128f1 	.word	0x080128f1
 800fb08:	08012901 	.word	0x08012901

0800fb0c <__sbprintf>:
 800fb0c:	b570      	push	{r4, r5, r6, lr}
 800fb0e:	460c      	mov	r4, r1
 800fb10:	8989      	ldrh	r1, [r1, #12]
 800fb12:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800fb16:	f021 0102 	bic.w	r1, r1, #2
 800fb1a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800fb1e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800fb20:	911b      	str	r1, [sp, #108]	; 0x6c
 800fb22:	89e1      	ldrh	r1, [r4, #14]
 800fb24:	f8ad 1016 	strh.w	r1, [sp, #22]
 800fb28:	69e1      	ldr	r1, [r4, #28]
 800fb2a:	9109      	str	r1, [sp, #36]	; 0x24
 800fb2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fb2e:	910b      	str	r1, [sp, #44]	; 0x2c
 800fb30:	a91c      	add	r1, sp, #112	; 0x70
 800fb32:	9102      	str	r1, [sp, #8]
 800fb34:	9106      	str	r1, [sp, #24]
 800fb36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fb3a:	4606      	mov	r6, r0
 800fb3c:	9104      	str	r1, [sp, #16]
 800fb3e:	9107      	str	r1, [sp, #28]
 800fb40:	a818      	add	r0, sp, #96	; 0x60
 800fb42:	2100      	movs	r1, #0
 800fb44:	e9cd 3200 	strd	r3, r2, [sp]
 800fb48:	9108      	str	r1, [sp, #32]
 800fb4a:	f7fb fcc7 	bl	800b4dc <__retarget_lock_init_recursive>
 800fb4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fb52:	a902      	add	r1, sp, #8
 800fb54:	4630      	mov	r0, r6
 800fb56:	f7ff fb47 	bl	800f1e8 <_vfiprintf_r>
 800fb5a:	1e05      	subs	r5, r0, #0
 800fb5c:	db07      	blt.n	800fb6e <__sbprintf+0x62>
 800fb5e:	a902      	add	r1, sp, #8
 800fb60:	4630      	mov	r0, r6
 800fb62:	f7fe fae9 	bl	800e138 <_fflush_r>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	bf18      	it	ne
 800fb6a:	f04f 35ff 	movne.w	r5, #4294967295
 800fb6e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800fb72:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fb74:	065b      	lsls	r3, r3, #25
 800fb76:	bf42      	ittt	mi
 800fb78:	89a3      	ldrhmi	r3, [r4, #12]
 800fb7a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800fb7e:	81a3      	strhmi	r3, [r4, #12]
 800fb80:	f7fb fcad 	bl	800b4de <__retarget_lock_close_recursive>
 800fb84:	4628      	mov	r0, r5
 800fb86:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800fb8a:	bd70      	pop	{r4, r5, r6, pc}

0800fb8c <__sfvwrite_r>:
 800fb8c:	6893      	ldr	r3, [r2, #8]
 800fb8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb92:	4606      	mov	r6, r0
 800fb94:	460c      	mov	r4, r1
 800fb96:	4691      	mov	r9, r2
 800fb98:	b91b      	cbnz	r3, 800fba2 <__sfvwrite_r+0x16>
 800fb9a:	2000      	movs	r0, #0
 800fb9c:	b003      	add	sp, #12
 800fb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fba2:	898b      	ldrh	r3, [r1, #12]
 800fba4:	0718      	lsls	r0, r3, #28
 800fba6:	d54f      	bpl.n	800fc48 <__sfvwrite_r+0xbc>
 800fba8:	690b      	ldr	r3, [r1, #16]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d04c      	beq.n	800fc48 <__sfvwrite_r+0xbc>
 800fbae:	89a3      	ldrh	r3, [r4, #12]
 800fbb0:	f8d9 8000 	ldr.w	r8, [r9]
 800fbb4:	f013 0702 	ands.w	r7, r3, #2
 800fbb8:	d16b      	bne.n	800fc92 <__sfvwrite_r+0x106>
 800fbba:	f013 0301 	ands.w	r3, r3, #1
 800fbbe:	f000 809b 	beq.w	800fcf8 <__sfvwrite_r+0x16c>
 800fbc2:	4638      	mov	r0, r7
 800fbc4:	46ba      	mov	sl, r7
 800fbc6:	46bb      	mov	fp, r7
 800fbc8:	f1bb 0f00 	cmp.w	fp, #0
 800fbcc:	f000 8102 	beq.w	800fdd4 <__sfvwrite_r+0x248>
 800fbd0:	b950      	cbnz	r0, 800fbe8 <__sfvwrite_r+0x5c>
 800fbd2:	465a      	mov	r2, fp
 800fbd4:	210a      	movs	r1, #10
 800fbd6:	4650      	mov	r0, sl
 800fbd8:	f7f0 fb1a 	bl	8000210 <memchr>
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	f000 80ff 	beq.w	800fde0 <__sfvwrite_r+0x254>
 800fbe2:	3001      	adds	r0, #1
 800fbe4:	eba0 070a 	sub.w	r7, r0, sl
 800fbe8:	6820      	ldr	r0, [r4, #0]
 800fbea:	6921      	ldr	r1, [r4, #16]
 800fbec:	68a5      	ldr	r5, [r4, #8]
 800fbee:	6963      	ldr	r3, [r4, #20]
 800fbf0:	455f      	cmp	r7, fp
 800fbf2:	463a      	mov	r2, r7
 800fbf4:	bf28      	it	cs
 800fbf6:	465a      	movcs	r2, fp
 800fbf8:	4288      	cmp	r0, r1
 800fbfa:	f240 80f4 	bls.w	800fde6 <__sfvwrite_r+0x25a>
 800fbfe:	441d      	add	r5, r3
 800fc00:	42aa      	cmp	r2, r5
 800fc02:	f340 80f0 	ble.w	800fde6 <__sfvwrite_r+0x25a>
 800fc06:	4651      	mov	r1, sl
 800fc08:	462a      	mov	r2, r5
 800fc0a:	f000 f9cc 	bl	800ffa6 <memmove>
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	442b      	add	r3, r5
 800fc12:	6023      	str	r3, [r4, #0]
 800fc14:	4621      	mov	r1, r4
 800fc16:	4630      	mov	r0, r6
 800fc18:	f7fe fa8e 	bl	800e138 <_fflush_r>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	d166      	bne.n	800fcee <__sfvwrite_r+0x162>
 800fc20:	1b7f      	subs	r7, r7, r5
 800fc22:	f040 80f8 	bne.w	800fe16 <__sfvwrite_r+0x28a>
 800fc26:	4621      	mov	r1, r4
 800fc28:	4630      	mov	r0, r6
 800fc2a:	f7fe fa85 	bl	800e138 <_fflush_r>
 800fc2e:	2800      	cmp	r0, #0
 800fc30:	d15d      	bne.n	800fcee <__sfvwrite_r+0x162>
 800fc32:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800fc36:	1b5b      	subs	r3, r3, r5
 800fc38:	44aa      	add	sl, r5
 800fc3a:	ebab 0b05 	sub.w	fp, fp, r5
 800fc3e:	f8c9 3008 	str.w	r3, [r9, #8]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d1c0      	bne.n	800fbc8 <__sfvwrite_r+0x3c>
 800fc46:	e7a8      	b.n	800fb9a <__sfvwrite_r+0xe>
 800fc48:	4621      	mov	r1, r4
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	f000 f8e8 	bl	800fe20 <__swsetup_r>
 800fc50:	2800      	cmp	r0, #0
 800fc52:	d0ac      	beq.n	800fbae <__sfvwrite_r+0x22>
 800fc54:	f04f 30ff 	mov.w	r0, #4294967295
 800fc58:	e7a0      	b.n	800fb9c <__sfvwrite_r+0x10>
 800fc5a:	e9d8 a500 	ldrd	sl, r5, [r8]
 800fc5e:	f108 0808 	add.w	r8, r8, #8
 800fc62:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800fc66:	69e1      	ldr	r1, [r4, #28]
 800fc68:	2d00      	cmp	r5, #0
 800fc6a:	d0f6      	beq.n	800fc5a <__sfvwrite_r+0xce>
 800fc6c:	42bd      	cmp	r5, r7
 800fc6e:	462b      	mov	r3, r5
 800fc70:	4652      	mov	r2, sl
 800fc72:	bf28      	it	cs
 800fc74:	463b      	movcs	r3, r7
 800fc76:	4630      	mov	r0, r6
 800fc78:	47d8      	blx	fp
 800fc7a:	2800      	cmp	r0, #0
 800fc7c:	dd37      	ble.n	800fcee <__sfvwrite_r+0x162>
 800fc7e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800fc82:	1a1b      	subs	r3, r3, r0
 800fc84:	4482      	add	sl, r0
 800fc86:	1a2d      	subs	r5, r5, r0
 800fc88:	f8c9 3008 	str.w	r3, [r9, #8]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d1e8      	bne.n	800fc62 <__sfvwrite_r+0xd6>
 800fc90:	e783      	b.n	800fb9a <__sfvwrite_r+0xe>
 800fc92:	f04f 0a00 	mov.w	sl, #0
 800fc96:	4f61      	ldr	r7, [pc, #388]	; (800fe1c <__sfvwrite_r+0x290>)
 800fc98:	4655      	mov	r5, sl
 800fc9a:	e7e2      	b.n	800fc62 <__sfvwrite_r+0xd6>
 800fc9c:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800fca0:	f108 0808 	add.w	r8, r8, #8
 800fca4:	6820      	ldr	r0, [r4, #0]
 800fca6:	68a2      	ldr	r2, [r4, #8]
 800fca8:	f1ba 0f00 	cmp.w	sl, #0
 800fcac:	d0f6      	beq.n	800fc9c <__sfvwrite_r+0x110>
 800fcae:	89a3      	ldrh	r3, [r4, #12]
 800fcb0:	0599      	lsls	r1, r3, #22
 800fcb2:	d563      	bpl.n	800fd7c <__sfvwrite_r+0x1f0>
 800fcb4:	4552      	cmp	r2, sl
 800fcb6:	d836      	bhi.n	800fd26 <__sfvwrite_r+0x19a>
 800fcb8:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800fcbc:	d033      	beq.n	800fd26 <__sfvwrite_r+0x19a>
 800fcbe:	6921      	ldr	r1, [r4, #16]
 800fcc0:	6965      	ldr	r5, [r4, #20]
 800fcc2:	eba0 0b01 	sub.w	fp, r0, r1
 800fcc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fcca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fcce:	f10b 0201 	add.w	r2, fp, #1
 800fcd2:	106d      	asrs	r5, r5, #1
 800fcd4:	4452      	add	r2, sl
 800fcd6:	4295      	cmp	r5, r2
 800fcd8:	bf38      	it	cc
 800fcda:	4615      	movcc	r5, r2
 800fcdc:	055b      	lsls	r3, r3, #21
 800fcde:	d53d      	bpl.n	800fd5c <__sfvwrite_r+0x1d0>
 800fce0:	4629      	mov	r1, r5
 800fce2:	4630      	mov	r0, r6
 800fce4:	f7fc f890 	bl	800be08 <_malloc_r>
 800fce8:	b948      	cbnz	r0, 800fcfe <__sfvwrite_r+0x172>
 800fcea:	230c      	movs	r3, #12
 800fcec:	6033      	str	r3, [r6, #0]
 800fcee:	89a3      	ldrh	r3, [r4, #12]
 800fcf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcf4:	81a3      	strh	r3, [r4, #12]
 800fcf6:	e7ad      	b.n	800fc54 <__sfvwrite_r+0xc8>
 800fcf8:	461f      	mov	r7, r3
 800fcfa:	469a      	mov	sl, r3
 800fcfc:	e7d2      	b.n	800fca4 <__sfvwrite_r+0x118>
 800fcfe:	465a      	mov	r2, fp
 800fd00:	6921      	ldr	r1, [r4, #16]
 800fd02:	9001      	str	r0, [sp, #4]
 800fd04:	f7fb fbee 	bl	800b4e4 <memcpy>
 800fd08:	89a2      	ldrh	r2, [r4, #12]
 800fd0a:	9b01      	ldr	r3, [sp, #4]
 800fd0c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800fd10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fd14:	81a2      	strh	r2, [r4, #12]
 800fd16:	6123      	str	r3, [r4, #16]
 800fd18:	6165      	str	r5, [r4, #20]
 800fd1a:	445b      	add	r3, fp
 800fd1c:	eba5 050b 	sub.w	r5, r5, fp
 800fd20:	6023      	str	r3, [r4, #0]
 800fd22:	4652      	mov	r2, sl
 800fd24:	60a5      	str	r5, [r4, #8]
 800fd26:	4552      	cmp	r2, sl
 800fd28:	bf28      	it	cs
 800fd2a:	4652      	movcs	r2, sl
 800fd2c:	6820      	ldr	r0, [r4, #0]
 800fd2e:	9201      	str	r2, [sp, #4]
 800fd30:	4639      	mov	r1, r7
 800fd32:	f000 f938 	bl	800ffa6 <memmove>
 800fd36:	68a3      	ldr	r3, [r4, #8]
 800fd38:	9a01      	ldr	r2, [sp, #4]
 800fd3a:	1a9b      	subs	r3, r3, r2
 800fd3c:	60a3      	str	r3, [r4, #8]
 800fd3e:	6823      	ldr	r3, [r4, #0]
 800fd40:	4413      	add	r3, r2
 800fd42:	4655      	mov	r5, sl
 800fd44:	6023      	str	r3, [r4, #0]
 800fd46:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800fd4a:	1b5b      	subs	r3, r3, r5
 800fd4c:	442f      	add	r7, r5
 800fd4e:	ebaa 0a05 	sub.w	sl, sl, r5
 800fd52:	f8c9 3008 	str.w	r3, [r9, #8]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1a4      	bne.n	800fca4 <__sfvwrite_r+0x118>
 800fd5a:	e71e      	b.n	800fb9a <__sfvwrite_r+0xe>
 800fd5c:	462a      	mov	r2, r5
 800fd5e:	4630      	mov	r0, r6
 800fd60:	f000 f942 	bl	800ffe8 <_realloc_r>
 800fd64:	4603      	mov	r3, r0
 800fd66:	2800      	cmp	r0, #0
 800fd68:	d1d5      	bne.n	800fd16 <__sfvwrite_r+0x18a>
 800fd6a:	6921      	ldr	r1, [r4, #16]
 800fd6c:	4630      	mov	r0, r6
 800fd6e:	f7fb fc33 	bl	800b5d8 <_free_r>
 800fd72:	89a3      	ldrh	r3, [r4, #12]
 800fd74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd78:	81a3      	strh	r3, [r4, #12]
 800fd7a:	e7b6      	b.n	800fcea <__sfvwrite_r+0x15e>
 800fd7c:	6923      	ldr	r3, [r4, #16]
 800fd7e:	4283      	cmp	r3, r0
 800fd80:	d302      	bcc.n	800fd88 <__sfvwrite_r+0x1fc>
 800fd82:	6961      	ldr	r1, [r4, #20]
 800fd84:	4551      	cmp	r1, sl
 800fd86:	d915      	bls.n	800fdb4 <__sfvwrite_r+0x228>
 800fd88:	4552      	cmp	r2, sl
 800fd8a:	bf28      	it	cs
 800fd8c:	4652      	movcs	r2, sl
 800fd8e:	4639      	mov	r1, r7
 800fd90:	4615      	mov	r5, r2
 800fd92:	f000 f908 	bl	800ffa6 <memmove>
 800fd96:	68a3      	ldr	r3, [r4, #8]
 800fd98:	6822      	ldr	r2, [r4, #0]
 800fd9a:	1b5b      	subs	r3, r3, r5
 800fd9c:	442a      	add	r2, r5
 800fd9e:	60a3      	str	r3, [r4, #8]
 800fda0:	6022      	str	r2, [r4, #0]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d1cf      	bne.n	800fd46 <__sfvwrite_r+0x1ba>
 800fda6:	4621      	mov	r1, r4
 800fda8:	4630      	mov	r0, r6
 800fdaa:	f7fe f9c5 	bl	800e138 <_fflush_r>
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	d0c9      	beq.n	800fd46 <__sfvwrite_r+0x1ba>
 800fdb2:	e79c      	b.n	800fcee <__sfvwrite_r+0x162>
 800fdb4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fdb8:	459a      	cmp	sl, r3
 800fdba:	bf38      	it	cc
 800fdbc:	4653      	movcc	r3, sl
 800fdbe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fdc0:	fb93 f3f1 	sdiv	r3, r3, r1
 800fdc4:	463a      	mov	r2, r7
 800fdc6:	434b      	muls	r3, r1
 800fdc8:	4630      	mov	r0, r6
 800fdca:	69e1      	ldr	r1, [r4, #28]
 800fdcc:	47a8      	blx	r5
 800fdce:	1e05      	subs	r5, r0, #0
 800fdd0:	dcb9      	bgt.n	800fd46 <__sfvwrite_r+0x1ba>
 800fdd2:	e78c      	b.n	800fcee <__sfvwrite_r+0x162>
 800fdd4:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800fdd8:	2000      	movs	r0, #0
 800fdda:	f108 0808 	add.w	r8, r8, #8
 800fdde:	e6f3      	b.n	800fbc8 <__sfvwrite_r+0x3c>
 800fde0:	f10b 0701 	add.w	r7, fp, #1
 800fde4:	e700      	b.n	800fbe8 <__sfvwrite_r+0x5c>
 800fde6:	4293      	cmp	r3, r2
 800fde8:	dc08      	bgt.n	800fdfc <__sfvwrite_r+0x270>
 800fdea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fdec:	69e1      	ldr	r1, [r4, #28]
 800fdee:	4652      	mov	r2, sl
 800fdf0:	4630      	mov	r0, r6
 800fdf2:	47a8      	blx	r5
 800fdf4:	1e05      	subs	r5, r0, #0
 800fdf6:	f73f af13 	bgt.w	800fc20 <__sfvwrite_r+0x94>
 800fdfa:	e778      	b.n	800fcee <__sfvwrite_r+0x162>
 800fdfc:	4651      	mov	r1, sl
 800fdfe:	9201      	str	r2, [sp, #4]
 800fe00:	f000 f8d1 	bl	800ffa6 <memmove>
 800fe04:	9a01      	ldr	r2, [sp, #4]
 800fe06:	68a3      	ldr	r3, [r4, #8]
 800fe08:	1a9b      	subs	r3, r3, r2
 800fe0a:	60a3      	str	r3, [r4, #8]
 800fe0c:	6823      	ldr	r3, [r4, #0]
 800fe0e:	4413      	add	r3, r2
 800fe10:	6023      	str	r3, [r4, #0]
 800fe12:	4615      	mov	r5, r2
 800fe14:	e704      	b.n	800fc20 <__sfvwrite_r+0x94>
 800fe16:	2001      	movs	r0, #1
 800fe18:	e70b      	b.n	800fc32 <__sfvwrite_r+0xa6>
 800fe1a:	bf00      	nop
 800fe1c:	7ffffc00 	.word	0x7ffffc00

0800fe20 <__swsetup_r>:
 800fe20:	b538      	push	{r3, r4, r5, lr}
 800fe22:	4b2a      	ldr	r3, [pc, #168]	; (800fecc <__swsetup_r+0xac>)
 800fe24:	4605      	mov	r5, r0
 800fe26:	6818      	ldr	r0, [r3, #0]
 800fe28:	460c      	mov	r4, r1
 800fe2a:	b118      	cbz	r0, 800fe34 <__swsetup_r+0x14>
 800fe2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fe2e:	b90b      	cbnz	r3, 800fe34 <__swsetup_r+0x14>
 800fe30:	f7fb fa2a 	bl	800b288 <__sinit>
 800fe34:	89a3      	ldrh	r3, [r4, #12]
 800fe36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe3a:	0718      	lsls	r0, r3, #28
 800fe3c:	d422      	bmi.n	800fe84 <__swsetup_r+0x64>
 800fe3e:	06d9      	lsls	r1, r3, #27
 800fe40:	d407      	bmi.n	800fe52 <__swsetup_r+0x32>
 800fe42:	2309      	movs	r3, #9
 800fe44:	602b      	str	r3, [r5, #0]
 800fe46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fe4a:	81a3      	strh	r3, [r4, #12]
 800fe4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe50:	e034      	b.n	800febc <__swsetup_r+0x9c>
 800fe52:	0758      	lsls	r0, r3, #29
 800fe54:	d512      	bpl.n	800fe7c <__swsetup_r+0x5c>
 800fe56:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fe58:	b141      	cbz	r1, 800fe6c <__swsetup_r+0x4c>
 800fe5a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800fe5e:	4299      	cmp	r1, r3
 800fe60:	d002      	beq.n	800fe68 <__swsetup_r+0x48>
 800fe62:	4628      	mov	r0, r5
 800fe64:	f7fb fbb8 	bl	800b5d8 <_free_r>
 800fe68:	2300      	movs	r3, #0
 800fe6a:	6323      	str	r3, [r4, #48]	; 0x30
 800fe6c:	89a3      	ldrh	r3, [r4, #12]
 800fe6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fe72:	81a3      	strh	r3, [r4, #12]
 800fe74:	2300      	movs	r3, #0
 800fe76:	6063      	str	r3, [r4, #4]
 800fe78:	6923      	ldr	r3, [r4, #16]
 800fe7a:	6023      	str	r3, [r4, #0]
 800fe7c:	89a3      	ldrh	r3, [r4, #12]
 800fe7e:	f043 0308 	orr.w	r3, r3, #8
 800fe82:	81a3      	strh	r3, [r4, #12]
 800fe84:	6923      	ldr	r3, [r4, #16]
 800fe86:	b94b      	cbnz	r3, 800fe9c <__swsetup_r+0x7c>
 800fe88:	89a3      	ldrh	r3, [r4, #12]
 800fe8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fe8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe92:	d003      	beq.n	800fe9c <__swsetup_r+0x7c>
 800fe94:	4621      	mov	r1, r4
 800fe96:	4628      	mov	r0, r5
 800fe98:	f000 fa8c 	bl	80103b4 <__smakebuf_r>
 800fe9c:	89a0      	ldrh	r0, [r4, #12]
 800fe9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fea2:	f010 0301 	ands.w	r3, r0, #1
 800fea6:	d00a      	beq.n	800febe <__swsetup_r+0x9e>
 800fea8:	2300      	movs	r3, #0
 800feaa:	60a3      	str	r3, [r4, #8]
 800feac:	6963      	ldr	r3, [r4, #20]
 800feae:	425b      	negs	r3, r3
 800feb0:	61a3      	str	r3, [r4, #24]
 800feb2:	6923      	ldr	r3, [r4, #16]
 800feb4:	b943      	cbnz	r3, 800fec8 <__swsetup_r+0xa8>
 800feb6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800feba:	d1c4      	bne.n	800fe46 <__swsetup_r+0x26>
 800febc:	bd38      	pop	{r3, r4, r5, pc}
 800febe:	0781      	lsls	r1, r0, #30
 800fec0:	bf58      	it	pl
 800fec2:	6963      	ldrpl	r3, [r4, #20]
 800fec4:	60a3      	str	r3, [r4, #8]
 800fec6:	e7f4      	b.n	800feb2 <__swsetup_r+0x92>
 800fec8:	2000      	movs	r0, #0
 800feca:	e7f7      	b.n	800febc <__swsetup_r+0x9c>
 800fecc:	20000438 	.word	0x20000438

0800fed0 <__fputwc>:
 800fed0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fed4:	4680      	mov	r8, r0
 800fed6:	460e      	mov	r6, r1
 800fed8:	4615      	mov	r5, r2
 800feda:	f7fb fa89 	bl	800b3f0 <__locale_mb_cur_max>
 800fede:	2801      	cmp	r0, #1
 800fee0:	d11c      	bne.n	800ff1c <__fputwc+0x4c>
 800fee2:	1e73      	subs	r3, r6, #1
 800fee4:	2bfe      	cmp	r3, #254	; 0xfe
 800fee6:	d819      	bhi.n	800ff1c <__fputwc+0x4c>
 800fee8:	f88d 6004 	strb.w	r6, [sp, #4]
 800feec:	4604      	mov	r4, r0
 800feee:	2700      	movs	r7, #0
 800fef0:	f10d 0904 	add.w	r9, sp, #4
 800fef4:	42a7      	cmp	r7, r4
 800fef6:	d020      	beq.n	800ff3a <__fputwc+0x6a>
 800fef8:	68ab      	ldr	r3, [r5, #8]
 800fefa:	f817 1009 	ldrb.w	r1, [r7, r9]
 800fefe:	3b01      	subs	r3, #1
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	60ab      	str	r3, [r5, #8]
 800ff04:	da04      	bge.n	800ff10 <__fputwc+0x40>
 800ff06:	69aa      	ldr	r2, [r5, #24]
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	db1a      	blt.n	800ff42 <__fputwc+0x72>
 800ff0c:	290a      	cmp	r1, #10
 800ff0e:	d018      	beq.n	800ff42 <__fputwc+0x72>
 800ff10:	682b      	ldr	r3, [r5, #0]
 800ff12:	1c5a      	adds	r2, r3, #1
 800ff14:	602a      	str	r2, [r5, #0]
 800ff16:	7019      	strb	r1, [r3, #0]
 800ff18:	3701      	adds	r7, #1
 800ff1a:	e7eb      	b.n	800fef4 <__fputwc+0x24>
 800ff1c:	a901      	add	r1, sp, #4
 800ff1e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800ff22:	4632      	mov	r2, r6
 800ff24:	4640      	mov	r0, r8
 800ff26:	f000 fa07 	bl	8010338 <_wcrtomb_r>
 800ff2a:	1c41      	adds	r1, r0, #1
 800ff2c:	4604      	mov	r4, r0
 800ff2e:	d1de      	bne.n	800feee <__fputwc+0x1e>
 800ff30:	89ab      	ldrh	r3, [r5, #12]
 800ff32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff36:	81ab      	strh	r3, [r5, #12]
 800ff38:	4606      	mov	r6, r0
 800ff3a:	4630      	mov	r0, r6
 800ff3c:	b003      	add	sp, #12
 800ff3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff42:	462a      	mov	r2, r5
 800ff44:	4640      	mov	r0, r8
 800ff46:	f000 fa71 	bl	801042c <__swbuf_r>
 800ff4a:	1c42      	adds	r2, r0, #1
 800ff4c:	d1e4      	bne.n	800ff18 <__fputwc+0x48>
 800ff4e:	4606      	mov	r6, r0
 800ff50:	e7f3      	b.n	800ff3a <__fputwc+0x6a>

0800ff52 <_fputwc_r>:
 800ff52:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800ff54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff56:	4614      	mov	r4, r2
 800ff58:	07da      	lsls	r2, r3, #31
 800ff5a:	4605      	mov	r5, r0
 800ff5c:	d407      	bmi.n	800ff6e <_fputwc_r+0x1c>
 800ff5e:	89a3      	ldrh	r3, [r4, #12]
 800ff60:	059b      	lsls	r3, r3, #22
 800ff62:	d404      	bmi.n	800ff6e <_fputwc_r+0x1c>
 800ff64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff66:	9101      	str	r1, [sp, #4]
 800ff68:	f7fb faba 	bl	800b4e0 <__retarget_lock_acquire_recursive>
 800ff6c:	9901      	ldr	r1, [sp, #4]
 800ff6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff72:	0498      	lsls	r0, r3, #18
 800ff74:	d406      	bmi.n	800ff84 <_fputwc_r+0x32>
 800ff76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ff7a:	81a3      	strh	r3, [r4, #12]
 800ff7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ff82:	6663      	str	r3, [r4, #100]	; 0x64
 800ff84:	4622      	mov	r2, r4
 800ff86:	4628      	mov	r0, r5
 800ff88:	f7ff ffa2 	bl	800fed0 <__fputwc>
 800ff8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff8e:	07da      	lsls	r2, r3, #31
 800ff90:	4605      	mov	r5, r0
 800ff92:	d405      	bmi.n	800ffa0 <_fputwc_r+0x4e>
 800ff94:	89a3      	ldrh	r3, [r4, #12]
 800ff96:	059b      	lsls	r3, r3, #22
 800ff98:	d402      	bmi.n	800ffa0 <_fputwc_r+0x4e>
 800ff9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff9c:	f7fb faa1 	bl	800b4e2 <__retarget_lock_release_recursive>
 800ffa0:	4628      	mov	r0, r5
 800ffa2:	b003      	add	sp, #12
 800ffa4:	bd30      	pop	{r4, r5, pc}

0800ffa6 <memmove>:
 800ffa6:	4288      	cmp	r0, r1
 800ffa8:	b510      	push	{r4, lr}
 800ffaa:	eb01 0402 	add.w	r4, r1, r2
 800ffae:	d902      	bls.n	800ffb6 <memmove+0x10>
 800ffb0:	4284      	cmp	r4, r0
 800ffb2:	4623      	mov	r3, r4
 800ffb4:	d807      	bhi.n	800ffc6 <memmove+0x20>
 800ffb6:	1e43      	subs	r3, r0, #1
 800ffb8:	42a1      	cmp	r1, r4
 800ffba:	d008      	beq.n	800ffce <memmove+0x28>
 800ffbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ffc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ffc4:	e7f8      	b.n	800ffb8 <memmove+0x12>
 800ffc6:	4402      	add	r2, r0
 800ffc8:	4601      	mov	r1, r0
 800ffca:	428a      	cmp	r2, r1
 800ffcc:	d100      	bne.n	800ffd0 <memmove+0x2a>
 800ffce:	bd10      	pop	{r4, pc}
 800ffd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffd4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ffd8:	e7f7      	b.n	800ffca <memmove+0x24>

0800ffda <abort>:
 800ffda:	b508      	push	{r3, lr}
 800ffdc:	2006      	movs	r0, #6
 800ffde:	f000 fa97 	bl	8010510 <raise>
 800ffe2:	2001      	movs	r0, #1
 800ffe4:	f001 fb62 	bl	80116ac <_exit>

0800ffe8 <_realloc_r>:
 800ffe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffec:	4682      	mov	sl, r0
 800ffee:	460c      	mov	r4, r1
 800fff0:	b929      	cbnz	r1, 800fffe <_realloc_r+0x16>
 800fff2:	4611      	mov	r1, r2
 800fff4:	b003      	add	sp, #12
 800fff6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fffa:	f7fb bf05 	b.w	800be08 <_malloc_r>
 800fffe:	9201      	str	r2, [sp, #4]
 8010000:	f7fc f94e 	bl	800c2a0 <__malloc_lock>
 8010004:	9a01      	ldr	r2, [sp, #4]
 8010006:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801000a:	f102 080b 	add.w	r8, r2, #11
 801000e:	f1b8 0f16 	cmp.w	r8, #22
 8010012:	d90b      	bls.n	801002c <_realloc_r+0x44>
 8010014:	f038 0807 	bics.w	r8, r8, #7
 8010018:	d50a      	bpl.n	8010030 <_realloc_r+0x48>
 801001a:	230c      	movs	r3, #12
 801001c:	f8ca 3000 	str.w	r3, [sl]
 8010020:	f04f 0b00 	mov.w	fp, #0
 8010024:	4658      	mov	r0, fp
 8010026:	b003      	add	sp, #12
 8010028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801002c:	f04f 0810 	mov.w	r8, #16
 8010030:	4590      	cmp	r8, r2
 8010032:	d3f2      	bcc.n	801001a <_realloc_r+0x32>
 8010034:	f025 0603 	bic.w	r6, r5, #3
 8010038:	45b0      	cmp	r8, r6
 801003a:	f1a4 0908 	sub.w	r9, r4, #8
 801003e:	f340 8170 	ble.w	8010322 <_realloc_r+0x33a>
 8010042:	499c      	ldr	r1, [pc, #624]	; (80102b4 <_realloc_r+0x2cc>)
 8010044:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8010048:	eb09 0306 	add.w	r3, r9, r6
 801004c:	459c      	cmp	ip, r3
 801004e:	6859      	ldr	r1, [r3, #4]
 8010050:	d005      	beq.n	801005e <_realloc_r+0x76>
 8010052:	f021 0001 	bic.w	r0, r1, #1
 8010056:	4418      	add	r0, r3
 8010058:	6840      	ldr	r0, [r0, #4]
 801005a:	07c7      	lsls	r7, r0, #31
 801005c:	d447      	bmi.n	80100ee <_realloc_r+0x106>
 801005e:	f021 0103 	bic.w	r1, r1, #3
 8010062:	459c      	cmp	ip, r3
 8010064:	eb06 0701 	add.w	r7, r6, r1
 8010068:	d119      	bne.n	801009e <_realloc_r+0xb6>
 801006a:	f108 0010 	add.w	r0, r8, #16
 801006e:	42b8      	cmp	r0, r7
 8010070:	dc3f      	bgt.n	80100f2 <_realloc_r+0x10a>
 8010072:	eb09 0308 	add.w	r3, r9, r8
 8010076:	4a8f      	ldr	r2, [pc, #572]	; (80102b4 <_realloc_r+0x2cc>)
 8010078:	eba7 0708 	sub.w	r7, r7, r8
 801007c:	f047 0701 	orr.w	r7, r7, #1
 8010080:	6093      	str	r3, [r2, #8]
 8010082:	605f      	str	r7, [r3, #4]
 8010084:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010088:	f003 0301 	and.w	r3, r3, #1
 801008c:	ea43 0308 	orr.w	r3, r3, r8
 8010090:	f844 3c04 	str.w	r3, [r4, #-4]
 8010094:	4650      	mov	r0, sl
 8010096:	f7fc f909 	bl	800c2ac <__malloc_unlock>
 801009a:	46a3      	mov	fp, r4
 801009c:	e7c2      	b.n	8010024 <_realloc_r+0x3c>
 801009e:	45b8      	cmp	r8, r7
 80100a0:	dc27      	bgt.n	80100f2 <_realloc_r+0x10a>
 80100a2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80100a6:	60da      	str	r2, [r3, #12]
 80100a8:	6093      	str	r3, [r2, #8]
 80100aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80100ae:	eba7 0008 	sub.w	r0, r7, r8
 80100b2:	280f      	cmp	r0, #15
 80100b4:	f003 0301 	and.w	r3, r3, #1
 80100b8:	eb09 0207 	add.w	r2, r9, r7
 80100bc:	f240 8133 	bls.w	8010326 <_realloc_r+0x33e>
 80100c0:	eb09 0108 	add.w	r1, r9, r8
 80100c4:	ea48 0303 	orr.w	r3, r8, r3
 80100c8:	f040 0001 	orr.w	r0, r0, #1
 80100cc:	f8c9 3004 	str.w	r3, [r9, #4]
 80100d0:	6048      	str	r0, [r1, #4]
 80100d2:	6853      	ldr	r3, [r2, #4]
 80100d4:	f043 0301 	orr.w	r3, r3, #1
 80100d8:	6053      	str	r3, [r2, #4]
 80100da:	3108      	adds	r1, #8
 80100dc:	4650      	mov	r0, sl
 80100de:	f7fb fa7b 	bl	800b5d8 <_free_r>
 80100e2:	4650      	mov	r0, sl
 80100e4:	f7fc f8e2 	bl	800c2ac <__malloc_unlock>
 80100e8:	f109 0b08 	add.w	fp, r9, #8
 80100ec:	e79a      	b.n	8010024 <_realloc_r+0x3c>
 80100ee:	2100      	movs	r1, #0
 80100f0:	460b      	mov	r3, r1
 80100f2:	07e8      	lsls	r0, r5, #31
 80100f4:	f100 80c6 	bmi.w	8010284 <_realloc_r+0x29c>
 80100f8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80100fc:	eba9 0505 	sub.w	r5, r9, r5
 8010100:	6868      	ldr	r0, [r5, #4]
 8010102:	f020 0003 	bic.w	r0, r0, #3
 8010106:	eb00 0b06 	add.w	fp, r0, r6
 801010a:	2b00      	cmp	r3, #0
 801010c:	f000 8086 	beq.w	801021c <_realloc_r+0x234>
 8010110:	459c      	cmp	ip, r3
 8010112:	eb01 070b 	add.w	r7, r1, fp
 8010116:	d149      	bne.n	80101ac <_realloc_r+0x1c4>
 8010118:	f108 0310 	add.w	r3, r8, #16
 801011c:	42bb      	cmp	r3, r7
 801011e:	dc7d      	bgt.n	801021c <_realloc_r+0x234>
 8010120:	46ab      	mov	fp, r5
 8010122:	68eb      	ldr	r3, [r5, #12]
 8010124:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8010128:	60d3      	str	r3, [r2, #12]
 801012a:	609a      	str	r2, [r3, #8]
 801012c:	1f32      	subs	r2, r6, #4
 801012e:	2a24      	cmp	r2, #36	; 0x24
 8010130:	d837      	bhi.n	80101a2 <_realloc_r+0x1ba>
 8010132:	2a13      	cmp	r2, #19
 8010134:	d933      	bls.n	801019e <_realloc_r+0x1b6>
 8010136:	6823      	ldr	r3, [r4, #0]
 8010138:	60ab      	str	r3, [r5, #8]
 801013a:	6863      	ldr	r3, [r4, #4]
 801013c:	60eb      	str	r3, [r5, #12]
 801013e:	2a1b      	cmp	r2, #27
 8010140:	d81b      	bhi.n	801017a <_realloc_r+0x192>
 8010142:	3408      	adds	r4, #8
 8010144:	f105 0310 	add.w	r3, r5, #16
 8010148:	6822      	ldr	r2, [r4, #0]
 801014a:	601a      	str	r2, [r3, #0]
 801014c:	6862      	ldr	r2, [r4, #4]
 801014e:	605a      	str	r2, [r3, #4]
 8010150:	68a2      	ldr	r2, [r4, #8]
 8010152:	609a      	str	r2, [r3, #8]
 8010154:	eb05 0308 	add.w	r3, r5, r8
 8010158:	4a56      	ldr	r2, [pc, #344]	; (80102b4 <_realloc_r+0x2cc>)
 801015a:	eba7 0708 	sub.w	r7, r7, r8
 801015e:	f047 0701 	orr.w	r7, r7, #1
 8010162:	6093      	str	r3, [r2, #8]
 8010164:	605f      	str	r7, [r3, #4]
 8010166:	686b      	ldr	r3, [r5, #4]
 8010168:	f003 0301 	and.w	r3, r3, #1
 801016c:	ea43 0308 	orr.w	r3, r3, r8
 8010170:	606b      	str	r3, [r5, #4]
 8010172:	4650      	mov	r0, sl
 8010174:	f7fc f89a 	bl	800c2ac <__malloc_unlock>
 8010178:	e754      	b.n	8010024 <_realloc_r+0x3c>
 801017a:	68a3      	ldr	r3, [r4, #8]
 801017c:	612b      	str	r3, [r5, #16]
 801017e:	68e3      	ldr	r3, [r4, #12]
 8010180:	616b      	str	r3, [r5, #20]
 8010182:	2a24      	cmp	r2, #36	; 0x24
 8010184:	bf01      	itttt	eq
 8010186:	6923      	ldreq	r3, [r4, #16]
 8010188:	61ab      	streq	r3, [r5, #24]
 801018a:	6962      	ldreq	r2, [r4, #20]
 801018c:	61ea      	streq	r2, [r5, #28]
 801018e:	bf19      	ittee	ne
 8010190:	3410      	addne	r4, #16
 8010192:	f105 0318 	addne.w	r3, r5, #24
 8010196:	f105 0320 	addeq.w	r3, r5, #32
 801019a:	3418      	addeq	r4, #24
 801019c:	e7d4      	b.n	8010148 <_realloc_r+0x160>
 801019e:	465b      	mov	r3, fp
 80101a0:	e7d2      	b.n	8010148 <_realloc_r+0x160>
 80101a2:	4621      	mov	r1, r4
 80101a4:	4658      	mov	r0, fp
 80101a6:	f7ff fefe 	bl	800ffa6 <memmove>
 80101aa:	e7d3      	b.n	8010154 <_realloc_r+0x16c>
 80101ac:	45b8      	cmp	r8, r7
 80101ae:	dc35      	bgt.n	801021c <_realloc_r+0x234>
 80101b0:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 80101b4:	4628      	mov	r0, r5
 80101b6:	60da      	str	r2, [r3, #12]
 80101b8:	6093      	str	r3, [r2, #8]
 80101ba:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80101be:	68eb      	ldr	r3, [r5, #12]
 80101c0:	60d3      	str	r3, [r2, #12]
 80101c2:	609a      	str	r2, [r3, #8]
 80101c4:	1f32      	subs	r2, r6, #4
 80101c6:	2a24      	cmp	r2, #36	; 0x24
 80101c8:	d824      	bhi.n	8010214 <_realloc_r+0x22c>
 80101ca:	2a13      	cmp	r2, #19
 80101cc:	d908      	bls.n	80101e0 <_realloc_r+0x1f8>
 80101ce:	6823      	ldr	r3, [r4, #0]
 80101d0:	60ab      	str	r3, [r5, #8]
 80101d2:	6863      	ldr	r3, [r4, #4]
 80101d4:	60eb      	str	r3, [r5, #12]
 80101d6:	2a1b      	cmp	r2, #27
 80101d8:	d80a      	bhi.n	80101f0 <_realloc_r+0x208>
 80101da:	3408      	adds	r4, #8
 80101dc:	f105 0010 	add.w	r0, r5, #16
 80101e0:	6823      	ldr	r3, [r4, #0]
 80101e2:	6003      	str	r3, [r0, #0]
 80101e4:	6863      	ldr	r3, [r4, #4]
 80101e6:	6043      	str	r3, [r0, #4]
 80101e8:	68a3      	ldr	r3, [r4, #8]
 80101ea:	6083      	str	r3, [r0, #8]
 80101ec:	46a9      	mov	r9, r5
 80101ee:	e75c      	b.n	80100aa <_realloc_r+0xc2>
 80101f0:	68a3      	ldr	r3, [r4, #8]
 80101f2:	612b      	str	r3, [r5, #16]
 80101f4:	68e3      	ldr	r3, [r4, #12]
 80101f6:	616b      	str	r3, [r5, #20]
 80101f8:	2a24      	cmp	r2, #36	; 0x24
 80101fa:	bf01      	itttt	eq
 80101fc:	6923      	ldreq	r3, [r4, #16]
 80101fe:	61ab      	streq	r3, [r5, #24]
 8010200:	6963      	ldreq	r3, [r4, #20]
 8010202:	61eb      	streq	r3, [r5, #28]
 8010204:	bf19      	ittee	ne
 8010206:	3410      	addne	r4, #16
 8010208:	f105 0018 	addne.w	r0, r5, #24
 801020c:	f105 0020 	addeq.w	r0, r5, #32
 8010210:	3418      	addeq	r4, #24
 8010212:	e7e5      	b.n	80101e0 <_realloc_r+0x1f8>
 8010214:	4621      	mov	r1, r4
 8010216:	f7ff fec6 	bl	800ffa6 <memmove>
 801021a:	e7e7      	b.n	80101ec <_realloc_r+0x204>
 801021c:	45d8      	cmp	r8, fp
 801021e:	dc31      	bgt.n	8010284 <_realloc_r+0x29c>
 8010220:	4628      	mov	r0, r5
 8010222:	68eb      	ldr	r3, [r5, #12]
 8010224:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8010228:	60d3      	str	r3, [r2, #12]
 801022a:	609a      	str	r2, [r3, #8]
 801022c:	1f32      	subs	r2, r6, #4
 801022e:	2a24      	cmp	r2, #36	; 0x24
 8010230:	d824      	bhi.n	801027c <_realloc_r+0x294>
 8010232:	2a13      	cmp	r2, #19
 8010234:	d908      	bls.n	8010248 <_realloc_r+0x260>
 8010236:	6823      	ldr	r3, [r4, #0]
 8010238:	60ab      	str	r3, [r5, #8]
 801023a:	6863      	ldr	r3, [r4, #4]
 801023c:	60eb      	str	r3, [r5, #12]
 801023e:	2a1b      	cmp	r2, #27
 8010240:	d80a      	bhi.n	8010258 <_realloc_r+0x270>
 8010242:	3408      	adds	r4, #8
 8010244:	f105 0010 	add.w	r0, r5, #16
 8010248:	6823      	ldr	r3, [r4, #0]
 801024a:	6003      	str	r3, [r0, #0]
 801024c:	6863      	ldr	r3, [r4, #4]
 801024e:	6043      	str	r3, [r0, #4]
 8010250:	68a3      	ldr	r3, [r4, #8]
 8010252:	6083      	str	r3, [r0, #8]
 8010254:	465f      	mov	r7, fp
 8010256:	e7c9      	b.n	80101ec <_realloc_r+0x204>
 8010258:	68a3      	ldr	r3, [r4, #8]
 801025a:	612b      	str	r3, [r5, #16]
 801025c:	68e3      	ldr	r3, [r4, #12]
 801025e:	616b      	str	r3, [r5, #20]
 8010260:	2a24      	cmp	r2, #36	; 0x24
 8010262:	bf01      	itttt	eq
 8010264:	6923      	ldreq	r3, [r4, #16]
 8010266:	61ab      	streq	r3, [r5, #24]
 8010268:	6963      	ldreq	r3, [r4, #20]
 801026a:	61eb      	streq	r3, [r5, #28]
 801026c:	bf19      	ittee	ne
 801026e:	3410      	addne	r4, #16
 8010270:	f105 0018 	addne.w	r0, r5, #24
 8010274:	f105 0020 	addeq.w	r0, r5, #32
 8010278:	3418      	addeq	r4, #24
 801027a:	e7e5      	b.n	8010248 <_realloc_r+0x260>
 801027c:	4621      	mov	r1, r4
 801027e:	f7ff fe92 	bl	800ffa6 <memmove>
 8010282:	e7e7      	b.n	8010254 <_realloc_r+0x26c>
 8010284:	4611      	mov	r1, r2
 8010286:	4650      	mov	r0, sl
 8010288:	f7fb fdbe 	bl	800be08 <_malloc_r>
 801028c:	4683      	mov	fp, r0
 801028e:	2800      	cmp	r0, #0
 8010290:	f43f af6f 	beq.w	8010172 <_realloc_r+0x18a>
 8010294:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010298:	f023 0301 	bic.w	r3, r3, #1
 801029c:	444b      	add	r3, r9
 801029e:	f1a0 0208 	sub.w	r2, r0, #8
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d108      	bne.n	80102b8 <_realloc_r+0x2d0>
 80102a6:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80102aa:	f027 0703 	bic.w	r7, r7, #3
 80102ae:	4437      	add	r7, r6
 80102b0:	e6fb      	b.n	80100aa <_realloc_r+0xc2>
 80102b2:	bf00      	nop
 80102b4:	20000440 	.word	0x20000440
 80102b8:	1f32      	subs	r2, r6, #4
 80102ba:	2a24      	cmp	r2, #36	; 0x24
 80102bc:	d82d      	bhi.n	801031a <_realloc_r+0x332>
 80102be:	2a13      	cmp	r2, #19
 80102c0:	d928      	bls.n	8010314 <_realloc_r+0x32c>
 80102c2:	6823      	ldr	r3, [r4, #0]
 80102c4:	6003      	str	r3, [r0, #0]
 80102c6:	6863      	ldr	r3, [r4, #4]
 80102c8:	6043      	str	r3, [r0, #4]
 80102ca:	2a1b      	cmp	r2, #27
 80102cc:	d80e      	bhi.n	80102ec <_realloc_r+0x304>
 80102ce:	f104 0208 	add.w	r2, r4, #8
 80102d2:	f100 0308 	add.w	r3, r0, #8
 80102d6:	6811      	ldr	r1, [r2, #0]
 80102d8:	6019      	str	r1, [r3, #0]
 80102da:	6851      	ldr	r1, [r2, #4]
 80102dc:	6059      	str	r1, [r3, #4]
 80102de:	6892      	ldr	r2, [r2, #8]
 80102e0:	609a      	str	r2, [r3, #8]
 80102e2:	4621      	mov	r1, r4
 80102e4:	4650      	mov	r0, sl
 80102e6:	f7fb f977 	bl	800b5d8 <_free_r>
 80102ea:	e742      	b.n	8010172 <_realloc_r+0x18a>
 80102ec:	68a3      	ldr	r3, [r4, #8]
 80102ee:	6083      	str	r3, [r0, #8]
 80102f0:	68e3      	ldr	r3, [r4, #12]
 80102f2:	60c3      	str	r3, [r0, #12]
 80102f4:	2a24      	cmp	r2, #36	; 0x24
 80102f6:	bf01      	itttt	eq
 80102f8:	6923      	ldreq	r3, [r4, #16]
 80102fa:	6103      	streq	r3, [r0, #16]
 80102fc:	6961      	ldreq	r1, [r4, #20]
 80102fe:	6141      	streq	r1, [r0, #20]
 8010300:	bf19      	ittee	ne
 8010302:	f104 0210 	addne.w	r2, r4, #16
 8010306:	f100 0310 	addne.w	r3, r0, #16
 801030a:	f104 0218 	addeq.w	r2, r4, #24
 801030e:	f100 0318 	addeq.w	r3, r0, #24
 8010312:	e7e0      	b.n	80102d6 <_realloc_r+0x2ee>
 8010314:	4603      	mov	r3, r0
 8010316:	4622      	mov	r2, r4
 8010318:	e7dd      	b.n	80102d6 <_realloc_r+0x2ee>
 801031a:	4621      	mov	r1, r4
 801031c:	f7ff fe43 	bl	800ffa6 <memmove>
 8010320:	e7df      	b.n	80102e2 <_realloc_r+0x2fa>
 8010322:	4637      	mov	r7, r6
 8010324:	e6c1      	b.n	80100aa <_realloc_r+0xc2>
 8010326:	431f      	orrs	r7, r3
 8010328:	f8c9 7004 	str.w	r7, [r9, #4]
 801032c:	6853      	ldr	r3, [r2, #4]
 801032e:	f043 0301 	orr.w	r3, r3, #1
 8010332:	6053      	str	r3, [r2, #4]
 8010334:	e6d5      	b.n	80100e2 <_realloc_r+0xfa>
 8010336:	bf00      	nop

08010338 <_wcrtomb_r>:
 8010338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801033a:	4c09      	ldr	r4, [pc, #36]	; (8010360 <_wcrtomb_r+0x28>)
 801033c:	b085      	sub	sp, #20
 801033e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8010342:	4605      	mov	r5, r0
 8010344:	461e      	mov	r6, r3
 8010346:	b909      	cbnz	r1, 801034c <_wcrtomb_r+0x14>
 8010348:	460a      	mov	r2, r1
 801034a:	a901      	add	r1, sp, #4
 801034c:	47b8      	blx	r7
 801034e:	1c43      	adds	r3, r0, #1
 8010350:	bf01      	itttt	eq
 8010352:	2300      	moveq	r3, #0
 8010354:	6033      	streq	r3, [r6, #0]
 8010356:	238a      	moveq	r3, #138	; 0x8a
 8010358:	602b      	streq	r3, [r5, #0]
 801035a:	b005      	add	sp, #20
 801035c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801035e:	bf00      	nop
 8010360:	200001a8 	.word	0x200001a8

08010364 <__swhatbuf_r>:
 8010364:	b570      	push	{r4, r5, r6, lr}
 8010366:	460c      	mov	r4, r1
 8010368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801036c:	2900      	cmp	r1, #0
 801036e:	b096      	sub	sp, #88	; 0x58
 8010370:	4615      	mov	r5, r2
 8010372:	461e      	mov	r6, r3
 8010374:	da07      	bge.n	8010386 <__swhatbuf_r+0x22>
 8010376:	89a1      	ldrh	r1, [r4, #12]
 8010378:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 801037c:	d017      	beq.n	80103ae <__swhatbuf_r+0x4a>
 801037e:	2100      	movs	r1, #0
 8010380:	2340      	movs	r3, #64	; 0x40
 8010382:	4608      	mov	r0, r1
 8010384:	e00f      	b.n	80103a6 <__swhatbuf_r+0x42>
 8010386:	466a      	mov	r2, sp
 8010388:	f000 f8ca 	bl	8010520 <_fstat_r>
 801038c:	2800      	cmp	r0, #0
 801038e:	dbf2      	blt.n	8010376 <__swhatbuf_r+0x12>
 8010390:	9901      	ldr	r1, [sp, #4]
 8010392:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010396:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801039a:	4259      	negs	r1, r3
 801039c:	4159      	adcs	r1, r3
 801039e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80103a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103a6:	6031      	str	r1, [r6, #0]
 80103a8:	602b      	str	r3, [r5, #0]
 80103aa:	b016      	add	sp, #88	; 0x58
 80103ac:	bd70      	pop	{r4, r5, r6, pc}
 80103ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103b2:	e7e6      	b.n	8010382 <__swhatbuf_r+0x1e>

080103b4 <__smakebuf_r>:
 80103b4:	898b      	ldrh	r3, [r1, #12]
 80103b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103b8:	079d      	lsls	r5, r3, #30
 80103ba:	4606      	mov	r6, r0
 80103bc:	460c      	mov	r4, r1
 80103be:	d507      	bpl.n	80103d0 <__smakebuf_r+0x1c>
 80103c0:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80103c4:	6023      	str	r3, [r4, #0]
 80103c6:	6123      	str	r3, [r4, #16]
 80103c8:	2301      	movs	r3, #1
 80103ca:	6163      	str	r3, [r4, #20]
 80103cc:	b002      	add	sp, #8
 80103ce:	bd70      	pop	{r4, r5, r6, pc}
 80103d0:	ab01      	add	r3, sp, #4
 80103d2:	466a      	mov	r2, sp
 80103d4:	f7ff ffc6 	bl	8010364 <__swhatbuf_r>
 80103d8:	9900      	ldr	r1, [sp, #0]
 80103da:	4605      	mov	r5, r0
 80103dc:	4630      	mov	r0, r6
 80103de:	f7fb fd13 	bl	800be08 <_malloc_r>
 80103e2:	b948      	cbnz	r0, 80103f8 <__smakebuf_r+0x44>
 80103e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103e8:	059a      	lsls	r2, r3, #22
 80103ea:	d4ef      	bmi.n	80103cc <__smakebuf_r+0x18>
 80103ec:	f023 0303 	bic.w	r3, r3, #3
 80103f0:	f043 0302 	orr.w	r3, r3, #2
 80103f4:	81a3      	strh	r3, [r4, #12]
 80103f6:	e7e3      	b.n	80103c0 <__smakebuf_r+0xc>
 80103f8:	89a3      	ldrh	r3, [r4, #12]
 80103fa:	6020      	str	r0, [r4, #0]
 80103fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010400:	81a3      	strh	r3, [r4, #12]
 8010402:	9b00      	ldr	r3, [sp, #0]
 8010404:	6163      	str	r3, [r4, #20]
 8010406:	9b01      	ldr	r3, [sp, #4]
 8010408:	6120      	str	r0, [r4, #16]
 801040a:	b15b      	cbz	r3, 8010424 <__smakebuf_r+0x70>
 801040c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010410:	4630      	mov	r0, r6
 8010412:	f000 f897 	bl	8010544 <_isatty_r>
 8010416:	b128      	cbz	r0, 8010424 <__smakebuf_r+0x70>
 8010418:	89a3      	ldrh	r3, [r4, #12]
 801041a:	f023 0303 	bic.w	r3, r3, #3
 801041e:	f043 0301 	orr.w	r3, r3, #1
 8010422:	81a3      	strh	r3, [r4, #12]
 8010424:	89a3      	ldrh	r3, [r4, #12]
 8010426:	431d      	orrs	r5, r3
 8010428:	81a5      	strh	r5, [r4, #12]
 801042a:	e7cf      	b.n	80103cc <__smakebuf_r+0x18>

0801042c <__swbuf_r>:
 801042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042e:	460e      	mov	r6, r1
 8010430:	4614      	mov	r4, r2
 8010432:	4605      	mov	r5, r0
 8010434:	b118      	cbz	r0, 801043e <__swbuf_r+0x12>
 8010436:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010438:	b90b      	cbnz	r3, 801043e <__swbuf_r+0x12>
 801043a:	f7fa ff25 	bl	800b288 <__sinit>
 801043e:	69a3      	ldr	r3, [r4, #24]
 8010440:	60a3      	str	r3, [r4, #8]
 8010442:	89a3      	ldrh	r3, [r4, #12]
 8010444:	0719      	lsls	r1, r3, #28
 8010446:	d529      	bpl.n	801049c <__swbuf_r+0x70>
 8010448:	6923      	ldr	r3, [r4, #16]
 801044a:	b33b      	cbz	r3, 801049c <__swbuf_r+0x70>
 801044c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010450:	b2f6      	uxtb	r6, r6
 8010452:	049a      	lsls	r2, r3, #18
 8010454:	4637      	mov	r7, r6
 8010456:	d52a      	bpl.n	80104ae <__swbuf_r+0x82>
 8010458:	6823      	ldr	r3, [r4, #0]
 801045a:	6922      	ldr	r2, [r4, #16]
 801045c:	1a98      	subs	r0, r3, r2
 801045e:	6963      	ldr	r3, [r4, #20]
 8010460:	4283      	cmp	r3, r0
 8010462:	dc04      	bgt.n	801046e <__swbuf_r+0x42>
 8010464:	4621      	mov	r1, r4
 8010466:	4628      	mov	r0, r5
 8010468:	f7fd fe66 	bl	800e138 <_fflush_r>
 801046c:	b9e0      	cbnz	r0, 80104a8 <__swbuf_r+0x7c>
 801046e:	68a3      	ldr	r3, [r4, #8]
 8010470:	3b01      	subs	r3, #1
 8010472:	60a3      	str	r3, [r4, #8]
 8010474:	6823      	ldr	r3, [r4, #0]
 8010476:	1c5a      	adds	r2, r3, #1
 8010478:	6022      	str	r2, [r4, #0]
 801047a:	701e      	strb	r6, [r3, #0]
 801047c:	6962      	ldr	r2, [r4, #20]
 801047e:	1c43      	adds	r3, r0, #1
 8010480:	429a      	cmp	r2, r3
 8010482:	d004      	beq.n	801048e <__swbuf_r+0x62>
 8010484:	89a3      	ldrh	r3, [r4, #12]
 8010486:	07db      	lsls	r3, r3, #31
 8010488:	d506      	bpl.n	8010498 <__swbuf_r+0x6c>
 801048a:	2e0a      	cmp	r6, #10
 801048c:	d104      	bne.n	8010498 <__swbuf_r+0x6c>
 801048e:	4621      	mov	r1, r4
 8010490:	4628      	mov	r0, r5
 8010492:	f7fd fe51 	bl	800e138 <_fflush_r>
 8010496:	b938      	cbnz	r0, 80104a8 <__swbuf_r+0x7c>
 8010498:	4638      	mov	r0, r7
 801049a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801049c:	4621      	mov	r1, r4
 801049e:	4628      	mov	r0, r5
 80104a0:	f7ff fcbe 	bl	800fe20 <__swsetup_r>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	d0d1      	beq.n	801044c <__swbuf_r+0x20>
 80104a8:	f04f 37ff 	mov.w	r7, #4294967295
 80104ac:	e7f4      	b.n	8010498 <__swbuf_r+0x6c>
 80104ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80104b2:	81a3      	strh	r3, [r4, #12]
 80104b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80104ba:	6663      	str	r3, [r4, #100]	; 0x64
 80104bc:	e7cc      	b.n	8010458 <__swbuf_r+0x2c>

080104be <_raise_r>:
 80104be:	291f      	cmp	r1, #31
 80104c0:	b538      	push	{r3, r4, r5, lr}
 80104c2:	4604      	mov	r4, r0
 80104c4:	460d      	mov	r5, r1
 80104c6:	d904      	bls.n	80104d2 <_raise_r+0x14>
 80104c8:	2316      	movs	r3, #22
 80104ca:	6003      	str	r3, [r0, #0]
 80104cc:	f04f 30ff 	mov.w	r0, #4294967295
 80104d0:	bd38      	pop	{r3, r4, r5, pc}
 80104d2:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 80104d6:	b112      	cbz	r2, 80104de <_raise_r+0x20>
 80104d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80104dc:	b94b      	cbnz	r3, 80104f2 <_raise_r+0x34>
 80104de:	4620      	mov	r0, r4
 80104e0:	f000 f852 	bl	8010588 <_getpid_r>
 80104e4:	462a      	mov	r2, r5
 80104e6:	4601      	mov	r1, r0
 80104e8:	4620      	mov	r0, r4
 80104ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104ee:	f000 b839 	b.w	8010564 <_kill_r>
 80104f2:	2b01      	cmp	r3, #1
 80104f4:	d00a      	beq.n	801050c <_raise_r+0x4e>
 80104f6:	1c59      	adds	r1, r3, #1
 80104f8:	d103      	bne.n	8010502 <_raise_r+0x44>
 80104fa:	2316      	movs	r3, #22
 80104fc:	6003      	str	r3, [r0, #0]
 80104fe:	2001      	movs	r0, #1
 8010500:	e7e6      	b.n	80104d0 <_raise_r+0x12>
 8010502:	2400      	movs	r4, #0
 8010504:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010508:	4628      	mov	r0, r5
 801050a:	4798      	blx	r3
 801050c:	2000      	movs	r0, #0
 801050e:	e7df      	b.n	80104d0 <_raise_r+0x12>

08010510 <raise>:
 8010510:	4b02      	ldr	r3, [pc, #8]	; (801051c <raise+0xc>)
 8010512:	4601      	mov	r1, r0
 8010514:	6818      	ldr	r0, [r3, #0]
 8010516:	f7ff bfd2 	b.w	80104be <_raise_r>
 801051a:	bf00      	nop
 801051c:	20000438 	.word	0x20000438

08010520 <_fstat_r>:
 8010520:	b538      	push	{r3, r4, r5, lr}
 8010522:	4d07      	ldr	r5, [pc, #28]	; (8010540 <_fstat_r+0x20>)
 8010524:	2300      	movs	r3, #0
 8010526:	4604      	mov	r4, r0
 8010528:	4608      	mov	r0, r1
 801052a:	4611      	mov	r1, r2
 801052c:	602b      	str	r3, [r5, #0]
 801052e:	f001 f877 	bl	8011620 <_fstat>
 8010532:	1c43      	adds	r3, r0, #1
 8010534:	d102      	bne.n	801053c <_fstat_r+0x1c>
 8010536:	682b      	ldr	r3, [r5, #0]
 8010538:	b103      	cbz	r3, 801053c <_fstat_r+0x1c>
 801053a:	6023      	str	r3, [r4, #0]
 801053c:	bd38      	pop	{r3, r4, r5, pc}
 801053e:	bf00      	nop
 8010540:	200081b0 	.word	0x200081b0

08010544 <_isatty_r>:
 8010544:	b538      	push	{r3, r4, r5, lr}
 8010546:	4d06      	ldr	r5, [pc, #24]	; (8010560 <_isatty_r+0x1c>)
 8010548:	2300      	movs	r3, #0
 801054a:	4604      	mov	r4, r0
 801054c:	4608      	mov	r0, r1
 801054e:	602b      	str	r3, [r5, #0]
 8010550:	f001 f876 	bl	8011640 <_isatty>
 8010554:	1c43      	adds	r3, r0, #1
 8010556:	d102      	bne.n	801055e <_isatty_r+0x1a>
 8010558:	682b      	ldr	r3, [r5, #0]
 801055a:	b103      	cbz	r3, 801055e <_isatty_r+0x1a>
 801055c:	6023      	str	r3, [r4, #0]
 801055e:	bd38      	pop	{r3, r4, r5, pc}
 8010560:	200081b0 	.word	0x200081b0

08010564 <_kill_r>:
 8010564:	b538      	push	{r3, r4, r5, lr}
 8010566:	4d07      	ldr	r5, [pc, #28]	; (8010584 <_kill_r+0x20>)
 8010568:	2300      	movs	r3, #0
 801056a:	4604      	mov	r4, r0
 801056c:	4608      	mov	r0, r1
 801056e:	4611      	mov	r1, r2
 8010570:	602b      	str	r3, [r5, #0]
 8010572:	f001 f86d 	bl	8011650 <_kill>
 8010576:	1c43      	adds	r3, r0, #1
 8010578:	d102      	bne.n	8010580 <_kill_r+0x1c>
 801057a:	682b      	ldr	r3, [r5, #0]
 801057c:	b103      	cbz	r3, 8010580 <_kill_r+0x1c>
 801057e:	6023      	str	r3, [r4, #0]
 8010580:	bd38      	pop	{r3, r4, r5, pc}
 8010582:	bf00      	nop
 8010584:	200081b0 	.word	0x200081b0

08010588 <_getpid_r>:
 8010588:	f001 b852 	b.w	8011630 <_getpid>
 801058c:	0000      	movs	r0, r0
	...

08010590 <sin>:
 8010590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010592:	ec53 2b10 	vmov	r2, r3, d0
 8010596:	4828      	ldr	r0, [pc, #160]	; (8010638 <sin+0xa8>)
 8010598:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801059c:	4281      	cmp	r1, r0
 801059e:	dc07      	bgt.n	80105b0 <sin+0x20>
 80105a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010630 <sin+0xa0>
 80105a4:	2000      	movs	r0, #0
 80105a6:	b005      	add	sp, #20
 80105a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80105ac:	f000 b910 	b.w	80107d0 <__kernel_sin>
 80105b0:	4822      	ldr	r0, [pc, #136]	; (801063c <sin+0xac>)
 80105b2:	4281      	cmp	r1, r0
 80105b4:	dd09      	ble.n	80105ca <sin+0x3a>
 80105b6:	ee10 0a10 	vmov	r0, s0
 80105ba:	4619      	mov	r1, r3
 80105bc:	f7ef fe7c 	bl	80002b8 <__aeabi_dsub>
 80105c0:	ec41 0b10 	vmov	d0, r0, r1
 80105c4:	b005      	add	sp, #20
 80105c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80105ca:	4668      	mov	r0, sp
 80105cc:	f000 f9c0 	bl	8010950 <__ieee754_rem_pio2>
 80105d0:	f000 0003 	and.w	r0, r0, #3
 80105d4:	2801      	cmp	r0, #1
 80105d6:	d00c      	beq.n	80105f2 <sin+0x62>
 80105d8:	2802      	cmp	r0, #2
 80105da:	d011      	beq.n	8010600 <sin+0x70>
 80105dc:	b9f0      	cbnz	r0, 801061c <sin+0x8c>
 80105de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80105e2:	ed9d 0b00 	vldr	d0, [sp]
 80105e6:	2001      	movs	r0, #1
 80105e8:	f000 f8f2 	bl	80107d0 <__kernel_sin>
 80105ec:	ec51 0b10 	vmov	r0, r1, d0
 80105f0:	e7e6      	b.n	80105c0 <sin+0x30>
 80105f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80105f6:	ed9d 0b00 	vldr	d0, [sp]
 80105fa:	f000 f821 	bl	8010640 <__kernel_cos>
 80105fe:	e7f5      	b.n	80105ec <sin+0x5c>
 8010600:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010604:	ed9d 0b00 	vldr	d0, [sp]
 8010608:	2001      	movs	r0, #1
 801060a:	f000 f8e1 	bl	80107d0 <__kernel_sin>
 801060e:	ec53 2b10 	vmov	r2, r3, d0
 8010612:	ee10 0a10 	vmov	r0, s0
 8010616:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801061a:	e7d1      	b.n	80105c0 <sin+0x30>
 801061c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010620:	ed9d 0b00 	vldr	d0, [sp]
 8010624:	f000 f80c 	bl	8010640 <__kernel_cos>
 8010628:	e7f1      	b.n	801060e <sin+0x7e>
 801062a:	bf00      	nop
 801062c:	f3af 8000 	nop.w
	...
 8010638:	3fe921fb 	.word	0x3fe921fb
 801063c:	7fefffff 	.word	0x7fefffff

08010640 <__kernel_cos>:
 8010640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010644:	ec57 6b10 	vmov	r6, r7, d0
 8010648:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801064c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010650:	ed8d 1b00 	vstr	d1, [sp]
 8010654:	da07      	bge.n	8010666 <__kernel_cos+0x26>
 8010656:	ee10 0a10 	vmov	r0, s0
 801065a:	4639      	mov	r1, r7
 801065c:	f7f0 fa94 	bl	8000b88 <__aeabi_d2iz>
 8010660:	2800      	cmp	r0, #0
 8010662:	f000 8088 	beq.w	8010776 <__kernel_cos+0x136>
 8010666:	4632      	mov	r2, r6
 8010668:	463b      	mov	r3, r7
 801066a:	4630      	mov	r0, r6
 801066c:	4639      	mov	r1, r7
 801066e:	f7ef ffdb 	bl	8000628 <__aeabi_dmul>
 8010672:	4b51      	ldr	r3, [pc, #324]	; (80107b8 <__kernel_cos+0x178>)
 8010674:	2200      	movs	r2, #0
 8010676:	4604      	mov	r4, r0
 8010678:	460d      	mov	r5, r1
 801067a:	f7ef ffd5 	bl	8000628 <__aeabi_dmul>
 801067e:	a340      	add	r3, pc, #256	; (adr r3, 8010780 <__kernel_cos+0x140>)
 8010680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010684:	4682      	mov	sl, r0
 8010686:	468b      	mov	fp, r1
 8010688:	4620      	mov	r0, r4
 801068a:	4629      	mov	r1, r5
 801068c:	f7ef ffcc 	bl	8000628 <__aeabi_dmul>
 8010690:	a33d      	add	r3, pc, #244	; (adr r3, 8010788 <__kernel_cos+0x148>)
 8010692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010696:	f7ef fe11 	bl	80002bc <__adddf3>
 801069a:	4622      	mov	r2, r4
 801069c:	462b      	mov	r3, r5
 801069e:	f7ef ffc3 	bl	8000628 <__aeabi_dmul>
 80106a2:	a33b      	add	r3, pc, #236	; (adr r3, 8010790 <__kernel_cos+0x150>)
 80106a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a8:	f7ef fe06 	bl	80002b8 <__aeabi_dsub>
 80106ac:	4622      	mov	r2, r4
 80106ae:	462b      	mov	r3, r5
 80106b0:	f7ef ffba 	bl	8000628 <__aeabi_dmul>
 80106b4:	a338      	add	r3, pc, #224	; (adr r3, 8010798 <__kernel_cos+0x158>)
 80106b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ba:	f7ef fdff 	bl	80002bc <__adddf3>
 80106be:	4622      	mov	r2, r4
 80106c0:	462b      	mov	r3, r5
 80106c2:	f7ef ffb1 	bl	8000628 <__aeabi_dmul>
 80106c6:	a336      	add	r3, pc, #216	; (adr r3, 80107a0 <__kernel_cos+0x160>)
 80106c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106cc:	f7ef fdf4 	bl	80002b8 <__aeabi_dsub>
 80106d0:	4622      	mov	r2, r4
 80106d2:	462b      	mov	r3, r5
 80106d4:	f7ef ffa8 	bl	8000628 <__aeabi_dmul>
 80106d8:	a333      	add	r3, pc, #204	; (adr r3, 80107a8 <__kernel_cos+0x168>)
 80106da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106de:	f7ef fded 	bl	80002bc <__adddf3>
 80106e2:	4622      	mov	r2, r4
 80106e4:	462b      	mov	r3, r5
 80106e6:	f7ef ff9f 	bl	8000628 <__aeabi_dmul>
 80106ea:	4622      	mov	r2, r4
 80106ec:	462b      	mov	r3, r5
 80106ee:	f7ef ff9b 	bl	8000628 <__aeabi_dmul>
 80106f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106f6:	4604      	mov	r4, r0
 80106f8:	460d      	mov	r5, r1
 80106fa:	4630      	mov	r0, r6
 80106fc:	4639      	mov	r1, r7
 80106fe:	f7ef ff93 	bl	8000628 <__aeabi_dmul>
 8010702:	460b      	mov	r3, r1
 8010704:	4602      	mov	r2, r0
 8010706:	4629      	mov	r1, r5
 8010708:	4620      	mov	r0, r4
 801070a:	f7ef fdd5 	bl	80002b8 <__aeabi_dsub>
 801070e:	4b2b      	ldr	r3, [pc, #172]	; (80107bc <__kernel_cos+0x17c>)
 8010710:	4598      	cmp	r8, r3
 8010712:	4606      	mov	r6, r0
 8010714:	460f      	mov	r7, r1
 8010716:	dc10      	bgt.n	801073a <__kernel_cos+0xfa>
 8010718:	4602      	mov	r2, r0
 801071a:	460b      	mov	r3, r1
 801071c:	4650      	mov	r0, sl
 801071e:	4659      	mov	r1, fp
 8010720:	f7ef fdca 	bl	80002b8 <__aeabi_dsub>
 8010724:	460b      	mov	r3, r1
 8010726:	4926      	ldr	r1, [pc, #152]	; (80107c0 <__kernel_cos+0x180>)
 8010728:	4602      	mov	r2, r0
 801072a:	2000      	movs	r0, #0
 801072c:	f7ef fdc4 	bl	80002b8 <__aeabi_dsub>
 8010730:	ec41 0b10 	vmov	d0, r0, r1
 8010734:	b003      	add	sp, #12
 8010736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801073a:	4b22      	ldr	r3, [pc, #136]	; (80107c4 <__kernel_cos+0x184>)
 801073c:	4920      	ldr	r1, [pc, #128]	; (80107c0 <__kernel_cos+0x180>)
 801073e:	4598      	cmp	r8, r3
 8010740:	bfcc      	ite	gt
 8010742:	4d21      	ldrgt	r5, [pc, #132]	; (80107c8 <__kernel_cos+0x188>)
 8010744:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010748:	2400      	movs	r4, #0
 801074a:	4622      	mov	r2, r4
 801074c:	462b      	mov	r3, r5
 801074e:	2000      	movs	r0, #0
 8010750:	f7ef fdb2 	bl	80002b8 <__aeabi_dsub>
 8010754:	4622      	mov	r2, r4
 8010756:	4680      	mov	r8, r0
 8010758:	4689      	mov	r9, r1
 801075a:	462b      	mov	r3, r5
 801075c:	4650      	mov	r0, sl
 801075e:	4659      	mov	r1, fp
 8010760:	f7ef fdaa 	bl	80002b8 <__aeabi_dsub>
 8010764:	4632      	mov	r2, r6
 8010766:	463b      	mov	r3, r7
 8010768:	f7ef fda6 	bl	80002b8 <__aeabi_dsub>
 801076c:	4602      	mov	r2, r0
 801076e:	460b      	mov	r3, r1
 8010770:	4640      	mov	r0, r8
 8010772:	4649      	mov	r1, r9
 8010774:	e7da      	b.n	801072c <__kernel_cos+0xec>
 8010776:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80107b0 <__kernel_cos+0x170>
 801077a:	e7db      	b.n	8010734 <__kernel_cos+0xf4>
 801077c:	f3af 8000 	nop.w
 8010780:	be8838d4 	.word	0xbe8838d4
 8010784:	bda8fae9 	.word	0xbda8fae9
 8010788:	bdb4b1c4 	.word	0xbdb4b1c4
 801078c:	3e21ee9e 	.word	0x3e21ee9e
 8010790:	809c52ad 	.word	0x809c52ad
 8010794:	3e927e4f 	.word	0x3e927e4f
 8010798:	19cb1590 	.word	0x19cb1590
 801079c:	3efa01a0 	.word	0x3efa01a0
 80107a0:	16c15177 	.word	0x16c15177
 80107a4:	3f56c16c 	.word	0x3f56c16c
 80107a8:	5555554c 	.word	0x5555554c
 80107ac:	3fa55555 	.word	0x3fa55555
 80107b0:	00000000 	.word	0x00000000
 80107b4:	3ff00000 	.word	0x3ff00000
 80107b8:	3fe00000 	.word	0x3fe00000
 80107bc:	3fd33332 	.word	0x3fd33332
 80107c0:	3ff00000 	.word	0x3ff00000
 80107c4:	3fe90000 	.word	0x3fe90000
 80107c8:	3fd20000 	.word	0x3fd20000
 80107cc:	00000000 	.word	0x00000000

080107d0 <__kernel_sin>:
 80107d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d4:	ed2d 8b04 	vpush	{d8-d9}
 80107d8:	eeb0 8a41 	vmov.f32	s16, s2
 80107dc:	eef0 8a61 	vmov.f32	s17, s3
 80107e0:	ec55 4b10 	vmov	r4, r5, d0
 80107e4:	b083      	sub	sp, #12
 80107e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80107ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80107ee:	9001      	str	r0, [sp, #4]
 80107f0:	da06      	bge.n	8010800 <__kernel_sin+0x30>
 80107f2:	ee10 0a10 	vmov	r0, s0
 80107f6:	4629      	mov	r1, r5
 80107f8:	f7f0 f9c6 	bl	8000b88 <__aeabi_d2iz>
 80107fc:	2800      	cmp	r0, #0
 80107fe:	d051      	beq.n	80108a4 <__kernel_sin+0xd4>
 8010800:	4622      	mov	r2, r4
 8010802:	462b      	mov	r3, r5
 8010804:	4620      	mov	r0, r4
 8010806:	4629      	mov	r1, r5
 8010808:	f7ef ff0e 	bl	8000628 <__aeabi_dmul>
 801080c:	4682      	mov	sl, r0
 801080e:	468b      	mov	fp, r1
 8010810:	4602      	mov	r2, r0
 8010812:	460b      	mov	r3, r1
 8010814:	4620      	mov	r0, r4
 8010816:	4629      	mov	r1, r5
 8010818:	f7ef ff06 	bl	8000628 <__aeabi_dmul>
 801081c:	a341      	add	r3, pc, #260	; (adr r3, 8010924 <__kernel_sin+0x154>)
 801081e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010822:	4680      	mov	r8, r0
 8010824:	4689      	mov	r9, r1
 8010826:	4650      	mov	r0, sl
 8010828:	4659      	mov	r1, fp
 801082a:	f7ef fefd 	bl	8000628 <__aeabi_dmul>
 801082e:	a33f      	add	r3, pc, #252	; (adr r3, 801092c <__kernel_sin+0x15c>)
 8010830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010834:	f7ef fd40 	bl	80002b8 <__aeabi_dsub>
 8010838:	4652      	mov	r2, sl
 801083a:	465b      	mov	r3, fp
 801083c:	f7ef fef4 	bl	8000628 <__aeabi_dmul>
 8010840:	a33c      	add	r3, pc, #240	; (adr r3, 8010934 <__kernel_sin+0x164>)
 8010842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010846:	f7ef fd39 	bl	80002bc <__adddf3>
 801084a:	4652      	mov	r2, sl
 801084c:	465b      	mov	r3, fp
 801084e:	f7ef feeb 	bl	8000628 <__aeabi_dmul>
 8010852:	a33a      	add	r3, pc, #232	; (adr r3, 801093c <__kernel_sin+0x16c>)
 8010854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010858:	f7ef fd2e 	bl	80002b8 <__aeabi_dsub>
 801085c:	4652      	mov	r2, sl
 801085e:	465b      	mov	r3, fp
 8010860:	f7ef fee2 	bl	8000628 <__aeabi_dmul>
 8010864:	a337      	add	r3, pc, #220	; (adr r3, 8010944 <__kernel_sin+0x174>)
 8010866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086a:	f7ef fd27 	bl	80002bc <__adddf3>
 801086e:	9b01      	ldr	r3, [sp, #4]
 8010870:	4606      	mov	r6, r0
 8010872:	460f      	mov	r7, r1
 8010874:	b9eb      	cbnz	r3, 80108b2 <__kernel_sin+0xe2>
 8010876:	4602      	mov	r2, r0
 8010878:	460b      	mov	r3, r1
 801087a:	4650      	mov	r0, sl
 801087c:	4659      	mov	r1, fp
 801087e:	f7ef fed3 	bl	8000628 <__aeabi_dmul>
 8010882:	a325      	add	r3, pc, #148	; (adr r3, 8010918 <__kernel_sin+0x148>)
 8010884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010888:	f7ef fd16 	bl	80002b8 <__aeabi_dsub>
 801088c:	4642      	mov	r2, r8
 801088e:	464b      	mov	r3, r9
 8010890:	f7ef feca 	bl	8000628 <__aeabi_dmul>
 8010894:	4602      	mov	r2, r0
 8010896:	460b      	mov	r3, r1
 8010898:	4620      	mov	r0, r4
 801089a:	4629      	mov	r1, r5
 801089c:	f7ef fd0e 	bl	80002bc <__adddf3>
 80108a0:	4604      	mov	r4, r0
 80108a2:	460d      	mov	r5, r1
 80108a4:	ec45 4b10 	vmov	d0, r4, r5
 80108a8:	b003      	add	sp, #12
 80108aa:	ecbd 8b04 	vpop	{d8-d9}
 80108ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108b2:	4b1b      	ldr	r3, [pc, #108]	; (8010920 <__kernel_sin+0x150>)
 80108b4:	ec51 0b18 	vmov	r0, r1, d8
 80108b8:	2200      	movs	r2, #0
 80108ba:	f7ef feb5 	bl	8000628 <__aeabi_dmul>
 80108be:	4632      	mov	r2, r6
 80108c0:	ec41 0b19 	vmov	d9, r0, r1
 80108c4:	463b      	mov	r3, r7
 80108c6:	4640      	mov	r0, r8
 80108c8:	4649      	mov	r1, r9
 80108ca:	f7ef fead 	bl	8000628 <__aeabi_dmul>
 80108ce:	4602      	mov	r2, r0
 80108d0:	460b      	mov	r3, r1
 80108d2:	ec51 0b19 	vmov	r0, r1, d9
 80108d6:	f7ef fcef 	bl	80002b8 <__aeabi_dsub>
 80108da:	4652      	mov	r2, sl
 80108dc:	465b      	mov	r3, fp
 80108de:	f7ef fea3 	bl	8000628 <__aeabi_dmul>
 80108e2:	ec53 2b18 	vmov	r2, r3, d8
 80108e6:	f7ef fce7 	bl	80002b8 <__aeabi_dsub>
 80108ea:	a30b      	add	r3, pc, #44	; (adr r3, 8010918 <__kernel_sin+0x148>)
 80108ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f0:	4606      	mov	r6, r0
 80108f2:	460f      	mov	r7, r1
 80108f4:	4640      	mov	r0, r8
 80108f6:	4649      	mov	r1, r9
 80108f8:	f7ef fe96 	bl	8000628 <__aeabi_dmul>
 80108fc:	4602      	mov	r2, r0
 80108fe:	460b      	mov	r3, r1
 8010900:	4630      	mov	r0, r6
 8010902:	4639      	mov	r1, r7
 8010904:	f7ef fcda 	bl	80002bc <__adddf3>
 8010908:	4602      	mov	r2, r0
 801090a:	460b      	mov	r3, r1
 801090c:	4620      	mov	r0, r4
 801090e:	4629      	mov	r1, r5
 8010910:	f7ef fcd2 	bl	80002b8 <__aeabi_dsub>
 8010914:	e7c4      	b.n	80108a0 <__kernel_sin+0xd0>
 8010916:	bf00      	nop
 8010918:	55555549 	.word	0x55555549
 801091c:	3fc55555 	.word	0x3fc55555
 8010920:	3fe00000 	.word	0x3fe00000
 8010924:	5acfd57c 	.word	0x5acfd57c
 8010928:	3de5d93a 	.word	0x3de5d93a
 801092c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010930:	3e5ae5e6 	.word	0x3e5ae5e6
 8010934:	57b1fe7d 	.word	0x57b1fe7d
 8010938:	3ec71de3 	.word	0x3ec71de3
 801093c:	19c161d5 	.word	0x19c161d5
 8010940:	3f2a01a0 	.word	0x3f2a01a0
 8010944:	1110f8a6 	.word	0x1110f8a6
 8010948:	3f811111 	.word	0x3f811111
 801094c:	00000000 	.word	0x00000000

08010950 <__ieee754_rem_pio2>:
 8010950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010954:	ed2d 8b02 	vpush	{d8}
 8010958:	ec55 4b10 	vmov	r4, r5, d0
 801095c:	4bca      	ldr	r3, [pc, #808]	; (8010c88 <__ieee754_rem_pio2+0x338>)
 801095e:	b08b      	sub	sp, #44	; 0x2c
 8010960:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010964:	4598      	cmp	r8, r3
 8010966:	4682      	mov	sl, r0
 8010968:	9502      	str	r5, [sp, #8]
 801096a:	dc08      	bgt.n	801097e <__ieee754_rem_pio2+0x2e>
 801096c:	2200      	movs	r2, #0
 801096e:	2300      	movs	r3, #0
 8010970:	ed80 0b00 	vstr	d0, [r0]
 8010974:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010978:	f04f 0b00 	mov.w	fp, #0
 801097c:	e028      	b.n	80109d0 <__ieee754_rem_pio2+0x80>
 801097e:	4bc3      	ldr	r3, [pc, #780]	; (8010c8c <__ieee754_rem_pio2+0x33c>)
 8010980:	4598      	cmp	r8, r3
 8010982:	dc78      	bgt.n	8010a76 <__ieee754_rem_pio2+0x126>
 8010984:	9b02      	ldr	r3, [sp, #8]
 8010986:	4ec2      	ldr	r6, [pc, #776]	; (8010c90 <__ieee754_rem_pio2+0x340>)
 8010988:	2b00      	cmp	r3, #0
 801098a:	ee10 0a10 	vmov	r0, s0
 801098e:	a3b0      	add	r3, pc, #704	; (adr r3, 8010c50 <__ieee754_rem_pio2+0x300>)
 8010990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010994:	4629      	mov	r1, r5
 8010996:	dd39      	ble.n	8010a0c <__ieee754_rem_pio2+0xbc>
 8010998:	f7ef fc8e 	bl	80002b8 <__aeabi_dsub>
 801099c:	45b0      	cmp	r8, r6
 801099e:	4604      	mov	r4, r0
 80109a0:	460d      	mov	r5, r1
 80109a2:	d01b      	beq.n	80109dc <__ieee754_rem_pio2+0x8c>
 80109a4:	a3ac      	add	r3, pc, #688	; (adr r3, 8010c58 <__ieee754_rem_pio2+0x308>)
 80109a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109aa:	f7ef fc85 	bl	80002b8 <__aeabi_dsub>
 80109ae:	4602      	mov	r2, r0
 80109b0:	460b      	mov	r3, r1
 80109b2:	e9ca 2300 	strd	r2, r3, [sl]
 80109b6:	4620      	mov	r0, r4
 80109b8:	4629      	mov	r1, r5
 80109ba:	f7ef fc7d 	bl	80002b8 <__aeabi_dsub>
 80109be:	a3a6      	add	r3, pc, #664	; (adr r3, 8010c58 <__ieee754_rem_pio2+0x308>)
 80109c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c4:	f7ef fc78 	bl	80002b8 <__aeabi_dsub>
 80109c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80109cc:	f04f 0b01 	mov.w	fp, #1
 80109d0:	4658      	mov	r0, fp
 80109d2:	b00b      	add	sp, #44	; 0x2c
 80109d4:	ecbd 8b02 	vpop	{d8}
 80109d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109dc:	a3a0      	add	r3, pc, #640	; (adr r3, 8010c60 <__ieee754_rem_pio2+0x310>)
 80109de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e2:	f7ef fc69 	bl	80002b8 <__aeabi_dsub>
 80109e6:	a3a0      	add	r3, pc, #640	; (adr r3, 8010c68 <__ieee754_rem_pio2+0x318>)
 80109e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ec:	4604      	mov	r4, r0
 80109ee:	460d      	mov	r5, r1
 80109f0:	f7ef fc62 	bl	80002b8 <__aeabi_dsub>
 80109f4:	4602      	mov	r2, r0
 80109f6:	460b      	mov	r3, r1
 80109f8:	e9ca 2300 	strd	r2, r3, [sl]
 80109fc:	4620      	mov	r0, r4
 80109fe:	4629      	mov	r1, r5
 8010a00:	f7ef fc5a 	bl	80002b8 <__aeabi_dsub>
 8010a04:	a398      	add	r3, pc, #608	; (adr r3, 8010c68 <__ieee754_rem_pio2+0x318>)
 8010a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a0a:	e7db      	b.n	80109c4 <__ieee754_rem_pio2+0x74>
 8010a0c:	f7ef fc56 	bl	80002bc <__adddf3>
 8010a10:	45b0      	cmp	r8, r6
 8010a12:	4604      	mov	r4, r0
 8010a14:	460d      	mov	r5, r1
 8010a16:	d016      	beq.n	8010a46 <__ieee754_rem_pio2+0xf6>
 8010a18:	a38f      	add	r3, pc, #572	; (adr r3, 8010c58 <__ieee754_rem_pio2+0x308>)
 8010a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1e:	f7ef fc4d 	bl	80002bc <__adddf3>
 8010a22:	4602      	mov	r2, r0
 8010a24:	460b      	mov	r3, r1
 8010a26:	e9ca 2300 	strd	r2, r3, [sl]
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	4629      	mov	r1, r5
 8010a2e:	f7ef fc43 	bl	80002b8 <__aeabi_dsub>
 8010a32:	a389      	add	r3, pc, #548	; (adr r3, 8010c58 <__ieee754_rem_pio2+0x308>)
 8010a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a38:	f7ef fc40 	bl	80002bc <__adddf3>
 8010a3c:	f04f 3bff 	mov.w	fp, #4294967295
 8010a40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010a44:	e7c4      	b.n	80109d0 <__ieee754_rem_pio2+0x80>
 8010a46:	a386      	add	r3, pc, #536	; (adr r3, 8010c60 <__ieee754_rem_pio2+0x310>)
 8010a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4c:	f7ef fc36 	bl	80002bc <__adddf3>
 8010a50:	a385      	add	r3, pc, #532	; (adr r3, 8010c68 <__ieee754_rem_pio2+0x318>)
 8010a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a56:	4604      	mov	r4, r0
 8010a58:	460d      	mov	r5, r1
 8010a5a:	f7ef fc2f 	bl	80002bc <__adddf3>
 8010a5e:	4602      	mov	r2, r0
 8010a60:	460b      	mov	r3, r1
 8010a62:	e9ca 2300 	strd	r2, r3, [sl]
 8010a66:	4620      	mov	r0, r4
 8010a68:	4629      	mov	r1, r5
 8010a6a:	f7ef fc25 	bl	80002b8 <__aeabi_dsub>
 8010a6e:	a37e      	add	r3, pc, #504	; (adr r3, 8010c68 <__ieee754_rem_pio2+0x318>)
 8010a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a74:	e7e0      	b.n	8010a38 <__ieee754_rem_pio2+0xe8>
 8010a76:	4b87      	ldr	r3, [pc, #540]	; (8010c94 <__ieee754_rem_pio2+0x344>)
 8010a78:	4598      	cmp	r8, r3
 8010a7a:	f300 80d8 	bgt.w	8010c2e <__ieee754_rem_pio2+0x2de>
 8010a7e:	f000 f96d 	bl	8010d5c <fabs>
 8010a82:	ec55 4b10 	vmov	r4, r5, d0
 8010a86:	ee10 0a10 	vmov	r0, s0
 8010a8a:	a379      	add	r3, pc, #484	; (adr r3, 8010c70 <__ieee754_rem_pio2+0x320>)
 8010a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a90:	4629      	mov	r1, r5
 8010a92:	f7ef fdc9 	bl	8000628 <__aeabi_dmul>
 8010a96:	4b80      	ldr	r3, [pc, #512]	; (8010c98 <__ieee754_rem_pio2+0x348>)
 8010a98:	2200      	movs	r2, #0
 8010a9a:	f7ef fc0f 	bl	80002bc <__adddf3>
 8010a9e:	f7f0 f873 	bl	8000b88 <__aeabi_d2iz>
 8010aa2:	4683      	mov	fp, r0
 8010aa4:	f7ef fd56 	bl	8000554 <__aeabi_i2d>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	460b      	mov	r3, r1
 8010aac:	ec43 2b18 	vmov	d8, r2, r3
 8010ab0:	a367      	add	r3, pc, #412	; (adr r3, 8010c50 <__ieee754_rem_pio2+0x300>)
 8010ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab6:	f7ef fdb7 	bl	8000628 <__aeabi_dmul>
 8010aba:	4602      	mov	r2, r0
 8010abc:	460b      	mov	r3, r1
 8010abe:	4620      	mov	r0, r4
 8010ac0:	4629      	mov	r1, r5
 8010ac2:	f7ef fbf9 	bl	80002b8 <__aeabi_dsub>
 8010ac6:	a364      	add	r3, pc, #400	; (adr r3, 8010c58 <__ieee754_rem_pio2+0x308>)
 8010ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010acc:	4606      	mov	r6, r0
 8010ace:	460f      	mov	r7, r1
 8010ad0:	ec51 0b18 	vmov	r0, r1, d8
 8010ad4:	f7ef fda8 	bl	8000628 <__aeabi_dmul>
 8010ad8:	f1bb 0f1f 	cmp.w	fp, #31
 8010adc:	4604      	mov	r4, r0
 8010ade:	460d      	mov	r5, r1
 8010ae0:	dc0d      	bgt.n	8010afe <__ieee754_rem_pio2+0x1ae>
 8010ae2:	4b6e      	ldr	r3, [pc, #440]	; (8010c9c <__ieee754_rem_pio2+0x34c>)
 8010ae4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010aec:	4543      	cmp	r3, r8
 8010aee:	d006      	beq.n	8010afe <__ieee754_rem_pio2+0x1ae>
 8010af0:	4622      	mov	r2, r4
 8010af2:	462b      	mov	r3, r5
 8010af4:	4630      	mov	r0, r6
 8010af6:	4639      	mov	r1, r7
 8010af8:	f7ef fbde 	bl	80002b8 <__aeabi_dsub>
 8010afc:	e00e      	b.n	8010b1c <__ieee754_rem_pio2+0x1cc>
 8010afe:	462b      	mov	r3, r5
 8010b00:	4622      	mov	r2, r4
 8010b02:	4630      	mov	r0, r6
 8010b04:	4639      	mov	r1, r7
 8010b06:	f7ef fbd7 	bl	80002b8 <__aeabi_dsub>
 8010b0a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010b0e:	9303      	str	r3, [sp, #12]
 8010b10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010b14:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010b18:	2b10      	cmp	r3, #16
 8010b1a:	dc02      	bgt.n	8010b22 <__ieee754_rem_pio2+0x1d2>
 8010b1c:	e9ca 0100 	strd	r0, r1, [sl]
 8010b20:	e039      	b.n	8010b96 <__ieee754_rem_pio2+0x246>
 8010b22:	a34f      	add	r3, pc, #316	; (adr r3, 8010c60 <__ieee754_rem_pio2+0x310>)
 8010b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b28:	ec51 0b18 	vmov	r0, r1, d8
 8010b2c:	f7ef fd7c 	bl	8000628 <__aeabi_dmul>
 8010b30:	4604      	mov	r4, r0
 8010b32:	460d      	mov	r5, r1
 8010b34:	4602      	mov	r2, r0
 8010b36:	460b      	mov	r3, r1
 8010b38:	4630      	mov	r0, r6
 8010b3a:	4639      	mov	r1, r7
 8010b3c:	f7ef fbbc 	bl	80002b8 <__aeabi_dsub>
 8010b40:	4602      	mov	r2, r0
 8010b42:	460b      	mov	r3, r1
 8010b44:	4680      	mov	r8, r0
 8010b46:	4689      	mov	r9, r1
 8010b48:	4630      	mov	r0, r6
 8010b4a:	4639      	mov	r1, r7
 8010b4c:	f7ef fbb4 	bl	80002b8 <__aeabi_dsub>
 8010b50:	4622      	mov	r2, r4
 8010b52:	462b      	mov	r3, r5
 8010b54:	f7ef fbb0 	bl	80002b8 <__aeabi_dsub>
 8010b58:	a343      	add	r3, pc, #268	; (adr r3, 8010c68 <__ieee754_rem_pio2+0x318>)
 8010b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5e:	4604      	mov	r4, r0
 8010b60:	460d      	mov	r5, r1
 8010b62:	ec51 0b18 	vmov	r0, r1, d8
 8010b66:	f7ef fd5f 	bl	8000628 <__aeabi_dmul>
 8010b6a:	4622      	mov	r2, r4
 8010b6c:	462b      	mov	r3, r5
 8010b6e:	f7ef fba3 	bl	80002b8 <__aeabi_dsub>
 8010b72:	4602      	mov	r2, r0
 8010b74:	460b      	mov	r3, r1
 8010b76:	4604      	mov	r4, r0
 8010b78:	460d      	mov	r5, r1
 8010b7a:	4640      	mov	r0, r8
 8010b7c:	4649      	mov	r1, r9
 8010b7e:	f7ef fb9b 	bl	80002b8 <__aeabi_dsub>
 8010b82:	9a03      	ldr	r2, [sp, #12]
 8010b84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010b88:	1ad3      	subs	r3, r2, r3
 8010b8a:	2b31      	cmp	r3, #49	; 0x31
 8010b8c:	dc24      	bgt.n	8010bd8 <__ieee754_rem_pio2+0x288>
 8010b8e:	e9ca 0100 	strd	r0, r1, [sl]
 8010b92:	4646      	mov	r6, r8
 8010b94:	464f      	mov	r7, r9
 8010b96:	e9da 8900 	ldrd	r8, r9, [sl]
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	4642      	mov	r2, r8
 8010b9e:	464b      	mov	r3, r9
 8010ba0:	4639      	mov	r1, r7
 8010ba2:	f7ef fb89 	bl	80002b8 <__aeabi_dsub>
 8010ba6:	462b      	mov	r3, r5
 8010ba8:	4622      	mov	r2, r4
 8010baa:	f7ef fb85 	bl	80002b8 <__aeabi_dsub>
 8010bae:	9b02      	ldr	r3, [sp, #8]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010bb6:	f6bf af0b 	bge.w	80109d0 <__ieee754_rem_pio2+0x80>
 8010bba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010bbe:	f8ca 3004 	str.w	r3, [sl, #4]
 8010bc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010bc6:	f8ca 8000 	str.w	r8, [sl]
 8010bca:	f8ca 0008 	str.w	r0, [sl, #8]
 8010bce:	f8ca 300c 	str.w	r3, [sl, #12]
 8010bd2:	f1cb 0b00 	rsb	fp, fp, #0
 8010bd6:	e6fb      	b.n	80109d0 <__ieee754_rem_pio2+0x80>
 8010bd8:	a327      	add	r3, pc, #156	; (adr r3, 8010c78 <__ieee754_rem_pio2+0x328>)
 8010bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bde:	ec51 0b18 	vmov	r0, r1, d8
 8010be2:	f7ef fd21 	bl	8000628 <__aeabi_dmul>
 8010be6:	4604      	mov	r4, r0
 8010be8:	460d      	mov	r5, r1
 8010bea:	4602      	mov	r2, r0
 8010bec:	460b      	mov	r3, r1
 8010bee:	4640      	mov	r0, r8
 8010bf0:	4649      	mov	r1, r9
 8010bf2:	f7ef fb61 	bl	80002b8 <__aeabi_dsub>
 8010bf6:	4602      	mov	r2, r0
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	4606      	mov	r6, r0
 8010bfc:	460f      	mov	r7, r1
 8010bfe:	4640      	mov	r0, r8
 8010c00:	4649      	mov	r1, r9
 8010c02:	f7ef fb59 	bl	80002b8 <__aeabi_dsub>
 8010c06:	4622      	mov	r2, r4
 8010c08:	462b      	mov	r3, r5
 8010c0a:	f7ef fb55 	bl	80002b8 <__aeabi_dsub>
 8010c0e:	a31c      	add	r3, pc, #112	; (adr r3, 8010c80 <__ieee754_rem_pio2+0x330>)
 8010c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c14:	4604      	mov	r4, r0
 8010c16:	460d      	mov	r5, r1
 8010c18:	ec51 0b18 	vmov	r0, r1, d8
 8010c1c:	f7ef fd04 	bl	8000628 <__aeabi_dmul>
 8010c20:	4622      	mov	r2, r4
 8010c22:	462b      	mov	r3, r5
 8010c24:	f7ef fb48 	bl	80002b8 <__aeabi_dsub>
 8010c28:	4604      	mov	r4, r0
 8010c2a:	460d      	mov	r5, r1
 8010c2c:	e760      	b.n	8010af0 <__ieee754_rem_pio2+0x1a0>
 8010c2e:	4b1c      	ldr	r3, [pc, #112]	; (8010ca0 <__ieee754_rem_pio2+0x350>)
 8010c30:	4598      	cmp	r8, r3
 8010c32:	dd37      	ble.n	8010ca4 <__ieee754_rem_pio2+0x354>
 8010c34:	ee10 2a10 	vmov	r2, s0
 8010c38:	462b      	mov	r3, r5
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	4629      	mov	r1, r5
 8010c3e:	f7ef fb3b 	bl	80002b8 <__aeabi_dsub>
 8010c42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010c46:	e9ca 0100 	strd	r0, r1, [sl]
 8010c4a:	e695      	b.n	8010978 <__ieee754_rem_pio2+0x28>
 8010c4c:	f3af 8000 	nop.w
 8010c50:	54400000 	.word	0x54400000
 8010c54:	3ff921fb 	.word	0x3ff921fb
 8010c58:	1a626331 	.word	0x1a626331
 8010c5c:	3dd0b461 	.word	0x3dd0b461
 8010c60:	1a600000 	.word	0x1a600000
 8010c64:	3dd0b461 	.word	0x3dd0b461
 8010c68:	2e037073 	.word	0x2e037073
 8010c6c:	3ba3198a 	.word	0x3ba3198a
 8010c70:	6dc9c883 	.word	0x6dc9c883
 8010c74:	3fe45f30 	.word	0x3fe45f30
 8010c78:	2e000000 	.word	0x2e000000
 8010c7c:	3ba3198a 	.word	0x3ba3198a
 8010c80:	252049c1 	.word	0x252049c1
 8010c84:	397b839a 	.word	0x397b839a
 8010c88:	3fe921fb 	.word	0x3fe921fb
 8010c8c:	4002d97b 	.word	0x4002d97b
 8010c90:	3ff921fb 	.word	0x3ff921fb
 8010c94:	413921fb 	.word	0x413921fb
 8010c98:	3fe00000 	.word	0x3fe00000
 8010c9c:	08012914 	.word	0x08012914
 8010ca0:	7fefffff 	.word	0x7fefffff
 8010ca4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8010ca8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8010cac:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	460d      	mov	r5, r1
 8010cb4:	f7ef ff68 	bl	8000b88 <__aeabi_d2iz>
 8010cb8:	f7ef fc4c 	bl	8000554 <__aeabi_i2d>
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	460b      	mov	r3, r1
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	4629      	mov	r1, r5
 8010cc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010cc8:	f7ef faf6 	bl	80002b8 <__aeabi_dsub>
 8010ccc:	4b21      	ldr	r3, [pc, #132]	; (8010d54 <__ieee754_rem_pio2+0x404>)
 8010cce:	2200      	movs	r2, #0
 8010cd0:	f7ef fcaa 	bl	8000628 <__aeabi_dmul>
 8010cd4:	460d      	mov	r5, r1
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	f7ef ff56 	bl	8000b88 <__aeabi_d2iz>
 8010cdc:	f7ef fc3a 	bl	8000554 <__aeabi_i2d>
 8010ce0:	4602      	mov	r2, r0
 8010ce2:	460b      	mov	r3, r1
 8010ce4:	4620      	mov	r0, r4
 8010ce6:	4629      	mov	r1, r5
 8010ce8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010cec:	f7ef fae4 	bl	80002b8 <__aeabi_dsub>
 8010cf0:	4b18      	ldr	r3, [pc, #96]	; (8010d54 <__ieee754_rem_pio2+0x404>)
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f7ef fc98 	bl	8000628 <__aeabi_dmul>
 8010cf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010cfc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010d00:	2703      	movs	r7, #3
 8010d02:	2400      	movs	r4, #0
 8010d04:	2500      	movs	r5, #0
 8010d06:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8010d0a:	4622      	mov	r2, r4
 8010d0c:	462b      	mov	r3, r5
 8010d0e:	46b9      	mov	r9, r7
 8010d10:	3f01      	subs	r7, #1
 8010d12:	f7ef fef1 	bl	8000af8 <__aeabi_dcmpeq>
 8010d16:	2800      	cmp	r0, #0
 8010d18:	d1f5      	bne.n	8010d06 <__ieee754_rem_pio2+0x3b6>
 8010d1a:	4b0f      	ldr	r3, [pc, #60]	; (8010d58 <__ieee754_rem_pio2+0x408>)
 8010d1c:	9301      	str	r3, [sp, #4]
 8010d1e:	2302      	movs	r3, #2
 8010d20:	9300      	str	r3, [sp, #0]
 8010d22:	4632      	mov	r2, r6
 8010d24:	464b      	mov	r3, r9
 8010d26:	4651      	mov	r1, sl
 8010d28:	a804      	add	r0, sp, #16
 8010d2a:	f000 f821 	bl	8010d70 <__kernel_rem_pio2>
 8010d2e:	9b02      	ldr	r3, [sp, #8]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	4683      	mov	fp, r0
 8010d34:	f6bf ae4c 	bge.w	80109d0 <__ieee754_rem_pio2+0x80>
 8010d38:	e9da 2100 	ldrd	r2, r1, [sl]
 8010d3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d40:	e9ca 2300 	strd	r2, r3, [sl]
 8010d44:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010d48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d4c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010d50:	e73f      	b.n	8010bd2 <__ieee754_rem_pio2+0x282>
 8010d52:	bf00      	nop
 8010d54:	41700000 	.word	0x41700000
 8010d58:	08012994 	.word	0x08012994

08010d5c <fabs>:
 8010d5c:	ec51 0b10 	vmov	r0, r1, d0
 8010d60:	ee10 2a10 	vmov	r2, s0
 8010d64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010d68:	ec43 2b10 	vmov	d0, r2, r3
 8010d6c:	4770      	bx	lr
	...

08010d70 <__kernel_rem_pio2>:
 8010d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d74:	ed2d 8b02 	vpush	{d8}
 8010d78:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010d7c:	f112 0f14 	cmn.w	r2, #20
 8010d80:	9306      	str	r3, [sp, #24]
 8010d82:	9104      	str	r1, [sp, #16]
 8010d84:	4bc2      	ldr	r3, [pc, #776]	; (8011090 <__kernel_rem_pio2+0x320>)
 8010d86:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010d88:	9009      	str	r0, [sp, #36]	; 0x24
 8010d8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d8e:	9300      	str	r3, [sp, #0]
 8010d90:	9b06      	ldr	r3, [sp, #24]
 8010d92:	f103 33ff 	add.w	r3, r3, #4294967295
 8010d96:	bfa8      	it	ge
 8010d98:	1ed4      	subge	r4, r2, #3
 8010d9a:	9305      	str	r3, [sp, #20]
 8010d9c:	bfb2      	itee	lt
 8010d9e:	2400      	movlt	r4, #0
 8010da0:	2318      	movge	r3, #24
 8010da2:	fb94 f4f3 	sdivge	r4, r4, r3
 8010da6:	f06f 0317 	mvn.w	r3, #23
 8010daa:	fb04 3303 	mla	r3, r4, r3, r3
 8010dae:	eb03 0a02 	add.w	sl, r3, r2
 8010db2:	9b00      	ldr	r3, [sp, #0]
 8010db4:	9a05      	ldr	r2, [sp, #20]
 8010db6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8011080 <__kernel_rem_pio2+0x310>
 8010dba:	eb03 0802 	add.w	r8, r3, r2
 8010dbe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010dc0:	1aa7      	subs	r7, r4, r2
 8010dc2:	ae20      	add	r6, sp, #128	; 0x80
 8010dc4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010dc8:	2500      	movs	r5, #0
 8010dca:	4545      	cmp	r5, r8
 8010dcc:	dd13      	ble.n	8010df6 <__kernel_rem_pio2+0x86>
 8010dce:	9b06      	ldr	r3, [sp, #24]
 8010dd0:	aa20      	add	r2, sp, #128	; 0x80
 8010dd2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010dd6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010dda:	f04f 0800 	mov.w	r8, #0
 8010dde:	9b00      	ldr	r3, [sp, #0]
 8010de0:	4598      	cmp	r8, r3
 8010de2:	dc31      	bgt.n	8010e48 <__kernel_rem_pio2+0xd8>
 8010de4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8011080 <__kernel_rem_pio2+0x310>
 8010de8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010dec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010df0:	462f      	mov	r7, r5
 8010df2:	2600      	movs	r6, #0
 8010df4:	e01b      	b.n	8010e2e <__kernel_rem_pio2+0xbe>
 8010df6:	42ef      	cmn	r7, r5
 8010df8:	d407      	bmi.n	8010e0a <__kernel_rem_pio2+0x9a>
 8010dfa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010dfe:	f7ef fba9 	bl	8000554 <__aeabi_i2d>
 8010e02:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010e06:	3501      	adds	r5, #1
 8010e08:	e7df      	b.n	8010dca <__kernel_rem_pio2+0x5a>
 8010e0a:	ec51 0b18 	vmov	r0, r1, d8
 8010e0e:	e7f8      	b.n	8010e02 <__kernel_rem_pio2+0x92>
 8010e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010e18:	f7ef fc06 	bl	8000628 <__aeabi_dmul>
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	460b      	mov	r3, r1
 8010e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e24:	f7ef fa4a 	bl	80002bc <__adddf3>
 8010e28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e2c:	3601      	adds	r6, #1
 8010e2e:	9b05      	ldr	r3, [sp, #20]
 8010e30:	429e      	cmp	r6, r3
 8010e32:	f1a7 0708 	sub.w	r7, r7, #8
 8010e36:	ddeb      	ble.n	8010e10 <__kernel_rem_pio2+0xa0>
 8010e38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e3c:	f108 0801 	add.w	r8, r8, #1
 8010e40:	ecab 7b02 	vstmia	fp!, {d7}
 8010e44:	3508      	adds	r5, #8
 8010e46:	e7ca      	b.n	8010dde <__kernel_rem_pio2+0x6e>
 8010e48:	9b00      	ldr	r3, [sp, #0]
 8010e4a:	aa0c      	add	r2, sp, #48	; 0x30
 8010e4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e52:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010e54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010e58:	9c00      	ldr	r4, [sp, #0]
 8010e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8010e5c:	00e3      	lsls	r3, r4, #3
 8010e5e:	9308      	str	r3, [sp, #32]
 8010e60:	ab98      	add	r3, sp, #608	; 0x260
 8010e62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010e66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010e6a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8010e6e:	ab70      	add	r3, sp, #448	; 0x1c0
 8010e70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8010e74:	46c3      	mov	fp, r8
 8010e76:	46a1      	mov	r9, r4
 8010e78:	f1b9 0f00 	cmp.w	r9, #0
 8010e7c:	f1a5 0508 	sub.w	r5, r5, #8
 8010e80:	dc77      	bgt.n	8010f72 <__kernel_rem_pio2+0x202>
 8010e82:	ec47 6b10 	vmov	d0, r6, r7
 8010e86:	4650      	mov	r0, sl
 8010e88:	f000 fac2 	bl	8011410 <scalbn>
 8010e8c:	ec57 6b10 	vmov	r6, r7, d0
 8010e90:	2200      	movs	r2, #0
 8010e92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010e96:	ee10 0a10 	vmov	r0, s0
 8010e9a:	4639      	mov	r1, r7
 8010e9c:	f7ef fbc4 	bl	8000628 <__aeabi_dmul>
 8010ea0:	ec41 0b10 	vmov	d0, r0, r1
 8010ea4:	f000 fb34 	bl	8011510 <floor>
 8010ea8:	4b7a      	ldr	r3, [pc, #488]	; (8011094 <__kernel_rem_pio2+0x324>)
 8010eaa:	ec51 0b10 	vmov	r0, r1, d0
 8010eae:	2200      	movs	r2, #0
 8010eb0:	f7ef fbba 	bl	8000628 <__aeabi_dmul>
 8010eb4:	4602      	mov	r2, r0
 8010eb6:	460b      	mov	r3, r1
 8010eb8:	4630      	mov	r0, r6
 8010eba:	4639      	mov	r1, r7
 8010ebc:	f7ef f9fc 	bl	80002b8 <__aeabi_dsub>
 8010ec0:	460f      	mov	r7, r1
 8010ec2:	4606      	mov	r6, r0
 8010ec4:	f7ef fe60 	bl	8000b88 <__aeabi_d2iz>
 8010ec8:	9002      	str	r0, [sp, #8]
 8010eca:	f7ef fb43 	bl	8000554 <__aeabi_i2d>
 8010ece:	4602      	mov	r2, r0
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	4630      	mov	r0, r6
 8010ed4:	4639      	mov	r1, r7
 8010ed6:	f7ef f9ef 	bl	80002b8 <__aeabi_dsub>
 8010eda:	f1ba 0f00 	cmp.w	sl, #0
 8010ede:	4606      	mov	r6, r0
 8010ee0:	460f      	mov	r7, r1
 8010ee2:	dd6d      	ble.n	8010fc0 <__kernel_rem_pio2+0x250>
 8010ee4:	1e61      	subs	r1, r4, #1
 8010ee6:	ab0c      	add	r3, sp, #48	; 0x30
 8010ee8:	9d02      	ldr	r5, [sp, #8]
 8010eea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010eee:	f1ca 0018 	rsb	r0, sl, #24
 8010ef2:	fa43 f200 	asr.w	r2, r3, r0
 8010ef6:	4415      	add	r5, r2
 8010ef8:	4082      	lsls	r2, r0
 8010efa:	1a9b      	subs	r3, r3, r2
 8010efc:	aa0c      	add	r2, sp, #48	; 0x30
 8010efe:	9502      	str	r5, [sp, #8]
 8010f00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010f04:	f1ca 0217 	rsb	r2, sl, #23
 8010f08:	fa43 fb02 	asr.w	fp, r3, r2
 8010f0c:	f1bb 0f00 	cmp.w	fp, #0
 8010f10:	dd65      	ble.n	8010fde <__kernel_rem_pio2+0x26e>
 8010f12:	9b02      	ldr	r3, [sp, #8]
 8010f14:	2200      	movs	r2, #0
 8010f16:	3301      	adds	r3, #1
 8010f18:	9302      	str	r3, [sp, #8]
 8010f1a:	4615      	mov	r5, r2
 8010f1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010f20:	4294      	cmp	r4, r2
 8010f22:	f300 809f 	bgt.w	8011064 <__kernel_rem_pio2+0x2f4>
 8010f26:	f1ba 0f00 	cmp.w	sl, #0
 8010f2a:	dd07      	ble.n	8010f3c <__kernel_rem_pio2+0x1cc>
 8010f2c:	f1ba 0f01 	cmp.w	sl, #1
 8010f30:	f000 80c1 	beq.w	80110b6 <__kernel_rem_pio2+0x346>
 8010f34:	f1ba 0f02 	cmp.w	sl, #2
 8010f38:	f000 80c7 	beq.w	80110ca <__kernel_rem_pio2+0x35a>
 8010f3c:	f1bb 0f02 	cmp.w	fp, #2
 8010f40:	d14d      	bne.n	8010fde <__kernel_rem_pio2+0x26e>
 8010f42:	4632      	mov	r2, r6
 8010f44:	463b      	mov	r3, r7
 8010f46:	4954      	ldr	r1, [pc, #336]	; (8011098 <__kernel_rem_pio2+0x328>)
 8010f48:	2000      	movs	r0, #0
 8010f4a:	f7ef f9b5 	bl	80002b8 <__aeabi_dsub>
 8010f4e:	4606      	mov	r6, r0
 8010f50:	460f      	mov	r7, r1
 8010f52:	2d00      	cmp	r5, #0
 8010f54:	d043      	beq.n	8010fde <__kernel_rem_pio2+0x26e>
 8010f56:	4650      	mov	r0, sl
 8010f58:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8011088 <__kernel_rem_pio2+0x318>
 8010f5c:	f000 fa58 	bl	8011410 <scalbn>
 8010f60:	4630      	mov	r0, r6
 8010f62:	4639      	mov	r1, r7
 8010f64:	ec53 2b10 	vmov	r2, r3, d0
 8010f68:	f7ef f9a6 	bl	80002b8 <__aeabi_dsub>
 8010f6c:	4606      	mov	r6, r0
 8010f6e:	460f      	mov	r7, r1
 8010f70:	e035      	b.n	8010fde <__kernel_rem_pio2+0x26e>
 8010f72:	4b4a      	ldr	r3, [pc, #296]	; (801109c <__kernel_rem_pio2+0x32c>)
 8010f74:	2200      	movs	r2, #0
 8010f76:	4630      	mov	r0, r6
 8010f78:	4639      	mov	r1, r7
 8010f7a:	f7ef fb55 	bl	8000628 <__aeabi_dmul>
 8010f7e:	f7ef fe03 	bl	8000b88 <__aeabi_d2iz>
 8010f82:	f7ef fae7 	bl	8000554 <__aeabi_i2d>
 8010f86:	4602      	mov	r2, r0
 8010f88:	460b      	mov	r3, r1
 8010f8a:	ec43 2b18 	vmov	d8, r2, r3
 8010f8e:	4b44      	ldr	r3, [pc, #272]	; (80110a0 <__kernel_rem_pio2+0x330>)
 8010f90:	2200      	movs	r2, #0
 8010f92:	f7ef fb49 	bl	8000628 <__aeabi_dmul>
 8010f96:	4602      	mov	r2, r0
 8010f98:	460b      	mov	r3, r1
 8010f9a:	4630      	mov	r0, r6
 8010f9c:	4639      	mov	r1, r7
 8010f9e:	f7ef f98b 	bl	80002b8 <__aeabi_dsub>
 8010fa2:	f7ef fdf1 	bl	8000b88 <__aeabi_d2iz>
 8010fa6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010faa:	f84b 0b04 	str.w	r0, [fp], #4
 8010fae:	ec51 0b18 	vmov	r0, r1, d8
 8010fb2:	f7ef f983 	bl	80002bc <__adddf3>
 8010fb6:	f109 39ff 	add.w	r9, r9, #4294967295
 8010fba:	4606      	mov	r6, r0
 8010fbc:	460f      	mov	r7, r1
 8010fbe:	e75b      	b.n	8010e78 <__kernel_rem_pio2+0x108>
 8010fc0:	d106      	bne.n	8010fd0 <__kernel_rem_pio2+0x260>
 8010fc2:	1e63      	subs	r3, r4, #1
 8010fc4:	aa0c      	add	r2, sp, #48	; 0x30
 8010fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010fca:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8010fce:	e79d      	b.n	8010f0c <__kernel_rem_pio2+0x19c>
 8010fd0:	4b34      	ldr	r3, [pc, #208]	; (80110a4 <__kernel_rem_pio2+0x334>)
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	f7ef fdae 	bl	8000b34 <__aeabi_dcmpge>
 8010fd8:	2800      	cmp	r0, #0
 8010fda:	d140      	bne.n	801105e <__kernel_rem_pio2+0x2ee>
 8010fdc:	4683      	mov	fp, r0
 8010fde:	2200      	movs	r2, #0
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	4639      	mov	r1, r7
 8010fe6:	f7ef fd87 	bl	8000af8 <__aeabi_dcmpeq>
 8010fea:	2800      	cmp	r0, #0
 8010fec:	f000 80c1 	beq.w	8011172 <__kernel_rem_pio2+0x402>
 8010ff0:	1e65      	subs	r5, r4, #1
 8010ff2:	462b      	mov	r3, r5
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	9900      	ldr	r1, [sp, #0]
 8010ff8:	428b      	cmp	r3, r1
 8010ffa:	da6d      	bge.n	80110d8 <__kernel_rem_pio2+0x368>
 8010ffc:	2a00      	cmp	r2, #0
 8010ffe:	f000 808a 	beq.w	8011116 <__kernel_rem_pio2+0x3a6>
 8011002:	ab0c      	add	r3, sp, #48	; 0x30
 8011004:	f1aa 0a18 	sub.w	sl, sl, #24
 8011008:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801100c:	2b00      	cmp	r3, #0
 801100e:	f000 80ae 	beq.w	801116e <__kernel_rem_pio2+0x3fe>
 8011012:	4650      	mov	r0, sl
 8011014:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8011088 <__kernel_rem_pio2+0x318>
 8011018:	f000 f9fa 	bl	8011410 <scalbn>
 801101c:	1c6b      	adds	r3, r5, #1
 801101e:	00da      	lsls	r2, r3, #3
 8011020:	9205      	str	r2, [sp, #20]
 8011022:	ec57 6b10 	vmov	r6, r7, d0
 8011026:	aa70      	add	r2, sp, #448	; 0x1c0
 8011028:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801109c <__kernel_rem_pio2+0x32c>
 801102c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8011030:	462c      	mov	r4, r5
 8011032:	f04f 0800 	mov.w	r8, #0
 8011036:	2c00      	cmp	r4, #0
 8011038:	f280 80d4 	bge.w	80111e4 <__kernel_rem_pio2+0x474>
 801103c:	462c      	mov	r4, r5
 801103e:	2c00      	cmp	r4, #0
 8011040:	f2c0 8102 	blt.w	8011248 <__kernel_rem_pio2+0x4d8>
 8011044:	4b18      	ldr	r3, [pc, #96]	; (80110a8 <__kernel_rem_pio2+0x338>)
 8011046:	461e      	mov	r6, r3
 8011048:	ab70      	add	r3, sp, #448	; 0x1c0
 801104a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801104e:	1b2b      	subs	r3, r5, r4
 8011050:	f04f 0900 	mov.w	r9, #0
 8011054:	f04f 0a00 	mov.w	sl, #0
 8011058:	2700      	movs	r7, #0
 801105a:	9306      	str	r3, [sp, #24]
 801105c:	e0e6      	b.n	801122c <__kernel_rem_pio2+0x4bc>
 801105e:	f04f 0b02 	mov.w	fp, #2
 8011062:	e756      	b.n	8010f12 <__kernel_rem_pio2+0x1a2>
 8011064:	f8d8 3000 	ldr.w	r3, [r8]
 8011068:	bb05      	cbnz	r5, 80110ac <__kernel_rem_pio2+0x33c>
 801106a:	b123      	cbz	r3, 8011076 <__kernel_rem_pio2+0x306>
 801106c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011070:	f8c8 3000 	str.w	r3, [r8]
 8011074:	2301      	movs	r3, #1
 8011076:	3201      	adds	r2, #1
 8011078:	f108 0804 	add.w	r8, r8, #4
 801107c:	461d      	mov	r5, r3
 801107e:	e74f      	b.n	8010f20 <__kernel_rem_pio2+0x1b0>
	...
 801108c:	3ff00000 	.word	0x3ff00000
 8011090:	08012ae0 	.word	0x08012ae0
 8011094:	40200000 	.word	0x40200000
 8011098:	3ff00000 	.word	0x3ff00000
 801109c:	3e700000 	.word	0x3e700000
 80110a0:	41700000 	.word	0x41700000
 80110a4:	3fe00000 	.word	0x3fe00000
 80110a8:	08012aa0 	.word	0x08012aa0
 80110ac:	1acb      	subs	r3, r1, r3
 80110ae:	f8c8 3000 	str.w	r3, [r8]
 80110b2:	462b      	mov	r3, r5
 80110b4:	e7df      	b.n	8011076 <__kernel_rem_pio2+0x306>
 80110b6:	1e62      	subs	r2, r4, #1
 80110b8:	ab0c      	add	r3, sp, #48	; 0x30
 80110ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80110c2:	a90c      	add	r1, sp, #48	; 0x30
 80110c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80110c8:	e738      	b.n	8010f3c <__kernel_rem_pio2+0x1cc>
 80110ca:	1e62      	subs	r2, r4, #1
 80110cc:	ab0c      	add	r3, sp, #48	; 0x30
 80110ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80110d6:	e7f4      	b.n	80110c2 <__kernel_rem_pio2+0x352>
 80110d8:	a90c      	add	r1, sp, #48	; 0x30
 80110da:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80110de:	3b01      	subs	r3, #1
 80110e0:	430a      	orrs	r2, r1
 80110e2:	e788      	b.n	8010ff6 <__kernel_rem_pio2+0x286>
 80110e4:	3301      	adds	r3, #1
 80110e6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80110ea:	2900      	cmp	r1, #0
 80110ec:	d0fa      	beq.n	80110e4 <__kernel_rem_pio2+0x374>
 80110ee:	9a08      	ldr	r2, [sp, #32]
 80110f0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80110f4:	446a      	add	r2, sp
 80110f6:	3a98      	subs	r2, #152	; 0x98
 80110f8:	9208      	str	r2, [sp, #32]
 80110fa:	9a06      	ldr	r2, [sp, #24]
 80110fc:	a920      	add	r1, sp, #128	; 0x80
 80110fe:	18a2      	adds	r2, r4, r2
 8011100:	18e3      	adds	r3, r4, r3
 8011102:	f104 0801 	add.w	r8, r4, #1
 8011106:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801110a:	9302      	str	r3, [sp, #8]
 801110c:	9b02      	ldr	r3, [sp, #8]
 801110e:	4543      	cmp	r3, r8
 8011110:	da04      	bge.n	801111c <__kernel_rem_pio2+0x3ac>
 8011112:	461c      	mov	r4, r3
 8011114:	e6a2      	b.n	8010e5c <__kernel_rem_pio2+0xec>
 8011116:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011118:	2301      	movs	r3, #1
 801111a:	e7e4      	b.n	80110e6 <__kernel_rem_pio2+0x376>
 801111c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801111e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011122:	f7ef fa17 	bl	8000554 <__aeabi_i2d>
 8011126:	e8e5 0102 	strd	r0, r1, [r5], #8
 801112a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801112c:	46ab      	mov	fp, r5
 801112e:	461c      	mov	r4, r3
 8011130:	f04f 0900 	mov.w	r9, #0
 8011134:	2600      	movs	r6, #0
 8011136:	2700      	movs	r7, #0
 8011138:	9b05      	ldr	r3, [sp, #20]
 801113a:	4599      	cmp	r9, r3
 801113c:	dd06      	ble.n	801114c <__kernel_rem_pio2+0x3dc>
 801113e:	9b08      	ldr	r3, [sp, #32]
 8011140:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011144:	f108 0801 	add.w	r8, r8, #1
 8011148:	9308      	str	r3, [sp, #32]
 801114a:	e7df      	b.n	801110c <__kernel_rem_pio2+0x39c>
 801114c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011150:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011154:	f7ef fa68 	bl	8000628 <__aeabi_dmul>
 8011158:	4602      	mov	r2, r0
 801115a:	460b      	mov	r3, r1
 801115c:	4630      	mov	r0, r6
 801115e:	4639      	mov	r1, r7
 8011160:	f7ef f8ac 	bl	80002bc <__adddf3>
 8011164:	f109 0901 	add.w	r9, r9, #1
 8011168:	4606      	mov	r6, r0
 801116a:	460f      	mov	r7, r1
 801116c:	e7e4      	b.n	8011138 <__kernel_rem_pio2+0x3c8>
 801116e:	3d01      	subs	r5, #1
 8011170:	e747      	b.n	8011002 <__kernel_rem_pio2+0x292>
 8011172:	ec47 6b10 	vmov	d0, r6, r7
 8011176:	f1ca 0000 	rsb	r0, sl, #0
 801117a:	f000 f949 	bl	8011410 <scalbn>
 801117e:	ec57 6b10 	vmov	r6, r7, d0
 8011182:	4ba0      	ldr	r3, [pc, #640]	; (8011404 <__kernel_rem_pio2+0x694>)
 8011184:	ee10 0a10 	vmov	r0, s0
 8011188:	2200      	movs	r2, #0
 801118a:	4639      	mov	r1, r7
 801118c:	f7ef fcd2 	bl	8000b34 <__aeabi_dcmpge>
 8011190:	b1f8      	cbz	r0, 80111d2 <__kernel_rem_pio2+0x462>
 8011192:	4b9d      	ldr	r3, [pc, #628]	; (8011408 <__kernel_rem_pio2+0x698>)
 8011194:	2200      	movs	r2, #0
 8011196:	4630      	mov	r0, r6
 8011198:	4639      	mov	r1, r7
 801119a:	f7ef fa45 	bl	8000628 <__aeabi_dmul>
 801119e:	f7ef fcf3 	bl	8000b88 <__aeabi_d2iz>
 80111a2:	4680      	mov	r8, r0
 80111a4:	f7ef f9d6 	bl	8000554 <__aeabi_i2d>
 80111a8:	4b96      	ldr	r3, [pc, #600]	; (8011404 <__kernel_rem_pio2+0x694>)
 80111aa:	2200      	movs	r2, #0
 80111ac:	f7ef fa3c 	bl	8000628 <__aeabi_dmul>
 80111b0:	460b      	mov	r3, r1
 80111b2:	4602      	mov	r2, r0
 80111b4:	4639      	mov	r1, r7
 80111b6:	4630      	mov	r0, r6
 80111b8:	f7ef f87e 	bl	80002b8 <__aeabi_dsub>
 80111bc:	f7ef fce4 	bl	8000b88 <__aeabi_d2iz>
 80111c0:	1c65      	adds	r5, r4, #1
 80111c2:	ab0c      	add	r3, sp, #48	; 0x30
 80111c4:	f10a 0a18 	add.w	sl, sl, #24
 80111c8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80111cc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80111d0:	e71f      	b.n	8011012 <__kernel_rem_pio2+0x2a2>
 80111d2:	4630      	mov	r0, r6
 80111d4:	4639      	mov	r1, r7
 80111d6:	f7ef fcd7 	bl	8000b88 <__aeabi_d2iz>
 80111da:	ab0c      	add	r3, sp, #48	; 0x30
 80111dc:	4625      	mov	r5, r4
 80111de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80111e2:	e716      	b.n	8011012 <__kernel_rem_pio2+0x2a2>
 80111e4:	ab0c      	add	r3, sp, #48	; 0x30
 80111e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80111ea:	f7ef f9b3 	bl	8000554 <__aeabi_i2d>
 80111ee:	4632      	mov	r2, r6
 80111f0:	463b      	mov	r3, r7
 80111f2:	f7ef fa19 	bl	8000628 <__aeabi_dmul>
 80111f6:	4642      	mov	r2, r8
 80111f8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80111fc:	464b      	mov	r3, r9
 80111fe:	4630      	mov	r0, r6
 8011200:	4639      	mov	r1, r7
 8011202:	f7ef fa11 	bl	8000628 <__aeabi_dmul>
 8011206:	3c01      	subs	r4, #1
 8011208:	4606      	mov	r6, r0
 801120a:	460f      	mov	r7, r1
 801120c:	e713      	b.n	8011036 <__kernel_rem_pio2+0x2c6>
 801120e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8011212:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8011216:	f7ef fa07 	bl	8000628 <__aeabi_dmul>
 801121a:	4602      	mov	r2, r0
 801121c:	460b      	mov	r3, r1
 801121e:	4648      	mov	r0, r9
 8011220:	4651      	mov	r1, sl
 8011222:	f7ef f84b 	bl	80002bc <__adddf3>
 8011226:	3701      	adds	r7, #1
 8011228:	4681      	mov	r9, r0
 801122a:	468a      	mov	sl, r1
 801122c:	9b00      	ldr	r3, [sp, #0]
 801122e:	429f      	cmp	r7, r3
 8011230:	dc02      	bgt.n	8011238 <__kernel_rem_pio2+0x4c8>
 8011232:	9b06      	ldr	r3, [sp, #24]
 8011234:	429f      	cmp	r7, r3
 8011236:	ddea      	ble.n	801120e <__kernel_rem_pio2+0x49e>
 8011238:	9a06      	ldr	r2, [sp, #24]
 801123a:	ab48      	add	r3, sp, #288	; 0x120
 801123c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8011240:	e9c6 9a00 	strd	r9, sl, [r6]
 8011244:	3c01      	subs	r4, #1
 8011246:	e6fa      	b.n	801103e <__kernel_rem_pio2+0x2ce>
 8011248:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801124a:	2b02      	cmp	r3, #2
 801124c:	dc0b      	bgt.n	8011266 <__kernel_rem_pio2+0x4f6>
 801124e:	2b00      	cmp	r3, #0
 8011250:	dc39      	bgt.n	80112c6 <__kernel_rem_pio2+0x556>
 8011252:	d05d      	beq.n	8011310 <__kernel_rem_pio2+0x5a0>
 8011254:	9b02      	ldr	r3, [sp, #8]
 8011256:	f003 0007 	and.w	r0, r3, #7
 801125a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801125e:	ecbd 8b02 	vpop	{d8}
 8011262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011266:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8011268:	2b03      	cmp	r3, #3
 801126a:	d1f3      	bne.n	8011254 <__kernel_rem_pio2+0x4e4>
 801126c:	9b05      	ldr	r3, [sp, #20]
 801126e:	9500      	str	r5, [sp, #0]
 8011270:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011274:	eb0d 0403 	add.w	r4, sp, r3
 8011278:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801127c:	46a2      	mov	sl, r4
 801127e:	9b00      	ldr	r3, [sp, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	f1aa 0a08 	sub.w	sl, sl, #8
 8011286:	dc69      	bgt.n	801135c <__kernel_rem_pio2+0x5ec>
 8011288:	46aa      	mov	sl, r5
 801128a:	f1ba 0f01 	cmp.w	sl, #1
 801128e:	f1a4 0408 	sub.w	r4, r4, #8
 8011292:	f300 8083 	bgt.w	801139c <__kernel_rem_pio2+0x62c>
 8011296:	9c05      	ldr	r4, [sp, #20]
 8011298:	ab48      	add	r3, sp, #288	; 0x120
 801129a:	441c      	add	r4, r3
 801129c:	2000      	movs	r0, #0
 801129e:	2100      	movs	r1, #0
 80112a0:	2d01      	cmp	r5, #1
 80112a2:	f300 809a 	bgt.w	80113da <__kernel_rem_pio2+0x66a>
 80112a6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80112aa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80112ae:	f1bb 0f00 	cmp.w	fp, #0
 80112b2:	f040 8098 	bne.w	80113e6 <__kernel_rem_pio2+0x676>
 80112b6:	9b04      	ldr	r3, [sp, #16]
 80112b8:	e9c3 7800 	strd	r7, r8, [r3]
 80112bc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80112c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80112c4:	e7c6      	b.n	8011254 <__kernel_rem_pio2+0x4e4>
 80112c6:	9e05      	ldr	r6, [sp, #20]
 80112c8:	ab48      	add	r3, sp, #288	; 0x120
 80112ca:	441e      	add	r6, r3
 80112cc:	462c      	mov	r4, r5
 80112ce:	2000      	movs	r0, #0
 80112d0:	2100      	movs	r1, #0
 80112d2:	2c00      	cmp	r4, #0
 80112d4:	da33      	bge.n	801133e <__kernel_rem_pio2+0x5ce>
 80112d6:	f1bb 0f00 	cmp.w	fp, #0
 80112da:	d036      	beq.n	801134a <__kernel_rem_pio2+0x5da>
 80112dc:	4602      	mov	r2, r0
 80112de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80112e2:	9c04      	ldr	r4, [sp, #16]
 80112e4:	e9c4 2300 	strd	r2, r3, [r4]
 80112e8:	4602      	mov	r2, r0
 80112ea:	460b      	mov	r3, r1
 80112ec:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80112f0:	f7ee ffe2 	bl	80002b8 <__aeabi_dsub>
 80112f4:	ae4a      	add	r6, sp, #296	; 0x128
 80112f6:	2401      	movs	r4, #1
 80112f8:	42a5      	cmp	r5, r4
 80112fa:	da29      	bge.n	8011350 <__kernel_rem_pio2+0x5e0>
 80112fc:	f1bb 0f00 	cmp.w	fp, #0
 8011300:	d002      	beq.n	8011308 <__kernel_rem_pio2+0x598>
 8011302:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011306:	4619      	mov	r1, r3
 8011308:	9b04      	ldr	r3, [sp, #16]
 801130a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801130e:	e7a1      	b.n	8011254 <__kernel_rem_pio2+0x4e4>
 8011310:	9c05      	ldr	r4, [sp, #20]
 8011312:	ab48      	add	r3, sp, #288	; 0x120
 8011314:	441c      	add	r4, r3
 8011316:	2000      	movs	r0, #0
 8011318:	2100      	movs	r1, #0
 801131a:	2d00      	cmp	r5, #0
 801131c:	da09      	bge.n	8011332 <__kernel_rem_pio2+0x5c2>
 801131e:	f1bb 0f00 	cmp.w	fp, #0
 8011322:	d002      	beq.n	801132a <__kernel_rem_pio2+0x5ba>
 8011324:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011328:	4619      	mov	r1, r3
 801132a:	9b04      	ldr	r3, [sp, #16]
 801132c:	e9c3 0100 	strd	r0, r1, [r3]
 8011330:	e790      	b.n	8011254 <__kernel_rem_pio2+0x4e4>
 8011332:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011336:	f7ee ffc1 	bl	80002bc <__adddf3>
 801133a:	3d01      	subs	r5, #1
 801133c:	e7ed      	b.n	801131a <__kernel_rem_pio2+0x5aa>
 801133e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011342:	f7ee ffbb 	bl	80002bc <__adddf3>
 8011346:	3c01      	subs	r4, #1
 8011348:	e7c3      	b.n	80112d2 <__kernel_rem_pio2+0x562>
 801134a:	4602      	mov	r2, r0
 801134c:	460b      	mov	r3, r1
 801134e:	e7c8      	b.n	80112e2 <__kernel_rem_pio2+0x572>
 8011350:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011354:	f7ee ffb2 	bl	80002bc <__adddf3>
 8011358:	3401      	adds	r4, #1
 801135a:	e7cd      	b.n	80112f8 <__kernel_rem_pio2+0x588>
 801135c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011360:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011364:	9b00      	ldr	r3, [sp, #0]
 8011366:	3b01      	subs	r3, #1
 8011368:	9300      	str	r3, [sp, #0]
 801136a:	4632      	mov	r2, r6
 801136c:	463b      	mov	r3, r7
 801136e:	4640      	mov	r0, r8
 8011370:	4649      	mov	r1, r9
 8011372:	f7ee ffa3 	bl	80002bc <__adddf3>
 8011376:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801137a:	4602      	mov	r2, r0
 801137c:	460b      	mov	r3, r1
 801137e:	4640      	mov	r0, r8
 8011380:	4649      	mov	r1, r9
 8011382:	f7ee ff99 	bl	80002b8 <__aeabi_dsub>
 8011386:	4632      	mov	r2, r6
 8011388:	463b      	mov	r3, r7
 801138a:	f7ee ff97 	bl	80002bc <__adddf3>
 801138e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011392:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011396:	ed8a 7b00 	vstr	d7, [sl]
 801139a:	e770      	b.n	801127e <__kernel_rem_pio2+0x50e>
 801139c:	e9d4 8900 	ldrd	r8, r9, [r4]
 80113a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80113a4:	4640      	mov	r0, r8
 80113a6:	4632      	mov	r2, r6
 80113a8:	463b      	mov	r3, r7
 80113aa:	4649      	mov	r1, r9
 80113ac:	f7ee ff86 	bl	80002bc <__adddf3>
 80113b0:	e9cd 0100 	strd	r0, r1, [sp]
 80113b4:	4602      	mov	r2, r0
 80113b6:	460b      	mov	r3, r1
 80113b8:	4640      	mov	r0, r8
 80113ba:	4649      	mov	r1, r9
 80113bc:	f7ee ff7c 	bl	80002b8 <__aeabi_dsub>
 80113c0:	4632      	mov	r2, r6
 80113c2:	463b      	mov	r3, r7
 80113c4:	f7ee ff7a 	bl	80002bc <__adddf3>
 80113c8:	ed9d 7b00 	vldr	d7, [sp]
 80113cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80113d0:	ed84 7b00 	vstr	d7, [r4]
 80113d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80113d8:	e757      	b.n	801128a <__kernel_rem_pio2+0x51a>
 80113da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80113de:	f7ee ff6d 	bl	80002bc <__adddf3>
 80113e2:	3d01      	subs	r5, #1
 80113e4:	e75c      	b.n	80112a0 <__kernel_rem_pio2+0x530>
 80113e6:	9b04      	ldr	r3, [sp, #16]
 80113e8:	9a04      	ldr	r2, [sp, #16]
 80113ea:	601f      	str	r7, [r3, #0]
 80113ec:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80113f0:	605c      	str	r4, [r3, #4]
 80113f2:	609d      	str	r5, [r3, #8]
 80113f4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80113f8:	60d3      	str	r3, [r2, #12]
 80113fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80113fe:	6110      	str	r0, [r2, #16]
 8011400:	6153      	str	r3, [r2, #20]
 8011402:	e727      	b.n	8011254 <__kernel_rem_pio2+0x4e4>
 8011404:	41700000 	.word	0x41700000
 8011408:	3e700000 	.word	0x3e700000
 801140c:	00000000 	.word	0x00000000

08011410 <scalbn>:
 8011410:	b570      	push	{r4, r5, r6, lr}
 8011412:	ec55 4b10 	vmov	r4, r5, d0
 8011416:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801141a:	4606      	mov	r6, r0
 801141c:	462b      	mov	r3, r5
 801141e:	b999      	cbnz	r1, 8011448 <scalbn+0x38>
 8011420:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011424:	4323      	orrs	r3, r4
 8011426:	d03f      	beq.n	80114a8 <scalbn+0x98>
 8011428:	4b35      	ldr	r3, [pc, #212]	; (8011500 <scalbn+0xf0>)
 801142a:	4629      	mov	r1, r5
 801142c:	ee10 0a10 	vmov	r0, s0
 8011430:	2200      	movs	r2, #0
 8011432:	f7ef f8f9 	bl	8000628 <__aeabi_dmul>
 8011436:	4b33      	ldr	r3, [pc, #204]	; (8011504 <scalbn+0xf4>)
 8011438:	429e      	cmp	r6, r3
 801143a:	4604      	mov	r4, r0
 801143c:	460d      	mov	r5, r1
 801143e:	da10      	bge.n	8011462 <scalbn+0x52>
 8011440:	a327      	add	r3, pc, #156	; (adr r3, 80114e0 <scalbn+0xd0>)
 8011442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011446:	e01f      	b.n	8011488 <scalbn+0x78>
 8011448:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801144c:	4291      	cmp	r1, r2
 801144e:	d10c      	bne.n	801146a <scalbn+0x5a>
 8011450:	ee10 2a10 	vmov	r2, s0
 8011454:	4620      	mov	r0, r4
 8011456:	4629      	mov	r1, r5
 8011458:	f7ee ff30 	bl	80002bc <__adddf3>
 801145c:	4604      	mov	r4, r0
 801145e:	460d      	mov	r5, r1
 8011460:	e022      	b.n	80114a8 <scalbn+0x98>
 8011462:	460b      	mov	r3, r1
 8011464:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011468:	3936      	subs	r1, #54	; 0x36
 801146a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801146e:	4296      	cmp	r6, r2
 8011470:	dd0d      	ble.n	801148e <scalbn+0x7e>
 8011472:	2d00      	cmp	r5, #0
 8011474:	a11c      	add	r1, pc, #112	; (adr r1, 80114e8 <scalbn+0xd8>)
 8011476:	e9d1 0100 	ldrd	r0, r1, [r1]
 801147a:	da02      	bge.n	8011482 <scalbn+0x72>
 801147c:	a11c      	add	r1, pc, #112	; (adr r1, 80114f0 <scalbn+0xe0>)
 801147e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011482:	a319      	add	r3, pc, #100	; (adr r3, 80114e8 <scalbn+0xd8>)
 8011484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011488:	f7ef f8ce 	bl	8000628 <__aeabi_dmul>
 801148c:	e7e6      	b.n	801145c <scalbn+0x4c>
 801148e:	1872      	adds	r2, r6, r1
 8011490:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011494:	428a      	cmp	r2, r1
 8011496:	dcec      	bgt.n	8011472 <scalbn+0x62>
 8011498:	2a00      	cmp	r2, #0
 801149a:	dd08      	ble.n	80114ae <scalbn+0x9e>
 801149c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80114a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80114a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80114a8:	ec45 4b10 	vmov	d0, r4, r5
 80114ac:	bd70      	pop	{r4, r5, r6, pc}
 80114ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80114b2:	da08      	bge.n	80114c6 <scalbn+0xb6>
 80114b4:	2d00      	cmp	r5, #0
 80114b6:	a10a      	add	r1, pc, #40	; (adr r1, 80114e0 <scalbn+0xd0>)
 80114b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114bc:	dac0      	bge.n	8011440 <scalbn+0x30>
 80114be:	a10e      	add	r1, pc, #56	; (adr r1, 80114f8 <scalbn+0xe8>)
 80114c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114c4:	e7bc      	b.n	8011440 <scalbn+0x30>
 80114c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80114ca:	3236      	adds	r2, #54	; 0x36
 80114cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80114d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80114d4:	4620      	mov	r0, r4
 80114d6:	4b0c      	ldr	r3, [pc, #48]	; (8011508 <scalbn+0xf8>)
 80114d8:	2200      	movs	r2, #0
 80114da:	e7d5      	b.n	8011488 <scalbn+0x78>
 80114dc:	f3af 8000 	nop.w
 80114e0:	c2f8f359 	.word	0xc2f8f359
 80114e4:	01a56e1f 	.word	0x01a56e1f
 80114e8:	8800759c 	.word	0x8800759c
 80114ec:	7e37e43c 	.word	0x7e37e43c
 80114f0:	8800759c 	.word	0x8800759c
 80114f4:	fe37e43c 	.word	0xfe37e43c
 80114f8:	c2f8f359 	.word	0xc2f8f359
 80114fc:	81a56e1f 	.word	0x81a56e1f
 8011500:	43500000 	.word	0x43500000
 8011504:	ffff3cb0 	.word	0xffff3cb0
 8011508:	3c900000 	.word	0x3c900000
 801150c:	00000000 	.word	0x00000000

08011510 <floor>:
 8011510:	ec51 0b10 	vmov	r0, r1, d0
 8011514:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801151c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8011520:	2e13      	cmp	r6, #19
 8011522:	ee10 5a10 	vmov	r5, s0
 8011526:	ee10 8a10 	vmov	r8, s0
 801152a:	460c      	mov	r4, r1
 801152c:	dc31      	bgt.n	8011592 <floor+0x82>
 801152e:	2e00      	cmp	r6, #0
 8011530:	da14      	bge.n	801155c <floor+0x4c>
 8011532:	a333      	add	r3, pc, #204	; (adr r3, 8011600 <floor+0xf0>)
 8011534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011538:	f7ee fec0 	bl	80002bc <__adddf3>
 801153c:	2200      	movs	r2, #0
 801153e:	2300      	movs	r3, #0
 8011540:	f7ef fb02 	bl	8000b48 <__aeabi_dcmpgt>
 8011544:	b138      	cbz	r0, 8011556 <floor+0x46>
 8011546:	2c00      	cmp	r4, #0
 8011548:	da53      	bge.n	80115f2 <floor+0xe2>
 801154a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801154e:	4325      	orrs	r5, r4
 8011550:	d052      	beq.n	80115f8 <floor+0xe8>
 8011552:	4c2d      	ldr	r4, [pc, #180]	; (8011608 <floor+0xf8>)
 8011554:	2500      	movs	r5, #0
 8011556:	4621      	mov	r1, r4
 8011558:	4628      	mov	r0, r5
 801155a:	e024      	b.n	80115a6 <floor+0x96>
 801155c:	4f2b      	ldr	r7, [pc, #172]	; (801160c <floor+0xfc>)
 801155e:	4137      	asrs	r7, r6
 8011560:	ea01 0307 	and.w	r3, r1, r7
 8011564:	4303      	orrs	r3, r0
 8011566:	d01e      	beq.n	80115a6 <floor+0x96>
 8011568:	a325      	add	r3, pc, #148	; (adr r3, 8011600 <floor+0xf0>)
 801156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156e:	f7ee fea5 	bl	80002bc <__adddf3>
 8011572:	2200      	movs	r2, #0
 8011574:	2300      	movs	r3, #0
 8011576:	f7ef fae7 	bl	8000b48 <__aeabi_dcmpgt>
 801157a:	2800      	cmp	r0, #0
 801157c:	d0eb      	beq.n	8011556 <floor+0x46>
 801157e:	2c00      	cmp	r4, #0
 8011580:	bfbe      	ittt	lt
 8011582:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011586:	4133      	asrlt	r3, r6
 8011588:	18e4      	addlt	r4, r4, r3
 801158a:	ea24 0407 	bic.w	r4, r4, r7
 801158e:	2500      	movs	r5, #0
 8011590:	e7e1      	b.n	8011556 <floor+0x46>
 8011592:	2e33      	cmp	r6, #51	; 0x33
 8011594:	dd0b      	ble.n	80115ae <floor+0x9e>
 8011596:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801159a:	d104      	bne.n	80115a6 <floor+0x96>
 801159c:	ee10 2a10 	vmov	r2, s0
 80115a0:	460b      	mov	r3, r1
 80115a2:	f7ee fe8b 	bl	80002bc <__adddf3>
 80115a6:	ec41 0b10 	vmov	d0, r0, r1
 80115aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115ae:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80115b2:	f04f 37ff 	mov.w	r7, #4294967295
 80115b6:	40df      	lsrs	r7, r3
 80115b8:	4238      	tst	r0, r7
 80115ba:	d0f4      	beq.n	80115a6 <floor+0x96>
 80115bc:	a310      	add	r3, pc, #64	; (adr r3, 8011600 <floor+0xf0>)
 80115be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c2:	f7ee fe7b 	bl	80002bc <__adddf3>
 80115c6:	2200      	movs	r2, #0
 80115c8:	2300      	movs	r3, #0
 80115ca:	f7ef fabd 	bl	8000b48 <__aeabi_dcmpgt>
 80115ce:	2800      	cmp	r0, #0
 80115d0:	d0c1      	beq.n	8011556 <floor+0x46>
 80115d2:	2c00      	cmp	r4, #0
 80115d4:	da0a      	bge.n	80115ec <floor+0xdc>
 80115d6:	2e14      	cmp	r6, #20
 80115d8:	d101      	bne.n	80115de <floor+0xce>
 80115da:	3401      	adds	r4, #1
 80115dc:	e006      	b.n	80115ec <floor+0xdc>
 80115de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80115e2:	2301      	movs	r3, #1
 80115e4:	40b3      	lsls	r3, r6
 80115e6:	441d      	add	r5, r3
 80115e8:	45a8      	cmp	r8, r5
 80115ea:	d8f6      	bhi.n	80115da <floor+0xca>
 80115ec:	ea25 0507 	bic.w	r5, r5, r7
 80115f0:	e7b1      	b.n	8011556 <floor+0x46>
 80115f2:	2500      	movs	r5, #0
 80115f4:	462c      	mov	r4, r5
 80115f6:	e7ae      	b.n	8011556 <floor+0x46>
 80115f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80115fc:	e7ab      	b.n	8011556 <floor+0x46>
 80115fe:	bf00      	nop
 8011600:	8800759c 	.word	0x8800759c
 8011604:	7e37e43c 	.word	0x7e37e43c
 8011608:	bff00000 	.word	0xbff00000
 801160c:	000fffff 	.word	0x000fffff

08011610 <_close>:
 8011610:	4b02      	ldr	r3, [pc, #8]	; (801161c <_close+0xc>)
 8011612:	2258      	movs	r2, #88	; 0x58
 8011614:	601a      	str	r2, [r3, #0]
 8011616:	f04f 30ff 	mov.w	r0, #4294967295
 801161a:	4770      	bx	lr
 801161c:	200081b0 	.word	0x200081b0

08011620 <_fstat>:
 8011620:	4b02      	ldr	r3, [pc, #8]	; (801162c <_fstat+0xc>)
 8011622:	2258      	movs	r2, #88	; 0x58
 8011624:	601a      	str	r2, [r3, #0]
 8011626:	f04f 30ff 	mov.w	r0, #4294967295
 801162a:	4770      	bx	lr
 801162c:	200081b0 	.word	0x200081b0

08011630 <_getpid>:
 8011630:	4b02      	ldr	r3, [pc, #8]	; (801163c <_getpid+0xc>)
 8011632:	2258      	movs	r2, #88	; 0x58
 8011634:	601a      	str	r2, [r3, #0]
 8011636:	f04f 30ff 	mov.w	r0, #4294967295
 801163a:	4770      	bx	lr
 801163c:	200081b0 	.word	0x200081b0

08011640 <_isatty>:
 8011640:	4b02      	ldr	r3, [pc, #8]	; (801164c <_isatty+0xc>)
 8011642:	2258      	movs	r2, #88	; 0x58
 8011644:	601a      	str	r2, [r3, #0]
 8011646:	2000      	movs	r0, #0
 8011648:	4770      	bx	lr
 801164a:	bf00      	nop
 801164c:	200081b0 	.word	0x200081b0

08011650 <_kill>:
 8011650:	4b02      	ldr	r3, [pc, #8]	; (801165c <_kill+0xc>)
 8011652:	2258      	movs	r2, #88	; 0x58
 8011654:	601a      	str	r2, [r3, #0]
 8011656:	f04f 30ff 	mov.w	r0, #4294967295
 801165a:	4770      	bx	lr
 801165c:	200081b0 	.word	0x200081b0

08011660 <_lseek>:
 8011660:	4b02      	ldr	r3, [pc, #8]	; (801166c <_lseek+0xc>)
 8011662:	2258      	movs	r2, #88	; 0x58
 8011664:	601a      	str	r2, [r3, #0]
 8011666:	f04f 30ff 	mov.w	r0, #4294967295
 801166a:	4770      	bx	lr
 801166c:	200081b0 	.word	0x200081b0

08011670 <_read>:
 8011670:	4b02      	ldr	r3, [pc, #8]	; (801167c <_read+0xc>)
 8011672:	2258      	movs	r2, #88	; 0x58
 8011674:	601a      	str	r2, [r3, #0]
 8011676:	f04f 30ff 	mov.w	r0, #4294967295
 801167a:	4770      	bx	lr
 801167c:	200081b0 	.word	0x200081b0

08011680 <_sbrk>:
 8011680:	4a04      	ldr	r2, [pc, #16]	; (8011694 <_sbrk+0x14>)
 8011682:	6811      	ldr	r1, [r2, #0]
 8011684:	4603      	mov	r3, r0
 8011686:	b909      	cbnz	r1, 801168c <_sbrk+0xc>
 8011688:	4903      	ldr	r1, [pc, #12]	; (8011698 <_sbrk+0x18>)
 801168a:	6011      	str	r1, [r2, #0]
 801168c:	6810      	ldr	r0, [r2, #0]
 801168e:	4403      	add	r3, r0
 8011690:	6013      	str	r3, [r2, #0]
 8011692:	4770      	bx	lr
 8011694:	20008380 	.word	0x20008380
 8011698:	20008388 	.word	0x20008388

0801169c <_write>:
 801169c:	4b02      	ldr	r3, [pc, #8]	; (80116a8 <_write+0xc>)
 801169e:	2258      	movs	r2, #88	; 0x58
 80116a0:	601a      	str	r2, [r3, #0]
 80116a2:	f04f 30ff 	mov.w	r0, #4294967295
 80116a6:	4770      	bx	lr
 80116a8:	200081b0 	.word	0x200081b0

080116ac <_exit>:
 80116ac:	e7fe      	b.n	80116ac <_exit>
	...

080116b0 <_init>:
 80116b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116b2:	bf00      	nop
 80116b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116b6:	bc08      	pop	{r3}
 80116b8:	469e      	mov	lr, r3
 80116ba:	4770      	bx	lr

080116bc <_fini>:
 80116bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116be:	bf00      	nop
 80116c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116c2:	bc08      	pop	{r3}
 80116c4:	469e      	mov	lr, r3
 80116c6:	4770      	bx	lr

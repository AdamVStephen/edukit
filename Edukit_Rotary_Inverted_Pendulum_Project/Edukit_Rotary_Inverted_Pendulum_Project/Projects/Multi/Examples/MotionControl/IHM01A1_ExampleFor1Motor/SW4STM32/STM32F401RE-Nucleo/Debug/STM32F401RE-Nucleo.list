
STM32F401RE-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d924  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001194  0800dac8  0800dac8  0001dac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ec5c  0800ec5c  0001ec5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800ec64  0800ec64  0001ec64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ec6c  0800ec6c  0001ec6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000850  20000000  0800ec70  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007b30  20000850  0800f4c0  00020850  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20008380  0800f4c0  00028380  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020850  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020880  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014c42  00000000  00000000  000208c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002a3b  00000000  00000000  00035505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001478  00000000  00000000  00037f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000ff4  00000000  00000000  000393b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000470c  00000000  00000000  0003a3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000143fb  00000000  00000000  0003eab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000955b4  00000000  00000000  00052eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006b90  00000000  00000000  000e8468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000dc  00000000  00000000  000eeff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000850 	.word	0x20000850
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800daac 	.word	0x0800daac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000854 	.word	0x20000854
 80001dc:	0800daac 	.word	0x0800daac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <L6474_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6474_AttachErrorHandler(void (*callback)(uint16_t))
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <L6474_AttachErrorHandler+0x1c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000870 	.word	0x20000870

08000f74 <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <L6474_AttachFlagInterrupt+0x1c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	2000086c 	.word	0x2000086c

08000f94 <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	21a8      	movs	r1, #168	; 0xa8
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 fb16 	bl	80025d4 <L6474_SendCommand>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	21b8      	movs	r1, #184	; 0xb8
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fb08 	bl	80025d4 <L6474_SendCommand>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000fdc:	4b71      	ldr	r3, [pc, #452]	; (80011a4 <L6474_CmdGetParam+0x1d8>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8000fec:	2300      	movs	r3, #0
 8000fee:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8000ff0:	4b6d      	ldr	r3, [pc, #436]	; (80011a8 <L6474_CmdGetParam+0x1dc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000ff6:	7cbb      	ldrb	r3, [r7, #18]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <L6474_CmdGetParam+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8000ffc:	f002 fa0e 	bl	800341c <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001000:	2300      	movs	r3, #0
 8001002:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	e02b      	b.n	8001062 <L6474_CmdGetParam+0x96>
    {
      spiTxBursts[0][i] = L6474_NOP;
 800100a:	4a68      	ldr	r2, [pc, #416]	; (80011ac <L6474_CmdGetParam+0x1e0>)
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	4413      	add	r3, r2
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 8001014:	4a65      	ldr	r2, [pc, #404]	; (80011ac <L6474_CmdGetParam+0x1e0>)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	4413      	add	r3, r2
 800101a:	3303      	adds	r3, #3
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8001020:	4a62      	ldr	r2, [pc, #392]	; (80011ac <L6474_CmdGetParam+0x1e0>)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	4413      	add	r3, r2
 8001026:	3306      	adds	r3, #6
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 800102c:	4a5f      	ldr	r2, [pc, #380]	; (80011ac <L6474_CmdGetParam+0x1e0>)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	4413      	add	r3, r2
 8001032:	3309      	adds	r3, #9
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 8001038:	4a5d      	ldr	r2, [pc, #372]	; (80011b0 <L6474_CmdGetParam+0x1e4>)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	4413      	add	r3, r2
 800103e:	3303      	adds	r3, #3
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 8001044:	4a5a      	ldr	r2, [pc, #360]	; (80011b0 <L6474_CmdGetParam+0x1e4>)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	4413      	add	r3, r2
 800104a:	3306      	adds	r3, #6
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 8001050:	4a57      	ldr	r2, [pc, #348]	; (80011b0 <L6474_CmdGetParam+0x1e4>)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	4413      	add	r3, r2
 8001056:	3309      	adds	r3, #9
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	4b50      	ldr	r3, [pc, #320]	; (80011a4 <L6474_CmdGetParam+0x1d8>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	4293      	cmp	r3, r2
 800106e:	d3cc      	bcc.n	800100a <L6474_CmdGetParam+0x3e>
    }
    switch (param)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	2b18      	cmp	r3, #24
 8001076:	d84d      	bhi.n	8001114 <L6474_CmdGetParam+0x148>
 8001078:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <L6474_CmdGetParam+0xb4>)
 800107a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107e:	bf00      	nop
 8001080:	080010e5 	.word	0x080010e5
 8001084:	080010fb 	.word	0x080010fb
 8001088:	080010e5 	.word	0x080010e5
 800108c:	08001115 	.word	0x08001115
 8001090:	08001115 	.word	0x08001115
 8001094:	08001115 	.word	0x08001115
 8001098:	08001115 	.word	0x08001115
 800109c:	08001115 	.word	0x08001115
 80010a0:	08001115 	.word	0x08001115
 80010a4:	08001115 	.word	0x08001115
 80010a8:	08001115 	.word	0x08001115
 80010ac:	08001115 	.word	0x08001115
 80010b0:	08001115 	.word	0x08001115
 80010b4:	08001115 	.word	0x08001115
 80010b8:	08001115 	.word	0x08001115
 80010bc:	08001115 	.word	0x08001115
 80010c0:	08001115 	.word	0x08001115
 80010c4:	08001115 	.word	0x08001115
 80010c8:	08001115 	.word	0x08001115
 80010cc:	08001115 	.word	0x08001115
 80010d0:	08001115 	.word	0x08001115
 80010d4:	08001115 	.word	0x08001115
 80010d8:	08001115 	.word	0x08001115
 80010dc:	080010fb 	.word	0x080010fb
 80010e0:	080010fb 	.word	0x080010fb
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	7c7b      	ldrb	r3, [r7, #17]
 80010ea:	f042 0220 	orr.w	r2, r2, #32
 80010ee:	b2d1      	uxtb	r1, r2
 80010f0:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <L6474_CmdGetParam+0x1e0>)
 80010f2:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 80010f4:	2303      	movs	r3, #3
 80010f6:	74fb      	strb	r3, [r7, #19]
        break;
 80010f8:	e018      	b.n	800112c <L6474_CmdGetParam+0x160>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	7c7b      	ldrb	r3, [r7, #17]
 8001100:	f042 0220 	orr.w	r2, r2, #32
 8001104:	b2d1      	uxtb	r1, r2
 8001106:	4a29      	ldr	r2, [pc, #164]	; (80011ac <L6474_CmdGetParam+0x1e0>)
 8001108:	4413      	add	r3, r2
 800110a:	460a      	mov	r2, r1
 800110c:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 800110e:	2302      	movs	r3, #2
 8001110:	74fb      	strb	r3, [r7, #19]
        break;
 8001112:	e00b      	b.n	800112c <L6474_CmdGetParam+0x160>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	7c7b      	ldrb	r3, [r7, #17]
 800111a:	f042 0220 	orr.w	r2, r2, #32
 800111e:	b2d1      	uxtb	r1, r2
 8001120:	4a22      	ldr	r2, [pc, #136]	; (80011ac <L6474_CmdGetParam+0x1e0>)
 8001122:	4413      	add	r3, r2
 8001124:	460a      	mov	r2, r1
 8001126:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 800112c:	f002 f96d 	bl	800340a <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001130:	2301      	movs	r3, #1
 8001132:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <L6474_CmdGetParam+0x1dc>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	f47f af58 	bne.w	8000ff0 <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001140:	7cfb      	ldrb	r3, [r7, #19]
 8001142:	f1c3 0303 	rsb	r3, r3, #3
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	e011      	b.n	800116e <L6474_CmdGetParam+0x1a2>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	4a16      	ldr	r2, [pc, #88]	; (80011ac <L6474_CmdGetParam+0x1e0>)
 8001154:	1898      	adds	r0, r3, r2
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <L6474_CmdGetParam+0x1e4>)
 8001160:	4413      	add	r3, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f002 f920 	bl	80033a8 <L6474_WriteBytes>
       i++)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
       i < L6474_CMD_ARG_MAX_NB_BYTES;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	2b03      	cmp	r3, #3
 8001172:	d9ea      	bls.n	800114a <L6474_CmdGetParam+0x17e>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001174:	7c7b      	ldrb	r3, [r7, #17]
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <L6474_CmdGetParam+0x1e4>)
 8001178:	4413      	add	r3, r2
 800117a:	78db      	ldrb	r3, [r3, #3]
 800117c:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 800117e:	7c7a      	ldrb	r2, [r7, #17]
 8001180:	490b      	ldr	r1, [pc, #44]	; (80011b0 <L6474_CmdGetParam+0x1e4>)
 8001182:	440a      	add	r2, r1
 8001184:	7992      	ldrb	r2, [r2, #6]
 8001186:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001188:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 800118a:	7c7a      	ldrb	r2, [r7, #17]
 800118c:	4908      	ldr	r1, [pc, #32]	; (80011b0 <L6474_CmdGetParam+0x1e4>)
 800118e:	440a      	add	r2, r1
 8001190:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8001192:	4313      	orrs	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001196:	f002 f941 	bl	800341c <L6474_Board_EnableIrq>
    
  return (spiRxData);
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000874 	.word	0x20000874
 80011a8:	20000890 	.word	0x20000890
 80011ac:	20000878 	.word	0x20000878
 80011b0:	20000884 	.word	0x20000884

080011b4 <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80011be:	4b3c      	ldr	r3, [pc, #240]	; (80012b0 <L6474_CmdGetStatus+0xfc>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	3b01      	subs	r3, #1
 80011cc:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 80011ce:	2300      	movs	r3, #0
 80011d0:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 80011d2:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <L6474_CmdGetStatus+0x100>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80011d8:	7afb      	ldrb	r3, [r7, #11]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 80011de:	f002 f91d 	bl	800341c <L6474_Board_EnableIrq>
      itDisable = FALSE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	e01f      	b.n	800122c <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 80011ec:	4a32      	ldr	r2, [pc, #200]	; (80012b8 <L6474_CmdGetStatus+0x104>)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 80011f6:	4a30      	ldr	r2, [pc, #192]	; (80012b8 <L6474_CmdGetStatus+0x104>)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	3303      	adds	r3, #3
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 8001202:	4a2d      	ldr	r2, [pc, #180]	; (80012b8 <L6474_CmdGetStatus+0x104>)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	3306      	adds	r3, #6
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 800120e:	4a2b      	ldr	r2, [pc, #172]	; (80012bc <L6474_CmdGetStatus+0x108>)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	3303      	adds	r3, #3
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 800121a:	4a28      	ldr	r2, [pc, #160]	; (80012bc <L6474_CmdGetStatus+0x108>)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	3306      	adds	r3, #6
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <L6474_CmdGetStatus+0xfc>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4293      	cmp	r3, r2
 8001238:	d3d8      	bcc.n	80011ec <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 800123a:	7abb      	ldrb	r3, [r7, #10]
 800123c:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <L6474_CmdGetStatus+0x104>)
 800123e:	21d0      	movs	r1, #208	; 0xd0
 8001240:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8001242:	f002 f8e2 	bl	800340a <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001246:	2301      	movs	r3, #1
 8001248:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <L6474_CmdGetStatus+0x100>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1be      	bne.n	80011d2 <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	e011      	b.n	800127e <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <L6474_CmdGetStatus+0x104>)
 8001264:	1898      	adds	r0, r3, r2
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	4a13      	ldr	r2, [pc, #76]	; (80012bc <L6474_CmdGetStatus+0x108>)
 8001270:	4413      	add	r3, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f002 f898 	bl	80033a8 <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3301      	adds	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d9ea      	bls.n	800125a <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8001284:	7abb      	ldrb	r3, [r7, #10]
 8001286:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <L6474_CmdGetStatus+0x108>)
 8001288:	4413      	add	r3, r2
 800128a:	78db      	ldrb	r3, [r3, #3]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b21a      	sxth	r2, r3
 8001290:	7abb      	ldrb	r3, [r7, #10]
 8001292:	490a      	ldr	r1, [pc, #40]	; (80012bc <L6474_CmdGetStatus+0x108>)
 8001294:	440b      	add	r3, r1
 8001296:	799b      	ldrb	r3, [r3, #6]
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21b      	sxth	r3, r3
 800129e:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 80012a0:	f002 f8bc 	bl	800341c <L6474_Board_EnableIrq>
  
  return (status);
 80012a4:	893b      	ldrh	r3, [r7, #8]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000874 	.word	0x20000874
 80012b4:	20000890 	.word	0x20000890
 80012b8:	20000878 	.word	0x20000878
 80012bc:	20000884 	.word	0x20000884

080012c0 <L6474_CmdNop>:
 * @brief  Issues the Nop command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdNop(uint8_t deviceId)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_NOP);
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 f980 	bl	80025d4 <L6474_SendCommand>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80012ee:	4b69      	ldr	r3, [pc, #420]	; (8001494 <L6474_CmdSetParam+0x1b8>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	3b01      	subs	r3, #1
 80012fc:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 80012fe:	2300      	movs	r3, #0
 8001300:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 8001302:	4b65      	ldr	r3, [pc, #404]	; (8001498 <L6474_CmdSetParam+0x1bc>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8001308:	7cbb      	ldrb	r3, [r7, #18]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 800130e:	f002 f885 	bl	800341c <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001312:	2300      	movs	r3, #0
 8001314:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	e019      	b.n	8001350 <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 800131c:	4a5f      	ldr	r2, [pc, #380]	; (800149c <L6474_CmdSetParam+0x1c0>)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	4413      	add	r3, r2
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 8001326:	4a5d      	ldr	r2, [pc, #372]	; (800149c <L6474_CmdSetParam+0x1c0>)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	4413      	add	r3, r2
 800132c:	3303      	adds	r3, #3
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 8001332:	4a5a      	ldr	r2, [pc, #360]	; (800149c <L6474_CmdSetParam+0x1c0>)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	4413      	add	r3, r2
 8001338:	3306      	adds	r3, #6
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 800133e:	4a57      	ldr	r2, [pc, #348]	; (800149c <L6474_CmdSetParam+0x1c0>)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	4413      	add	r3, r2
 8001344:	3309      	adds	r3, #9
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	4b50      	ldr	r3, [pc, #320]	; (8001494 <L6474_CmdSetParam+0x1b8>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	461a      	mov	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	4293      	cmp	r3, r2
 800135c:	d3de      	bcc.n	800131c <L6474_CmdSetParam+0x40>
    }
    switch (param)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3b01      	subs	r3, #1
 8001362:	2b17      	cmp	r3, #23
 8001364:	d85c      	bhi.n	8001420 <L6474_CmdSetParam+0x144>
 8001366:	a201      	add	r2, pc, #4	; (adr r2, 800136c <L6474_CmdSetParam+0x90>)
 8001368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136c:	080013cd 	.word	0x080013cd
 8001370:	080013fd 	.word	0x080013fd
 8001374:	080013cd 	.word	0x080013cd
 8001378:	08001421 	.word	0x08001421
 800137c:	08001421 	.word	0x08001421
 8001380:	08001421 	.word	0x08001421
 8001384:	08001421 	.word	0x08001421
 8001388:	08001421 	.word	0x08001421
 800138c:	08001421 	.word	0x08001421
 8001390:	08001421 	.word	0x08001421
 8001394:	08001421 	.word	0x08001421
 8001398:	08001421 	.word	0x08001421
 800139c:	08001421 	.word	0x08001421
 80013a0:	08001421 	.word	0x08001421
 80013a4:	08001421 	.word	0x08001421
 80013a8:	08001421 	.word	0x08001421
 80013ac:	08001421 	.word	0x08001421
 80013b0:	08001421 	.word	0x08001421
 80013b4:	08001421 	.word	0x08001421
 80013b8:	08001421 	.word	0x08001421
 80013bc:	08001421 	.word	0x08001421
 80013c0:	08001421 	.word	0x08001421
 80013c4:	08001421 	.word	0x08001421
 80013c8:	080013fd 	.word	0x080013fd
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 80013cc:	7c7b      	ldrb	r3, [r7, #17]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	b2d1      	uxtb	r1, r2
 80013d2:	4a32      	ldr	r2, [pc, #200]	; (800149c <L6474_CmdSetParam+0x1c0>)
 80013d4:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	0c1a      	lsrs	r2, r3, #16
 80013da:	7c7b      	ldrb	r3, [r7, #17]
 80013dc:	b2d1      	uxtb	r1, r2
 80013de:	4a2f      	ldr	r2, [pc, #188]	; (800149c <L6474_CmdSetParam+0x1c0>)
 80013e0:	4413      	add	r3, r2
 80013e2:	460a      	mov	r2, r1
 80013e4:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	0a1a      	lsrs	r2, r3, #8
 80013ea:	7c7b      	ldrb	r3, [r7, #17]
 80013ec:	b2d1      	uxtb	r1, r2
 80013ee:	4a2b      	ldr	r2, [pc, #172]	; (800149c <L6474_CmdSetParam+0x1c0>)
 80013f0:	4413      	add	r3, r2
 80013f2:	460a      	mov	r2, r1
 80013f4:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 80013f6:	2303      	movs	r3, #3
 80013f8:	74fb      	strb	r3, [r7, #19]
        break;
 80013fa:	e01a      	b.n	8001432 <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 80013fc:	7c7b      	ldrb	r3, [r7, #17]
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	b2d1      	uxtb	r1, r2
 8001402:	4a26      	ldr	r2, [pc, #152]	; (800149c <L6474_CmdSetParam+0x1c0>)
 8001404:	4413      	add	r3, r2
 8001406:	460a      	mov	r2, r1
 8001408:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	0a1a      	lsrs	r2, r3, #8
 800140e:	7c7b      	ldrb	r3, [r7, #17]
 8001410:	b2d1      	uxtb	r1, r2
 8001412:	4a22      	ldr	r2, [pc, #136]	; (800149c <L6474_CmdSetParam+0x1c0>)
 8001414:	4413      	add	r3, r2
 8001416:	460a      	mov	r2, r1
 8001418:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 800141a:	2302      	movs	r3, #2
 800141c:	74fb      	strb	r3, [r7, #19]
        break;
 800141e:	e008      	b.n	8001432 <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 8001420:	7c7b      	ldrb	r3, [r7, #17]
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	b2d1      	uxtb	r1, r2
 8001426:	4a1d      	ldr	r2, [pc, #116]	; (800149c <L6474_CmdSetParam+0x1c0>)
 8001428:	4413      	add	r3, r2
 800142a:	460a      	mov	r2, r1
 800142c:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 8001432:	7c7b      	ldrb	r3, [r7, #17]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	b2d1      	uxtb	r1, r2
 8001438:	4a18      	ldr	r2, [pc, #96]	; (800149c <L6474_CmdSetParam+0x1c0>)
 800143a:	4413      	add	r3, r2
 800143c:	460a      	mov	r2, r1
 800143e:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8001440:	f001 ffe3 	bl	800340a <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001444:	2301      	movs	r3, #1
 8001446:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <L6474_CmdSetParam+0x1bc>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	f47f af57 	bne.w	8001302 <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 8001454:	7cfb      	ldrb	r3, [r7, #19]
 8001456:	f1c3 0303 	rsb	r3, r3, #3
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	e011      	b.n	8001482 <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	4a0d      	ldr	r2, [pc, #52]	; (800149c <L6474_CmdSetParam+0x1c0>)
 8001468:	1898      	adds	r0, r3, r2
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <L6474_CmdSetParam+0x1c4>)
 8001474:	4413      	add	r3, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f001 ff96 	bl	80033a8 <L6474_WriteBytes>
       i++)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	3301      	adds	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
       i < L6474_CMD_ARG_MAX_NB_BYTES;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2b03      	cmp	r3, #3
 8001486:	d9ea      	bls.n	800145e <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001488:	f001 ffc8 	bl	800341c <L6474_Board_EnableIrq>
}
 800148c:	bf00      	nop
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000874 	.word	0x20000874
 8001498:	20000890 	.word	0x20000890
 800149c:	20000878 	.word	0x20000878
 80014a0:	20000884 	.word	0x20000884

080014a4 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <L6474_Init+0x94>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f001 ffbc 	bl	8003430 <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 80014b8:	f002 f9e0 	bl	800387c <L6474_Board_SpiInit>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 80014c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014c6:	f001 f859 	bl	800257c <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <L6474_Init+0x94>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4618      	mov	r0, r3
 80014d2:	f002 f8fd 	bl	80036d0 <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <L6474_Init+0x94>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 f979 	bl	80037d4 <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 80014e2:	2001      	movs	r0, #1
 80014e4:	f001 ff86 	bl	80033f4 <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d106      	bne.n	80014fc <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <L6474_Init+0x94>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 f963 	bl	80027c0 <L6474_SetDeviceParamsToPredefinedValues>
 80014fa:	e006      	b.n	800150a <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <L6474_Init+0x94>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	f001 f8b7 	bl	8002678 <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <L6474_Init+0x94>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fd3f 	bl	8000f94 <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <L6474_Init+0x94>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fe49 	bl	80011b4 <L6474_CmdGetStatus>

  l6474DriverInstance++;
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <L6474_Init+0x94>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b03      	ldr	r3, [pc, #12]	; (8001538 <L6474_Init+0x94>)
 800152c:	801a      	strh	r2, [r3, #0]
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000892 	.word	0x20000892

0800153c <L6474_GetAcceleration>:
 * @brief Returns the acceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t L6474_GetAcceleration(uint8_t deviceId)
{                                                  
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].acceleration);
 8001546:	79fa      	ldrb	r2, [r7, #7]
 8001548:	4907      	ldr	r1, [pc, #28]	; (8001568 <L6474_GetAcceleration+0x2c>)
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	440b      	add	r3, r1
 8001554:	3318      	adds	r3, #24
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	b29b      	uxth	r3, r3
}            
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000894 	.word	0x20000894

0800156c <L6474_GetAnalogValue>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param L6474 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
float L6474_GetAnalogValue(uint8_t deviceId, uint32_t param)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue = L6474_CmdGetParam(deviceId, param);
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fd25 	bl	8000fcc <L6474_CmdGetParam>
 8001582:	60b8      	str	r0, [r7, #8]
  float value;
  switch (param)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	3b01      	subs	r3, #1
 8001588:	2b12      	cmp	r3, #18
 800158a:	d84b      	bhi.n	8001624 <L6474_GetAnalogValue+0xb8>
 800158c:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <L6474_GetAnalogValue+0x28>)
 800158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001592:	bf00      	nop
 8001594:	080015e1 	.word	0x080015e1
 8001598:	08001625 	.word	0x08001625
 800159c:	080015e1 	.word	0x080015e1
 80015a0:	08001625 	.word	0x08001625
 80015a4:	08001625 	.word	0x08001625
 80015a8:	08001625 	.word	0x08001625
 80015ac:	08001625 	.word	0x08001625
 80015b0:	08001625 	.word	0x08001625
 80015b4:	080015f5 	.word	0x080015f5
 80015b8:	08001625 	.word	0x08001625
 80015bc:	08001625 	.word	0x08001625
 80015c0:	08001625 	.word	0x08001625
 80015c4:	08001625 	.word	0x08001625
 80015c8:	08001625 	.word	0x08001625
 80015cc:	08001615 	.word	0x08001615
 80015d0:	08001615 	.word	0x08001615
 80015d4:	08001625 	.word	0x08001625
 80015d8:	08001625 	.word	0x08001625
 80015dc:	08001605 	.word	0x08001605
  {
    case L6474_ABS_POS:
    case L6474_MARK:
      value = (float) L6474_ConvertPosition(registerValue);
 80015e0:	68b8      	ldr	r0, [r7, #8]
 80015e2:	f000 ffab 	bl	800253c <L6474_ConvertPosition>
 80015e6:	ee07 0a90 	vmov	s15, r0
 80015ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ee:	edc7 7a03 	vstr	s15, [r7, #12]
      break;
 80015f2:	e01e      	b.n	8001632 <L6474_GetAnalogValue+0xc6>
    case L6474_TVAL:
      value = L6474_Tval_Par_to_Current(registerValue);    
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 fe89 	bl	8003310 <L6474_Tval_Par_to_Current>
 80015fe:	ed87 0a03 	vstr	s0, [r7, #12]
      break;
 8001602:	e016      	b.n	8001632 <L6474_GetAnalogValue+0xc6>
    case L6474_OCD_TH:
      value = L6474_Ocd_Par_to_Th(registerValue);    
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f001 fe45 	bl	8003298 <L6474_Ocd_Par_to_Th>
 800160e:	ed87 0a03 	vstr	s0, [r7, #12]
      break;      
 8001612:	e00e      	b.n	8001632 <L6474_GetAnalogValue+0xc6>
    case L6474_TON_MIN:
    case L6474_TOFF_MIN:
      value = L6474_Tmin_Par_to_Time(registerValue);
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f001 fe91 	bl	8003340 <L6474_Tmin_Par_to_Time>
 800161e:	ed87 0a03 	vstr	s0, [r7, #12]
      break;          
 8001622:	e006      	b.n	8001632 <L6474_GetAnalogValue+0xc6>
    default:
      value = (float) registerValue;
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162e:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  return value;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	ee07 3a90 	vmov	s15, r3
}
 8001638:	eeb0 0a67 	vmov.f32	s0, s15
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop

08001644 <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 800164e:	79fa      	ldrb	r2, [r7, #7]
 8001650:	4907      	ldr	r1, [pc, #28]	; (8001670 <L6474_GetCurrentSpeed+0x2c>)
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	3320      	adds	r3, #32
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	b29b      	uxth	r3, r3
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000894 	.word	0x20000894

08001674 <L6474_GetDeceleration>:
 * @brief Returns the deceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t L6474_GetDeceleration(uint8_t deviceId)
{                                                  
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].deceleration);
 800167e:	79fa      	ldrb	r2, [r7, #7]
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <L6474_GetDeceleration+0x2c>)
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	331a      	adds	r3, #26
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b29b      	uxth	r3, r3
}          
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000894 	.word	0x20000894

080016a4 <L6474_GetDeviceState>:
 * @brief Returns the device state
 * @param[in] deviceId (from 0 to 2)
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t L6474_GetDeviceState(uint8_t deviceId)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].motionState;
 80016ae:	79fa      	ldrb	r2, [r7, #7]
 80016b0:	4907      	ldr	r1, [pc, #28]	; (80016d0 <L6474_GetDeviceState+0x2c>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	3324      	adds	r3, #36	; 0x24
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b2db      	uxtb	r3, r3
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000894 	.word	0x20000894

080016d4 <L6474_GetDirection>:
 * @brief Get the motor current direction
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t L6474_GetDirection(uint8_t deviceId)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].direction;
 80016de:	79fa      	ldrb	r2, [r7, #7]
 80016e0:	4907      	ldr	r1, [pc, #28]	; (8001700 <L6474_GetDirection+0x2c>)
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	440b      	add	r3, r1
 80016ec:	3323      	adds	r3, #35	; 0x23
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b2db      	uxtb	r3, r3
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000894 	.word	0x20000894

08001704 <L6474_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval L6474_FW_VERSION
 **********************************************************/
uint32_t L6474_GetFwVersion(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return (L6474_FW_VERSION);
 8001708:	f44f 3385 	mov.w	r3, #68096	; 0x10a00
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <L6474_GetMotorHandle>:
/******************************************************//**
 * @brief  Return motor handle (pointer to the L6474 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* L6474_GetMotorHandle(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return (&l6474Drv);
 800171c:	4b02      	ldr	r3, [pc, #8]	; (8001728 <L6474_GetMotorHandle+0x10>)
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	20000000 	.word	0x20000000

0800172c <L6474_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t L6474_GetMark(uint8_t deviceId)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2103      	movs	r1, #3
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fc46 	bl	8000fcc <L6474_CmdGetParam>
 8001740:	4603      	mov	r3, r0
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fefa 	bl	800253c <L6474_ConvertPosition>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <L6474_GetMaxSpeed>:
 * @brief  Returns the max speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval maxSpeed in pps
 **********************************************************/
uint16_t L6474_GetMaxSpeed(uint8_t deviceId)
{                                                  
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].maxSpeed);
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <L6474_GetMaxSpeed+0x2c>)
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	440b      	add	r3, r1
 800176c:	331c      	adds	r3, #28
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000894 	.word	0x20000894

08001784 <L6474_GetMinSpeed>:
 * @brief  Returns the min speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval minSpeed in pps
 **********************************************************/
uint16_t L6474_GetMinSpeed(uint8_t deviceId)
{                                                  
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].minSpeed);
 800178e:	79fa      	ldrb	r2, [r7, #7]
 8001790:	4907      	ldr	r1, [pc, #28]	; (80017b0 <L6474_GetMinSpeed+0x2c>)
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	440b      	add	r3, r1
 800179c:	331e      	adds	r3, #30
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
}                                                     
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000894 	.word	0x20000894

080017b4 <L6474_GetNbDevices>:
/******************************************************//**
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t L6474_GetNbDevices(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return (numberOfDevices);
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <L6474_GetNbDevices+0x14>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	20000874 	.word	0x20000874

080017cc <L6474_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t L6474_GetPosition(uint8_t deviceId)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2101      	movs	r1, #1
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fbf6 	bl	8000fcc <L6474_CmdGetParam>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 feaa 	bl	800253c <L6474_ConvertPosition>
 80017e8:	4603      	mov	r3, r0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <L6474_GetStepMode>:
 * @brief Get the motor step mode
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t L6474_GetStepMode(uint8_t deviceId)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  motorStepMode_t stepMode;
  uint8_t stepSelValue;
  
  /* Get STEP_SEL field of step mode register  */
  stepSelValue = (uint8_t)((0x07 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE))|0x08) ;
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2116      	movs	r1, #22
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fbe2 	bl	8000fcc <L6474_CmdGetParam>
 8001808:	4603      	mov	r3, r0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f043 0308 	orr.w	r3, r3, #8
 8001816:	73bb      	strb	r3, [r7, #14]
  
   switch (stepSelValue)
 8001818:	7bbb      	ldrb	r3, [r7, #14]
 800181a:	3b08      	subs	r3, #8
 800181c:	2b04      	cmp	r3, #4
 800181e:	d81c      	bhi.n	800185a <L6474_GetStepMode+0x66>
 8001820:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <L6474_GetStepMode+0x34>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	0800183d 	.word	0x0800183d
 800182c:	08001843 	.word	0x08001843
 8001830:	08001849 	.word	0x08001849
 8001834:	0800184f 	.word	0x0800184f
 8001838:	08001855 	.word	0x08001855
  {
    case L6474_STEP_SEL_1:
      stepMode = STEP_MODE_FULL;
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
      break;
 8001840:	e00e      	b.n	8001860 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_2:
      stepMode = STEP_MODE_HALF;
 8001842:	2301      	movs	r3, #1
 8001844:	73fb      	strb	r3, [r7, #15]
      break;    
 8001846:	e00b      	b.n	8001860 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_4:
      stepMode = STEP_MODE_1_4;
 8001848:	2302      	movs	r3, #2
 800184a:	73fb      	strb	r3, [r7, #15]
      break;        
 800184c:	e008      	b.n	8001860 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_8:
      stepMode = STEP_MODE_1_8;
 800184e:	2303      	movs	r3, #3
 8001850:	73fb      	strb	r3, [r7, #15]
      break;       
 8001852:	e005      	b.n	8001860 <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_16:
      stepMode = STEP_MODE_1_16;
 8001854:	2304      	movs	r3, #4
 8001856:	73fb      	strb	r3, [r7, #15]
      break;
 8001858:	e002      	b.n	8001860 <L6474_GetStepMode+0x6c>
    default:
      stepMode = STEP_MODE_UNKNOW;
 800185a:	23fe      	movs	r3, #254	; 0xfe
 800185c:	73fb      	strb	r3, [r7, #15]
      break;       
 800185e:	bf00      	nop
  }
  
  return stepMode;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop

0800186c <L6474_GetStopMode>:
 * @brief Get the selected stop mode
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t L6474_GetStopMode(uint8_t deviceId)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].stopMode;
 8001876:	79fa      	ldrb	r2, [r7, #7]
 8001878:	4907      	ldr	r1, [pc, #28]	; (8001898 <L6474_GetStopMode+0x2c>)
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	3325      	adds	r3, #37	; 0x25
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000894 	.word	0x20000894

0800189c <L6474_GoHome>:
 * @brief  Requests the motor to move to the home position (ABS_POSITION = 0)
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoHome(uint8_t deviceId)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  L6474_GoTo(deviceId, 0);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f81e 	bl	80018ec <L6474_GoTo>
} 
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <L6474_GoMark>:
 * @brief  Requests the motor to move to the mark position 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoMark(uint8_t deviceId)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  uint32_t mark;

  mark = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2103      	movs	r1, #3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fb80 	bl	8000fcc <L6474_CmdGetParam>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fe34 	bl	800253c <L6474_ConvertPosition>
 80018d4:	4603      	mov	r3, r0
 80018d6:	60fb      	str	r3, [r7, #12]
  L6474_GoTo(deviceId,mark);  
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f804 	bl	80018ec <L6474_GoTo>
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <L6474_GoTo>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void L6474_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  motorDir_t direction;
  int32_t steps;
  
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80018f8:	79fa      	ldrb	r2, [r7, #7]
 80018fa:	493a      	ldr	r1, [pc, #232]	; (80019e4 <L6474_GoTo+0xf8>)
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	3324      	adds	r3, #36	; 0x24
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b08      	cmp	r3, #8
 800190e:	d003      	beq.n	8001918 <L6474_GoTo+0x2c>
  {
    L6474_HardStop(deviceId);
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f868 	bl	80019e8 <L6474_HardStop>
  }

  /* Get current position */
  devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2101      	movs	r1, #1
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fb55 	bl	8000fcc <L6474_CmdGetParam>
 8001922:	4603      	mov	r3, r0
 8001924:	79fc      	ldrb	r4, [r7, #7]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fe08 	bl	800253c <L6474_ConvertPosition>
 800192c:	4602      	mov	r2, r0
 800192e:	492d      	ldr	r1, [pc, #180]	; (80019e4 <L6474_GoTo+0xf8>)
 8001930:	4623      	mov	r3, r4
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4423      	add	r3, r4
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	3304      	adds	r3, #4
 800193c:	601a      	str	r2, [r3, #0]
  
  /* Compute the number of steps to perform */
  steps = targetPosition - devicePrm[deviceId].currentPosition;
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	4928      	ldr	r1, [pc, #160]	; (80019e4 <L6474_GoTo+0xf8>)
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	3304      	adds	r3, #4
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	60bb      	str	r3, [r7, #8]
  //steps *= 2; // account for PWM clock divider
  
  if (steps >= 0) 
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0c      	blt.n	8001976 <L6474_GoTo+0x8a>
  {
    devicePrm[deviceId].stepsToTake = steps;
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	4820      	ldr	r0, [pc, #128]	; (80019e4 <L6474_GoTo+0xf8>)
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4403      	add	r3, r0
 800196c:	3314      	adds	r3, #20
 800196e:	6019      	str	r1, [r3, #0]
    direction = FORWARD;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e00d      	b.n	8001992 <L6474_GoTo+0xa6>
    
  } 
  else 
  {
    devicePrm[deviceId].stepsToTake = -steps;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	425b      	negs	r3, r3
 800197a:	79fa      	ldrb	r2, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	4919      	ldr	r1, [pc, #100]	; (80019e4 <L6474_GoTo+0xf8>)
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	440b      	add	r3, r1
 800198a:	3314      	adds	r3, #20
 800198c:	6018      	str	r0, [r3, #0]
    direction = BACKWARD;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]
  }
  
  if (steps != 0) 
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d021      	beq.n	80019dc <L6474_GoTo+0xf0>
  {
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001998:	79fa      	ldrb	r2, [r7, #7]
 800199a:	4912      	ldr	r1, [pc, #72]	; (80019e4 <L6474_GoTo+0xf8>)
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	440b      	add	r3, r1
 80019a6:	3322      	adds	r3, #34	; 0x22
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
        
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fb48 	bl	8002048 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, devicePrm[deviceId].stepsToTake);
 80019b8:	79fa      	ldrb	r2, [r7, #7]
 80019ba:	490a      	ldr	r1, [pc, #40]	; (80019e4 <L6474_GoTo+0xf8>)
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	3314      	adds	r3, #20
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	4611      	mov	r1, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fcf6 	bl	80023c0 <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f001 f908 	bl	8002bec <L6474_StartMovement>
  }  
}
 80019dc:	bf00      	nop
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	20000894 	.word	0x20000894

080019e8 <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 80019f2:	79fa      	ldrb	r2, [r7, #7]
 80019f4:	4920      	ldr	r1, [pc, #128]	; (8001a78 <L6474_HardStop+0x90>)
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	440b      	add	r3, r1
 8001a00:	3325      	adds	r3, #37	; 0x25
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d12d      	bne.n	8001a66 <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 feb7 	bl	8003780 <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 8001a12:	79fa      	ldrb	r2, [r7, #7]
 8001a14:	4918      	ldr	r1, [pc, #96]	; (8001a78 <L6474_HardStop+0x90>)
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	440b      	add	r3, r1
 8001a20:	3324      	adds	r3, #36	; 0x24
 8001a22:	2208      	movs	r2, #8
 8001a24:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 8001a26:	79fa      	ldrb	r2, [r7, #7]
 8001a28:	4913      	ldr	r1, [pc, #76]	; (8001a78 <L6474_HardStop+0x90>)
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	3322      	adds	r3, #34	; 0x22
 8001a36:	2203      	movs	r2, #3
 8001a38:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001a3a:	79fa      	ldrb	r2, [r7, #7]
 8001a3c:	490e      	ldr	r1, [pc, #56]	; (8001a78 <L6474_HardStop+0x90>)
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	3314      	adds	r3, #20
 8001a4a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a4e:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 8001a50:	79fa      	ldrb	r2, [r7, #7]
 8001a52:	4909      	ldr	r1, [pc, #36]	; (8001a78 <L6474_HardStop+0x90>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3320      	adds	r3, #32
 8001a60:	2200      	movs	r2, #0
 8001a62:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 8001a64:	e003      	b.n	8001a6e <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 f807 	bl	8001a7c <L6474_HizStop>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000894 	.word	0x20000894

08001a7c <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f001 fe79 	bl	8003780 <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fa7f 	bl	8000f94 <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 8001a96:	79fa      	ldrb	r2, [r7, #7]
 8001a98:	4915      	ldr	r1, [pc, #84]	; (8001af0 <L6474_HizStop+0x74>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	3324      	adds	r3, #36	; 0x24
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001aaa:	79fa      	ldrb	r2, [r7, #7]
 8001aac:	4910      	ldr	r1, [pc, #64]	; (8001af0 <L6474_HizStop+0x74>)
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3322      	adds	r3, #34	; 0x22
 8001aba:	2203      	movs	r2, #3
 8001abc:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8001abe:	79fa      	ldrb	r2, [r7, #7]
 8001ac0:	490b      	ldr	r1, [pc, #44]	; (8001af0 <L6474_HizStop+0x74>)
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	3314      	adds	r3, #20
 8001ace:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ad2:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	4906      	ldr	r1, [pc, #24]	; (8001af0 <L6474_HizStop+0x74>)
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3320      	adds	r3, #32
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	801a      	strh	r2, [r3, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000894 	.word	0x20000894

08001af4 <L6474_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void L6474_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	603a      	str	r2, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
 8001b00:	460b      	mov	r3, r1
 8001b02:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001b04:	79fa      	ldrb	r2, [r7, #7]
 8001b06:	4926      	ldr	r1, [pc, #152]	; (8001ba0 <L6474_Move+0xac>)
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	440b      	add	r3, r1
 8001b12:	3324      	adds	r3, #36	; 0x24
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d003      	beq.n	8001b24 <L6474_Move+0x30>
  {
    L6474_HardStop(deviceId);
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff62 	bl	80019e8 <L6474_HardStop>
  }
  
  if (stepCount != 0) 
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d035      	beq.n	8001b96 <L6474_Move+0xa2>
  {
    //stepCount *= 2; // account for PWM clock divider

    devicePrm[deviceId].stepsToTake = stepCount;
 8001b2a:	79fa      	ldrb	r2, [r7, #7]
 8001b2c:	491c      	ldr	r1, [pc, #112]	; (8001ba0 <L6474_Move+0xac>)
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	440b      	add	r3, r1
 8001b38:	3314      	adds	r3, #20
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	601a      	str	r2, [r3, #0]
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8001b3e:	79fa      	ldrb	r2, [r7, #7]
 8001b40:	4917      	ldr	r1, [pc, #92]	; (8001ba0 <L6474_Move+0xac>)
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3322      	adds	r3, #34	; 0x22
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
    
    devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2101      	movs	r1, #1
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fa38 	bl	8000fcc <L6474_CmdGetParam>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	79fc      	ldrb	r4, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fceb 	bl	800253c <L6474_ConvertPosition>
 8001b66:	4602      	mov	r2, r0
 8001b68:	490d      	ldr	r1, [pc, #52]	; (8001ba0 <L6474_Move+0xac>)
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4423      	add	r3, r4
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	3304      	adds	r3, #4
 8001b76:	601a      	str	r2, [r3, #0]
    
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8001b78:	79ba      	ldrb	r2, [r7, #6]
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fa62 	bl	8002048 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, stepCount);
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	6839      	ldr	r1, [r7, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 fc19 	bl	80023c0 <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f001 f82b 	bl	8002bec <L6474_StartMovement>
  }  
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd90      	pop	{r4, r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000894 	.word	0x20000894

08001ba4 <L6474_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the l6474 Driver Instance
 **********************************************************/
uint16_t L6474_ReadId(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return(l6474DriverInstance);
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <L6474_ReadId+0x14>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000892 	.word	0x20000892

08001bbc <L6474_ReadStatusRegister>:
 * @retval Status register valued
 * @note The status register flags are not cleared 
 * at the difference with L6474CmdGetStatus()
 **********************************************************/
uint16_t L6474_ReadStatusRegister(uint8_t deviceId)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  return (L6474_CmdGetParam(deviceId,L6474_STATUS));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	2119      	movs	r1, #25
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f9fe 	bl	8000fcc <L6474_CmdGetParam>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	b29b      	uxth	r3, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <L6474_ReleaseReset>:
/******************************************************//**
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @retval None
 **********************************************************/
void L6474_ReleaseReset(uint8_t deviceId)
{ 
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  L6474_Board_ReleaseReset(deviceId); 
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f001 fdf3 	bl	80037d4 <L6474_Board_ReleaseReset>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <L6474_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Reset(uint8_t deviceId)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	71fb      	strb	r3, [r7, #7]
  L6474_Board_Reset(deviceId); 
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 fdf8 	bl	80037f8 <L6474_Board_Reset>
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <L6474_ResetAllDevices>:
/******************************************************//**
 * @brief Resets all L6474 devices
 * @retval None
 **********************************************************/
void L6474_ResetAllDevices(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 	uint8_t loop;
 	
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	71fb      	strb	r3, [r7, #7]
 8001c1a:	e014      	b.n	8001c46 <L6474_ResetAllDevices+0x36>
 	{
   	/* Stop movement and disable power stage*/
  	L6474_HizStop(loop);
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff2c 	bl	8001a7c <L6474_HizStop>
    L6474_Reset(loop);
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ffe5 	bl	8001bf6 <L6474_Reset>
    L6474_Board_Delay(1); // Reset pin must be forced low for at least 10us
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f001 fbe1 	bl	80033f4 <L6474_Board_Delay>
    L6474_Board_ReleaseReset(loop);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f001 fdcd 	bl	80037d4 <L6474_Board_ReleaseReset>
    L6474_Board_Delay(1); 
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f001 fbda 	bl	80033f4 <L6474_Board_Delay>
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	3301      	adds	r3, #1
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <L6474_ResetAllDevices+0x4c>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	79fa      	ldrb	r2, [r7, #7]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d3e4      	bcc.n	8001c1c <L6474_ResetAllDevices+0xc>
  }
}
 8001c52:	bf00      	nop
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000874 	.word	0x20000874

08001c60 <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	460a      	mov	r2, r1
 8001c6a:	71fb      	strb	r3, [r7, #7]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001c70:	79fa      	ldrb	r2, [r7, #7]
 8001c72:	4913      	ldr	r1, [pc, #76]	; (8001cc0 <L6474_Run+0x60>)
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	3324      	adds	r3, #36	; 0x24
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d003      	beq.n	8001c90 <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff feac 	bl	80019e8 <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 8001c90:	79ba      	ldrb	r2, [r7, #6]
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f9d6 	bl	8002048 <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001c9c:	79fa      	ldrb	r2, [r7, #7]
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <L6474_Run+0x60>)
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	440b      	add	r3, r1
 8001caa:	3322      	adds	r3, #34	; 0x22
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 ff9a 	bl	8002bec <L6474_StartMovement>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000894 	.word	0x20000894

08001cc4 <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	460a      	mov	r2, r1
 8001cce:	71fb      	strb	r3, [r7, #7]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 8001cd4:	79bb      	ldrb	r3, [r7, #6]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d816      	bhi.n	8001d08 <L6474_SelectStepMode+0x44>
 8001cda:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <L6474_SelectStepMode+0x1c>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001cf1 	.word	0x08001cf1
 8001ce4:	08001cf7 	.word	0x08001cf7
 8001ce8:	08001cfd 	.word	0x08001cfd
 8001cec:	08001d03 	.word	0x08001d03
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf4:	e00b      	b.n	8001d0e <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 8001cf6:	2309      	movs	r3, #9
 8001cf8:	73fb      	strb	r3, [r7, #15]
      break;    
 8001cfa:	e008      	b.n	8001d0e <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 8001cfc:	230a      	movs	r3, #10
 8001cfe:	73fb      	strb	r3, [r7, #15]
      break;        
 8001d00:	e005      	b.n	8001d0e <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 8001d02:	230b      	movs	r3, #11
 8001d04:	73fb      	strb	r3, [r7, #15]
      break;       
 8001d06:	e002      	b.n	8001d0e <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8001d08:	230c      	movs	r3, #12
 8001d0a:	73fb      	strb	r3, [r7, #15]
      break;       
 8001d0c:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff feb3 	bl	8001a7c <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2116      	movs	r1, #22
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff f956 	bl	8000fcc <L6474_CmdGetParam>
 8001d20:	4603      	mov	r3, r0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f023 0307 	bic.w	r3, r3, #7
 8001d28:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 8001d2a:	7bba      	ldrb	r2, [r7, #14]
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	2116      	movs	r1, #22
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff facf 	bl	80012dc <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	2200      	movs	r2, #0
 8001d42:	2101      	movs	r1, #1
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fac9 	bl	80012dc <L6474_CmdSetParam>
  
  return (1);
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <L6474_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	71fb      	strb	r3, [r7, #7]
 8001d60:	4613      	mov	r3, r2
 8001d62:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 8001d68:	88bb      	ldrh	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d023      	beq.n	8001db6 <L6474_SetAcceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001d6e:	79fa      	ldrb	r2, [r7, #7]
 8001d70:	4914      	ldr	r1, [pc, #80]	; (8001dc4 <L6474_SetAcceleration+0x70>)
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3324      	adds	r3, #36	; 0x24
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d00b      	beq.n	8001d9e <L6474_SetAcceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001d86:	79fa      	ldrb	r2, [r7, #7]
 8001d88:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <L6474_SetAcceleration+0x70>)
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	440b      	add	r3, r1
 8001d94:	3322      	adds	r3, #34	; 0x22
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10b      	bne.n	8001db6 <L6474_SetAcceleration+0x62>
  {
    devicePrm[deviceId].acceleration = newAcc;
 8001d9e:	79fa      	ldrb	r2, [r7, #7]
 8001da0:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <L6474_SetAcceleration+0x70>)
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	3318      	adds	r3, #24
 8001dae:	88ba      	ldrh	r2, [r7, #4]
 8001db0:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
  }    
  return cmdExecuted;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}            
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	20000894 	.word	0x20000894

08001dc8 <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001ddc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de8:	d508      	bpl.n	8001dfc <L6474_SetAnalogValue+0x34>
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d005      	beq.n	8001dfc <L6474_SetAnalogValue+0x34>
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d002      	beq.n	8001dfc <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	74fb      	strb	r3, [r7, #19]
 8001dfa:	e0d9      	b.n	8001fb0 <L6474_SetAnalogValue+0x1e8>
  }
  else
  {
    switch (param)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	2b12      	cmp	r3, #18
 8001e02:	f200 80ca 	bhi.w	8001f9a <L6474_SetAnalogValue+0x1d2>
 8001e06:	a201      	add	r2, pc, #4	; (adr r2, 8001e0c <L6474_SetAnalogValue+0x44>)
 8001e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0c:	08001ebf 	.word	0x08001ebf
 8001e10:	08001e59 	.word	0x08001e59
 8001e14:	08001ebf 	.word	0x08001ebf
 8001e18:	08001f9b 	.word	0x08001f9b
 8001e1c:	08001f9b 	.word	0x08001f9b
 8001e20:	08001f9b 	.word	0x08001f9b
 8001e24:	08001f9b 	.word	0x08001f9b
 8001e28:	08001f9b 	.word	0x08001f9b
 8001e2c:	08001f29 	.word	0x08001f29
 8001e30:	08001f9b 	.word	0x08001f9b
 8001e34:	08001f9b 	.word	0x08001f9b
 8001e38:	08001f9b 	.word	0x08001f9b
 8001e3c:	08001f9b 	.word	0x08001f9b
 8001e40:	08001f9b 	.word	0x08001f9b
 8001e44:	08001f75 	.word	0x08001f75
 8001e48:	08001f75 	.word	0x08001f75
 8001e4c:	08001f9b 	.word	0x08001f9b
 8001e50:	08001f9b 	.word	0x08001f9b
 8001e54:	08001f4f 	.word	0x08001f4f
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 8001e58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e64:	d021      	beq.n	8001eaa <L6474_SetAnalogValue+0xe2>
 8001e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001fbc <L6474_SetAnalogValue+0x1f4>
 8001e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	dc15      	bgt.n	8001ea4 <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 8001e78:	2116      	movs	r1, #22
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff f8a6 	bl	8000fcc <L6474_CmdGetParam>
 8001e80:	4603      	mov	r3, r0
 8001e82:	43db      	mvns	r3, r3
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	2201      	movs	r2, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 8001e96:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	d502      	bpl.n	8001eaa <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001ea8:	e079      	b.n	8001f9e <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001eaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb2:	ee17 3a90 	vmov	r3, s15
 8001eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eba:	617b      	str	r3, [r7, #20]
        break;
 8001ebc:	e06f      	b.n	8001f9e <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 8001ebe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001fc0 <L6474_SetAnalogValue+0x1f8>
 8001ec6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ece:	db27      	blt.n	8001f20 <L6474_SetAnalogValue+0x158>
 8001ed0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ed4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001fc4 <L6474_SetAnalogValue+0x1fc>
 8001ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	d81e      	bhi.n	8001f20 <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 8001ee2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ee6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eee:	db09      	blt.n	8001f04 <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 8001ef0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ef4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ef8:	ee17 3a90 	vmov	r3, s15
 8001efc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001f00:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001f02:	e010      	b.n	8001f26 <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001f04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f08:	eef1 7a67 	vneg.f32	s15, s15
 8001f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f10:	ee17 3a90 	vmov	r3, s15
 8001f14:	43db      	mvns	r3, r3
 8001f16:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 8001f1e:	e002      	b.n	8001f26 <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	74fb      	strb	r3, [r7, #19]
        }
        break;
 8001f24:	e03b      	b.n	8001f9e <L6474_SetAnalogValue+0x1d6>
 8001f26:	e03a      	b.n	8001f9e <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 8001f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f2c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001fc8 <L6474_SetAnalogValue+0x200>
 8001f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f38:	dd02      	ble.n	8001f40 <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 8001f3e:	e02e      	b.n	8001f9e <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 8001f40:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f44:	f001 f9c0 	bl	80032c8 <L6474_Tval_Current_to_Par>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	617b      	str	r3, [r7, #20]
        break;
 8001f4c:	e027      	b.n	8001f9e <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 8001f4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f52:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001fcc <L6474_SetAnalogValue+0x204>
 8001f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5e:	dd02      	ble.n	8001f66 <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 8001f64:	e01b      	b.n	8001f9e <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 8001f66:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f6a:	f001 f971 	bl	8003250 <L6474_Ocd_Th_to_Par>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	617b      	str	r3, [r7, #20]
        break;
 8001f72:	e014      	b.n	8001f9e <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 8001f74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f78:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001fd0 <L6474_SetAnalogValue+0x208>
 8001f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f84:	dd02      	ble.n	8001f8c <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8001f8a:	e008      	b.n	8001f9e <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8001f8c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f90:	f001 f9ec 	bl	800336c <L6474_Tmin_Time_to_Par>
 8001f94:	4603      	mov	r3, r0
 8001f96:	617b      	str	r3, [r7, #20]
        break;    
 8001f98:	e001      	b.n	8001f9e <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 8001f9e:	7cfb      	ldrb	r3, [r7, #19]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff f996 	bl	80012dc <L6474_CmdSetParam>
    }
  }
  return result;
 8001fb0:	7cfb      	ldrb	r3, [r7, #19]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	43ff8000 	.word	0x43ff8000
 8001fc0:	ca000000 	.word	0xca000000
 8001fc4:	49fffff8 	.word	0x49fffff8
 8001fc8:	457a0000 	.word	0x457a0000
 8001fcc:	45bb8000 	.word	0x45bb8000
 8001fd0:	42800000 	.word	0x42800000

08001fd4 <L6474_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	460a      	mov	r2, r1
 8001fde:	71fb      	strb	r3, [r7, #7]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&& 
 8001fe8:	88bb      	ldrh	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d023      	beq.n	8002036 <L6474_SetDeceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001fee:	79fa      	ldrb	r2, [r7, #7]
 8001ff0:	4914      	ldr	r1, [pc, #80]	; (8002044 <L6474_SetDeceleration+0x70>)
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3324      	adds	r3, #36	; 0x24
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&& 
 8002002:	2b08      	cmp	r3, #8
 8002004:	d00b      	beq.n	800201e <L6474_SetDeceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8002006:	79fa      	ldrb	r2, [r7, #7]
 8002008:	490e      	ldr	r1, [pc, #56]	; (8002044 <L6474_SetDeceleration+0x70>)
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	3322      	adds	r3, #34	; 0x22
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10b      	bne.n	8002036 <L6474_SetDeceleration+0x62>
  {
    devicePrm[deviceId].deceleration = newDec;
 800201e:	79fa      	ldrb	r2, [r7, #7]
 8002020:	4908      	ldr	r1, [pc, #32]	; (8002044 <L6474_SetDeceleration+0x70>)
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	331a      	adds	r3, #26
 800202e:	88ba      	ldrh	r2, [r7, #4]
 8002030:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8002032:	2301      	movs	r3, #1
 8002034:	73fb      	strb	r3, [r7, #15]
  }      
  return cmdExecuted;
 8002036:	7bfb      	ldrb	r3, [r7, #15]
}        
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	20000894 	.word	0x20000894

08002048 <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	460a      	mov	r2, r1
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	4613      	mov	r3, r2
 8002056:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 8002058:	79fa      	ldrb	r2, [r7, #7]
 800205a:	490f      	ldr	r1, [pc, #60]	; (8002098 <L6474_SetDirection+0x50>)
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	3324      	adds	r3, #36	; 0x24
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b08      	cmp	r3, #8
 800206e:	d10f      	bne.n	8002090 <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 8002070:	79fa      	ldrb	r2, [r7, #7]
 8002072:	4909      	ldr	r1, [pc, #36]	; (8002098 <L6474_SetDirection+0x50>)
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	440b      	add	r3, r1
 800207e:	3323      	adds	r3, #35	; 0x23
 8002080:	79ba      	ldrb	r2, [r7, #6]
 8002082:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 8002084:	79ba      	ldrb	r2, [r7, #6]
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f001 fbc6 	bl	800381c <L6474_Board_SetDirectionGpio>
  }
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000894 	.word	0x20000894

0800209c <L6474_SetHome>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new home position
 * @retval None
 **********************************************************/
void L6474_SetHome(uint8_t deviceId, int32_t homePos)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	71fb      	strb	r3, [r7, #7]
  int32_t absHomePos = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS)) - homePos;
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	2101      	movs	r1, #1
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe ff8d 	bl	8000fcc <L6474_CmdGetParam>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fa41 	bl	800253c <L6474_ConvertPosition>
 80020ba:	4602      	mov	r2, r0
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	60bb      	str	r3, [r7, #8]
  uint32_t registerValue;
  
  if (absHomePos >= 0)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	db04      	blt.n	80020d2 <L6474_SetHome+0x36>
  {
    registerValue = ((uint32_t) absHomePos)& L6474_ABS_POS_VALUE_MASK;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	e005      	b.n	80020de <L6474_SetHome+0x42>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-absHomePos))& L6474_ABS_POS_VALUE_MASK) + 1;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80020da:	3301      	adds	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
  }
 
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, registerValue);
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	2101      	movs	r1, #1
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff f8f9 	bl	80012dc <L6474_CmdSetParam>
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <L6474_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool L6474_SetNbDevices(uint8_t nbDevices)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d807      	bhi.n	8002114 <L6474_SetNbDevices+0x20>
  {
    l6474DriverInstance = 0;
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <L6474_SetNbDevices+0x30>)
 8002106:	2200      	movs	r2, #0
 8002108:	801a      	strh	r2, [r3, #0]
    numberOfDevices = nbDevices;
 800210a:	4a07      	ldr	r2, [pc, #28]	; (8002128 <L6474_SetNbDevices+0x34>)
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <L6474_SetNbDevices+0x22>
  }
  else
  {
    return FALSE;
 8002114:	2300      	movs	r3, #0
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000892 	.word	0x20000892
 8002128:	20000874 	.word	0x20000874

0800212c <L6474_SetMark>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new Mark position
 * @retval None
 **********************************************************/
void L6474_SetMark(uint8_t deviceId, int32_t markPos)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue;
  if (markPos >= 0)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	db04      	blt.n	8002148 <L6474_SetMark+0x1c>
  {
    registerValue = ((uint32_t) markPos)& L6474_ABS_POS_VALUE_MASK;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	e005      	b.n	8002154 <L6474_SetMark+0x28>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-markPos))& L6474_ABS_POS_VALUE_MASK) + 1;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	3b01      	subs	r3, #1
 800214c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002150:	3301      	adds	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
  }
  
  L6474_CmdSetParam(deviceId,L6474_MARK, registerValue);
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	2103      	movs	r1, #3
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff f8be 	bl	80012dc <L6474_CmdSetParam>
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	460a      	mov	r2, r1
 8002172:	71fb      	strb	r3, [r7, #7]
 8002174:	4613      	mov	r3, r2
 8002176:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 800217c:	88bb      	ldrh	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d035      	beq.n	80021ee <L6474_SetMaxSpeed+0x86>
 8002182:	88bb      	ldrh	r3, [r7, #4]
 8002184:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002188:	4293      	cmp	r3, r2
 800218a:	d830      	bhi.n	80021ee <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 800218c:	79fa      	ldrb	r2, [r7, #7]
 800218e:	491b      	ldr	r1, [pc, #108]	; (80021fc <L6474_SetMaxSpeed+0x94>)
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	331e      	adds	r3, #30
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 80021a0:	88ba      	ldrh	r2, [r7, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d323      	bcc.n	80021ee <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80021a6:	79fa      	ldrb	r2, [r7, #7]
 80021a8:	4914      	ldr	r1, [pc, #80]	; (80021fc <L6474_SetMaxSpeed+0x94>)
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	440b      	add	r3, r1
 80021b4:	3324      	adds	r3, #36	; 0x24
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d00b      	beq.n	80021d6 <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 80021be:	79fa      	ldrb	r2, [r7, #7]
 80021c0:	490e      	ldr	r1, [pc, #56]	; (80021fc <L6474_SetMaxSpeed+0x94>)
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	440b      	add	r3, r1
 80021cc:	3322      	adds	r3, #34	; 0x22
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10b      	bne.n	80021ee <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 80021d6:	79fa      	ldrb	r2, [r7, #7]
 80021d8:	4908      	ldr	r1, [pc, #32]	; (80021fc <L6474_SetMaxSpeed+0x94>)
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	331c      	adds	r3, #28
 80021e6:	88ba      	ldrh	r2, [r7, #4]
 80021e8:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 80021ea:	2301      	movs	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	20000894 	.word	0x20000894

08002200 <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	460a      	mov	r2, r1
 800220a:	71fb      	strb	r3, [r7, #7]
 800220c:	4613      	mov	r3, r2
 800220e:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8002214:	88bb      	ldrh	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d035      	beq.n	8002286 <L6474_SetMinSpeed+0x86>
 800221a:	88bb      	ldrh	r3, [r7, #4]
 800221c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002220:	4293      	cmp	r3, r2
 8002222:	d830      	bhi.n	8002286 <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8002224:	79fa      	ldrb	r2, [r7, #7]
 8002226:	491b      	ldr	r1, [pc, #108]	; (8002294 <L6474_SetMinSpeed+0x94>)
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	331c      	adds	r3, #28
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 8002238:	88ba      	ldrh	r2, [r7, #4]
 800223a:	429a      	cmp	r2, r3
 800223c:	d823      	bhi.n	8002286 <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800223e:	79fa      	ldrb	r2, [r7, #7]
 8002240:	4914      	ldr	r1, [pc, #80]	; (8002294 <L6474_SetMinSpeed+0x94>)
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	3324      	adds	r3, #36	; 0x24
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 8002252:	2b08      	cmp	r3, #8
 8002254:	d00b      	beq.n	800226e <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8002256:	79fa      	ldrb	r2, [r7, #7]
 8002258:	490e      	ldr	r1, [pc, #56]	; (8002294 <L6474_SetMinSpeed+0x94>)
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	3322      	adds	r3, #34	; 0x22
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10b      	bne.n	8002286 <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 800226e:	79fa      	ldrb	r2, [r7, #7]
 8002270:	4908      	ldr	r1, [pc, #32]	; (8002294 <L6474_SetMinSpeed+0x94>)
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	331e      	adds	r3, #30
 800227e:	88ba      	ldrh	r2, [r7, #4]
 8002280:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8002282:	2301      	movs	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	20000894 	.word	0x20000894

08002298 <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	460a      	mov	r2, r1
 80022a2:	71fb      	strb	r3, [r7, #7]
 80022a4:	4613      	mov	r3, r2
 80022a6:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 80022a8:	79fa      	ldrb	r2, [r7, #7]
 80022aa:	4907      	ldr	r1, [pc, #28]	; (80022c8 <L6474_SetStopMode+0x30>)
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	3325      	adds	r3, #37	; 0x25
 80022b8:	79ba      	ldrb	r2, [r7, #6]
 80022ba:	701a      	strb	r2, [r3, #0]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	20000894 	.word	0x20000894

080022cc <L6474_SoftStop>:
 * @param[in] deviceId (from 0 to 2)
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool L6474_SoftStop(uint8_t deviceId)
{	
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  bool cmdExecuted = FALSE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	73fb      	strb	r3, [r7, #15]
  if (devicePrm[deviceId].motionState != INACTIVE)
 80022da:	79fa      	ldrb	r2, [r7, #7]
 80022dc:	490e      	ldr	r1, [pc, #56]	; (8002318 <L6474_SoftStop+0x4c>)
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	3324      	adds	r3, #36	; 0x24
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d00b      	beq.n	800230a <L6474_SoftStop+0x3e>
  {
    devicePrm[deviceId].commandExecuted = SOFT_STOP_CMD;
 80022f2:	79fa      	ldrb	r2, [r7, #7]
 80022f4:	4908      	ldr	r1, [pc, #32]	; (8002318 <L6474_SoftStop+0x4c>)
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	440b      	add	r3, r1
 8002300:	3322      	adds	r3, #34	; 0x22
 8002302:	2202      	movs	r2, #2
 8002304:	701a      	strb	r2, [r3, #0]
    cmdExecuted = TRUE;
 8002306:	2301      	movs	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 800230a:	7bfb      	ldrb	r3, [r7, #15]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	20000894 	.word	0x20000894

0800231c <L6474_WaitWhileActive>:
 * @brief  Locks until the device state becomes Inactive
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_WaitWhileActive(uint8_t deviceId)
 {
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (L6474_GetDeviceState(deviceId) != INACTIVE);
 8002326:	bf00      	nop
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f9ba 	bl	80016a4 <L6474_GetDeviceState>
 8002330:	4603      	mov	r3, r0
 8002332:	2b08      	cmp	r3, #8
 8002334:	d1f8      	bne.n	8002328 <L6474_WaitWhileActive+0xc>
}
 8002336:	bf00      	nop
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	460a      	mov	r2, r1
 800234a:	71fb      	strb	r3, [r7, #7]
 800234c:	4613      	mov	r3, r2
 800234e:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 8002350:	88bb      	ldrh	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 8002356:	2301      	movs	r3, #1
 8002358:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 800235a:	88bb      	ldrh	r3, [r7, #4]
 800235c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002360:	4293      	cmp	r3, r2
 8002362:	d902      	bls.n	800236a <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 8002364:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002368:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 800236a:	79fa      	ldrb	r2, [r7, #7]
 800236c:	4913      	ldr	r1, [pc, #76]	; (80023bc <L6474_ApplySpeed+0x7c>)
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	3320      	adds	r3, #32
 800237a:	88ba      	ldrh	r2, [r7, #4]
 800237c:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d010      	beq.n	80023a6 <L6474_ApplySpeed+0x66>
 8002384:	2b02      	cmp	r3, #2
 8002386:	dc13      	bgt.n	80023b0 <L6474_ApplySpeed+0x70>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <L6474_ApplySpeed+0x52>
 800238c:	2b01      	cmp	r3, #1
 800238e:	d005      	beq.n	800239c <L6474_ApplySpeed+0x5c>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 8002390:	e00e      	b.n	80023b0 <L6474_ApplySpeed+0x70>
      L6474_Board_Pwm1SetFreq(newSpeed);
 8002392:	88bb      	ldrh	r3, [r7, #4]
 8002394:	4618      	mov	r0, r3
 8002396:	f001 f925 	bl	80035e4 <L6474_Board_Pwm1SetFreq>
      break;
 800239a:	e00a      	b.n	80023b2 <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm2SetFreq(newSpeed);
 800239c:	88bb      	ldrh	r3, [r7, #4]
 800239e:	4618      	mov	r0, r3
 80023a0:	f001 f946 	bl	8003630 <L6474_Board_Pwm2SetFreq>
      break;
 80023a4:	e005      	b.n	80023b2 <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm3SetFreq(newSpeed);
 80023a6:	88bb      	ldrh	r3, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f001 f969 	bl	8003680 <L6474_Board_Pwm3SetFreq>
      break;
 80023ae:	e000      	b.n	80023b2 <L6474_ApplySpeed+0x72>
      break; //ignore error
 80023b0:	bf00      	nop
  }
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000894 	.word	0x20000894

080023c0 <L6474_ComputeSpeedProfile>:
 * speed.
 * Else, a triangular move is performed (no steady phase: the maximum speed is never
 * reached.
 **********************************************************/
void L6474_ComputeSpeedProfile(uint8_t deviceId, uint32_t nbSteps)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	6039      	str	r1, [r7, #0]
 80023ca:	71fb      	strb	r3, [r7, #7]
  uint32_t reqAccSteps; 
	uint32_t reqDecSteps;
   
  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = devicePrm[deviceId].minSpeed;
 80023cc:	79fa      	ldrb	r2, [r7, #7]
 80023ce:	495a      	ldr	r1, [pc, #360]	; (8002538 <L6474_ComputeSpeedProfile+0x178>)
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	440b      	add	r3, r1
 80023da:	331e      	adds	r3, #30
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (devicePrm[deviceId].maxSpeed - minSpeed);
 80023e0:	79fa      	ldrb	r2, [r7, #7]
 80023e2:	4955      	ldr	r1, [pc, #340]	; (8002538 <L6474_ComputeSpeedProfile+0x178>)
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	440b      	add	r3, r1
 80023ee:	331c      	adds	r3, #28
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	8b7b      	ldrh	r3, [r7, #26]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (devicePrm[deviceId].maxSpeed + minSpeed);
 80023fc:	79fa      	ldrb	r2, [r7, #7]
 80023fe:	494e      	ldr	r1, [pc, #312]	; (8002538 <L6474_ComputeSpeedProfile+0x178>)
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	440b      	add	r3, r1
 800240a:	331c      	adds	r3, #28
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	8b7b      	ldrh	r3, [r7, #26]
 8002414:	4413      	add	r3, r2
 8002416:	461a      	mov	r2, r3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)devicePrm[deviceId].acceleration;
 8002424:	79fa      	ldrb	r2, [r7, #7]
 8002426:	4944      	ldr	r1, [pc, #272]	; (8002538 <L6474_ComputeSpeedProfile+0x178>)
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	3318      	adds	r3, #24
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002440:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)devicePrm[deviceId].deceleration;
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	493b      	ldr	r1, [pc, #236]	; (8002538 <L6474_ComputeSpeedProfile+0x178>)
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	331a      	adds	r3, #26
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	fbb3 f3f2 	udiv	r3, r3, r2
 8002464:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	085b      	lsrs	r3, r3, #1
 800246a:	617b      	str	r3, [r7, #20]

	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	4413      	add	r3, r2
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d242      	bcs.n	80024fe <L6474_ComputeSpeedProfile+0x13e>
	{	
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = devicePrm[deviceId].deceleration;
 8002478:	79fa      	ldrb	r2, [r7, #7]
 800247a:	492f      	ldr	r1, [pc, #188]	; (8002538 <L6474_ComputeSpeedProfile+0x178>)
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	331a      	adds	r3, #26
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	613b      	str	r3, [r7, #16]
    uint32_t acc = devicePrm[deviceId].acceleration;
 800248e:	79fa      	ldrb	r2, [r7, #7]
 8002490:	4929      	ldr	r1, [pc, #164]	; (8002538 <L6474_ComputeSpeedProfile+0x178>)
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	3318      	adds	r3, #24
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	60fb      	str	r3, [r7, #12]
    
    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	fb03 f202 	mul.w	r2, r3, r2
 80024ac:	68f9      	ldr	r1, [r7, #12]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	440b      	add	r3, r1
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d908      	bls.n	80024d0 <L6474_ComputeSpeedProfile+0x110>
    {
      reqAccSteps = reqDecSteps - 1;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d104      	bne.n	80024d4 <L6474_ComputeSpeedProfile+0x114>
      {
        reqAccSteps = 1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	e001      	b.n	80024d4 <L6474_ComputeSpeedProfile+0x114>
      }      
    }
    else
    {
      reqAccSteps = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
    }
    devicePrm[deviceId].endAccPos = reqAccSteps;
 80024d4:	79fa      	ldrb	r2, [r7, #7]
 80024d6:	4918      	ldr	r1, [pc, #96]	; (8002538 <L6474_ComputeSpeedProfile+0x178>)
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	3308      	adds	r3, #8
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = reqDecSteps;
 80024e8:	79fa      	ldrb	r2, [r7, #7]
 80024ea:	4913      	ldr	r1, [pc, #76]	; (8002538 <L6474_ComputeSpeedProfile+0x178>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	3310      	adds	r3, #16
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	601a      	str	r2, [r3, #0]
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    devicePrm[deviceId].endAccPos = reqAccSteps;
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
	}
}
 80024fc:	e016      	b.n	800252c <L6474_ComputeSpeedProfile+0x16c>
    devicePrm[deviceId].endAccPos = reqAccSteps;
 80024fe:	79fa      	ldrb	r2, [r7, #7]
 8002500:	490d      	ldr	r1, [pc, #52]	; (8002538 <L6474_ComputeSpeedProfile+0x178>)
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	440b      	add	r3, r1
 800250c:	3308      	adds	r3, #8
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	79fa      	ldrb	r2, [r7, #7]
 800251a:	1e59      	subs	r1, r3, #1
 800251c:	4806      	ldr	r0, [pc, #24]	; (8002538 <L6474_ComputeSpeedProfile+0x178>)
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4403      	add	r3, r0
 8002528:	3310      	adds	r3, #16
 800252a:	6019      	str	r1, [r3, #0]
}
 800252c:	bf00      	nop
 800252e:	3724      	adds	r7, #36	; 0x24
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	20000894 	.word	0x20000894

0800253c <L6474_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t L6474_ConvertPosition(uint32_t abs_position_reg)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK) 
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00d      	beq.n	800256a <L6474_ConvertPosition+0x2e>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	43db      	mvns	r3, r3
 8002552:	607b      	str	r3, [r7, #4]
    abs_position_reg += 1;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3301      	adds	r3, #1
 8002558:	607b      	str	r3, [r7, #4]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002560:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	425b      	negs	r3, r3
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	e001      	b.n	800256e <L6474_ConvertPosition+0x32>
  } 
  else 
  {
    operation_result = (int32_t) abs_position_reg;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60fb      	str	r3, [r7, #12]
  }
  return operation_result;
 800256e:	68fb      	ldr	r3, [r7, #12]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <L6474_ErrorHandler+0x28>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <L6474_ErrorHandler+0x28>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	88fa      	ldrh	r2, [r7, #6]
 8002594:	4610      	mov	r0, r2
 8002596:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8002598:	e000      	b.n	800259c <L6474_ErrorHandler+0x20>
    while(1)
 800259a:	e7fe      	b.n	800259a <L6474_ErrorHandler+0x1e>
}
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000870 	.word	0x20000870

080025a8 <L6474_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6474_FlagInterruptHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 80025ac:	4b07      	ldr	r3, [pc, #28]	; (80025cc <L6474_FlagInterruptHandler+0x24>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <L6474_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <L6474_FlagInterruptHandler+0x28>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <L6474_FlagInterruptHandler+0x24>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <L6474_FlagInterruptHandler+0x28>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
  }
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	2000086c 	.word	0x2000086c
 80025d0:	20000891 	.word	0x20000891

080025d4 <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	460a      	mov	r2, r1
 80025de:	71fb      	strb	r3, [r7, #7]
 80025e0:	4613      	mov	r3, r2
 80025e2:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <L6474_SendCommand+0x90>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 80025f4:	2300      	movs	r3, #0
 80025f6:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <L6474_SendCommand+0x94>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 80025fe:	7afb      	ldrb	r3, [r7, #11]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8002604:	f000 ff0a 	bl	800341c <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8002608:	2300      	movs	r3, #0
 800260a:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	e008      	b.n	8002624 <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 8002612:	4a16      	ldr	r2, [pc, #88]	; (800266c <L6474_SendCommand+0x98>)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	3309      	adds	r3, #9
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	3301      	adds	r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <L6474_SendCommand+0x90>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4293      	cmp	r3, r2
 8002630:	d3ef      	bcc.n	8002612 <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 8002632:	7abb      	ldrb	r3, [r7, #10]
 8002634:	4a0d      	ldr	r2, [pc, #52]	; (800266c <L6474_SendCommand+0x98>)
 8002636:	4413      	add	r3, r2
 8002638:	79ba      	ldrb	r2, [r7, #6]
 800263a:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 800263c:	f000 fee5 	bl	800340a <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8002640:	2301      	movs	r3, #1
 8002642:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <L6474_SendCommand+0x94>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1d4      	bne.n	80025f8 <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <L6474_SendCommand+0x9c>)
 8002650:	4808      	ldr	r0, [pc, #32]	; (8002674 <L6474_SendCommand+0xa0>)
 8002652:	f000 fea9 	bl	80033a8 <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8002656:	f000 fee1 	bl	800341c <L6474_Board_EnableIrq>
}
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000874 	.word	0x20000874
 8002668:	20000890 	.word	0x20000890
 800266c:	20000878 	.word	0x20000878
 8002670:	2000088d 	.word	0x2000088d
 8002674:	20000881 	.word	0x20000881

08002678 <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 8002684:	79fa      	ldrb	r2, [r7, #7]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	8818      	ldrh	r0, [r3, #0]
 800268a:	494c      	ldr	r1, [pc, #304]	; (80027bc <L6474_SetDeviceParamsToGivenValues+0x144>)
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	440b      	add	r3, r1
 8002696:	3318      	adds	r3, #24
 8002698:	4602      	mov	r2, r0
 800269a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 800269c:	79fa      	ldrb	r2, [r7, #7]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	8858      	ldrh	r0, [r3, #2]
 80026a2:	4946      	ldr	r1, [pc, #280]	; (80027bc <L6474_SetDeviceParamsToGivenValues+0x144>)
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	331a      	adds	r3, #26
 80026b0:	4602      	mov	r2, r0
 80026b2:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 80026b4:	79fa      	ldrb	r2, [r7, #7]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	8898      	ldrh	r0, [r3, #4]
 80026ba:	4940      	ldr	r1, [pc, #256]	; (80027bc <L6474_SetDeviceParamsToGivenValues+0x144>)
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	440b      	add	r3, r1
 80026c6:	331c      	adds	r3, #28
 80026c8:	4602      	mov	r2, r0
 80026ca:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 80026cc:	79fa      	ldrb	r2, [r7, #7]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	88d8      	ldrh	r0, [r3, #6]
 80026d2:	493a      	ldr	r1, [pc, #232]	; (80027bc <L6474_SetDeviceParamsToGivenValues+0x144>)
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	331e      	adds	r3, #30
 80026e0:	4602      	mov	r2, r0
 80026e2:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 80026e4:	79fa      	ldrb	r2, [r7, #7]
 80026e6:	4935      	ldr	r1, [pc, #212]	; (80027bc <L6474_SetDeviceParamsToGivenValues+0x144>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	440b      	add	r3, r1
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 80026f6:	79fa      	ldrb	r2, [r7, #7]
 80026f8:	4930      	ldr	r1, [pc, #192]	; (80027bc <L6474_SetDeviceParamsToGivenValues+0x144>)
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	3304      	adds	r3, #4
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 800270a:	79fa      	ldrb	r2, [r7, #7]
 800270c:	492b      	ldr	r1, [pc, #172]	; (80027bc <L6474_SetDeviceParamsToGivenValues+0x144>)
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	440b      	add	r3, r1
 8002718:	3308      	adds	r3, #8
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 800271e:	79fa      	ldrb	r2, [r7, #7]
 8002720:	4926      	ldr	r1, [pc, #152]	; (80027bc <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	440b      	add	r3, r1
 800272c:	330c      	adds	r3, #12
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8002732:	79fa      	ldrb	r2, [r7, #7]
 8002734:	4921      	ldr	r1, [pc, #132]	; (80027bc <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	440b      	add	r3, r1
 8002740:	3310      	adds	r3, #16
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8002746:	79fa      	ldrb	r2, [r7, #7]
 8002748:	491c      	ldr	r1, [pc, #112]	; (80027bc <L6474_SetDeviceParamsToGivenValues+0x144>)
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	3314      	adds	r3, #20
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 800275a:	79fa      	ldrb	r2, [r7, #7]
 800275c:	4917      	ldr	r1, [pc, #92]	; (80027bc <L6474_SetDeviceParamsToGivenValues+0x144>)
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	440b      	add	r3, r1
 8002768:	3320      	adds	r3, #32
 800276a:	2200      	movs	r2, #0
 800276c:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 800276e:	79fa      	ldrb	r2, [r7, #7]
 8002770:	4912      	ldr	r1, [pc, #72]	; (80027bc <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	3322      	adds	r3, #34	; 0x22
 800277e:	2203      	movs	r2, #3
 8002780:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8002782:	79fa      	ldrb	r2, [r7, #7]
 8002784:	490d      	ldr	r1, [pc, #52]	; (80027bc <L6474_SetDeviceParamsToGivenValues+0x144>)
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	3323      	adds	r3, #35	; 0x23
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 8002796:	79fa      	ldrb	r2, [r7, #7]
 8002798:	4908      	ldr	r1, [pc, #32]	; (80027bc <L6474_SetDeviceParamsToGivenValues+0x144>)
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	3324      	adds	r3, #36	; 0x24
 80027a6:	2208      	movs	r2, #8
 80027a8:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	6839      	ldr	r1, [r7, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f8a4 	bl	80028fc <L6474_SetRegisterToGivenValues>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000894 	.word	0x20000894

080027c0 <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 80027ca:	79fa      	ldrb	r2, [r7, #7]
 80027cc:	494a      	ldr	r1, [pc, #296]	; (80028f8 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	3318      	adds	r3, #24
 80027da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027de:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 80027e0:	79fa      	ldrb	r2, [r7, #7]
 80027e2:	4945      	ldr	r1, [pc, #276]	; (80028f8 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	331a      	adds	r3, #26
 80027f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f4:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 80027f6:	79fa      	ldrb	r2, [r7, #7]
 80027f8:	493f      	ldr	r1, [pc, #252]	; (80028f8 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	440b      	add	r3, r1
 8002804:	331c      	adds	r3, #28
 8002806:	f242 7210 	movw	r2, #10000	; 0x2710
 800280a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 800280c:	79fa      	ldrb	r2, [r7, #7]
 800280e:	493a      	ldr	r1, [pc, #232]	; (80028f8 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	331e      	adds	r3, #30
 800281c:	2264      	movs	r2, #100	; 0x64
 800281e:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 8002820:	79fa      	ldrb	r2, [r7, #7]
 8002822:	4935      	ldr	r1, [pc, #212]	; (80028f8 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 8002832:	79fa      	ldrb	r2, [r7, #7]
 8002834:	4930      	ldr	r1, [pc, #192]	; (80028f8 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	3304      	adds	r3, #4
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 8002846:	79fa      	ldrb	r2, [r7, #7]
 8002848:	492b      	ldr	r1, [pc, #172]	; (80028f8 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	3308      	adds	r3, #8
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 800285a:	79fa      	ldrb	r2, [r7, #7]
 800285c:	4926      	ldr	r1, [pc, #152]	; (80028f8 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	330c      	adds	r3, #12
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 800286e:	79fa      	ldrb	r2, [r7, #7]
 8002870:	4921      	ldr	r1, [pc, #132]	; (80028f8 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	3310      	adds	r3, #16
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8002882:	79fa      	ldrb	r2, [r7, #7]
 8002884:	491c      	ldr	r1, [pc, #112]	; (80028f8 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	440b      	add	r3, r1
 8002890:	3314      	adds	r3, #20
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8002896:	79fa      	ldrb	r2, [r7, #7]
 8002898:	4917      	ldr	r1, [pc, #92]	; (80028f8 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	3320      	adds	r3, #32
 80028a6:	2200      	movs	r2, #0
 80028a8:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 80028aa:	79fa      	ldrb	r2, [r7, #7]
 80028ac:	4912      	ldr	r1, [pc, #72]	; (80028f8 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	440b      	add	r3, r1
 80028b8:	3322      	adds	r3, #34	; 0x22
 80028ba:	2203      	movs	r2, #3
 80028bc:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 80028be:	79fa      	ldrb	r2, [r7, #7]
 80028c0:	490d      	ldr	r1, [pc, #52]	; (80028f8 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	3323      	adds	r3, #35	; 0x23
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 80028d2:	79fa      	ldrb	r2, [r7, #7]
 80028d4:	4908      	ldr	r1, [pc, #32]	; (80028f8 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	440b      	add	r3, r1
 80028e0:	3324      	adds	r3, #36	; 0x24
 80028e2:	2208      	movs	r2, #8
 80028e4:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f883 	bl	80029f4 <L6474_SetRegisterToPredefinedValues>

}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000894 	.word	0x20000894

080028fc <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	6039      	str	r1, [r7, #0]
 8002906:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2200      	movs	r2, #0
 800290c:	2101      	movs	r1, #1
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fce4 	bl	80012dc <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	2200      	movs	r2, #0
 8002918:	2102      	movs	r1, #2
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe fcde 	bl	80012dc <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	2200      	movs	r2, #0
 8002924:	2103      	movs	r1, #3
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fcd8 	bl	80012dc <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	eeb0 0a67 	vmov.f32	s0, s15
 8002938:	2109      	movs	r1, #9
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fa44 	bl	8001dc8 <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 8002948:	4313      	orrs	r3, r2
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	210e      	movs	r1, #14
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe fcc2 	bl	80012dc <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	edd3 7a06 	vldr	s15, [r3, #24]
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	eeb0 0a67 	vmov.f32	s0, s15
 8002964:	210f      	movs	r1, #15
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fa2e 	bl	8001dc8 <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	eeb0 0a67 	vmov.f32	s0, s15
 8002978:	2110      	movs	r1, #16
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fa24 	bl	8001dc8 <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	edd3 7a03 	vldr	s15, [r3, #12]
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	eeb0 0a67 	vmov.f32	s0, s15
 800298c:	2113      	movs	r1, #19
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fa1a 	bl	8001dc8 <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 800299c:	4313      	orrs	r3, r2
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	2116      	movs	r1, #22
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fc98 	bl	80012dc <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	2117      	movs	r1, #23
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe fc91 	bl	80012dc <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	7c5b      	ldrb	r3, [r3, #17]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 80029d6:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 80029dc:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 80029de:	461a      	mov	r2, r3
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	2118      	movs	r1, #24
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fc79 	bl	80012dc <L6474_CmdSetParam>
  
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2101      	movs	r1, #1
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fe fc69 	bl	80012dc <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2102      	movs	r1, #2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe fc63 	bl	80012dc <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2103      	movs	r1, #3
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe fc5d 	bl	80012dc <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	f000 8094 	beq.w	8002b52 <L6474_SetRegisterToPredefinedValues+0x15e>
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	f300 80d7 	bgt.w	8002bde <L6474_SetRegisterToPredefinedValues+0x1ea>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <L6474_SetRegisterToPredefinedValues+0x46>
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d046      	beq.n	8002ac6 <L6474_SetRegisterToPredefinedValues+0xd2>
#endif         
      break;
#endif      
    default: ;
  }
}
 8002a38:	e0d1      	b.n	8002bde <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 8002a3a:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002be8 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002a3e:	f000 fc43 	bl	80032c8 <L6474_Tval_Current_to_Par>
 8002a42:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002a44:	461a      	mov	r2, r3
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	2109      	movs	r1, #9
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fc46 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	2235      	movs	r2, #53	; 0x35
 8002a54:	210e      	movs	r1, #14
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fc40 	bl	80012dc <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 8002a5c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002a60:	f000 fc84 	bl	800336c <L6474_Tmin_Time_to_Par>
 8002a64:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002a66:	461a      	mov	r2, r3
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	210f      	movs	r1, #15
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe fc35 	bl	80012dc <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 8002a72:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002a76:	f000 fc79 	bl	800336c <L6474_Tmin_Time_to_Par>
 8002a7a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	2110      	movs	r1, #16
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fc2a 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	2205      	movs	r2, #5
 8002a8c:	2113      	movs	r1, #19
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fc24 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	228c      	movs	r2, #140	; 0x8c
 8002a98:	2116      	movs	r1, #22
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fc1e 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	22cf      	movs	r2, #207	; 0xcf
 8002aa4:	2117      	movs	r1, #23
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe fc18 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002ab2:	2118      	movs	r1, #24
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe fc11 	bl	80012dc <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2100      	movs	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fbea 	bl	8002298 <L6474_SetStopMode>
      break;
 8002ac4:	e08b      	b.n	8002bde <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 8002ac6:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8002be8 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002aca:	f000 fbfd 	bl	80032c8 <L6474_Tval_Current_to_Par>
 8002ace:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	2109      	movs	r1, #9
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fc00 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	2235      	movs	r2, #53	; 0x35
 8002ae0:	210e      	movs	r1, #14
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe fbfa 	bl	80012dc <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 8002ae8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002aec:	f000 fc3e 	bl	800336c <L6474_Tmin_Time_to_Par>
 8002af0:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002af2:	461a      	mov	r2, r3
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	210f      	movs	r1, #15
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe fbef 	bl	80012dc <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 8002afe:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002b02:	f000 fc33 	bl	800336c <L6474_Tmin_Time_to_Par>
 8002b06:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002b08:	461a      	mov	r2, r3
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	2110      	movs	r1, #16
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fe fbe4 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	2205      	movs	r2, #5
 8002b18:	2113      	movs	r1, #19
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe fbde 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	228c      	movs	r2, #140	; 0x8c
 8002b24:	2116      	movs	r1, #22
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe fbd8 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	22cf      	movs	r2, #207	; 0xcf
 8002b30:	2117      	movs	r1, #23
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe fbd2 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002b3e:	2118      	movs	r1, #24
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fbcb 	bl	80012dc <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fba4 	bl	8002298 <L6474_SetStopMode>
      break;
 8002b50:	e045      	b.n	8002bde <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 8002b52:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002be8 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002b56:	f000 fbb7 	bl	80032c8 <L6474_Tval_Current_to_Par>
 8002b5a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	2109      	movs	r1, #9
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe fbba 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	2235      	movs	r2, #53	; 0x35
 8002b6c:	210e      	movs	r1, #14
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fbb4 	bl	80012dc <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 8002b74:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002b78:	f000 fbf8 	bl	800336c <L6474_Tmin_Time_to_Par>
 8002b7c:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002b7e:	461a      	mov	r2, r3
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	210f      	movs	r1, #15
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fba9 	bl	80012dc <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 8002b8a:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8002b8e:	f000 fbed 	bl	800336c <L6474_Tmin_Time_to_Par>
 8002b92:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002b94:	461a      	mov	r2, r3
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	2110      	movs	r1, #16
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe fb9e 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	2205      	movs	r2, #5
 8002ba4:	2113      	movs	r1, #19
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fb98 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	228c      	movs	r2, #140	; 0x8c
 8002bb0:	2116      	movs	r1, #22
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe fb92 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	22cf      	movs	r2, #207	; 0xcf
 8002bbc:	2117      	movs	r1, #23
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fb8c 	bl	80012dc <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002bca:	2118      	movs	r1, #24
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fb85 	bl	80012dc <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fb5e 	bl	8002298 <L6474_SetStopMode>
      break;
 8002bdc:	bf00      	nop
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	44480000 	.word	0x44480000

08002bec <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe f9d9 	bl	8000fb0 <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 8002bfe:	79fa      	ldrb	r2, [r7, #7]
 8002c00:	4922      	ldr	r1, [pc, #136]	; (8002c8c <L6474_StartMovement+0xa0>)
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3308      	adds	r3, #8
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 8002c14:	79fa      	ldrb	r2, [r7, #7]
 8002c16:	491d      	ldr	r1, [pc, #116]	; (8002c8c <L6474_StartMovement+0xa0>)
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	3324      	adds	r3, #36	; 0x24
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e009      	b.n	8002c3e <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 8002c2a:	79fa      	ldrb	r2, [r7, #7]
 8002c2c:	4917      	ldr	r1, [pc, #92]	; (8002c8c <L6474_StartMovement+0xa0>)
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	3324      	adds	r3, #36	; 0x24
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 8002c3e:	79fa      	ldrb	r2, [r7, #7]
 8002c40:	4912      	ldr	r1, [pc, #72]	; (8002c8c <L6474_StartMovement+0xa0>)
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8002c50:	79fa      	ldrb	r2, [r7, #7]
 8002c52:	490e      	ldr	r1, [pc, #56]	; (8002c8c <L6474_StartMovement+0xa0>)
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	330c      	adds	r3, #12
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 8002c64:	79fa      	ldrb	r2, [r7, #7]
 8002c66:	4909      	ldr	r1, [pc, #36]	; (8002c8c <L6474_StartMovement+0xa0>)
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	331e      	adds	r3, #30
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fb5f 	bl	8002340 <L6474_ApplySpeed>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000894 	.word	0x20000894

08002c90 <L6474_StepClockHandler>:
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void L6474_StepClockHandler(uint8_t deviceId)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08c      	sub	sp, #48	; 0x30
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  /* Set isr flag */
  isrFlag = TRUE;
 8002c9a:	4b96      	ldr	r3, [pc, #600]	; (8002ef4 <L6474_StepClockHandler+0x264>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
  
  /* Incrementation of the relative position */
  devicePrm[deviceId].relativePos++;
 8002ca0:	79fa      	ldrb	r2, [r7, #7]
 8002ca2:	4995      	ldr	r1, [pc, #596]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	330c      	adds	r3, #12
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	1c59      	adds	r1, r3, #1
 8002cb4:	4890      	ldr	r0, [pc, #576]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4403      	add	r3, r0
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	6019      	str	r1, [r3, #0]

  switch (devicePrm[deviceId].motionState) 
 8002cc4:	79fa      	ldrb	r2, [r7, #7]
 8002cc6:	498c      	ldr	r1, [pc, #560]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3324      	adds	r3, #36	; 0x24
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	f000 810f 	beq.w	8002efc <L6474_StepClockHandler+0x26c>
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	f300 82a4 	bgt.w	800322c <L6474_StepClockHandler+0x59c>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <L6474_StepClockHandler+0x60>
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	f000 819b 	beq.w	8003024 <L6474_StepClockHandler+0x394>
      }
      break;
    }
    default: 
    {
      break;
 8002cee:	e29d      	b.n	800322c <L6474_StepClockHandler+0x59c>
        uint32_t relPos = devicePrm[deviceId].relativePos;
 8002cf0:	79fa      	ldrb	r2, [r7, #7]
 8002cf2:	4981      	ldr	r1, [pc, #516]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	330c      	adds	r3, #12
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = devicePrm[deviceId].endAccPos;
 8002d04:	79fa      	ldrb	r2, [r7, #7]
 8002d06:	497c      	ldr	r1, [pc, #496]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	3308      	adds	r3, #8
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	613b      	str	r3, [r7, #16]
        uint16_t speed = devicePrm[deviceId].speed;
 8002d18:	79fa      	ldrb	r2, [r7, #7]
 8002d1a:	4977      	ldr	r1, [pc, #476]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	3320      	adds	r3, #32
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t acc = ((uint32_t)devicePrm[deviceId].acceleration << 16);
 8002d2c:	79fa      	ldrb	r2, [r7, #7]
 8002d2e:	4972      	ldr	r1, [pc, #456]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	3318      	adds	r3, #24
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	041b      	lsls	r3, r3, #16
 8002d42:	60fb      	str	r3, [r7, #12]
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002d44:	79fa      	ldrb	r2, [r7, #7]
 8002d46:	496c      	ldr	r1, [pc, #432]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	3322      	adds	r3, #34	; 0x22
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d017      	beq.n	8002d8c <L6474_StepClockHandler+0xfc>
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002d5c:	79fa      	ldrb	r2, [r7, #7]
 8002d5e:	4966      	ldr	r1, [pc, #408]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	3322      	adds	r3, #34	; 0x22
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b2db      	uxtb	r3, r3
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01f      	beq.n	8002db4 <L6474_StepClockHandler+0x124>
             (relPos == devicePrm[deviceId].startDecPos)))
 8002d74:	79fa      	ldrb	r2, [r7, #7]
 8002d76:	4960      	ldr	r1, [pc, #384]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	3310      	adds	r3, #16
 8002d84:	681b      	ldr	r3, [r3, #0]
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d113      	bne.n	8002db4 <L6474_StepClockHandler+0x124>
          devicePrm[deviceId].motionState = DECELERATING;
 8002d8c:	79fa      	ldrb	r2, [r7, #7]
 8002d8e:	495a      	ldr	r1, [pc, #360]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	440b      	add	r3, r1
 8002d9a:	3324      	adds	r3, #36	; 0x24
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	701a      	strb	r2, [r3, #0]
          devicePrm[deviceId].accu = 0;
 8002da0:	79fa      	ldrb	r2, [r7, #7]
 8002da2:	4955      	ldr	r1, [pc, #340]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	440b      	add	r3, r1
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	e09e      	b.n	8002ef2 <L6474_StepClockHandler+0x262>
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002db4:	79fa      	ldrb	r2, [r7, #7]
 8002db6:	4950      	ldr	r1, [pc, #320]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	331c      	adds	r3, #28
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d20f      	bcs.n	8002dee <L6474_StepClockHandler+0x15e>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002dce:	79fa      	ldrb	r2, [r7, #7]
 8002dd0:	4949      	ldr	r1, [pc, #292]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	3322      	adds	r3, #34	; 0x22
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	b2db      	uxtb	r3, r3
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00e      	beq.n	8002e04 <L6474_StepClockHandler+0x174>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d10a      	bne.n	8002e04 <L6474_StepClockHandler+0x174>
          devicePrm[deviceId].motionState = STEADY;
 8002dee:	79fa      	ldrb	r2, [r7, #7]
 8002df0:	4941      	ldr	r1, [pc, #260]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3324      	adds	r3, #36	; 0x24
 8002dfe:	2203      	movs	r2, #3
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e076      	b.n	8002ef2 <L6474_StepClockHandler+0x262>
          bool speedUpdated = FALSE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          if (speed == 0) speed =1;
 8002e0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <L6474_StepClockHandler+0x184>
 8002e10:	2301      	movs	r3, #1
 8002e12:	85fb      	strh	r3, [r7, #46]	; 0x2e
          devicePrm[deviceId].accu += acc / speed;
 8002e14:	79fa      	ldrb	r2, [r7, #7]
 8002e16:	4938      	ldr	r1, [pc, #224]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	440b      	add	r3, r1
 8002e22:	6819      	ldr	r1, [r3, #0]
 8002e24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	79fa      	ldrb	r2, [r7, #7]
 8002e2e:	4419      	add	r1, r3
 8002e30:	4831      	ldr	r0, [pc, #196]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4403      	add	r3, r0
 8002e3c:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002e3e:	e017      	b.n	8002e70 <L6474_StepClockHandler+0x1e0>
            devicePrm[deviceId].accu -= (0X10000L);
 8002e40:	79fa      	ldrb	r2, [r7, #7]
 8002e42:	492d      	ldr	r1, [pc, #180]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	440b      	add	r3, r1
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	79fa      	ldrb	r2, [r7, #7]
 8002e52:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002e56:	4828      	ldr	r0, [pc, #160]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4403      	add	r3, r0
 8002e62:	6019      	str	r1, [r3, #0]
            speed +=1;
 8002e64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e66:	3301      	adds	r3, #1
 8002e68:	85fb      	strh	r3, [r7, #46]	; 0x2e
            speedUpdated = TRUE;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002e70:	79fa      	ldrb	r2, [r7, #7]
 8002e72:	4921      	ldr	r1, [pc, #132]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e84:	d2dc      	bcs.n	8002e40 <L6474_StepClockHandler+0x1b0>
          if (speedUpdated)
 8002e86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 81d0 	beq.w	8003230 <L6474_StepClockHandler+0x5a0>
            if (speed > devicePrm[deviceId].maxSpeed)
 8002e90:	79fa      	ldrb	r2, [r7, #7]
 8002e92:	4919      	ldr	r1, [pc, #100]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	440b      	add	r3, r1
 8002e9e:	331c      	adds	r3, #28
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d909      	bls.n	8002ebe <L6474_StepClockHandler+0x22e>
              speed = devicePrm[deviceId].maxSpeed;
 8002eaa:	79fa      	ldrb	r2, [r7, #7]
 8002eac:	4912      	ldr	r1, [pc, #72]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	331c      	adds	r3, #28
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	85fb      	strh	r3, [r7, #46]	; 0x2e
            devicePrm[deviceId].speed = speed;
 8002ebe:	79fa      	ldrb	r2, [r7, #7]
 8002ec0:	490d      	ldr	r1, [pc, #52]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	3320      	adds	r3, #32
 8002ece:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002ed0:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002ed2:	79fa      	ldrb	r2, [r7, #7]
 8002ed4:	4908      	ldr	r1, [pc, #32]	; (8002ef8 <L6474_StepClockHandler+0x268>)
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	440b      	add	r3, r1
 8002ee0:	3320      	adds	r3, #32
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fa28 	bl	8002340 <L6474_ApplySpeed>
        break;
 8002ef0:	e19e      	b.n	8003230 <L6474_StepClockHandler+0x5a0>
 8002ef2:	e19d      	b.n	8003230 <L6474_StepClockHandler+0x5a0>
 8002ef4:	20000891 	.word	0x20000891
 8002ef8:	20000894 	.word	0x20000894
      uint16_t maxSpeed = devicePrm[deviceId].maxSpeed;
 8002efc:	79fa      	ldrb	r2, [r7, #7]
 8002efe:	499c      	ldr	r1, [pc, #624]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	440b      	add	r3, r1
 8002f0a:	331c      	adds	r3, #28
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	84fb      	strh	r3, [r7, #38]	; 0x26
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8002f10:	79fa      	ldrb	r2, [r7, #7]
 8002f12:	4997      	ldr	r1, [pc, #604]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	440b      	add	r3, r1
 8002f1e:	330c      	adds	r3, #12
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	623b      	str	r3, [r7, #32]
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002f24:	79fa      	ldrb	r2, [r7, #7]
 8002f26:	4992      	ldr	r1, [pc, #584]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	440b      	add	r3, r1
 8002f32:	3322      	adds	r3, #34	; 0x22
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d030      	beq.n	8002f9e <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002f3c:	79fa      	ldrb	r2, [r7, #7]
 8002f3e:	498c      	ldr	r1, [pc, #560]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	440b      	add	r3, r1
 8002f4a:	3322      	adds	r3, #34	; 0x22
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	b2db      	uxtb	r3, r3
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00b      	beq.n	8002f6c <L6474_StepClockHandler+0x2dc>
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002f54:	79fa      	ldrb	r2, [r7, #7]
 8002f56:	4986      	ldr	r1, [pc, #536]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	440b      	add	r3, r1
 8002f62:	3310      	adds	r3, #16
 8002f64:	681b      	ldr	r3, [r3, #0]
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002f66:	6a3a      	ldr	r2, [r7, #32]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d218      	bcs.n	8002f9e <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002f6c:	79fa      	ldrb	r2, [r7, #7]
 8002f6e:	4980      	ldr	r1, [pc, #512]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	440b      	add	r3, r1
 8002f7a:	3322      	adds	r3, #34	; 0x22
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b2db      	uxtb	r3, r3
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d120      	bne.n	8002fc6 <L6474_StepClockHandler+0x336>
            (devicePrm[deviceId].speed > maxSpeed)))
 8002f84:	79fa      	ldrb	r2, [r7, #7]
 8002f86:	497a      	ldr	r1, [pc, #488]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	3320      	adds	r3, #32
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002f98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d213      	bcs.n	8002fc6 <L6474_StepClockHandler+0x336>
        devicePrm[deviceId].motionState = DECELERATING;
 8002f9e:	79fa      	ldrb	r2, [r7, #7]
 8002fa0:	4973      	ldr	r1, [pc, #460]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	440b      	add	r3, r1
 8002fac:	3324      	adds	r3, #36	; 0x24
 8002fae:	2202      	movs	r2, #2
 8002fb0:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8002fb2:	79fa      	ldrb	r2, [r7, #7]
 8002fb4:	496e      	ldr	r1, [pc, #440]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	440b      	add	r3, r1
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
      break;
 8002fc4:	e136      	b.n	8003234 <L6474_StepClockHandler+0x5a4>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002fc6:	79fa      	ldrb	r2, [r7, #7]
 8002fc8:	4969      	ldr	r1, [pc, #420]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3322      	adds	r3, #34	; 0x22
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 812a 	bne.w	8003234 <L6474_StepClockHandler+0x5a4>
               (devicePrm[deviceId].speed < maxSpeed))
 8002fe0:	79fa      	ldrb	r2, [r7, #7]
 8002fe2:	4963      	ldr	r1, [pc, #396]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	3320      	adds	r3, #32
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002ff4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	f240 811c 	bls.w	8003234 <L6474_StepClockHandler+0x5a4>
        devicePrm[deviceId].motionState = ACCELERATING;
 8002ffc:	79fa      	ldrb	r2, [r7, #7]
 8002ffe:	495c      	ldr	r1, [pc, #368]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	440b      	add	r3, r1
 800300a:	3324      	adds	r3, #36	; 0x24
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 8003010:	79fa      	ldrb	r2, [r7, #7]
 8003012:	4957      	ldr	r1, [pc, #348]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	440b      	add	r3, r1
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
      break;
 8003022:	e107      	b.n	8003234 <L6474_StepClockHandler+0x5a4>
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 8003024:	79fa      	ldrb	r2, [r7, #7]
 8003026:	4952      	ldr	r1, [pc, #328]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	330c      	adds	r3, #12
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	61fb      	str	r3, [r7, #28]
      uint16_t speed = devicePrm[deviceId].speed;
 8003038:	79fa      	ldrb	r2, [r7, #7]
 800303a:	494d      	ldr	r1, [pc, #308]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	3320      	adds	r3, #32
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	857b      	strh	r3, [r7, #42]	; 0x2a
      uint32_t deceleration = ((uint32_t)devicePrm[deviceId].deceleration << 16);
 800304c:	79fa      	ldrb	r2, [r7, #7]
 800304e:	4948      	ldr	r1, [pc, #288]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	440b      	add	r3, r1
 800305a:	331a      	adds	r3, #26
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	b29b      	uxth	r3, r3
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	61bb      	str	r3, [r7, #24]
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8003064:	79fa      	ldrb	r2, [r7, #7]
 8003066:	4942      	ldr	r1, [pc, #264]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	440b      	add	r3, r1
 8003072:	3322      	adds	r3, #34	; 0x22
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d10c      	bne.n	8003096 <L6474_StepClockHandler+0x406>
 800307c:	79fa      	ldrb	r2, [r7, #7]
 800307e:	493c      	ldr	r1, [pc, #240]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	331e      	adds	r3, #30
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b29b      	uxth	r3, r3
 8003090:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003092:	429a      	cmp	r2, r3
 8003094:	d917      	bls.n	80030c6 <L6474_StepClockHandler+0x436>
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8003096:	79fa      	ldrb	r2, [r7, #7]
 8003098:	4935      	ldr	r1, [pc, #212]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	3322      	adds	r3, #34	; 0x22
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	b2db      	uxtb	r3, r3
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d010      	beq.n	80030d0 <L6474_StepClockHandler+0x440>
           (relativePos >= devicePrm[deviceId].stepsToTake)))
 80030ae:	79fa      	ldrb	r2, [r7, #7]
 80030b0:	492f      	ldr	r1, [pc, #188]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	440b      	add	r3, r1
 80030bc:	3314      	adds	r3, #20
 80030be:	681b      	ldr	r3, [r3, #0]
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d304      	bcc.n	80030d0 <L6474_StepClockHandler+0x440>
        L6474_HardStop(deviceId);
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe fc8d 	bl	80019e8 <L6474_HardStop>
 80030ce:	e0ac      	b.n	800322a <L6474_StepClockHandler+0x59a>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 80030d0:	79fa      	ldrb	r2, [r7, #7]
 80030d2:	4927      	ldr	r1, [pc, #156]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	440b      	add	r3, r1
 80030de:	3322      	adds	r3, #34	; 0x22
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d117      	bne.n	8003118 <L6474_StepClockHandler+0x488>
               (speed <= devicePrm[deviceId].maxSpeed))
 80030e8:	79fa      	ldrb	r2, [r7, #7]
 80030ea:	4921      	ldr	r1, [pc, #132]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	440b      	add	r3, r1
 80030f6:	331c      	adds	r3, #28
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 80030fc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80030fe:	429a      	cmp	r2, r3
 8003100:	d80a      	bhi.n	8003118 <L6474_StepClockHandler+0x488>
        devicePrm[deviceId].motionState = STEADY;
 8003102:	79fa      	ldrb	r2, [r7, #7]
 8003104:	491a      	ldr	r1, [pc, #104]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	3324      	adds	r3, #36	; 0x24
 8003112:	2203      	movs	r2, #3
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e088      	b.n	800322a <L6474_StepClockHandler+0x59a>
        if (speed > devicePrm[deviceId].minSpeed)
 8003118:	79fa      	ldrb	r2, [r7, #7]
 800311a:	4915      	ldr	r1, [pc, #84]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	440b      	add	r3, r1
 8003126:	331e      	adds	r3, #30
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800312e:	429a      	cmp	r2, r3
 8003130:	f240 8082 	bls.w	8003238 <L6474_StepClockHandler+0x5a8>
          bool speedUpdated = FALSE;
 8003134:	2300      	movs	r3, #0
 8003136:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          if (speed == 0) speed =1;
 800313a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <L6474_StepClockHandler+0x4b4>
 8003140:	2301      	movs	r3, #1
 8003142:	857b      	strh	r3, [r7, #42]	; 0x2a
          devicePrm[deviceId].accu += deceleration / speed;
 8003144:	79fa      	ldrb	r2, [r7, #7]
 8003146:	490a      	ldr	r1, [pc, #40]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	440b      	add	r3, r1
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	fbb2 f3f3 	udiv	r3, r2, r3
 800315c:	79fa      	ldrb	r2, [r7, #7]
 800315e:	4419      	add	r1, r3
 8003160:	4803      	ldr	r0, [pc, #12]	; (8003170 <L6474_StepClockHandler+0x4e0>)
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4403      	add	r3, r0
 800316c:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 800316e:	e01c      	b.n	80031aa <L6474_StepClockHandler+0x51a>
 8003170:	20000894 	.word	0x20000894
            devicePrm[deviceId].accu -= (0X10000L);
 8003174:	79fa      	ldrb	r2, [r7, #7]
 8003176:	4934      	ldr	r1, [pc, #208]	; (8003248 <L6474_StepClockHandler+0x5b8>)
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	440b      	add	r3, r1
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	79fa      	ldrb	r2, [r7, #7]
 8003186:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 800318a:	482f      	ldr	r0, [pc, #188]	; (8003248 <L6474_StepClockHandler+0x5b8>)
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4403      	add	r3, r0
 8003196:	6019      	str	r1, [r3, #0]
            if (speed > 1)
 8003198:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800319a:	2b01      	cmp	r3, #1
 800319c:	d902      	bls.n	80031a4 <L6474_StepClockHandler+0x514>
              speed -=1;
 800319e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031a0:	3b01      	subs	r3, #1
 80031a2:	857b      	strh	r3, [r7, #42]	; 0x2a
            speedUpdated = TRUE;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          while (devicePrm[deviceId].accu >= (0X10000L))
 80031aa:	79fa      	ldrb	r2, [r7, #7]
 80031ac:	4926      	ldr	r1, [pc, #152]	; (8003248 <L6474_StepClockHandler+0x5b8>)
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031be:	d2d9      	bcs.n	8003174 <L6474_StepClockHandler+0x4e4>
          if (speedUpdated)
 80031c0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d037      	beq.n	8003238 <L6474_StepClockHandler+0x5a8>
            if (speed < devicePrm[deviceId].minSpeed)
 80031c8:	79fa      	ldrb	r2, [r7, #7]
 80031ca:	491f      	ldr	r1, [pc, #124]	; (8003248 <L6474_StepClockHandler+0x5b8>)
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	440b      	add	r3, r1
 80031d6:	331e      	adds	r3, #30
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80031de:	429a      	cmp	r2, r3
 80031e0:	d209      	bcs.n	80031f6 <L6474_StepClockHandler+0x566>
              speed = devicePrm[deviceId].minSpeed;
 80031e2:	79fa      	ldrb	r2, [r7, #7]
 80031e4:	4918      	ldr	r1, [pc, #96]	; (8003248 <L6474_StepClockHandler+0x5b8>)
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	440b      	add	r3, r1
 80031f0:	331e      	adds	r3, #30
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	857b      	strh	r3, [r7, #42]	; 0x2a
            devicePrm[deviceId].speed = speed;
 80031f6:	79fa      	ldrb	r2, [r7, #7]
 80031f8:	4913      	ldr	r1, [pc, #76]	; (8003248 <L6474_StepClockHandler+0x5b8>)
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	440b      	add	r3, r1
 8003204:	3320      	adds	r3, #32
 8003206:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003208:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 800320a:	79fa      	ldrb	r2, [r7, #7]
 800320c:	490e      	ldr	r1, [pc, #56]	; (8003248 <L6474_StepClockHandler+0x5b8>)
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	440b      	add	r3, r1
 8003218:	3320      	adds	r3, #32
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b29a      	uxth	r2, r3
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f88c 	bl	8002340 <L6474_ApplySpeed>
      break;
 8003228:	e006      	b.n	8003238 <L6474_StepClockHandler+0x5a8>
 800322a:	e005      	b.n	8003238 <L6474_StepClockHandler+0x5a8>
      break;
 800322c:	bf00      	nop
 800322e:	e004      	b.n	800323a <L6474_StepClockHandler+0x5aa>
        break;
 8003230:	bf00      	nop
 8003232:	e002      	b.n	800323a <L6474_StepClockHandler+0x5aa>
      break;
 8003234:	bf00      	nop
 8003236:	e000      	b.n	800323a <L6474_StepClockHandler+0x5aa>
      break;
 8003238:	bf00      	nop
    }
  }  
  /* Set isr flag */
  isrFlag = FALSE;
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <L6474_StepClockHandler+0x5bc>)
 800323c:	2200      	movs	r2, #0
 800323e:	701a      	strb	r2, [r3, #0]
}
 8003240:	bf00      	nop
 8003242:	3730      	adds	r7, #48	; 0x30
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000894 	.word	0x20000894
 800324c:	20000891 	.word	0x20000891

08003250 <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 800325a:	edd7 7a01 	vldr	s15, [r7, #4]
 800325e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003290 <L6474_Ocd_Th_to_Par+0x40>
 8003262:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003266:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003294 <L6474_Ocd_Th_to_Par+0x44>
 800326a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800326e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003272:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800327a:	edc7 7a00 	vstr	s15, [r7]
 800327e:	783b      	ldrb	r3, [r7, #0]
 8003280:	b2db      	uxtb	r3, r3
}
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	43bb8000 	.word	0x43bb8000
 8003294:	3b2eb80f 	.word	0x3b2eb80f

08003298 <L6474_Ocd_Par_to_Th>:
 * @brief Converts  OCD_TH register values in mA 
 * @param[in] Par OCD regiser value
 * @retval mA
 **********************************************************/
inline float L6474_Ocd_Par_to_Th(uint8_t Par)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1))*375.f);
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	3301      	adds	r3, #1
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ae:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80032c4 <L6474_Ocd_Par_to_Th+0x2c>
 80032b2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80032b6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	43bb8000 	.word	0x43bb8000

080032c8 <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 80032d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80032d6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003308 <L6474_Tval_Current_to_Par+0x40>
 80032da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032de:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800330c <L6474_Tval_Current_to_Par+0x44>
 80032e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032f2:	edc7 7a00 	vstr	s15, [r7]
 80032f6:	783b      	ldrb	r3, [r7, #0]
 80032f8:	b2db      	uxtb	r3, r3
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	41fa0000 	.word	0x41fa0000
 800330c:	3d03126f 	.word	0x3d03126f

08003310 <L6474_Tval_Par_to_Current>:
 * @brief Converts  TVAL register values in mA 
 * @param[in] Par TVAL regiser value
 * @retval mA
 **********************************************************/
inline float L6474_Tval_Par_to_Current(uint8_t Par)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1))*31.25f);
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	3301      	adds	r3, #1
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003326:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800333c <L6474_Tval_Par_to_Current+0x2c>
 800332a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800332e:	eeb0 0a67 	vmov.f32	s0, s15
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	41fa0000 	.word	0x41fa0000

08003340 <L6474_Tmin_Par_to_Time>:
 * @brief Convert TON/TOFF values in time (us)
 * @param[in] Par Values from TON_MIN/TOFF_MIN 
 * @retval time in us
 **********************************************************/
inline float L6474_Tmin_Par_to_Time(uint8_t Par)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1)) * 0.5f);
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	3301      	adds	r3, #1
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003356:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800335a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800335e:	eeb0 0a67 	vmov.f32	s0, s15
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 8003376:	edd7 7a01 	vldr	s15, [r7, #4]
 800337a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800337e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003382:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003386:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800338a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800338e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003392:	edc7 7a00 	vstr	s15, [r7]
 8003396:	783b      	ldrb	r3, [r7, #0]
 8003398:	b2db      	uxtb	r3, r3
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <L6474_WriteBytes+0x40>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	6839      	ldr	r1, [r7, #0]
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fa95 	bl	80038ec <L6474_Board_SpiWriteBytes>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 80033c8:	f248 0001 	movw	r0, #32769	; 0x8001
 80033cc:	f7ff f8d6 	bl	800257c <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <L6474_WriteBytes+0x44>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <L6474_WriteBytes+0x48>)
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
  }
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000874 	.word	0x20000874
 80033ec:	20000891 	.word	0x20000891
 80033f0:	20000890 	.word	0x20000890

080033f4 <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fe91 	bl	8004124 <HAL_Delay>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800340e:	b672      	cpsid	i
}
 8003410:	bf00      	nop
  __disable_irq();
}
 8003412:	bf00      	nop
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8003420:	b662      	cpsie	i
}
 8003422:	bf00      	nop
  __enable_irq();
}
 8003424:	bf00      	nop
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08a      	sub	sp, #40	; 0x28
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d165      	bne.n	800350c <L6474_Board_GpioInit+0xdc>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	4b4f      	ldr	r3, [pc, #316]	; (8003584 <L6474_Board_GpioInit+0x154>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	4a4e      	ldr	r2, [pc, #312]	; (8003584 <L6474_Board_GpioInit+0x154>)
 800344a:	f043 0304 	orr.w	r3, r3, #4
 800344e:	6313      	str	r3, [r2, #48]	; 0x30
 8003450:	4b4c      	ldr	r3, [pc, #304]	; (8003584 <L6474_Board_GpioInit+0x154>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	4b48      	ldr	r3, [pc, #288]	; (8003584 <L6474_Board_GpioInit+0x154>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	4a47      	ldr	r2, [pc, #284]	; (8003584 <L6474_Board_GpioInit+0x154>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6313      	str	r3, [r2, #48]	; 0x30
 800346c:	4b45      	ldr	r3, [pc, #276]	; (8003584 <L6474_Board_GpioInit+0x154>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	4b41      	ldr	r3, [pc, #260]	; (8003584 <L6474_Board_GpioInit+0x154>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	4a40      	ldr	r2, [pc, #256]	; (8003584 <L6474_Board_GpioInit+0x154>)
 8003482:	f043 0302 	orr.w	r3, r3, #2
 8003486:	6313      	str	r3, [r2, #48]	; 0x30
 8003488:	4b3e      	ldr	r3, [pc, #248]	; (8003584 <L6474_Board_GpioInit+0x154>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8003494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800349a:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <L6474_Board_GpioInit+0x158>)
 800349c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800349e:	2301      	movs	r3, #1
 80034a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80034a2:	2301      	movs	r3, #1
 80034a4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 80034a6:	f107 0314 	add.w	r3, r7, #20
 80034aa:	4619      	mov	r1, r3
 80034ac:	4837      	ldr	r0, [pc, #220]	; (800358c <L6474_Board_GpioInit+0x15c>)
 80034ae:	f001 fae3 	bl	8004a78 <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 80034b2:	2200      	movs	r2, #0
 80034b4:	2105      	movs	r1, #5
 80034b6:	2028      	movs	r0, #40	; 0x28
 80034b8:	f000 ff2f 	bl	800431a <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 80034bc:	2028      	movs	r0, #40	; 0x28
 80034be:	f000 ff48 	bl	8004352 <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 80034c2:	2340      	movs	r3, #64	; 0x40
 80034c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c6:	2301      	movs	r3, #1
 80034c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80034ce:	2301      	movs	r3, #1
 80034d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 80034d2:	f107 0314 	add.w	r3, r7, #20
 80034d6:	4619      	mov	r1, r3
 80034d8:	482d      	ldr	r0, [pc, #180]	; (8003590 <L6474_Board_GpioInit+0x160>)
 80034da:	f001 facd 	bl	8004a78 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 80034de:	2201      	movs	r2, #1
 80034e0:	2140      	movs	r1, #64	; 0x40
 80034e2:	482b      	ldr	r0, [pc, #172]	; (8003590 <L6474_Board_GpioInit+0x160>)
 80034e4:	f001 fc4c 	bl	8004d80 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 80034e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ee:	2301      	movs	r3, #1
 80034f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80034f6:	2301      	movs	r3, #1
 80034f8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 80034fa:	f107 0314 	add.w	r3, r7, #20
 80034fe:	4619      	mov	r1, r3
 8003500:	4822      	ldr	r0, [pc, #136]	; (800358c <L6474_Board_GpioInit+0x15c>)
 8003502:	f001 fab9 	bl	8004a78 <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 8003506:	2000      	movs	r0, #0
 8003508:	f000 f976 	bl	80037f8 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d025      	beq.n	800355e <L6474_Board_GpioInit+0x12e>
 8003512:	2b02      	cmp	r3, #2
 8003514:	dc32      	bgt.n	800357c <L6474_Board_GpioInit+0x14c>
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <L6474_Board_GpioInit+0xf0>
 800351a:	2b01      	cmp	r3, #1
 800351c:	d010      	beq.n	8003540 <L6474_Board_GpioInit+0x110>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 800351e:	e02d      	b.n	800357c <L6474_Board_GpioInit+0x14c>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 8003520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003524:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003526:	2301      	movs	r3, #1
 8003528:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800352e:	2301      	movs	r3, #1
 8003530:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 8003532:	f107 0314 	add.w	r3, r7, #20
 8003536:	4619      	mov	r1, r3
 8003538:	4814      	ldr	r0, [pc, #80]	; (800358c <L6474_Board_GpioInit+0x15c>)
 800353a:	f001 fa9d 	bl	8004a78 <HAL_GPIO_Init>
      break;
 800353e:	e01d      	b.n	800357c <L6474_Board_GpioInit+0x14c>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 8003540:	2320      	movs	r3, #32
 8003542:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003544:	2301      	movs	r3, #1
 8003546:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800354c:	2301      	movs	r3, #1
 800354e:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 8003550:	f107 0314 	add.w	r3, r7, #20
 8003554:	4619      	mov	r1, r3
 8003556:	480e      	ldr	r0, [pc, #56]	; (8003590 <L6474_Board_GpioInit+0x160>)
 8003558:	f001 fa8e 	bl	8004a78 <HAL_GPIO_Init>
      break;
 800355c:	e00e      	b.n	800357c <L6474_Board_GpioInit+0x14c>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 800355e:	2310      	movs	r3, #16
 8003560:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003562:	2301      	movs	r3, #1
 8003564:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800356a:	2301      	movs	r3, #1
 800356c:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	4619      	mov	r1, r3
 8003574:	4806      	ldr	r0, [pc, #24]	; (8003590 <L6474_Board_GpioInit+0x160>)
 8003576:	f001 fa7f 	bl	8004a78 <HAL_GPIO_Init>
        break;
 800357a:	bf00      	nop
}
 800357c:	bf00      	nop
 800357e:	3728      	adds	r7, #40	; 0x28
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40023800 	.word	0x40023800
 8003588:	10210000 	.word	0x10210000
 800358c:	40020000 	.word	0x40020000
 8003590:	40020400 	.word	0x40020400

08003594 <L6474_Board_Pwm1GetCounter>:

/******************************************************//**
 * @brief  Returns the current value of the counter used by PWM1, used by device 0
 * @retval the counter value
 **********************************************************/
uint32_t L6474_Board_Pwm1GetCounter() {
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
	return hTimPwm1.Instance->CNT;
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <L6474_Board_Pwm1GetCounter+0x14>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800359e:	4618      	mov	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	20000964 	.word	0x20000964

080035ac <L6474_Board_Pwm1SetPeriod>:
 * @brief  Sets the period of PWM1 used by device 0
 * @param[in] period in counter increments
 * @retval None
 **********************************************************/
void L6474_Board_Pwm1SetPeriod(uint32_t period)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SetAutoreload(&hTimPwm1, period-1);
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <L6474_Board_Pwm1SetPeriod+0x34>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	3a01      	subs	r2, #1
 80035bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <L6474_Board_Pwm1SetPeriod+0x34>)
 80035c4:	60d3      	str	r3, [r2, #12]
//  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
  if (hTimPwm1.Instance->CCER == 0) { // Check if a capture compare channel has not been enabled yet
 80035c6:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <L6474_Board_Pwm1SetPeriod+0x34>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d103      	bne.n	80035d8 <L6474_Board_Pwm1SetPeriod+0x2c>
	  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 80035d0:	2104      	movs	r1, #4
 80035d2:	4803      	ldr	r0, [pc, #12]	; (80035e0 <L6474_Board_Pwm1SetPeriod+0x34>)
 80035d4:	f002 fbae 	bl	8005d34 <HAL_TIM_PWM_Start_IT>
  }
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000964 	.word	0x20000964

080035e4 <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 80035ee:	f001 ff2b 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 80035f2:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	029b      	lsls	r3, r3, #10
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <L6474_Board_Pwm1SetFreq+0x48>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	62da      	str	r2, [r3, #44]	; 0x2c
 800360a:	4a08      	ldr	r2, [pc, #32]	; (800362c <L6474_Board_Pwm1SetFreq+0x48>)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	60d3      	str	r3, [r2, #12]
//  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
  if (hTimPwm1.Instance->CCER == 0) { // Check if a capture compare channel has not been enabled yet
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <L6474_Board_Pwm1SetFreq+0x48>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d103      	bne.n	8003622 <L6474_Board_Pwm1SetFreq+0x3e>
	  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 800361a:	2104      	movs	r1, #4
 800361c:	4803      	ldr	r0, [pc, #12]	; (800362c <L6474_Board_Pwm1SetFreq+0x48>)
 800361e:	f002 fb89 	bl	8005d34 <HAL_TIM_PWM_Start_IT>
  }
}
 8003622:	bf00      	nop
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000964 	.word	0x20000964

08003630 <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 800363a:	f001 ff05 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 800363e:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	029b      	lsls	r3, r3, #10
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 800364e:	4b0b      	ldr	r3, [pc, #44]	; (800367c <L6474_Board_Pwm2SetFreq+0x4c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	62da      	str	r2, [r3, #44]	; 0x2c
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <L6474_Board_Pwm2SetFreq+0x4c>)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 800365c:	4b07      	ldr	r3, [pc, #28]	; (800367c <L6474_Board_Pwm2SetFreq+0x4c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3334      	adds	r3, #52	; 0x34
 8003662:	3304      	adds	r3, #4
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	0852      	lsrs	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 800366a:	2104      	movs	r1, #4
 800366c:	4803      	ldr	r0, [pc, #12]	; (800367c <L6474_Board_Pwm2SetFreq+0x4c>)
 800366e:	f002 fb61 	bl	8005d34 <HAL_TIM_PWM_Start_IT>
}
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	200009a0 	.word	0x200009a0

08003680 <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 800368a:	f001 fedd 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 800368e:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	02db      	lsls	r3, r3, #11
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	fbb2 f3f3 	udiv	r3, r2, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <L6474_Board_Pwm3SetFreq+0x4c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <L6474_Board_Pwm3SetFreq+0x4c>)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <L6474_Board_Pwm3SetFreq+0x4c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3334      	adds	r3, #52	; 0x34
 80036b2:	3308      	adds	r3, #8
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	0852      	lsrs	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 80036ba:	2108      	movs	r1, #8
 80036bc:	4803      	ldr	r0, [pc, #12]	; (80036cc <L6474_Board_Pwm3SetFreq+0x4c>)
 80036be:	f002 fb39 	bl	8005d34 <HAL_TIM_PWM_Start_IT>
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200009dc 	.word	0x200009dc

080036d0 <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	; 0x38
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d00a      	beq.n	80036f6 <L6474_Board_PwmInit+0x26>
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d010      	beq.n	8003706 <L6474_Board_PwmInit+0x36>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 80036e4:	4b21      	ldr	r3, [pc, #132]	; (800376c <L6474_Board_PwmInit+0x9c>)
 80036e6:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 80036e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036ee:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 80036f0:	2304      	movs	r3, #4
 80036f2:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 80036f4:	e00f      	b.n	8003716 <L6474_Board_PwmInit+0x46>
    case  1:
      pHTim = &hTimPwm2;
 80036f6:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <L6474_Board_PwmInit+0xa0>)
 80036f8:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <L6474_Board_PwmInit+0xa4>)
 80036fe:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 8003700:	2304      	movs	r3, #4
 8003702:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003704:	e007      	b.n	8003716 <L6474_Board_PwmInit+0x46>


    case 2:
      pHTim = &hTimPwm3;
 8003706:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <L6474_Board_PwmInit+0xa8>)
 8003708:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 800370a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370c:	4a1b      	ldr	r2, [pc, #108]	; (800377c <L6474_Board_PwmInit+0xac>)
 800370e:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 8003710:	2308      	movs	r3, #8
 8003712:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003714:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 8003716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003718:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800371c:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 800371e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003720:	2200      	movs	r2, #0
 8003722:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003726:	2200      	movs	r2, #0
 8003728:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 800372a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800372c:	f002 fa8a 	bl	8005c44 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003730:	2360      	movs	r3, #96	; 0x60
 8003732:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003738:	2300      	movs	r3, #0
 800373a:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800373c:	2300      	movs	r3, #0
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003746:	4619      	mov	r1, r3
 8003748:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800374a:	f002 fd37 	bl	80061bc <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8003756:	f107 030c 	add.w	r3, r7, #12
 800375a:	4619      	mov	r1, r3
 800375c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800375e:	f003 f85b 	bl	8006818 <HAL_TIMEx_MasterConfigSynchronization>
}
 8003762:	bf00      	nop
 8003764:	3738      	adds	r7, #56	; 0x38
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000964 	.word	0x20000964
 8003770:	200009a0 	.word	0x200009a0
 8003774:	40000400 	.word	0x40000400
 8003778:	200009dc 	.word	0x200009dc
 800377c:	40000800 	.word	0x40000800

08003780 <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d010      	beq.n	80037b2 <L6474_Board_PwmStop+0x32>
 8003790:	2b02      	cmp	r3, #2
 8003792:	dc13      	bgt.n	80037bc <L6474_Board_PwmStop+0x3c>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <L6474_Board_PwmStop+0x1e>
 8003798:	2b01      	cmp	r3, #1
 800379a:	d005      	beq.n	80037a8 <L6474_Board_PwmStop+0x28>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 800379c:	e00e      	b.n	80037bc <L6474_Board_PwmStop+0x3c>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 800379e:	2104      	movs	r1, #4
 80037a0:	4809      	ldr	r0, [pc, #36]	; (80037c8 <L6474_Board_PwmStop+0x48>)
 80037a2:	f002 fa7b 	bl	8005c9c <HAL_TIM_PWM_Stop>
      break;
 80037a6:	e00a      	b.n	80037be <L6474_Board_PwmStop+0x3e>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 80037a8:	2104      	movs	r1, #4
 80037aa:	4808      	ldr	r0, [pc, #32]	; (80037cc <L6474_Board_PwmStop+0x4c>)
 80037ac:	f002 fa76 	bl	8005c9c <HAL_TIM_PWM_Stop>
      break;
 80037b0:	e005      	b.n	80037be <L6474_Board_PwmStop+0x3e>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 80037b2:	2108      	movs	r1, #8
 80037b4:	4806      	ldr	r0, [pc, #24]	; (80037d0 <L6474_Board_PwmStop+0x50>)
 80037b6:	f002 fa71 	bl	8005c9c <HAL_TIM_PWM_Stop>
      break;
 80037ba:	e000      	b.n	80037be <L6474_Board_PwmStop+0x3e>
      break;//ignore error
 80037bc:	bf00      	nop
  }
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000964 	.word	0x20000964
 80037cc:	200009a0 	.word	0x200009a0
 80037d0:	200009dc 	.word	0x200009dc

080037d4 <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_SET); 
 80037de:	2201      	movs	r2, #1
 80037e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037e4:	4803      	ldr	r0, [pc, #12]	; (80037f4 <L6474_Board_ReleaseReset+0x20>)
 80037e6:	f001 facb 	bl	8004d80 <HAL_GPIO_WritePin>
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40020000 	.word	0x40020000

080037f8 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_RESET); 
 8003802:	2200      	movs	r2, #0
 8003804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003808:	4803      	ldr	r0, [pc, #12]	; (8003818 <L6474_Board_Reset+0x20>)
 800380a:	f001 fab9 	bl	8004d80 <HAL_GPIO_WritePin>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40020000 	.word	0x40020000

0800381c <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	460a      	mov	r2, r1
 8003826:	71fb      	strb	r3, [r7, #7]
 8003828:	4613      	mov	r3, r2
 800382a:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d006      	beq.n	8003840 <L6474_Board_SetDirectionGpio+0x24>
 8003832:	2b02      	cmp	r3, #2
 8003834:	dc1a      	bgt.n	800386c <L6474_Board_SetDirectionGpio+0x50>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d010      	beq.n	800385c <L6474_Board_SetDirectionGpio+0x40>
 800383a:	2b01      	cmp	r3, #1
 800383c:	d007      	beq.n	800384e <L6474_Board_SetDirectionGpio+0x32>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 800383e:	e015      	b.n	800386c <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 8003840:	79bb      	ldrb	r3, [r7, #6]
 8003842:	461a      	mov	r2, r3
 8003844:	2110      	movs	r1, #16
 8003846:	480b      	ldr	r0, [pc, #44]	; (8003874 <L6474_Board_SetDirectionGpio+0x58>)
 8003848:	f001 fa9a 	bl	8004d80 <HAL_GPIO_WritePin>
      break;
 800384c:	e00e      	b.n	800386c <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 800384e:	79bb      	ldrb	r3, [r7, #6]
 8003850:	461a      	mov	r2, r3
 8003852:	2120      	movs	r1, #32
 8003854:	4807      	ldr	r0, [pc, #28]	; (8003874 <L6474_Board_SetDirectionGpio+0x58>)
 8003856:	f001 fa93 	bl	8004d80 <HAL_GPIO_WritePin>
      break;
 800385a:	e007      	b.n	800386c <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 800385c:	79bb      	ldrb	r3, [r7, #6]
 800385e:	461a      	mov	r2, r3
 8003860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003864:	4804      	ldr	r0, [pc, #16]	; (8003878 <L6474_Board_SetDirectionGpio+0x5c>)
 8003866:	f001 fa8b 	bl	8004d80 <HAL_GPIO_WritePin>
      break;
 800386a:	bf00      	nop
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40020400 	.word	0x40020400
 8003878:	40020000 	.word	0x40020000

0800387c <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 8003882:	4b18      	ldr	r3, [pc, #96]	; (80038e4 <L6474_Board_SpiInit+0x68>)
 8003884:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <L6474_Board_SpiInit+0x6c>)
 8003886:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8003888:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <L6474_Board_SpiInit+0x68>)
 800388a:	2220      	movs	r2, #32
 800388c:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 800388e:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <L6474_Board_SpiInit+0x68>)
 8003890:	2200      	movs	r2, #0
 8003892:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8003894:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <L6474_Board_SpiInit+0x68>)
 8003896:	2201      	movs	r2, #1
 8003898:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <L6474_Board_SpiInit+0x68>)
 800389c:	2202      	movs	r2, #2
 800389e:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 80038a0:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <L6474_Board_SpiInit+0x68>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <L6474_Board_SpiInit+0x68>)
 80038a8:	2207      	movs	r2, #7
 80038aa:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 80038ac:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <L6474_Board_SpiInit+0x68>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <L6474_Board_SpiInit+0x68>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <L6474_Board_SpiInit+0x68>)
 80038ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038be:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <L6474_Board_SpiInit+0x68>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <L6474_Board_SpiInit+0x68>)
 80038c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038cc:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 80038ce:	4805      	ldr	r0, [pc, #20]	; (80038e4 <L6474_Board_SpiInit+0x68>)
 80038d0:	f001 feb4 	bl	800563c <HAL_SPI_Init>
 80038d4:	4603      	mov	r3, r0
 80038d6:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 80038d8:	79fb      	ldrb	r3, [r7, #7]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	2000090c 	.word	0x2000090c
 80038e8:	40013000 	.word	0x40013000

080038ec <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	4613      	mov	r3, r2
 80038f8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 80038fa:	2200      	movs	r2, #0
 80038fc:	2140      	movs	r1, #64	; 0x40
 80038fe:	4816      	ldr	r0, [pc, #88]	; (8003958 <L6474_Board_SpiWriteBytes+0x6c>)
 8003900:	f001 fa3e 	bl	8004d80 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	e016      	b.n	8003938 <L6474_Board_SpiWriteBytes+0x4c>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 800390a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2301      	movs	r3, #1
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	68f9      	ldr	r1, [r7, #12]
 8003916:	4811      	ldr	r0, [pc, #68]	; (800395c <L6474_Board_SpiWriteBytes+0x70>)
 8003918:	f001 fefb 	bl	8005712 <HAL_SPI_TransmitReceive>
 800391c:	4603      	mov	r3, r0
 800391e:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10d      	bne.n	8003942 <L6474_Board_SpiWriteBytes+0x56>
    {
      break;
    }
    pByteToTransmit++;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3301      	adds	r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	3301      	adds	r3, #1
 8003930:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	3301      	adds	r3, #1
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	429a      	cmp	r2, r3
 800393e:	d3e4      	bcc.n	800390a <L6474_Board_SpiWriteBytes+0x1e>
 8003940:	e000      	b.n	8003944 <L6474_Board_SpiWriteBytes+0x58>
      break;
 8003942:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8003944:	2201      	movs	r2, #1
 8003946:	2140      	movs	r1, #64	; 0x40
 8003948:	4803      	ldr	r0, [pc, #12]	; (8003958 <L6474_Board_SpiWriteBytes+0x6c>)
 800394a:	f001 fa19 	bl	8004d80 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 800394e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40020400 	.word	0x40020400
 800395c:	2000090c 	.word	0x2000090c

08003960 <l647x_GetMotorHandle>:
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
 8003964:	2300      	movs	r3, #0
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
 8003974:	2300      	movs	r3, #0
 8003976:	4618      	mov	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <Powerstep01_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
 8003984:	2300      	movs	r3, #0
 8003986:	4618      	mov	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <L6206_GetMotorHandle>:
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
 8003994:	2300      	movs	r3, #0
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	2300      	movs	r3, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	2300      	movs	r3, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	2300      	movs	r3, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <BSP_MotorControl_AttachErrorHandler+0x38>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <BSP_MotorControl_AttachErrorHandler+0x26>
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <BSP_MotorControl_AttachErrorHandler+0x38>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <BSP_MotorControl_AttachErrorHandler+0x26>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 80039ea:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <BSP_MotorControl_AttachErrorHandler+0x38>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	4798      	blx	r3
 80039f4:	e004      	b.n	8003a00 <BSP_MotorControl_AttachErrorHandler+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 80039f6:	f640 0002 	movw	r0, #2050	; 0x802
 80039fa:	f000 f825 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }
}
 80039fe:	bf00      	nop
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000a18 	.word	0x20000a18

08003a0c <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
 8003a30:	e004      	b.n	8003a3c <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8003a32:	f640 0003 	movw	r0, #2051	; 0x803
 8003a36:	f000 f807 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000a18 	.word	0x20000a18

08003a48 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <BSP_MotorControl_ErrorHandler+0x38>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00d      	beq.n	8003a76 <BSP_MotorControl_ErrorHandler+0x2e>
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <BSP_MotorControl_ErrorHandler+0x38>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <BSP_MotorControl_ErrorHandler+0x38>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	4610      	mov	r0, r2
 8003a72:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8003a74:	e000      	b.n	8003a78 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 8003a76:	e7fe      	b.n	8003a76 <BSP_MotorControl_ErrorHandler+0x2e>
}
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000a18 	.word	0x20000a18

08003a84 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	6039      	str	r1, [r7, #0]
 8003a8e:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <BSP_MotorControl_Init+0x3c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <BSP_MotorControl_Init+0x2a>
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <BSP_MotorControl_Init+0x3c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <BSP_MotorControl_Init+0x2a>
  {
    motorDrvHandle->Init(initDeviceParameters);
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <BSP_MotorControl_Init+0x3c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6838      	ldr	r0, [r7, #0]
 8003aaa:	4798      	blx	r3
 8003aac:	e004      	b.n	8003ab8 <BSP_MotorControl_Init+0x34>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 8003aae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003ab2:	f7ff ffc9 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003ab6:	bf00      	nop
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000a18 	.word	0x20000a18

08003ac4 <BSP_MotorControl_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void BSP_MotorControl_FlagInterruptHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  if ((motorDrvHandle != 0)&&(motorDrvHandle->FlagInterruptHandler != 0))
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d009      	beq.n	8003ae4 <BSP_MotorControl_FlagInterruptHandler+0x20>
 8003ad0:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d004      	beq.n	8003ae4 <BSP_MotorControl_FlagInterruptHandler+0x20>
  {
    motorDrvHandle->FlagInterruptHandler();
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	4798      	blx	r3
 8003ae2:	e004      	b.n	8003aee <BSP_MotorControl_FlagInterruptHandler+0x2a>
  }    
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(5);
 8003ae4:	f640 0005 	movw	r0, #2053	; 0x805
 8003ae8:	f7ff ffae 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003aec:	bf00      	nop
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000a18 	.word	0x20000a18

08003af8 <BSP_MotorControl_GetDeviceState>:
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval State ACCELERATING, DECELERATING, STEADY or INACTIVE for stepper motor,
                 STEADY or INACTIVE for Brush DC motor
 **********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	71fb      	strb	r3, [r7, #7]
  motorState_t state = INACTIVE;
 8003b02:	2308      	movs	r3, #8
 8003b04:	73fb      	strb	r3, [r7, #15]

  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeviceState != 0))
 8003b06:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <BSP_MotorControl_GetDeviceState+0x44>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <BSP_MotorControl_GetDeviceState+0x32>
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <BSP_MotorControl_GetDeviceState+0x44>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <BSP_MotorControl_GetDeviceState+0x32>
  {
    state = motorDrvHandle->GetDeviceState(deviceId);
 8003b18:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <BSP_MotorControl_GetDeviceState+0x44>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	79fa      	ldrb	r2, [r7, #7]
 8003b20:	4610      	mov	r0, r2
 8003b22:	4798      	blx	r3
 8003b24:	4603      	mov	r3, r0
 8003b26:	73fb      	strb	r3, [r7, #15]
 8003b28:	e003      	b.n	8003b32 <BSP_MotorControl_GetDeviceState+0x3a>
  }      
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
 8003b2a:	f640 0009 	movw	r0, #2057	; 0x809
 8003b2e:	f7ff ff8b 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }  
  return(state);   
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000a18 	.word	0x20000a18

08003b40 <BSP_MotorControl_GetPosition>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t BSP_MotorControl_GetPosition(uint8_t deviceId)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
  int32_t pos = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
  
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetPosition != 0))
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <BSP_MotorControl_GetPosition+0x44>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00c      	beq.n	8003b70 <BSP_MotorControl_GetPosition+0x30>
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <BSP_MotorControl_GetPosition+0x44>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <BSP_MotorControl_GetPosition+0x30>
  {
    pos = motorDrvHandle->GetPosition(deviceId);
 8003b60:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <BSP_MotorControl_GetPosition+0x44>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	79fa      	ldrb	r2, [r7, #7]
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4798      	blx	r3
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	e003      	b.n	8003b78 <BSP_MotorControl_GetPosition+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(14);
 8003b70:	f640 000e 	movw	r0, #2062	; 0x80e
 8003b74:	f7ff ff68 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }      
  return(pos);
 8003b78:	68fb      	ldr	r3, [r7, #12]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000a18 	.word	0x20000a18

08003b88 <BSP_MotorControl_GoTo>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void BSP_MotorControl_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	6039      	str	r1, [r7, #0]
 8003b92:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GoTo != 0))
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <BSP_MotorControl_GoTo+0x40>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00c      	beq.n	8003bb6 <BSP_MotorControl_GoTo+0x2e>
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <BSP_MotorControl_GoTo+0x40>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <BSP_MotorControl_GoTo+0x2e>
  {
    motorDrvHandle->GoTo(deviceId, targetPosition);
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <BSP_MotorControl_GoTo+0x40>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	79fa      	ldrb	r2, [r7, #7]
 8003bae:	6839      	ldr	r1, [r7, #0]
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4798      	blx	r3
 8003bb4:	e004      	b.n	8003bc0 <BSP_MotorControl_GoTo+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(17);
 8003bb6:	f640 0011 	movw	r0, #2065	; 0x811
 8003bba:	f7ff ff45 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }      
}
 8003bbe:	bf00      	nop
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	20000a18 	.word	0x20000a18

08003bcc <BSP_MotorControl_HardStop>:
 *            For L6208: dummy parameter for compatibility with motor.h
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval None
 **********************************************************/
void BSP_MotorControl_HardStop(uint8_t deviceId) 
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->HardStop != 0))
 8003bd6:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <BSP_MotorControl_HardStop+0x3c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <BSP_MotorControl_HardStop+0x2a>
 8003bde:	4b0a      	ldr	r3, [pc, #40]	; (8003c08 <BSP_MotorControl_HardStop+0x3c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d006      	beq.n	8003bf6 <BSP_MotorControl_HardStop+0x2a>
  {
    motorDrvHandle->HardStop(deviceId);
 8003be8:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <BSP_MotorControl_HardStop+0x3c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bee:	79fa      	ldrb	r2, [r7, #7]
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4798      	blx	r3
 8003bf4:	e004      	b.n	8003c00 <BSP_MotorControl_HardStop+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(18);
 8003bf6:	f640 0012 	movw	r0, #2066	; 0x812
 8003bfa:	f7ff ff25 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }      
}
 8003bfe:	bf00      	nop
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000a18 	.word	0x20000a18

08003c0c <BSP_MotorControl_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void BSP_MotorControl_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	603a      	str	r2, [r7, #0]
 8003c16:	71fb      	strb	r3, [r7, #7]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	71bb      	strb	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Move != 0))
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <BSP_MotorControl_Move+0x44>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00c      	beq.n	8003c3e <BSP_MotorControl_Move+0x32>
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <BSP_MotorControl_Move+0x44>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d007      	beq.n	8003c3e <BSP_MotorControl_Move+0x32>
  {
    motorDrvHandle->Move(deviceId, direction, stepCount);
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <BSP_MotorControl_Move+0x44>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c34:	79b9      	ldrb	r1, [r7, #6]
 8003c36:	79f8      	ldrb	r0, [r7, #7]
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	4798      	blx	r3
 8003c3c:	e004      	b.n	8003c48 <BSP_MotorControl_Move+0x3c>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(19);
 8003c3e:	f640 0013 	movw	r0, #2067	; 0x813
 8003c42:	f7ff ff01 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }      
}
 8003c46:	bf00      	nop
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000a18 	.word	0x20000a18

08003c54 <BSP_MotorControl_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	460a      	mov	r2, r1
 8003c5e:	71fb      	strb	r3, [r7, #7]
 8003c60:	4613      	mov	r3, r2
 8003c62:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetAcceleration != 0))
 8003c68:	4b0d      	ldr	r3, [pc, #52]	; (8003ca0 <BSP_MotorControl_SetAcceleration+0x4c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00e      	beq.n	8003c8e <BSP_MotorControl_SetAcceleration+0x3a>
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <BSP_MotorControl_SetAcceleration+0x4c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d009      	beq.n	8003c8e <BSP_MotorControl_SetAcceleration+0x3a>
  {
    status = motorDrvHandle->SetAcceleration(deviceId, newAcc);
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <BSP_MotorControl_SetAcceleration+0x4c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	88b9      	ldrh	r1, [r7, #4]
 8003c82:	79fa      	ldrb	r2, [r7, #7]
 8003c84:	4610      	mov	r0, r2
 8003c86:	4798      	blx	r3
 8003c88:	4603      	mov	r3, r0
 8003c8a:	73fb      	strb	r3, [r7, #15]
 8003c8c:	e003      	b.n	8003c96 <BSP_MotorControl_SetAcceleration+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(22);
 8003c8e:	f640 0016 	movw	r0, #2070	; 0x816
 8003c92:	f7ff fed9 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
}            
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	20000a18 	.word	0x20000a18

08003ca4 <BSP_MotorControl_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	460a      	mov	r2, r1
 8003cae:	71fb      	strb	r3, [r7, #7]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetDeceleration != 0))
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <BSP_MotorControl_SetDeceleration+0x4c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00e      	beq.n	8003cde <BSP_MotorControl_SetDeceleration+0x3a>
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <BSP_MotorControl_SetDeceleration+0x4c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d009      	beq.n	8003cde <BSP_MotorControl_SetDeceleration+0x3a>
  {
    status = motorDrvHandle->SetDeceleration(deviceId, newDec);
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <BSP_MotorControl_SetDeceleration+0x4c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd0:	88b9      	ldrh	r1, [r7, #4]
 8003cd2:	79fa      	ldrb	r2, [r7, #7]
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4798      	blx	r3
 8003cd8:	4603      	mov	r3, r0
 8003cda:	73fb      	strb	r3, [r7, #15]
 8003cdc:	e003      	b.n	8003ce6 <BSP_MotorControl_SetDeceleration+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(23);
 8003cde:	f640 0017 	movw	r0, #2071	; 0x817
 8003ce2:	f7ff feb1 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }        
  return (status);
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
}        
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000a18 	.word	0x20000a18

08003cf4 <BSP_MotorControl_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note For a stepper motor, the command is not performed if the device 
 * is executing a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	460a      	mov	r2, r1
 8003cfe:	71fb      	strb	r3, [r7, #7]
 8003d00:	4613      	mov	r3, r2
 8003d02:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003d04:	2300      	movs	r3, #0
 8003d06:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 8003d08:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <BSP_MotorControl_SetMaxSpeed+0x3a>
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d009      	beq.n	8003d2e <BSP_MotorControl_SetMaxSpeed+0x3a>
  {
    status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d20:	88b9      	ldrh	r1, [r7, #4]
 8003d22:	79fa      	ldrb	r2, [r7, #7]
 8003d24:	4610      	mov	r0, r2
 8003d26:	4798      	blx	r3
 8003d28:	4603      	mov	r3, r0
 8003d2a:	73fb      	strb	r3, [r7, #15]
 8003d2c:	e003      	b.n	8003d36 <BSP_MotorControl_SetMaxSpeed+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
 8003d2e:	f640 001a 	movw	r0, #2074	; 0x81a
 8003d32:	f7ff fe89 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }     
  return (status);  
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20000a18 	.word	0x20000a18

08003d44 <BSP_MotorControl_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	460a      	mov	r2, r1
 8003d4e:	71fb      	strb	r3, [r7, #7]
 8003d50:	4613      	mov	r3, r2
 8003d52:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMinSpeed != 0))
 8003d58:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <BSP_MotorControl_SetMinSpeed+0x4c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00e      	beq.n	8003d7e <BSP_MotorControl_SetMinSpeed+0x3a>
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <BSP_MotorControl_SetMinSpeed+0x4c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <BSP_MotorControl_SetMinSpeed+0x3a>
  {
    status = motorDrvHandle->SetMinSpeed(deviceId, newMinSpeed);
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <BSP_MotorControl_SetMinSpeed+0x4c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d70:	88b9      	ldrh	r1, [r7, #4]
 8003d72:	79fa      	ldrb	r2, [r7, #7]
 8003d74:	4610      	mov	r0, r2
 8003d76:	4798      	blx	r3
 8003d78:	4603      	mov	r3, r0
 8003d7a:	73fb      	strb	r3, [r7, #15]
 8003d7c:	e003      	b.n	8003d86 <BSP_MotorControl_SetMinSpeed+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(27);
 8003d7e:	f640 001b 	movw	r0, #2075	; 0x81b
 8003d82:	f7ff fe61 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }     
  
  return (status);  
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000a18 	.word	0x20000a18

08003d94 <BSP_MotorControl_SoftStop>:
 *            motorId  from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool BSP_MotorControl_SoftStop(uint8_t deviceId)
{	
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	71fb      	strb	r3, [r7, #7]
  bool status = FALSE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SoftStop != 0))
 8003da2:	4b0d      	ldr	r3, [pc, #52]	; (8003dd8 <BSP_MotorControl_SoftStop+0x44>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <BSP_MotorControl_SoftStop+0x32>
 8003daa:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <BSP_MotorControl_SoftStop+0x44>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <BSP_MotorControl_SoftStop+0x32>
  {
    status = motorDrvHandle->SoftStop(deviceId);
 8003db4:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <BSP_MotorControl_SoftStop+0x44>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	79fa      	ldrb	r2, [r7, #7]
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4798      	blx	r3
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	73fb      	strb	r3, [r7, #15]
 8003dc4:	e003      	b.n	8003dce <BSP_MotorControl_SoftStop+0x3a>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(28);
 8003dc6:	f640 001c 	movw	r0, #2076	; 0x81c
 8003dca:	f7ff fe3d 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }    
  return (status);  
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000a18 	.word	0x20000a18

08003ddc <BSP_MotorControl_StepClockHandler>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void BSP_MotorControl_StepClockHandler(uint8_t deviceId)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->StepClockHandler != 0))
 8003de6:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <BSP_MotorControl_StepClockHandler+0x3c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <BSP_MotorControl_StepClockHandler+0x2a>
 8003dee:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <BSP_MotorControl_StepClockHandler+0x3c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d006      	beq.n	8003e06 <BSP_MotorControl_StepClockHandler+0x2a>
  {
    motorDrvHandle->StepClockHandler(deviceId);
 8003df8:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <BSP_MotorControl_StepClockHandler+0x3c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfe:	79fa      	ldrb	r2, [r7, #7]
 8003e00:	4610      	mov	r0, r2
 8003e02:	4798      	blx	r3
 8003e04:	e004      	b.n	8003e10 <BSP_MotorControl_StepClockHandler+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(29);
 8003e06:	f640 001d 	movw	r0, #2077	; 0x81d
 8003e0a:	f7ff fe1d 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }   
}
 8003e0e:	bf00      	nop
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000a18 	.word	0x20000a18

08003e1c <BSP_MotorControl_WaitWhileActive>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_WaitWhileActive(uint8_t deviceId)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->WaitWhileActive != 0))
 8003e26:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <BSP_MotorControl_WaitWhileActive+0x3c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <BSP_MotorControl_WaitWhileActive+0x2a>
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <BSP_MotorControl_WaitWhileActive+0x3c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d006      	beq.n	8003e46 <BSP_MotorControl_WaitWhileActive+0x2a>
  {
    motorDrvHandle->WaitWhileActive(deviceId);
 8003e38:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <BSP_MotorControl_WaitWhileActive+0x3c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e3e:	79fa      	ldrb	r2, [r7, #7]
 8003e40:	4610      	mov	r0, r2
 8003e42:	4798      	blx	r3
 8003e44:	e004      	b.n	8003e50 <BSP_MotorControl_WaitWhileActive+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(30);
 8003e46:	f640 001e 	movw	r0, #2078	; 0x81e
 8003e4a:	f7ff fdfd 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }    
}
 8003e4e:	bf00      	nop
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000a18 	.word	0x20000a18

08003e5c <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00f      	beq.n	8003e92 <BSP_MotorControl_CmdGetStatus+0x36>
 8003e72:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	79fa      	ldrb	r2, [r7, #7]
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4798      	blx	r3
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	81fb      	strh	r3, [r7, #14]
 8003e90:	e003      	b.n	8003e9a <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8003e92:	f640 0022 	movw	r0, #2082	; 0x822
 8003e96:	f7ff fdd7 	bl	8003a48 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 8003e9a:	89fb      	ldrh	r3, [r7, #14]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000a18 	.word	0x20000a18

08003ea8 <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	460a      	mov	r2, r1
 8003eb2:	80fb      	strh	r3, [r7, #6]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 8003eb8:	4a40      	ldr	r2, [pc, #256]	; (8003fbc <BSP_MotorControl_SetNbDevices+0x114>)
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	8013      	strh	r3, [r2, #0]
  bool status = FALSE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	f641 124a 	movw	r2, #6474	; 0x194a
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d105      	bne.n	8003ed8 <BSP_MotorControl_SetNbDevices+0x30>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 8003ecc:	f7fd fc24 	bl	8001718 <L6474_GetMotorHandle>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4a3b      	ldr	r2, [pc, #236]	; (8003fc0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e055      	b.n	8003f84 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d105      	bne.n	8003eea <BSP_MotorControl_SetNbDevices+0x42>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 8003ede:	f7ff fd4f 	bl	8003980 <Powerstep01_GetMotorHandle>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4a36      	ldr	r2, [pc, #216]	; (8003fc0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	e04c      	b.n	8003f84 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	f641 023e 	movw	r2, #6206	; 0x183e
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d105      	bne.n	8003f00 <BSP_MotorControl_SetNbDevices+0x58>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 8003ef4:	f7ff fd4c 	bl	8003990 <L6206_GetMotorHandle>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	4a31      	ldr	r2, [pc, #196]	; (8003fc0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e041      	b.n	8003f84 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	f5b3 5fc2 	cmp.w	r3, #6208	; 0x1840
 8003f06:	d105      	bne.n	8003f14 <BSP_MotorControl_SetNbDevices+0x6c>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 8003f08:	f7ff fd4a 	bl	80039a0 <L6208_GetMotorHandle>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	4a2c      	ldr	r2, [pc, #176]	; (8003fc0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e037      	b.n	8003f84 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 8003f14:	88fb      	ldrh	r3, [r7, #6]
 8003f16:	2bdc      	cmp	r3, #220	; 0xdc
 8003f18:	d105      	bne.n	8003f26 <BSP_MotorControl_SetNbDevices+0x7e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 8003f1a:	f7ff fd49 	bl	80039b0 <Stspin220_GetMotorHandle>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4a27      	ldr	r2, [pc, #156]	; (8003fc0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	e02e      	b.n	8003f84 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	f641 1246 	movw	r2, #6470	; 0x1946
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <BSP_MotorControl_SetNbDevices+0x92>
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	f641 1248 	movw	r2, #6472	; 0x1948
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d105      	bne.n	8003f46 <BSP_MotorControl_SetNbDevices+0x9e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 8003f3a:	f7ff fd11 	bl	8003960 <l647x_GetMotorHandle>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	e01e      	b.n	8003f84 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 8003f46:	88fb      	ldrh	r3, [r7, #6]
 8003f48:	f641 1250 	movw	r2, #6480	; 0x1950
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <BSP_MotorControl_SetNbDevices+0xb2>
 8003f50:	88fb      	ldrh	r3, [r7, #6]
 8003f52:	f641 1252 	movw	r2, #6482	; 0x1952
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d105      	bne.n	8003f66 <BSP_MotorControl_SetNbDevices+0xbe>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 8003f5a:	f7ff fd09 	bl	8003970 <l648x_GetMotorHandle>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4a17      	ldr	r2, [pc, #92]	; (8003fc0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	e00e      	b.n	8003f84 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	2bf0      	cmp	r3, #240	; 0xf0
 8003f6a:	d002      	beq.n	8003f72 <BSP_MotorControl_SetNbDevices+0xca>
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	2bfa      	cmp	r3, #250	; 0xfa
 8003f70:	d105      	bne.n	8003f7e <BSP_MotorControl_SetNbDevices+0xd6>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 8003f72:	f7ff fd25 	bl	80039c0 <Stspin240_250_GetMotorHandle>
 8003f76:	4603      	mov	r3, r0
 8003f78:	4a11      	ldr	r2, [pc, #68]	; (8003fc0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	e002      	b.n	8003f84 <BSP_MotorControl_SetNbDevices+0xdc>
  }  
  else
  {
    motorDrvHandle = 0;
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&
 8003f84:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d011      	beq.n	8003fb0 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
  if ((motorDrvHandle != 0)&&
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00b      	beq.n	8003fb0 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8003f98:	797b      	ldrb	r3, [r7, #5]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d008      	beq.n	8003fb0 <BSP_MotorControl_SetNbDevices+0x108>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <BSP_MotorControl_SetNbDevices+0x118>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8003fa6:	797a      	ldrb	r2, [r7, #5]
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4798      	blx	r3
 8003fac:	4603      	mov	r3, r0
 8003fae:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000a1c 	.word	0x20000a1c
 8003fc0:	20000a18 	.word	0x20000a18

08003fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fc8:	4b16      	ldr	r3, [pc, #88]	; (8004024 <SystemInit+0x60>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	4a15      	ldr	r2, [pc, #84]	; (8004024 <SystemInit+0x60>)
 8003fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <SystemInit+0x64>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a12      	ldr	r2, [pc, #72]	; (8004028 <SystemInit+0x64>)
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fe4:	4b10      	ldr	r3, [pc, #64]	; (8004028 <SystemInit+0x64>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003fea:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <SystemInit+0x64>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a0e      	ldr	r2, [pc, #56]	; (8004028 <SystemInit+0x64>)
 8003ff0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <SystemInit+0x64>)
 8003ffc:	4a0b      	ldr	r2, [pc, #44]	; (800402c <SystemInit+0x68>)
 8003ffe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <SystemInit+0x64>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a08      	ldr	r2, [pc, #32]	; (8004028 <SystemInit+0x64>)
 8004006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800400a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <SystemInit+0x64>)
 800400e:	2200      	movs	r2, #0
 8004010:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004012:	4b04      	ldr	r3, [pc, #16]	; (8004024 <SystemInit+0x60>)
 8004014:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004018:	609a      	str	r2, [r3, #8]
#endif
}
 800401a:	bf00      	nop
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	e000ed00 	.word	0xe000ed00
 8004028:	40023800 	.word	0x40023800
 800402c:	24003010 	.word	0x24003010

08004030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004034:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <HAL_Init+0x40>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0d      	ldr	r2, [pc, #52]	; (8004070 <HAL_Init+0x40>)
 800403a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800403e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_Init+0x40>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <HAL_Init+0x40>)
 8004046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800404a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800404c:	4b08      	ldr	r3, [pc, #32]	; (8004070 <HAL_Init+0x40>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a07      	ldr	r2, [pc, #28]	; (8004070 <HAL_Init+0x40>)
 8004052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004058:	2003      	movs	r0, #3
 800405a:	f000 f953 	bl	8004304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800405e:	200f      	movs	r0, #15
 8004060:	f000 f810 	bl	8004084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004064:	f000 f806 	bl	8004074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023c00 	.word	0x40023c00

08004074 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800408c:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <HAL_InitTick+0x54>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4b12      	ldr	r3, [pc, #72]	; (80040dc <HAL_InitTick+0x58>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	4619      	mov	r1, r3
 8004096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800409a:	fbb3 f3f1 	udiv	r3, r3, r1
 800409e:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f963 	bl	800436e <HAL_SYSTICK_Config>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e00e      	b.n	80040d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b0f      	cmp	r3, #15
 80040b6:	d80a      	bhi.n	80040ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040b8:	2200      	movs	r2, #0
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	f04f 30ff 	mov.w	r0, #4294967295
 80040c0:	f000 f92b 	bl	800431a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040c4:	4a06      	ldr	r2, [pc, #24]	; (80040e0 <HAL_InitTick+0x5c>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e000      	b.n	80040d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000164 	.word	0x20000164
 80040dc:	2000016c 	.word	0x2000016c
 80040e0:	20000168 	.word	0x20000168

080040e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040e8:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_IncTick+0x20>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_IncTick+0x24>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4413      	add	r3, r2
 80040f4:	4a04      	ldr	r2, [pc, #16]	; (8004108 <HAL_IncTick+0x24>)
 80040f6:	6013      	str	r3, [r2, #0]
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	2000016c 	.word	0x2000016c
 8004108:	20000a20 	.word	0x20000a20

0800410c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return uwTick;
 8004110:	4b03      	ldr	r3, [pc, #12]	; (8004120 <HAL_GetTick+0x14>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000a20 	.word	0x20000a20

08004124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800412c:	f7ff ffee 	bl	800410c <HAL_GetTick>
 8004130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413c:	d005      	beq.n	800414a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <HAL_Delay+0x44>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800414a:	bf00      	nop
 800414c:	f7ff ffde 	bl	800410c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	429a      	cmp	r2, r3
 800415a:	d8f7      	bhi.n	800414c <HAL_Delay+0x28>
  {
  }
}
 800415c:	bf00      	nop
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	2000016c 	.word	0x2000016c

0800416c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <NVIC_SetPriorityGrouping+0x44>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004188:	4013      	ands	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800419c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800419e:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <NVIC_SetPriorityGrouping+0x44>)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	60d3      	str	r3, [r2, #12]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000ed00 	.word	0xe000ed00

080041b4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041b8:	4b04      	ldr	r3, [pc, #16]	; (80041cc <NVIC_GetPriorityGrouping+0x18>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	0a1b      	lsrs	r3, r3, #8
 80041be:	f003 0307 	and.w	r3, r3, #7
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	f003 021f 	and.w	r2, r3, #31
 80041e0:	4907      	ldr	r1, [pc, #28]	; (8004200 <NVIC_EnableIRQ+0x30>)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	2001      	movs	r0, #1
 80041ea:	fa00 f202 	lsl.w	r2, r0, r2
 80041ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	e000e100 	.word	0xe000e100

08004204 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	6039      	str	r1, [r7, #0]
 800420e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8004210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004214:	2b00      	cmp	r3, #0
 8004216:	da0b      	bge.n	8004230 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	490c      	ldr	r1, [pc, #48]	; (8004250 <NVIC_SetPriority+0x4c>)
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	3b04      	subs	r3, #4
 8004226:	0112      	lsls	r2, r2, #4
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	440b      	add	r3, r1
 800422c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800422e:	e009      	b.n	8004244 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	4907      	ldr	r1, [pc, #28]	; (8004254 <NVIC_SetPriority+0x50>)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	0112      	lsls	r2, r2, #4
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	440b      	add	r3, r1
 8004240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	e000ed00 	.word	0xe000ed00
 8004254:	e000e100 	.word	0xe000e100

08004258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004258:	b480      	push	{r7}
 800425a:	b089      	sub	sp, #36	; 0x24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f1c3 0307 	rsb	r3, r3, #7
 8004272:	2b04      	cmp	r3, #4
 8004274:	bf28      	it	cs
 8004276:	2304      	movcs	r3, #4
 8004278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3304      	adds	r3, #4
 800427e:	2b06      	cmp	r3, #6
 8004280:	d902      	bls.n	8004288 <NVIC_EncodePriority+0x30>
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3b03      	subs	r3, #3
 8004286:	e000      	b.n	800428a <NVIC_EncodePriority+0x32>
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800428c:	f04f 32ff 	mov.w	r2, #4294967295
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43da      	mvns	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	401a      	ands	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042a0:	f04f 31ff 	mov.w	r1, #4294967295
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	43d9      	mvns	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b0:	4313      	orrs	r3, r2
         );
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3724      	adds	r7, #36	; 0x24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042d0:	d301      	bcc.n	80042d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042d2:	2301      	movs	r3, #1
 80042d4:	e00f      	b.n	80042f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042d6:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <SysTick_Config+0x40>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3b01      	subs	r3, #1
 80042dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042de:	210f      	movs	r1, #15
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295
 80042e4:	f7ff ff8e 	bl	8004204 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <SysTick_Config+0x40>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ee:	4b04      	ldr	r3, [pc, #16]	; (8004300 <SysTick_Config+0x40>)
 80042f0:	2207      	movs	r2, #7
 80042f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	e000e010 	.word	0xe000e010

08004304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff ff2d 	bl	800416c <NVIC_SetPriorityGrouping>
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800431a:	b580      	push	{r7, lr}
 800431c:	b086      	sub	sp, #24
 800431e:	af00      	add	r7, sp, #0
 8004320:	4603      	mov	r3, r0
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800432c:	f7ff ff42 	bl	80041b4 <NVIC_GetPriorityGrouping>
 8004330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	6978      	ldr	r0, [r7, #20]
 8004338:	f7ff ff8e 	bl	8004258 <NVIC_EncodePriority>
 800433c:	4602      	mov	r2, r0
 800433e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004342:	4611      	mov	r1, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff ff5d 	bl	8004204 <NVIC_SetPriority>
}
 800434a:	bf00      	nop
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	4603      	mov	r3, r0
 800435a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800435c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff ff35 	bl	80041d0 <NVIC_EnableIRQ>
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff ffa2 	bl	80042c0 <SysTick_Config>
 800437c:	4603      	mov	r3, r0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004394:	f7ff feba 	bl	800410c <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e099      	b.n	80044d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043c4:	e00f      	b.n	80043e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043c6:	f7ff fea1 	bl	800410c <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d908      	bls.n	80043e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2203      	movs	r2, #3
 80043de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e078      	b.n	80044d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e8      	bne.n	80043c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4b38      	ldr	r3, [pc, #224]	; (80044e0 <HAL_DMA_Init+0x158>)
 8004400:	4013      	ands	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004412:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800441e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800442a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	2b04      	cmp	r3, #4
 800443e:	d107      	bne.n	8004450 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	4313      	orrs	r3, r2
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0307 	bic.w	r3, r3, #7
 8004466:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	2b04      	cmp	r3, #4
 8004478:	d117      	bne.n	80044aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00e      	beq.n	80044aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fa77 	bl	8004980 <DMA_CheckFifoParam>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2240      	movs	r2, #64	; 0x40
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80044a6:	2301      	movs	r3, #1
 80044a8:	e016      	b.n	80044d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fa2e 	bl	8004914 <DMA_CalcBaseAndBitshift>
 80044b8:	4603      	mov	r3, r0
 80044ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c0:	223f      	movs	r2, #63	; 0x3f
 80044c2:	409a      	lsls	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	f010803f 	.word	0xf010803f

080044e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_DMA_Start_IT+0x26>
 8004506:	2302      	movs	r3, #2
 8004508:	e048      	b.n	800459c <HAL_DMA_Start_IT+0xb8>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	d137      	bne.n	800458e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2202      	movs	r2, #2
 8004522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f9c0 	bl	80048b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453c:	223f      	movs	r2, #63	; 0x3f
 800453e:	409a      	lsls	r2, r3
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0216 	orr.w	r2, r2, #22
 8004552:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695a      	ldr	r2, [r3, #20]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004562:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0208 	orr.w	r2, r2, #8
 800457a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e005      	b.n	800459a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004596:	2302      	movs	r3, #2
 8004598:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800459a:	7dfb      	ldrb	r3, [r7, #23]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045b0:	4b8e      	ldr	r3, [pc, #568]	; (80047ec <HAL_DMA_IRQHandler+0x248>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a8e      	ldr	r2, [pc, #568]	; (80047f0 <HAL_DMA_IRQHandler+0x24c>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	0a9b      	lsrs	r3, r3, #10
 80045bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	2208      	movs	r2, #8
 80045d0:	409a      	lsls	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01a      	beq.n	8004610 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d013      	beq.n	8004610 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0204 	bic.w	r2, r2, #4
 80045f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fc:	2208      	movs	r2, #8
 80045fe:	409a      	lsls	r2, r3
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	f043 0201 	orr.w	r2, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004614:	2201      	movs	r2, #1
 8004616:	409a      	lsls	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d012      	beq.n	8004646 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004632:	2201      	movs	r2, #1
 8004634:	409a      	lsls	r2, r3
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	f043 0202 	orr.w	r2, r3, #2
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464a:	2204      	movs	r2, #4
 800464c:	409a      	lsls	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4013      	ands	r3, r2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d012      	beq.n	800467c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00b      	beq.n	800467c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004668:	2204      	movs	r2, #4
 800466a:	409a      	lsls	r2, r3
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004674:	f043 0204 	orr.w	r2, r3, #4
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004680:	2210      	movs	r2, #16
 8004682:	409a      	lsls	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4013      	ands	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d043      	beq.n	8004714 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d03c      	beq.n	8004714 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469e:	2210      	movs	r2, #16
 80046a0:	409a      	lsls	r2, r3
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d018      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d108      	bne.n	80046d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d024      	beq.n	8004714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
 80046d2:	e01f      	b.n	8004714 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d01b      	beq.n	8004714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	4798      	blx	r3
 80046e4:	e016      	b.n	8004714 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d107      	bne.n	8004704 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0208 	bic.w	r2, r2, #8
 8004702:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004718:	2220      	movs	r2, #32
 800471a:	409a      	lsls	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 808f 	beq.w	8004844 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 8087 	beq.w	8004844 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473a:	2220      	movs	r2, #32
 800473c:	409a      	lsls	r2, r3
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b05      	cmp	r3, #5
 800474c:	d136      	bne.n	80047bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0216 	bic.w	r2, r2, #22
 800475c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800476c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d103      	bne.n	800477e <HAL_DMA_IRQHandler+0x1da>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477a:	2b00      	cmp	r3, #0
 800477c:	d007      	beq.n	800478e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0208 	bic.w	r2, r2, #8
 800478c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004792:	223f      	movs	r2, #63	; 0x3f
 8004794:	409a      	lsls	r2, r3
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d07e      	beq.n	80048b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	4798      	blx	r3
        }
        return;
 80047ba:	e079      	b.n	80048b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01d      	beq.n	8004806 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10d      	bne.n	80047f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d031      	beq.n	8004844 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	4798      	blx	r3
 80047e8:	e02c      	b.n	8004844 <HAL_DMA_IRQHandler+0x2a0>
 80047ea:	bf00      	nop
 80047ec:	20000164 	.word	0x20000164
 80047f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d023      	beq.n	8004844 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
 8004804:	e01e      	b.n	8004844 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10f      	bne.n	8004834 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0210 	bic.w	r2, r2, #16
 8004822:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004848:	2b00      	cmp	r3, #0
 800484a:	d032      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d022      	beq.n	800489e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2205      	movs	r2, #5
 800485c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	3301      	adds	r3, #1
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	429a      	cmp	r2, r3
 800487a:	d307      	bcc.n	800488c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f2      	bne.n	8004870 <HAL_DMA_IRQHandler+0x2cc>
 800488a:	e000      	b.n	800488e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800488c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	4798      	blx	r3
 80048ae:	e000      	b.n	80048b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80048b0:	bf00      	nop
    }
  }
}
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	d108      	bne.n	80048f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048f6:	e007      	b.n	8004908 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	3b10      	subs	r3, #16
 8004924:	4a14      	ldr	r2, [pc, #80]	; (8004978 <DMA_CalcBaseAndBitshift+0x64>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800492e:	4a13      	ldr	r2, [pc, #76]	; (800497c <DMA_CalcBaseAndBitshift+0x68>)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d909      	bls.n	8004956 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800494a:	f023 0303 	bic.w	r3, r3, #3
 800494e:	1d1a      	adds	r2, r3, #4
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	659a      	str	r2, [r3, #88]	; 0x58
 8004954:	e007      	b.n	8004966 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	aaaaaaab 	.word	0xaaaaaaab
 800497c:	0800dae0 	.word	0x0800dae0

08004980 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d11f      	bne.n	80049da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d856      	bhi.n	8004a4e <DMA_CheckFifoParam+0xce>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <DMA_CheckFifoParam+0x28>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049b9 	.word	0x080049b9
 80049ac:	080049cb 	.word	0x080049cb
 80049b0:	080049b9 	.word	0x080049b9
 80049b4:	08004a4f 	.word	0x08004a4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d046      	beq.n	8004a52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c8:	e043      	b.n	8004a52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049d2:	d140      	bne.n	8004a56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d8:	e03d      	b.n	8004a56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e2:	d121      	bne.n	8004a28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d837      	bhi.n	8004a5a <DMA_CheckFifoParam+0xda>
 80049ea:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <DMA_CheckFifoParam+0x70>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a07 	.word	0x08004a07
 80049f8:	08004a01 	.word	0x08004a01
 80049fc:	08004a19 	.word	0x08004a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
      break;
 8004a04:	e030      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d025      	beq.n	8004a5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a16:	e022      	b.n	8004a5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a20:	d11f      	bne.n	8004a62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a26:	e01c      	b.n	8004a62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d903      	bls.n	8004a36 <DMA_CheckFifoParam+0xb6>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d003      	beq.n	8004a3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a34:	e018      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
      break;
 8004a3a:	e015      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00e      	beq.n	8004a66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a4c:	e00b      	b.n	8004a66 <DMA_CheckFifoParam+0xe6>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e00a      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a52:	bf00      	nop
 8004a54:	e008      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a56:	bf00      	nop
 8004a58:	e006      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e004      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a5e:	bf00      	nop
 8004a60:	e002      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a62:	bf00      	nop
 8004a64:	e000      	b.n	8004a68 <DMA_CheckFifoParam+0xe8>
      break;
 8004a66:	bf00      	nop
    }
  } 
  
  return status; 
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop

08004a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b089      	sub	sp, #36	; 0x24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
 8004a92:	e159      	b.n	8004d48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a94:	2201      	movs	r2, #1
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	f040 8148 	bne.w	8004d42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_Init+0x4a>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b12      	cmp	r3, #18
 8004ac0:	d123      	bne.n	8004b0a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	08da      	lsrs	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3208      	adds	r2, #8
 8004aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	220f      	movs	r2, #15
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	08da      	lsrs	r2, r3, #3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3208      	adds	r2, #8
 8004b04:	69b9      	ldr	r1, [r7, #24]
 8004b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	2203      	movs	r2, #3
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 0203 	and.w	r2, r3, #3
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d00b      	beq.n	8004b5e <HAL_GPIO_Init+0xe6>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d007      	beq.n	8004b5e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b52:	2b11      	cmp	r3, #17
 8004b54:	d003      	beq.n	8004b5e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b12      	cmp	r3, #18
 8004b5c:	d130      	bne.n	8004bc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	2203      	movs	r2, #3
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b94:	2201      	movs	r2, #1
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 0201 	and.w	r2, r3, #1
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	2203      	movs	r2, #3
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 80a2 	beq.w	8004d42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	4b57      	ldr	r3, [pc, #348]	; (8004d60 <HAL_GPIO_Init+0x2e8>)
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	4a56      	ldr	r2, [pc, #344]	; (8004d60 <HAL_GPIO_Init+0x2e8>)
 8004c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c0e:	4b54      	ldr	r3, [pc, #336]	; (8004d60 <HAL_GPIO_Init+0x2e8>)
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c1a:	4a52      	ldr	r2, [pc, #328]	; (8004d64 <HAL_GPIO_Init+0x2ec>)
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	089b      	lsrs	r3, r3, #2
 8004c20:	3302      	adds	r3, #2
 8004c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	220f      	movs	r2, #15
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43db      	mvns	r3, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a49      	ldr	r2, [pc, #292]	; (8004d68 <HAL_GPIO_Init+0x2f0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d019      	beq.n	8004c7a <HAL_GPIO_Init+0x202>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a48      	ldr	r2, [pc, #288]	; (8004d6c <HAL_GPIO_Init+0x2f4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d013      	beq.n	8004c76 <HAL_GPIO_Init+0x1fe>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a47      	ldr	r2, [pc, #284]	; (8004d70 <HAL_GPIO_Init+0x2f8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00d      	beq.n	8004c72 <HAL_GPIO_Init+0x1fa>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a46      	ldr	r2, [pc, #280]	; (8004d74 <HAL_GPIO_Init+0x2fc>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d007      	beq.n	8004c6e <HAL_GPIO_Init+0x1f6>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a45      	ldr	r2, [pc, #276]	; (8004d78 <HAL_GPIO_Init+0x300>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d101      	bne.n	8004c6a <HAL_GPIO_Init+0x1f2>
 8004c66:	2304      	movs	r3, #4
 8004c68:	e008      	b.n	8004c7c <HAL_GPIO_Init+0x204>
 8004c6a:	2307      	movs	r3, #7
 8004c6c:	e006      	b.n	8004c7c <HAL_GPIO_Init+0x204>
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e004      	b.n	8004c7c <HAL_GPIO_Init+0x204>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e002      	b.n	8004c7c <HAL_GPIO_Init+0x204>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <HAL_GPIO_Init+0x204>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	f002 0203 	and.w	r2, r2, #3
 8004c82:	0092      	lsls	r2, r2, #2
 8004c84:	4093      	lsls	r3, r2
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c8c:	4935      	ldr	r1, [pc, #212]	; (8004d64 <HAL_GPIO_Init+0x2ec>)
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	089b      	lsrs	r3, r3, #2
 8004c92:	3302      	adds	r3, #2
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c9a:	4b38      	ldr	r3, [pc, #224]	; (8004d7c <HAL_GPIO_Init+0x304>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cbe:	4a2f      	ldr	r2, [pc, #188]	; (8004d7c <HAL_GPIO_Init+0x304>)
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004cc4:	4b2d      	ldr	r3, [pc, #180]	; (8004d7c <HAL_GPIO_Init+0x304>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ce8:	4a24      	ldr	r2, [pc, #144]	; (8004d7c <HAL_GPIO_Init+0x304>)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cee:	4b23      	ldr	r3, [pc, #140]	; (8004d7c <HAL_GPIO_Init+0x304>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d12:	4a1a      	ldr	r2, [pc, #104]	; (8004d7c <HAL_GPIO_Init+0x304>)
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d18:	4b18      	ldr	r3, [pc, #96]	; (8004d7c <HAL_GPIO_Init+0x304>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	43db      	mvns	r3, r3
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	4013      	ands	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d3c:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <HAL_GPIO_Init+0x304>)
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	3301      	adds	r3, #1
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2b0f      	cmp	r3, #15
 8004d4c:	f67f aea2 	bls.w	8004a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	3724      	adds	r7, #36	; 0x24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40013800 	.word	0x40013800
 8004d68:	40020000 	.word	0x40020000
 8004d6c:	40020400 	.word	0x40020400
 8004d70:	40020800 	.word	0x40020800
 8004d74:	40020c00 	.word	0x40020c00
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	40013c00 	.word	0x40013c00

08004d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	807b      	strh	r3, [r7, #2]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d90:	787b      	ldrb	r3, [r7, #1]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d96:	887a      	ldrh	r2, [r7, #2]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d9c:	e003      	b.n	8004da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d9e:	887b      	ldrh	r3, [r7, #2]
 8004da0:	041a      	lsls	r2, r3, #16
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	619a      	str	r2, [r3, #24]
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	887b      	ldrh	r3, [r7, #2]
 8004dc4:	405a      	eors	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	615a      	str	r2, [r3, #20]
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4603      	mov	r3, r0
 8004de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004de2:	4b08      	ldr	r3, [pc, #32]	; (8004e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004de4:	695a      	ldr	r2, [r3, #20]
 8004de6:	88fb      	ldrh	r3, [r7, #6]
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d006      	beq.n	8004dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dee:	4a05      	ldr	r2, [pc, #20]	; (8004e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004df4:	88fb      	ldrh	r3, [r7, #6]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f004 f804 	bl	8008e04 <HAL_GPIO_EXTI_Callback>
  }
}
 8004dfc:	bf00      	nop
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40013c00 	.word	0x40013c00

08004e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e22a      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d075      	beq.n	8004f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e26:	4b88      	ldr	r3, [pc, #544]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d00c      	beq.n	8004e4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e32:	4b85      	ldr	r3, [pc, #532]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d112      	bne.n	8004e64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3e:	4b82      	ldr	r3, [pc, #520]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4a:	d10b      	bne.n	8004e64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e4c:	4b7e      	ldr	r3, [pc, #504]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d05b      	beq.n	8004f10 <HAL_RCC_OscConfig+0x108>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d157      	bne.n	8004f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e205      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6c:	d106      	bne.n	8004e7c <HAL_RCC_OscConfig+0x74>
 8004e6e:	4b76      	ldr	r3, [pc, #472]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a75      	ldr	r2, [pc, #468]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e01d      	b.n	8004eb8 <HAL_RCC_OscConfig+0xb0>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x98>
 8004e86:	4b70      	ldr	r3, [pc, #448]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a6f      	ldr	r2, [pc, #444]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	4b6d      	ldr	r3, [pc, #436]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a6c      	ldr	r2, [pc, #432]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e00b      	b.n	8004eb8 <HAL_RCC_OscConfig+0xb0>
 8004ea0:	4b69      	ldr	r3, [pc, #420]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a68      	ldr	r2, [pc, #416]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	4b66      	ldr	r3, [pc, #408]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a65      	ldr	r2, [pc, #404]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d013      	beq.n	8004ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec0:	f7ff f924 	bl	800410c <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec8:	f7ff f920 	bl	800410c <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	; 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e1ca      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eda:	4b5b      	ldr	r3, [pc, #364]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCC_OscConfig+0xc0>
 8004ee6:	e014      	b.n	8004f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee8:	f7ff f910 	bl	800410c <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef0:	f7ff f90c 	bl	800410c <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	; 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e1b6      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f02:	4b51      	ldr	r3, [pc, #324]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0xe8>
 8004f0e:	e000      	b.n	8004f12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d063      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f1e:	4b4a      	ldr	r3, [pc, #296]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00b      	beq.n	8004f42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f2a:	4b47      	ldr	r3, [pc, #284]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d11c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f36:	4b44      	ldr	r3, [pc, #272]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d116      	bne.n	8004f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f42:	4b41      	ldr	r3, [pc, #260]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_RCC_OscConfig+0x152>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d001      	beq.n	8004f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e18a      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5a:	4b3b      	ldr	r3, [pc, #236]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	4937      	ldr	r1, [pc, #220]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6e:	e03a      	b.n	8004fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d020      	beq.n	8004fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f78:	4b34      	ldr	r3, [pc, #208]	; (800504c <HAL_RCC_OscConfig+0x244>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7e:	f7ff f8c5 	bl	800410c <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f86:	f7ff f8c1 	bl	800410c <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e16b      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f98:	4b2b      	ldr	r3, [pc, #172]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa4:	4b28      	ldr	r3, [pc, #160]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4925      	ldr	r1, [pc, #148]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	600b      	str	r3, [r1, #0]
 8004fb8:	e015      	b.n	8004fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fba:	4b24      	ldr	r3, [pc, #144]	; (800504c <HAL_RCC_OscConfig+0x244>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc0:	f7ff f8a4 	bl	800410c <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fc8:	f7ff f8a0 	bl	800410c <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e14a      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fda:	4b1b      	ldr	r3, [pc, #108]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d036      	beq.n	8005060 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d016      	beq.n	8005028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ffa:	4b15      	ldr	r3, [pc, #84]	; (8005050 <HAL_RCC_OscConfig+0x248>)
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005000:	f7ff f884 	bl	800410c <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005008:	f7ff f880 	bl	800410c <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e12a      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501a:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_RCC_OscConfig+0x240>)
 800501c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x200>
 8005026:	e01b      	b.n	8005060 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005028:	4b09      	ldr	r3, [pc, #36]	; (8005050 <HAL_RCC_OscConfig+0x248>)
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800502e:	f7ff f86d 	bl	800410c <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005034:	e00e      	b.n	8005054 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005036:	f7ff f869 	bl	800410c <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d907      	bls.n	8005054 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e113      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
 8005048:	40023800 	.word	0x40023800
 800504c:	42470000 	.word	0x42470000
 8005050:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005054:	4b88      	ldr	r3, [pc, #544]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1ea      	bne.n	8005036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8097 	beq.w	800519c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800506e:	2300      	movs	r3, #0
 8005070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005072:	4b81      	ldr	r3, [pc, #516]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10f      	bne.n	800509e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	4b7d      	ldr	r3, [pc, #500]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	4a7c      	ldr	r2, [pc, #496]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508c:	6413      	str	r3, [r2, #64]	; 0x40
 800508e:	4b7a      	ldr	r3, [pc, #488]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800509a:	2301      	movs	r3, #1
 800509c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509e:	4b77      	ldr	r3, [pc, #476]	; (800527c <HAL_RCC_OscConfig+0x474>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d118      	bne.n	80050dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050aa:	4b74      	ldr	r3, [pc, #464]	; (800527c <HAL_RCC_OscConfig+0x474>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a73      	ldr	r2, [pc, #460]	; (800527c <HAL_RCC_OscConfig+0x474>)
 80050b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b6:	f7ff f829 	bl	800410c <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050be:	f7ff f825 	bl	800410c <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e0cf      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d0:	4b6a      	ldr	r3, [pc, #424]	; (800527c <HAL_RCC_OscConfig+0x474>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d106      	bne.n	80050f2 <HAL_RCC_OscConfig+0x2ea>
 80050e4:	4b64      	ldr	r3, [pc, #400]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	4a63      	ldr	r2, [pc, #396]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	6713      	str	r3, [r2, #112]	; 0x70
 80050f0:	e01c      	b.n	800512c <HAL_RCC_OscConfig+0x324>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b05      	cmp	r3, #5
 80050f8:	d10c      	bne.n	8005114 <HAL_RCC_OscConfig+0x30c>
 80050fa:	4b5f      	ldr	r3, [pc, #380]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	4a5e      	ldr	r2, [pc, #376]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005100:	f043 0304 	orr.w	r3, r3, #4
 8005104:	6713      	str	r3, [r2, #112]	; 0x70
 8005106:	4b5c      	ldr	r3, [pc, #368]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	4a5b      	ldr	r2, [pc, #364]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	6713      	str	r3, [r2, #112]	; 0x70
 8005112:	e00b      	b.n	800512c <HAL_RCC_OscConfig+0x324>
 8005114:	4b58      	ldr	r3, [pc, #352]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	4a57      	ldr	r2, [pc, #348]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 800511a:	f023 0301 	bic.w	r3, r3, #1
 800511e:	6713      	str	r3, [r2, #112]	; 0x70
 8005120:	4b55      	ldr	r3, [pc, #340]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	4a54      	ldr	r2, [pc, #336]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005126:	f023 0304 	bic.w	r3, r3, #4
 800512a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d015      	beq.n	8005160 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005134:	f7fe ffea 	bl	800410c <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513a:	e00a      	b.n	8005152 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800513c:	f7fe ffe6 	bl	800410c <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f241 3288 	movw	r2, #5000	; 0x1388
 800514a:	4293      	cmp	r3, r2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e08e      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005152:	4b49      	ldr	r3, [pc, #292]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0ee      	beq.n	800513c <HAL_RCC_OscConfig+0x334>
 800515e:	e014      	b.n	800518a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005160:	f7fe ffd4 	bl	800410c <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005166:	e00a      	b.n	800517e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005168:	f7fe ffd0 	bl	800410c <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	; 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e078      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517e:	4b3e      	ldr	r3, [pc, #248]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1ee      	bne.n	8005168 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800518a:	7dfb      	ldrb	r3, [r7, #23]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d105      	bne.n	800519c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005190:	4b39      	ldr	r3, [pc, #228]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005194:	4a38      	ldr	r2, [pc, #224]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800519a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d064      	beq.n	800526e <HAL_RCC_OscConfig+0x466>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051a4:	4b34      	ldr	r3, [pc, #208]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 030c 	and.w	r3, r3, #12
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d05c      	beq.n	800526a <HAL_RCC_OscConfig+0x462>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d141      	bne.n	800523c <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b8:	4b31      	ldr	r3, [pc, #196]	; (8005280 <HAL_RCC_OscConfig+0x478>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051be:	f7fe ffa5 	bl	800410c <HAL_GetTick>
 80051c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c4:	e008      	b.n	80051d8 <HAL_RCC_OscConfig+0x3d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051c6:	f7fe ffa1 	bl	800410c <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x3d0>
          {
            return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e04b      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d8:	4b27      	ldr	r3, [pc, #156]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1f0      	bne.n	80051c6 <HAL_RCC_OscConfig+0x3be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	019b      	lsls	r3, r3, #6
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	3b01      	subs	r3, #1
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	061b      	lsls	r3, r3, #24
 8005208:	491b      	ldr	r1, [pc, #108]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 800520a:	4313      	orrs	r3, r2
 800520c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800520e:	4b1c      	ldr	r3, [pc, #112]	; (8005280 <HAL_RCC_OscConfig+0x478>)
 8005210:	2201      	movs	r2, #1
 8005212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005214:	f7fe ff7a 	bl	800410c <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521c:	f7fe ff76 	bl	800410c <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e020      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522e:	4b12      	ldr	r3, [pc, #72]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <HAL_RCC_OscConfig+0x414>
 800523a:	e018      	b.n	800526e <HAL_RCC_OscConfig+0x466>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523c:	4b10      	ldr	r3, [pc, #64]	; (8005280 <HAL_RCC_OscConfig+0x478>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005242:	f7fe ff63 	bl	800410c <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800524a:	f7fe ff5f 	bl	800410c <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e009      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525c:	4b06      	ldr	r3, [pc, #24]	; (8005278 <HAL_RCC_OscConfig+0x470>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f0      	bne.n	800524a <HAL_RCC_OscConfig+0x442>
 8005268:	e001      	b.n	800526e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <HAL_RCC_OscConfig+0x468>
    }
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40023800 	.word	0x40023800
 800527c:	40007000 	.word	0x40007000
 8005280:	42470060 	.word	0x42470060

08005284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0ca      	b.n	800542e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005298:	4b67      	ldr	r3, [pc, #412]	; (8005438 <HAL_RCC_ClockConfig+0x1b4>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d90c      	bls.n	80052c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a6:	4b64      	ldr	r3, [pc, #400]	; (8005438 <HAL_RCC_ClockConfig+0x1b4>)
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ae:	4b62      	ldr	r3, [pc, #392]	; (8005438 <HAL_RCC_ClockConfig+0x1b4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 030f 	and.w	r3, r3, #15
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e0b6      	b.n	800542e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d020      	beq.n	800530e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052d8:	4b58      	ldr	r3, [pc, #352]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	4a57      	ldr	r2, [pc, #348]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 80052de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052f0:	4b52      	ldr	r3, [pc, #328]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	4a51      	ldr	r2, [pc, #324]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 80052f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052fc:	4b4f      	ldr	r3, [pc, #316]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	494c      	ldr	r1, [pc, #304]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 800530a:	4313      	orrs	r3, r2
 800530c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d044      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d107      	bne.n	8005332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005322:	4b46      	ldr	r3, [pc, #280]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d119      	bne.n	8005362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e07d      	b.n	800542e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d003      	beq.n	8005342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800533e:	2b03      	cmp	r3, #3
 8005340:	d107      	bne.n	8005352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005342:	4b3e      	ldr	r3, [pc, #248]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e06d      	b.n	800542e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005352:	4b3a      	ldr	r3, [pc, #232]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e065      	b.n	800542e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005362:	4b36      	ldr	r3, [pc, #216]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f023 0203 	bic.w	r2, r3, #3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	4933      	ldr	r1, [pc, #204]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 8005370:	4313      	orrs	r3, r2
 8005372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005374:	f7fe feca 	bl	800410c <HAL_GetTick>
 8005378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537a:	e00a      	b.n	8005392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800537c:	f7fe fec6 	bl	800410c <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	f241 3288 	movw	r2, #5000	; 0x1388
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e04d      	b.n	800542e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005392:	4b2a      	ldr	r3, [pc, #168]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 020c 	and.w	r2, r3, #12
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d1eb      	bne.n	800537c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053a4:	4b24      	ldr	r3, [pc, #144]	; (8005438 <HAL_RCC_ClockConfig+0x1b4>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d20c      	bcs.n	80053cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b2:	4b21      	ldr	r3, [pc, #132]	; (8005438 <HAL_RCC_ClockConfig+0x1b4>)
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ba:	4b1f      	ldr	r3, [pc, #124]	; (8005438 <HAL_RCC_ClockConfig+0x1b4>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d001      	beq.n	80053cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e030      	b.n	800542e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053d8:	4b18      	ldr	r3, [pc, #96]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	4915      	ldr	r1, [pc, #84]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d009      	beq.n	800540a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053f6:	4b11      	ldr	r3, [pc, #68]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	490d      	ldr	r1, [pc, #52]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800540a:	f000 f81d 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 800540e:	4602      	mov	r2, r0
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <HAL_RCC_ClockConfig+0x1b8>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	091b      	lsrs	r3, r3, #4
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	4909      	ldr	r1, [pc, #36]	; (8005440 <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	5ccb      	ldrb	r3, [r1, r3]
 800541e:	fa22 f303 	lsr.w	r3, r2, r3
 8005422:	4a08      	ldr	r2, [pc, #32]	; (8005444 <HAL_RCC_ClockConfig+0x1c0>)
 8005424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8005426:	200f      	movs	r0, #15
 8005428:	f7fe fe2c 	bl	8004084 <HAL_InitTick>

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40023c00 	.word	0x40023c00
 800543c:	40023800 	.word	0x40023800
 8005440:	0800dac8 	.word	0x0800dac8
 8005444:	20000164 	.word	0x20000164

08005448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800544c:	b090      	sub	sp, #64	; 0x40
 800544e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	637b      	str	r3, [r7, #52]	; 0x34
 8005454:	2300      	movs	r3, #0
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005458:	2300      	movs	r3, #0
 800545a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005460:	4b59      	ldr	r3, [pc, #356]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 030c 	and.w	r3, r3, #12
 8005468:	2b08      	cmp	r3, #8
 800546a:	d00d      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0x40>
 800546c:	2b08      	cmp	r3, #8
 800546e:	f200 80a1 	bhi.w	80055b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <HAL_RCC_GetSysClockFreq+0x34>
 8005476:	2b04      	cmp	r3, #4
 8005478:	d003      	beq.n	8005482 <HAL_RCC_GetSysClockFreq+0x3a>
 800547a:	e09b      	b.n	80055b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800547c:	4b53      	ldr	r3, [pc, #332]	; (80055cc <HAL_RCC_GetSysClockFreq+0x184>)
 800547e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005480:	e09b      	b.n	80055ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005482:	4b53      	ldr	r3, [pc, #332]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005484:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005486:	e098      	b.n	80055ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005488:	4b4f      	ldr	r3, [pc, #316]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005490:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005492:	4b4d      	ldr	r3, [pc, #308]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d028      	beq.n	80054f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800549e:	4b4a      	ldr	r3, [pc, #296]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	099b      	lsrs	r3, r3, #6
 80054a4:	2200      	movs	r2, #0
 80054a6:	623b      	str	r3, [r7, #32]
 80054a8:	627a      	str	r2, [r7, #36]	; 0x24
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80054b0:	2100      	movs	r1, #0
 80054b2:	4b47      	ldr	r3, [pc, #284]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80054b4:	fb03 f201 	mul.w	r2, r3, r1
 80054b8:	2300      	movs	r3, #0
 80054ba:	fb00 f303 	mul.w	r3, r0, r3
 80054be:	4413      	add	r3, r2
 80054c0:	4a43      	ldr	r2, [pc, #268]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80054c2:	fba0 1202 	umull	r1, r2, r0, r2
 80054c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054c8:	460a      	mov	r2, r1
 80054ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80054cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ce:	4413      	add	r3, r2
 80054d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d4:	2200      	movs	r2, #0
 80054d6:	61bb      	str	r3, [r7, #24]
 80054d8:	61fa      	str	r2, [r7, #28]
 80054da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80054e2:	f7fb fbb9 	bl	8000c58 <__aeabi_uldivmod>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4613      	mov	r3, r2
 80054ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ee:	e053      	b.n	8005598 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f0:	4b35      	ldr	r3, [pc, #212]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	099b      	lsrs	r3, r3, #6
 80054f6:	2200      	movs	r2, #0
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	617a      	str	r2, [r7, #20]
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005502:	f04f 0b00 	mov.w	fp, #0
 8005506:	4652      	mov	r2, sl
 8005508:	465b      	mov	r3, fp
 800550a:	f04f 0000 	mov.w	r0, #0
 800550e:	f04f 0100 	mov.w	r1, #0
 8005512:	0159      	lsls	r1, r3, #5
 8005514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005518:	0150      	lsls	r0, r2, #5
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	ebb2 080a 	subs.w	r8, r2, sl
 8005522:	eb63 090b 	sbc.w	r9, r3, fp
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005532:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005536:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800553a:	ebb2 0408 	subs.w	r4, r2, r8
 800553e:	eb63 0509 	sbc.w	r5, r3, r9
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	00eb      	lsls	r3, r5, #3
 800554c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005550:	00e2      	lsls	r2, r4, #3
 8005552:	4614      	mov	r4, r2
 8005554:	461d      	mov	r5, r3
 8005556:	eb14 030a 	adds.w	r3, r4, sl
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	eb45 030b 	adc.w	r3, r5, fp
 8005560:	607b      	str	r3, [r7, #4]
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800556e:	4629      	mov	r1, r5
 8005570:	028b      	lsls	r3, r1, #10
 8005572:	4621      	mov	r1, r4
 8005574:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005578:	4621      	mov	r1, r4
 800557a:	028a      	lsls	r2, r1, #10
 800557c:	4610      	mov	r0, r2
 800557e:	4619      	mov	r1, r3
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	2200      	movs	r2, #0
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	60fa      	str	r2, [r7, #12]
 8005588:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800558c:	f7fb fb64 	bl	8000c58 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4613      	mov	r3, r2
 8005596:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005598:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	0c1b      	lsrs	r3, r3, #16
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	3301      	adds	r3, #1
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80055a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055b2:	e002      	b.n	80055ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055b4:	4b05      	ldr	r3, [pc, #20]	; (80055cc <HAL_RCC_GetSysClockFreq+0x184>)
 80055b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3740      	adds	r7, #64	; 0x40
 80055c0:	46bd      	mov	sp, r7
 80055c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055c6:	bf00      	nop
 80055c8:	40023800 	.word	0x40023800
 80055cc:	00f42400 	.word	0x00f42400
 80055d0:	017d7840 	.word	0x017d7840

080055d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055d8:	4b03      	ldr	r3, [pc, #12]	; (80055e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80055da:	681b      	ldr	r3, [r3, #0]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	20000164 	.word	0x20000164

080055ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055f0:	f7ff fff0 	bl	80055d4 <HAL_RCC_GetHCLKFreq>
 80055f4:	4602      	mov	r2, r0
 80055f6:	4b05      	ldr	r3, [pc, #20]	; (800560c <HAL_RCC_GetPCLK1Freq+0x20>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	0a9b      	lsrs	r3, r3, #10
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	4903      	ldr	r1, [pc, #12]	; (8005610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005602:	5ccb      	ldrb	r3, [r1, r3]
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005608:	4618      	mov	r0, r3
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40023800 	.word	0x40023800
 8005610:	0800dad8 	.word	0x0800dad8

08005614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005618:	f7ff ffdc 	bl	80055d4 <HAL_RCC_GetHCLKFreq>
 800561c:	4602      	mov	r2, r0
 800561e:	4b05      	ldr	r3, [pc, #20]	; (8005634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	0b5b      	lsrs	r3, r3, #13
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	4903      	ldr	r1, [pc, #12]	; (8005638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800562a:	5ccb      	ldrb	r3, [r1, r3]
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40023800 	.word	0x40023800
 8005638:	0800dad8 	.word	0x0800dad8

0800563c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e05d      	b.n	800570a <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f003 fa90 	bl	8008b88 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800567e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056a4:	431a      	orrs	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	ea42 0103 	orr.w	r1, r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	0c1b      	lsrs	r3, r3, #16
 80056c6:	f003 0104 	and.w	r1, r3, #4
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056de:	d104      	bne.n	80056ea <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80056e8:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056f8:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b08e      	sub	sp, #56	; 0x38
 8005716:	af02      	add	r7, sp, #8
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	607a      	str	r2, [r7, #4]
 800571e:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
 8005724:	2300      	movs	r3, #0
 8005726:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8005730:	2301      	movs	r3, #1
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_SPI_TransmitReceive+0x36>
 8005744:	2302      	movs	r3, #2
 8005746:	e1f2      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x41c>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005750:	f7fe fcdc 	bl	800410c <HAL_GetTick>
 8005754:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800575c:	b2db      	uxtb	r3, r3
 800575e:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	2b01      	cmp	r3, #1
 800576a:	d00e      	beq.n	800578a <HAL_SPI_TransmitReceive+0x78>
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005772:	d106      	bne.n	8005782 <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <HAL_SPI_TransmitReceive+0x70>
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	2b04      	cmp	r3, #4
 8005780:	d003      	beq.n	800578a <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 8005782:	2302      	movs	r3, #2
 8005784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005788:	e1c7      	b.n	8005b1a <HAL_SPI_TransmitReceive+0x408>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <HAL_SPI_TransmitReceive+0x8a>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <HAL_SPI_TransmitReceive+0x8a>
 8005796:	887b      	ldrh	r3, [r7, #2]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d103      	bne.n	80057a4 <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057a2:	e1ba      	b.n	8005b1a <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d103      	bne.n	80057b8 <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2205      	movs	r2, #5
 80057b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	887a      	ldrh	r2, [r7, #2]
 80057c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	887a      	ldrh	r2, [r7, #2]
 80057ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	887a      	ldrh	r2, [r7, #2]
 80057da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	887a      	ldrh	r2, [r7, #2]
 80057e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f6:	d110      	bne.n	800581a <HAL_SPI_TransmitReceive+0x108>
  {
    SPI_RESET_CRC(hspi);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6819      	ldr	r1, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005806:	400b      	ands	r3, r1
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005818:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d007      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005836:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005840:	f040 8084 	bne.w	800594c <HAL_SPI_TransmitReceive+0x23a>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d004      	beq.n	8005856 <HAL_SPI_TransmitReceive+0x144>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b01      	cmp	r3, #1
 8005854:	d16f      	bne.n	8005936 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	881a      	ldrh	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	3302      	adds	r3, #2
 8005864:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005874:	e05f      	b.n	8005936 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d02e      	beq.n	80058da <HAL_SPI_TransmitReceive+0x1c8>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d029      	beq.n	80058da <HAL_SPI_TransmitReceive+0x1c8>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b02      	cmp	r3, #2
 8005892:	d122      	bne.n	80058da <HAL_SPI_TransmitReceive+0x1c8>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	881a      	ldrh	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	3302      	adds	r3, #2
 80058a2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10c      	bne.n	80058da <HAL_SPI_TransmitReceive+0x1c8>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c8:	d107      	bne.n	80058da <HAL_SPI_TransmitReceive+0x1c8>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058d8:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d018      	beq.n	8005916 <HAL_SPI_TransmitReceive+0x204>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d111      	bne.n	8005916 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3302      	adds	r3, #2
 8005902:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8005912:	2301      	movs	r3, #1
 8005914:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d00b      	beq.n	8005936 <HAL_SPI_TransmitReceive+0x224>
 800591e:	f7fe fbf5 	bl	800410c <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800592a:	429a      	cmp	r2, r3
 800592c:	d803      	bhi.n	8005936 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005934:	e0f1      	b.n	8005b1a <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d19a      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x164>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d195      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x164>
 800594a:	e082      	b.n	8005a52 <HAL_SPI_TransmitReceive+0x340>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d004      	beq.n	800595e <HAL_SPI_TransmitReceive+0x24c>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b01      	cmp	r3, #1
 800595c:	d16f      	bne.n	8005a3e <HAL_SPI_TransmitReceive+0x32c>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	7812      	ldrb	r2, [r2, #0]
 8005968:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	3301      	adds	r3, #1
 800596e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005974:	b29b      	uxth	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800597e:	e05e      	b.n	8005a3e <HAL_SPI_TransmitReceive+0x32c>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005982:	2b00      	cmp	r3, #0
 8005984:	d02e      	beq.n	80059e4 <HAL_SPI_TransmitReceive+0x2d2>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d029      	beq.n	80059e4 <HAL_SPI_TransmitReceive+0x2d2>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b02      	cmp	r3, #2
 800599c:	d122      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	60ba      	str	r2, [r7, #8]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	320c      	adds	r2, #12
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10c      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x2d2>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d2:	d107      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x2d2>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059e2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d017      	beq.n	8005a1e <HAL_SPI_TransmitReceive+0x30c>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d110      	bne.n	8005a1e <HAL_SPI_TransmitReceive+0x30c>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68d9      	ldr	r1, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	b2ca      	uxtb	r2, r1
 8005a0a:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d00b      	beq.n	8005a3e <HAL_SPI_TransmitReceive+0x32c>
 8005a26:	f7fe fb71 	bl	800410c <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d803      	bhi.n	8005a3e <HAL_SPI_TransmitReceive+0x32c>
      {
        errorcode = HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a3c:	e06d      	b.n	8005b1a <HAL_SPI_TransmitReceive+0x408>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d19b      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x26e>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d196      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x26e>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a5a:	d11a      	bne.n	8005a92 <HAL_SPI_TransmitReceive+0x380>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	2201      	movs	r2, #1
 8005a64:	2101      	movs	r1, #1
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f865 	bl	8005b36 <SPI_WaitFlagStateUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d009      	beq.n	8005a86 <HAL_SPI_TransmitReceive+0x374>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a76:	f043 0202 	orr.w	r2, r3, #2
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8005a84:	e049      	b.n	8005b1a <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 8005a90:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0310 	and.w	r3, r3, #16
 8005a9c:	2b10      	cmp	r3, #16
 8005a9e:	d10d      	bne.n	8005abc <HAL_SPI_TransmitReceive+0x3aa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa4:	f043 0202 	orr.w	r2, r3, #2
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005ab4:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f835 	bl	8005b36 <SPI_WaitFlagStateUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_SPI_TransmitReceive+0x3c8>
  {
    errorcode = HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ad8:	e01f      	b.n	8005b1a <HAL_SPI_TransmitReceive+0x408>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f892 	bl	8005c08 <SPI_CheckFlag_BSY>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d006      	beq.n	8005af8 <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2220      	movs	r2, #32
 8005af4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005af6:	e010      	b.n	8005b1a <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10b      	bne.n	8005b18 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	e000      	b.n	8005b1a <HAL_SPI_TransmitReceive+0x408>
  }
  
error :
 8005b18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3730      	adds	r7, #48	; 0x30
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
 8005b42:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005b44:	e04d      	b.n	8005be2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4c:	d049      	beq.n	8005be2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005b54:	f7fe fada 	bl	800410c <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d83e      	bhi.n	8005be2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b72:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b7c:	d111      	bne.n	8005ba2 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b86:	d004      	beq.n	8005b92 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b90:	d107      	bne.n	8005ba2 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005baa:	d110      	bne.n	8005bce <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6819      	ldr	r1, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005bba:	400b      	ands	r3, r1
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e00e      	b.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4013      	ands	r3, r2
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d101      	bne.n	8005bf6 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	e000      	b.n	8005bf8 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d1a3      	bne.n	8005b46 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2180      	movs	r1, #128	; 0x80
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff ff89 	bl	8005b36 <SPI_WaitFlagStateUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2e:	f043 0220 	orr.w	r2, r3, #32
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e000      	b.n	8005c3c <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e01d      	b.n	8005c92 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f002 fffc 	bl	8008c68 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f000 fb88 	bl	8006398 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}  
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2200      	movs	r2, #0
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fc64 	bl	800657c <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1d      	ldr	r2, [pc, #116]	; (8005d30 <HAL_TIM_PWM_Stop+0x94>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d117      	bne.n	8005cee <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6a1a      	ldr	r2, [r3, #32]
 8005cc4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10f      	bne.n	8005cee <HAL_TIM_PWM_Stop+0x52>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6a1a      	ldr	r2, [r3, #32]
 8005cd4:	f240 4344 	movw	r3, #1092	; 0x444
 8005cd8:	4013      	ands	r3, r2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d107      	bne.n	8005cee <HAL_TIM_PWM_Stop+0x52>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a1a      	ldr	r2, [r3, #32]
 8005cf4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10f      	bne.n	8005d1e <HAL_TIM_PWM_Stop+0x82>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6a1a      	ldr	r2, [r3, #32]
 8005d04:	f240 4344 	movw	r3, #1092	; 0x444
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d107      	bne.n	8005d1e <HAL_TIM_PWM_Stop+0x82>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
} 
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40010000 	.word	0x40010000

08005d34 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b0c      	cmp	r3, #12
 8005d42:	d841      	bhi.n	8005dc8 <HAL_TIM_PWM_Start_IT+0x94>
 8005d44:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <HAL_TIM_PWM_Start_IT+0x18>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d81 	.word	0x08005d81
 8005d50:	08005dc9 	.word	0x08005dc9
 8005d54:	08005dc9 	.word	0x08005dc9
 8005d58:	08005dc9 	.word	0x08005dc9
 8005d5c:	08005d93 	.word	0x08005d93
 8005d60:	08005dc9 	.word	0x08005dc9
 8005d64:	08005dc9 	.word	0x08005dc9
 8005d68:	08005dc9 	.word	0x08005dc9
 8005d6c:	08005da5 	.word	0x08005da5
 8005d70:	08005dc9 	.word	0x08005dc9
 8005d74:	08005dc9 	.word	0x08005dc9
 8005d78:	08005dc9 	.word	0x08005dc9
 8005d7c:	08005db7 	.word	0x08005db7
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0202 	orr.w	r2, r2, #2
 8005d8e:	60da      	str	r2, [r3, #12]
    }
    break;
 8005d90:	e01b      	b.n	8005dca <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f042 0204 	orr.w	r2, r2, #4
 8005da0:	60da      	str	r2, [r3, #12]
    }
    break;
 8005da2:	e012      	b.n	8005dca <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0208 	orr.w	r2, r2, #8
 8005db2:	60da      	str	r2, [r3, #12]
    }
    break;
 8005db4:	e009      	b.n	8005dca <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0210 	orr.w	r2, r2, #16
 8005dc4:	60da      	str	r2, [r3, #12]
    }
    break;
 8005dc6:	e000      	b.n	8005dca <HAL_TIM_PWM_Start_IT+0x96>
    
    default:
    break;
 8005dc8:	bf00      	nop
  } 
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fbd2 	bl	800657c <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a0b      	ldr	r2, [pc, #44]	; (8005e0c <HAL_TIM_PWM_Start_IT+0xd8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d107      	bne.n	8005df2 <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005df0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0201 	orr.w	r2, r2, #1
 8005e00:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
} 
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40010000 	.word	0x40010000

08005e10 <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e081      	b.n	8005f34 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f002 ff71 	bl	8008d2c <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0207 	bic.w	r2, r2, #7
 8005e60:	609a      	str	r2, [r3, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	f000 fa93 	bl	8006398 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9a:	f023 0303 	bic.w	r3, r3, #3
 8005e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	613b      	str	r3, [r7, #16]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005eb8:	f023 030c 	bic.w	r3, r3, #12
 8005ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ec4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	021b      	lsls	r3, r3, #8
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	011a      	lsls	r2, r3, #4
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	031b      	lsls	r3, r3, #12
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005ef6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005efe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <HAL_TIM_Encoder_Start+0x18>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d008      	beq.n	8005f64 <HAL_TIM_Encoder_Start+0x28>
 8005f52:	e00f      	b.n	8005f74 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fb0d 	bl	800657c <TIM_CCxChannelCmd>
      break; 
 8005f62:	e016      	b.n	8005f92 <HAL_TIM_Encoder_Start+0x56>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	2104      	movs	r1, #4
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fb05 	bl	800657c <TIM_CCxChannelCmd>
      break;
 8005f72:	e00e      	b.n	8005f92 <HAL_TIM_Encoder_Start+0x56>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fafd 	bl	800657c <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2201      	movs	r2, #1
 8005f88:	2104      	movs	r1, #4
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 faf6 	bl	800657c <TIM_CCxChannelCmd>
     break; 
 8005f90:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f042 0201 	orr.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d122      	bne.n	8006008 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d11b      	bne.n	8006008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0202 	mvn.w	r2, #2
 8005fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f9be 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e005      	b.n	8006002 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f9b0 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f002 fe69 	bl	8008cd4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b04      	cmp	r3, #4
 8006014:	d122      	bne.n	800605c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b04      	cmp	r3, #4
 8006022:	d11b      	bne.n	800605c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0204 	mvn.w	r2, #4
 800602c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2202      	movs	r2, #2
 8006032:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f994 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
 8006048:	e005      	b.n	8006056 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f986 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f002 fe3f 	bl	8008cd4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b08      	cmp	r3, #8
 8006068:	d122      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b08      	cmp	r3, #8
 8006076:	d11b      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f06f 0208 	mvn.w	r2, #8
 8006080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2204      	movs	r2, #4
 8006086:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f96a 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
 800609c:	e005      	b.n	80060aa <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f95c 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f002 fe15 	bl	8008cd4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	2b10      	cmp	r3, #16
 80060bc:	d122      	bne.n	8006104 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b10      	cmp	r3, #16
 80060ca:	d11b      	bne.n	8006104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f06f 0210 	mvn.w	r2, #16
 80060d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2208      	movs	r2, #8
 80060da:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f940 	bl	8006370 <HAL_TIM_IC_CaptureCallback>
 80060f0:	e005      	b.n	80060fe <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f932 	bl	800635c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f002 fdeb 	bl	8008cd4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b01      	cmp	r3, #1
 8006110:	d10e      	bne.n	8006130 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b01      	cmp	r3, #1
 800611e:	d107      	bne.n	8006130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f06f 0201 	mvn.w	r2, #1
 8006128:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f90c 	bl	8006348 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800613a:	2b80      	cmp	r3, #128	; 0x80
 800613c:	d10e      	bne.n	800615c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006148:	2b80      	cmp	r3, #128	; 0x80
 800614a:	d107      	bne.n	800615c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006154:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fbad 	bl	80068b6 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006166:	2b40      	cmp	r3, #64	; 0x40
 8006168:	d10e      	bne.n	8006188 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d107      	bne.n	8006188 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006180:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f8fe 	bl	8006384 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b20      	cmp	r3, #32
 8006194:	d10e      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d107      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0220 	mvn.w	r2, #32
 80061ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fb77 	bl	80068a2 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80061b4:	bf00      	nop
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d101      	bne.n	80061d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061d2:	2302      	movs	r3, #2
 80061d4:	e0b4      	b.n	8006340 <HAL_TIM_PWM_ConfigChannel+0x184>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2202      	movs	r2, #2
 80061e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b0c      	cmp	r3, #12
 80061ea:	f200 809f 	bhi.w	800632c <HAL_TIM_PWM_ConfigChannel+0x170>
 80061ee:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80061f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f4:	08006229 	.word	0x08006229
 80061f8:	0800632d 	.word	0x0800632d
 80061fc:	0800632d 	.word	0x0800632d
 8006200:	0800632d 	.word	0x0800632d
 8006204:	08006269 	.word	0x08006269
 8006208:	0800632d 	.word	0x0800632d
 800620c:	0800632d 	.word	0x0800632d
 8006210:	0800632d 	.word	0x0800632d
 8006214:	080062ab 	.word	0x080062ab
 8006218:	0800632d 	.word	0x0800632d
 800621c:	0800632d 	.word	0x0800632d
 8006220:	0800632d 	.word	0x0800632d
 8006224:	080062eb 	.word	0x080062eb
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	4618      	mov	r0, r3
 8006230:	f000 f9c8 	bl	80065c4 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0208 	orr.w	r2, r2, #8
 8006242:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699a      	ldr	r2, [r3, #24]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0204 	bic.w	r2, r2, #4
 8006252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6999      	ldr	r1, [r3, #24]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	691a      	ldr	r2, [r3, #16]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	619a      	str	r2, [r3, #24]
    }
    break;
 8006266:	e062      	b.n	800632e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68b9      	ldr	r1, [r7, #8]
 800626e:	4618      	mov	r0, r3
 8006270:	f000 f916 	bl	80064a0 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006282:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6999      	ldr	r1, [r3, #24]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	021a      	lsls	r2, r3, #8
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	619a      	str	r2, [r3, #24]
    }
    break;
 80062a8:	e041      	b.n	800632e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68b9      	ldr	r1, [r7, #8]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 f9ef 	bl	8006694 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69da      	ldr	r2, [r3, #28]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0208 	orr.w	r2, r2, #8
 80062c4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69da      	ldr	r2, [r3, #28]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0204 	bic.w	r2, r2, #4
 80062d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69d9      	ldr	r1, [r3, #28]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	61da      	str	r2, [r3, #28]
    }
    break;
 80062e8:	e021      	b.n	800632e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fa3b 	bl	800676c <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006304:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69da      	ldr	r2, [r3, #28]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69d9      	ldr	r1, [r3, #28]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	021a      	lsls	r2, r3, #8
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	61da      	str	r2, [r3, #28]
    }
    break;
 800632a:	e000      	b.n	800632e <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 800632c:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a35      	ldr	r2, [pc, #212]	; (8006484 <TIM_Base_SetConfig+0xec>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00f      	beq.n	80063d4 <TIM_Base_SetConfig+0x3c>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ba:	d00b      	beq.n	80063d4 <TIM_Base_SetConfig+0x3c>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a32      	ldr	r2, [pc, #200]	; (8006488 <TIM_Base_SetConfig+0xf0>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d007      	beq.n	80063d4 <TIM_Base_SetConfig+0x3c>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a31      	ldr	r2, [pc, #196]	; (800648c <TIM_Base_SetConfig+0xf4>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_Base_SetConfig+0x3c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a30      	ldr	r2, [pc, #192]	; (8006490 <TIM_Base_SetConfig+0xf8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d101      	bne.n	80063d8 <TIM_Base_SetConfig+0x40>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <TIM_Base_SetConfig+0x42>
 80063d8:	2300      	movs	r3, #0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d008      	beq.n	80063f0 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a24      	ldr	r2, [pc, #144]	; (8006484 <TIM_Base_SetConfig+0xec>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d01b      	beq.n	8006430 <TIM_Base_SetConfig+0x98>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fe:	d017      	beq.n	8006430 <TIM_Base_SetConfig+0x98>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a21      	ldr	r2, [pc, #132]	; (8006488 <TIM_Base_SetConfig+0xf0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d013      	beq.n	8006430 <TIM_Base_SetConfig+0x98>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a20      	ldr	r2, [pc, #128]	; (800648c <TIM_Base_SetConfig+0xf4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00f      	beq.n	8006430 <TIM_Base_SetConfig+0x98>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <TIM_Base_SetConfig+0xf8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00b      	beq.n	8006430 <TIM_Base_SetConfig+0x98>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a1e      	ldr	r2, [pc, #120]	; (8006494 <TIM_Base_SetConfig+0xfc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d007      	beq.n	8006430 <TIM_Base_SetConfig+0x98>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a1d      	ldr	r2, [pc, #116]	; (8006498 <TIM_Base_SetConfig+0x100>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_Base_SetConfig+0x98>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a1c      	ldr	r2, [pc, #112]	; (800649c <TIM_Base_SetConfig+0x104>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d101      	bne.n	8006434 <TIM_Base_SetConfig+0x9c>
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <TIM_Base_SetConfig+0x9e>
 8006434:	2300      	movs	r3, #0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d008      	beq.n	800644c <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a07      	ldr	r2, [pc, #28]	; (8006484 <TIM_Base_SetConfig+0xec>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d103      	bne.n	8006472 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	615a      	str	r2, [r3, #20]
}
 8006478:	bf00      	nop
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	40010000 	.word	0x40010000
 8006488:	40000400 	.word	0x40000400
 800648c:	40000800 	.word	0x40000800
 8006490:	40000c00 	.word	0x40000c00
 8006494:	40014000 	.word	0x40014000
 8006498:	40014400 	.word	0x40014400
 800649c:	40014800 	.word	0x40014800

080064a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	f023 0210 	bic.w	r2, r3, #16
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e2:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	021b      	lsls	r3, r3, #8
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f023 0320 	bic.w	r3, r3, #32
 80064f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a1c      	ldr	r2, [pc, #112]	; (8006578 <TIM_OC2_SetConfig+0xd8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d121      	bne.n	8006550 <TIM_OC2_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006526:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800652e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	621a      	str	r2, [r3, #32]
}
 800656a:	bf00      	nop
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	40010000 	.word	0x40010000

0800657c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800658c:	2201      	movs	r2, #1
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a1a      	ldr	r2, [r3, #32]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	43db      	mvns	r3, r3
 800659e:	401a      	ands	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a1a      	ldr	r2, [r3, #32]
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	fa01 f303 	lsl.w	r3, r1, r3
 80065b0:	431a      	orrs	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	621a      	str	r2, [r3, #32]
}
 80065b6:	bf00      	nop
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f023 0201 	bic.w	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0303 	bic.w	r3, r3, #3
 8006606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f023 0302 	bic.w	r3, r3, #2
 8006618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	4313      	orrs	r3, r2
 8006622:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a1a      	ldr	r2, [pc, #104]	; (8006690 <TIM_OC1_SetConfig+0xcc>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d11e      	bne.n	800666a <TIM_OC1_SetConfig+0xa6>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f023 0308 	bic.w	r3, r3, #8
 8006632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f023 0304 	bic.w	r3, r3, #4
 8006644:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800664c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	621a      	str	r2, [r3, #32]
} 
 8006684:	bf00      	nop
 8006686:	371c      	adds	r7, #28
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	40010000 	.word	0x40010000

08006694 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 80066a6:	2300      	movs	r3, #0
 80066a8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0303 	bic.w	r3, r3, #3
 80066d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	021b      	lsls	r3, r3, #8
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a1b      	ldr	r2, [pc, #108]	; (8006768 <TIM_OC3_SetConfig+0xd4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d121      	bne.n	8006742 <TIM_OC3_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006718:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4313      	orrs	r3, r2
 8006740:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	621a      	str	r2, [r3, #32]
}
 800675c:	bf00      	nop
 800675e:	371c      	adds	r7, #28
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	40010000 	.word	0x40010000

0800676c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a6:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ae:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067c2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	031b      	lsls	r3, r3, #12
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a10      	ldr	r2, [pc, #64]	; (8006814 <TIM_OC4_SetConfig+0xa8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d109      	bne.n	80067ec <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	019b      	lsls	r3, r3, #6
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	621a      	str	r2, [r3, #32]
}
 8006806:	bf00      	nop
 8006808:	371c      	adds	r7, #28
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40010000 	.word	0x40010000

08006818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800682c:	2302      	movs	r3, #2
 800682e:	e032      	b.n	8006896 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800684e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6859      	ldr	r1, [r3, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006870:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6899      	ldr	r1, [r3, #8]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8006894:	2300      	movs	r3, #0
} 
 8006896:	4618      	mov	r0, r3
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80068aa:	bf00      	nop
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b082      	sub	sp, #8
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e03f      	b.n	800695c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f002 fa4d 	bl	8008d90 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2224      	movs	r2, #36	; 0x24
 80068fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68da      	ldr	r2, [r3, #12]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800690c:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fa6a 	bl	8006de8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691a      	ldr	r2, [r3, #16]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006922:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695a      	ldr	r2, [r3, #20]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006932:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006942:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2220      	movs	r2, #32
 800694e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2220      	movs	r2, #32
 8006956:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b088      	sub	sp, #32
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	4613      	mov	r3, r2
 8006972:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b20      	cmp	r3, #32
 8006982:	f040 8083 	bne.w	8006a8c <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0)) 
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <HAL_UART_Transmit+0x2e>
 800698c:	88fb      	ldrh	r3, [r7, #6]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e07b      	b.n	8006a8e <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_UART_Transmit+0x40>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e074      	b.n	8006a8e <HAL_UART_Transmit+0x12a>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2221      	movs	r2, #33	; 0x21
 80069b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80069ba:	f7fd fba7 	bl	800410c <HAL_GetTick>
 80069be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	88fa      	ldrh	r2, [r7, #6]
 80069c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	88fa      	ldrh	r2, [r7, #6]
 80069ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80069cc:	e042      	b.n	8006a54 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e4:	d122      	bne.n	8006a2c <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2200      	movs	r2, #0
 80069ee:	2180      	movs	r1, #128	; 0x80
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f97b 	bl	8006cec <UART_WaitOnFlagUntilTimeout>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e046      	b.n	8006a8e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a12:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d103      	bne.n	8006a24 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	3302      	adds	r3, #2
 8006a20:	60bb      	str	r3, [r7, #8]
 8006a22:	e017      	b.n	8006a54 <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	3301      	adds	r3, #1
 8006a28:	60bb      	str	r3, [r7, #8]
 8006a2a:	e013      	b.n	8006a54 <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2200      	movs	r2, #0
 8006a34:	2180      	movs	r1, #128	; 0x80
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 f958 	bl	8006cec <UART_WaitOnFlagUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e023      	b.n	8006a8e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	60ba      	str	r2, [r7, #8]
 8006a4c:	781a      	ldrb	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1b7      	bne.n	80069ce <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2200      	movs	r2, #0
 8006a66:	2140      	movs	r1, #64	; 0x40
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f93f 	bl	8006cec <UART_WaitOnFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e00a      	b.n	8006a8e <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e000      	b.n	8006a8e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006a8c:	2302      	movs	r3, #2
  }
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d166      	bne.n	8006b80 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_UART_Receive_DMA+0x26>
 8006ab8:	88fb      	ldrh	r3, [r7, #6]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e05f      	b.n	8006b82 <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d101      	bne.n	8006ad0 <HAL_UART_Receive_DMA+0x38>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e058      	b.n	8006b82 <HAL_UART_Receive_DMA+0xea>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	88fa      	ldrh	r2, [r7, #6]
 8006ae2:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2222      	movs	r2, #34	; 0x22
 8006aee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af6:	4a25      	ldr	r2, [pc, #148]	; (8006b8c <HAL_UART_Receive_DMA+0xf4>)
 8006af8:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006afe:	4a24      	ldr	r2, [pc, #144]	; (8006b90 <HAL_UART_Receive_DMA+0xf8>)
 8006b00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b06:	4a23      	ldr	r2, [pc, #140]	; (8006b94 <HAL_UART_Receive_DMA+0xfc>)
 8006b08:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0e:	2200      	movs	r2, #0
 8006b10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 8006b12:	f107 0308 	add.w	r3, r7, #8
 8006b16:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3304      	adds	r3, #4
 8006b22:	4619      	mov	r1, r3
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	88fb      	ldrh	r3, [r7, #6]
 8006b2a:	f7fd fcdb 	bl	80044e4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	613b      	str	r3, [r7, #16]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b5a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695a      	ldr	r2, [r3, #20]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0201 	orr.w	r2, r2, #1
 8006b6a:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695a      	ldr	r2, [r3, #20]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b7a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e000      	b.n	8006b82 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8006b80:	2302      	movs	r3, #2
  }
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	08006bd5 	.word	0x08006bd5
 8006b90:	08006c3d 	.word	0x08006c3d
 8006b94:	08006c59 	.word	0x08006c59

08006b98 <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d11e      	bne.n	8006c2e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c04:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695a      	ldr	r2, [r3, #20]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 0201 	bic.w	r2, r2, #1
 8006c14:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	695a      	ldr	r2, [r3, #20]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c24:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff ffb2 	bl	8006b98 <HAL_UART_RxCpltCallback>
}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <UART_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f7ff ffae 	bl	8006bac <HAL_UART_RxHalfCpltCallback>
}
 8006c50:	bf00      	nop
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bf14      	ite	ne
 8006c78:	2301      	movne	r3, #1
 8006c7a:	2300      	moveq	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b21      	cmp	r3, #33	; 0x21
 8006c8a:	d108      	bne.n	8006c9e <UART_DMAError+0x46>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d005      	beq.n	8006c9e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2200      	movs	r2, #0
 8006c96:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006c98:	68b8      	ldr	r0, [r7, #8]
 8006c9a:	f000 f871 	bl	8006d80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	bf14      	ite	ne
 8006cac:	2301      	movne	r3, #1
 8006cae:	2300      	moveq	r3, #0
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b22      	cmp	r3, #34	; 0x22
 8006cbe:	d108      	bne.n	8006cd2 <UART_DMAError+0x7a>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006ccc:	68b8      	ldr	r0, [r7, #8]
 8006cce:	f000 f86d 	bl	8006dac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd6:	f043 0210 	orr.w	r2, r3, #16
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8006cde:	68b8      	ldr	r0, [r7, #8]
 8006ce0:	f7ff ff6e 	bl	8006bc0 <HAL_UART_ErrorCallback>
}
 8006ce4:	bf00      	nop
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8006cfc:	e02c      	b.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d04:	d028      	beq.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d007      	beq.n	8006d1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d0c:	f7fd f9fe 	bl	800410c <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	69ba      	ldr	r2, [r7, #24]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d21d      	bcs.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d2a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	695a      	ldr	r2, [r3, #20]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0201 	bic.w	r2, r2, #1
 8006d3a:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e00f      	b.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4013      	ands	r3, r2
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	bf0c      	ite	eq
 8006d68:	2301      	moveq	r3, #1
 8006d6a:	2300      	movne	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d0c3      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006d96:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006dc2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695a      	ldr	r2, [r3, #20]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0201 	bic.w	r2, r2, #1
 8006dd2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006de8:	b5b0      	push	{r4, r5, r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006e24:	f023 030c 	bic.w	r3, r3, #12
 8006e28:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689a      	ldr	r2, [r3, #8]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e5c:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e78:	f040 80e4 	bne.w	8007044 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4aab      	ldr	r2, [pc, #684]	; (8007130 <UART_SetConfig+0x348>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <UART_SetConfig+0xa8>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4aaa      	ldr	r2, [pc, #680]	; (8007134 <UART_SetConfig+0x34c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d16c      	bne.n	8006f6a <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006e90:	f7fe fbc0 	bl	8005614 <HAL_RCC_GetPCLK2Freq>
 8006e94:	4602      	mov	r2, r0
 8006e96:	4613      	mov	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	009a      	lsls	r2, r3, #2
 8006e9e:	441a      	add	r2, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eaa:	4aa3      	ldr	r2, [pc, #652]	; (8007138 <UART_SetConfig+0x350>)
 8006eac:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	011c      	lsls	r4, r3, #4
 8006eb4:	f7fe fbae 	bl	8005614 <HAL_RCC_GetPCLK2Freq>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	4613      	mov	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009a      	lsls	r2, r3, #2
 8006ec2:	441a      	add	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	fbb2 f5f3 	udiv	r5, r2, r3
 8006ece:	f7fe fba1 	bl	8005614 <HAL_RCC_GetPCLK2Freq>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	009a      	lsls	r2, r3, #2
 8006edc:	441a      	add	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee8:	4a93      	ldr	r2, [pc, #588]	; (8007138 <UART_SetConfig+0x350>)
 8006eea:	fba2 2303 	umull	r2, r3, r2, r3
 8006eee:	095b      	lsrs	r3, r3, #5
 8006ef0:	2264      	movs	r2, #100	; 0x64
 8006ef2:	fb02 f303 	mul.w	r3, r2, r3
 8006ef6:	1aeb      	subs	r3, r5, r3
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	3332      	adds	r3, #50	; 0x32
 8006efc:	4a8e      	ldr	r2, [pc, #568]	; (8007138 <UART_SetConfig+0x350>)
 8006efe:	fba2 2303 	umull	r2, r3, r2, r3
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f0a:	441c      	add	r4, r3
 8006f0c:	f7fe fb82 	bl	8005614 <HAL_RCC_GetPCLK2Freq>
 8006f10:	4602      	mov	r2, r0
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	009a      	lsls	r2, r3, #2
 8006f1a:	441a      	add	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	fbb2 f5f3 	udiv	r5, r2, r3
 8006f26:	f7fe fb75 	bl	8005614 <HAL_RCC_GetPCLK2Freq>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009a      	lsls	r2, r3, #2
 8006f34:	441a      	add	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f40:	4a7d      	ldr	r2, [pc, #500]	; (8007138 <UART_SetConfig+0x350>)
 8006f42:	fba2 2303 	umull	r2, r3, r2, r3
 8006f46:	095b      	lsrs	r3, r3, #5
 8006f48:	2264      	movs	r2, #100	; 0x64
 8006f4a:	fb02 f303 	mul.w	r3, r2, r3
 8006f4e:	1aeb      	subs	r3, r5, r3
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	3332      	adds	r3, #50	; 0x32
 8006f54:	4a78      	ldr	r2, [pc, #480]	; (8007138 <UART_SetConfig+0x350>)
 8006f56:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	f003 0207 	and.w	r2, r3, #7
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4422      	add	r2, r4
 8006f66:	609a      	str	r2, [r3, #8]
 8006f68:	e154      	b.n	8007214 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006f6a:	f7fe fb3f 	bl	80055ec <HAL_RCC_GetPCLK1Freq>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	4613      	mov	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	009a      	lsls	r2, r3, #2
 8006f78:	441a      	add	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f84:	4a6c      	ldr	r2, [pc, #432]	; (8007138 <UART_SetConfig+0x350>)
 8006f86:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	011c      	lsls	r4, r3, #4
 8006f8e:	f7fe fb2d 	bl	80055ec <HAL_RCC_GetPCLK1Freq>
 8006f92:	4602      	mov	r2, r0
 8006f94:	4613      	mov	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	009a      	lsls	r2, r3, #2
 8006f9c:	441a      	add	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	fbb2 f5f3 	udiv	r5, r2, r3
 8006fa8:	f7fe fb20 	bl	80055ec <HAL_RCC_GetPCLK1Freq>
 8006fac:	4602      	mov	r2, r0
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009a      	lsls	r2, r3, #2
 8006fb6:	441a      	add	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc2:	4a5d      	ldr	r2, [pc, #372]	; (8007138 <UART_SetConfig+0x350>)
 8006fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	2264      	movs	r2, #100	; 0x64
 8006fcc:	fb02 f303 	mul.w	r3, r2, r3
 8006fd0:	1aeb      	subs	r3, r5, r3
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	3332      	adds	r3, #50	; 0x32
 8006fd6:	4a58      	ldr	r2, [pc, #352]	; (8007138 <UART_SetConfig+0x350>)
 8006fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fdc:	095b      	lsrs	r3, r3, #5
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fe4:	441c      	add	r4, r3
 8006fe6:	f7fe fb01 	bl	80055ec <HAL_RCC_GetPCLK1Freq>
 8006fea:	4602      	mov	r2, r0
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009a      	lsls	r2, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	fbb2 f5f3 	udiv	r5, r2, r3
 8007000:	f7fe faf4 	bl	80055ec <HAL_RCC_GetPCLK1Freq>
 8007004:	4602      	mov	r2, r0
 8007006:	4613      	mov	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	009a      	lsls	r2, r3, #2
 800700e:	441a      	add	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	fbb2 f3f3 	udiv	r3, r2, r3
 800701a:	4a47      	ldr	r2, [pc, #284]	; (8007138 <UART_SetConfig+0x350>)
 800701c:	fba2 2303 	umull	r2, r3, r2, r3
 8007020:	095b      	lsrs	r3, r3, #5
 8007022:	2264      	movs	r2, #100	; 0x64
 8007024:	fb02 f303 	mul.w	r3, r2, r3
 8007028:	1aeb      	subs	r3, r5, r3
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	3332      	adds	r3, #50	; 0x32
 800702e:	4a42      	ldr	r2, [pc, #264]	; (8007138 <UART_SetConfig+0x350>)
 8007030:	fba2 2303 	umull	r2, r3, r2, r3
 8007034:	095b      	lsrs	r3, r3, #5
 8007036:	f003 0207 	and.w	r2, r3, #7
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4422      	add	r2, r4
 8007040:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8007042:	e0e7      	b.n	8007214 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a39      	ldr	r2, [pc, #228]	; (8007130 <UART_SetConfig+0x348>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d004      	beq.n	8007058 <UART_SetConfig+0x270>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a38      	ldr	r2, [pc, #224]	; (8007134 <UART_SetConfig+0x34c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d171      	bne.n	800713c <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007058:	f7fe fadc 	bl	8005614 <HAL_RCC_GetPCLK2Freq>
 800705c:	4602      	mov	r2, r0
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	009a      	lsls	r2, r3, #2
 8007066:	441a      	add	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	4a31      	ldr	r2, [pc, #196]	; (8007138 <UART_SetConfig+0x350>)
 8007074:	fba2 2303 	umull	r2, r3, r2, r3
 8007078:	095b      	lsrs	r3, r3, #5
 800707a:	011c      	lsls	r4, r3, #4
 800707c:	f7fe faca 	bl	8005614 <HAL_RCC_GetPCLK2Freq>
 8007080:	4602      	mov	r2, r0
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	009a      	lsls	r2, r3, #2
 800708a:	441a      	add	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	fbb2 f5f3 	udiv	r5, r2, r3
 8007096:	f7fe fabd 	bl	8005614 <HAL_RCC_GetPCLK2Freq>
 800709a:	4602      	mov	r2, r0
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	009a      	lsls	r2, r3, #2
 80070a4:	441a      	add	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b0:	4a21      	ldr	r2, [pc, #132]	; (8007138 <UART_SetConfig+0x350>)
 80070b2:	fba2 2303 	umull	r2, r3, r2, r3
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	2264      	movs	r2, #100	; 0x64
 80070ba:	fb02 f303 	mul.w	r3, r2, r3
 80070be:	1aeb      	subs	r3, r5, r3
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	3332      	adds	r3, #50	; 0x32
 80070c4:	4a1c      	ldr	r2, [pc, #112]	; (8007138 <UART_SetConfig+0x350>)
 80070c6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070d0:	441c      	add	r4, r3
 80070d2:	f7fe fa9f 	bl	8005614 <HAL_RCC_GetPCLK2Freq>
 80070d6:	4602      	mov	r2, r0
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009a      	lsls	r2, r3, #2
 80070e0:	441a      	add	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80070ec:	f7fe fa92 	bl	8005614 <HAL_RCC_GetPCLK2Freq>
 80070f0:	4602      	mov	r2, r0
 80070f2:	4613      	mov	r3, r2
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	4413      	add	r3, r2
 80070f8:	009a      	lsls	r2, r3, #2
 80070fa:	441a      	add	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	fbb2 f3f3 	udiv	r3, r2, r3
 8007106:	4a0c      	ldr	r2, [pc, #48]	; (8007138 <UART_SetConfig+0x350>)
 8007108:	fba2 2303 	umull	r2, r3, r2, r3
 800710c:	095b      	lsrs	r3, r3, #5
 800710e:	2264      	movs	r2, #100	; 0x64
 8007110:	fb02 f303 	mul.w	r3, r2, r3
 8007114:	1aeb      	subs	r3, r5, r3
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	3332      	adds	r3, #50	; 0x32
 800711a:	4a07      	ldr	r2, [pc, #28]	; (8007138 <UART_SetConfig+0x350>)
 800711c:	fba2 2303 	umull	r2, r3, r2, r3
 8007120:	095b      	lsrs	r3, r3, #5
 8007122:	f003 020f 	and.w	r2, r3, #15
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4422      	add	r2, r4
 800712c:	609a      	str	r2, [r3, #8]
 800712e:	e071      	b.n	8007214 <UART_SetConfig+0x42c>
 8007130:	40011000 	.word	0x40011000
 8007134:	40011400 	.word	0x40011400
 8007138:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800713c:	f7fe fa56 	bl	80055ec <HAL_RCC_GetPCLK1Freq>
 8007140:	4602      	mov	r2, r0
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	009a      	lsls	r2, r3, #2
 800714a:	441a      	add	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	fbb2 f3f3 	udiv	r3, r2, r3
 8007156:	4a31      	ldr	r2, [pc, #196]	; (800721c <UART_SetConfig+0x434>)
 8007158:	fba2 2303 	umull	r2, r3, r2, r3
 800715c:	095b      	lsrs	r3, r3, #5
 800715e:	011c      	lsls	r4, r3, #4
 8007160:	f7fe fa44 	bl	80055ec <HAL_RCC_GetPCLK1Freq>
 8007164:	4602      	mov	r2, r0
 8007166:	4613      	mov	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	009a      	lsls	r2, r3, #2
 800716e:	441a      	add	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	fbb2 f5f3 	udiv	r5, r2, r3
 800717a:	f7fe fa37 	bl	80055ec <HAL_RCC_GetPCLK1Freq>
 800717e:	4602      	mov	r2, r0
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	009a      	lsls	r2, r3, #2
 8007188:	441a      	add	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	fbb2 f3f3 	udiv	r3, r2, r3
 8007194:	4a21      	ldr	r2, [pc, #132]	; (800721c <UART_SetConfig+0x434>)
 8007196:	fba2 2303 	umull	r2, r3, r2, r3
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	2264      	movs	r2, #100	; 0x64
 800719e:	fb02 f303 	mul.w	r3, r2, r3
 80071a2:	1aeb      	subs	r3, r5, r3
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	3332      	adds	r3, #50	; 0x32
 80071a8:	4a1c      	ldr	r2, [pc, #112]	; (800721c <UART_SetConfig+0x434>)
 80071aa:	fba2 2303 	umull	r2, r3, r2, r3
 80071ae:	095b      	lsrs	r3, r3, #5
 80071b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071b4:	441c      	add	r4, r3
 80071b6:	f7fe fa19 	bl	80055ec <HAL_RCC_GetPCLK1Freq>
 80071ba:	4602      	mov	r2, r0
 80071bc:	4613      	mov	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	009a      	lsls	r2, r3, #2
 80071c4:	441a      	add	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80071d0:	f7fe fa0c 	bl	80055ec <HAL_RCC_GetPCLK1Freq>
 80071d4:	4602      	mov	r2, r0
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009a      	lsls	r2, r3, #2
 80071de:	441a      	add	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ea:	4a0c      	ldr	r2, [pc, #48]	; (800721c <UART_SetConfig+0x434>)
 80071ec:	fba2 2303 	umull	r2, r3, r2, r3
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	2264      	movs	r2, #100	; 0x64
 80071f4:	fb02 f303 	mul.w	r3, r2, r3
 80071f8:	1aeb      	subs	r3, r5, r3
 80071fa:	011b      	lsls	r3, r3, #4
 80071fc:	3332      	adds	r3, #50	; 0x32
 80071fe:	4a07      	ldr	r2, [pc, #28]	; (800721c <UART_SetConfig+0x434>)
 8007200:	fba2 2303 	umull	r2, r3, r2, r3
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	f003 020f 	and.w	r2, r3, #15
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4422      	add	r2, r4
 8007210:	609a      	str	r2, [r3, #8]
}
 8007212:	e7ff      	b.n	8007214 <UART_SetConfig+0x42c>
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bdb0      	pop	{r4, r5, r7, pc}
 800721c:	51eb851f 	.word	0x51eb851f

08007220 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b094      	sub	sp, #80	; 0x50
 8007224:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 8007226:	2300      	movs	r3, #0
 8007228:	60bb      	str	r3, [r7, #8]
 800722a:	4b2a      	ldr	r3, [pc, #168]	; (80072d4 <SystemClock_Config+0xb4>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	4a29      	ldr	r2, [pc, #164]	; (80072d4 <SystemClock_Config+0xb4>)
 8007230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007234:	6413      	str	r3, [r2, #64]	; 0x40
 8007236:	4b27      	ldr	r3, [pc, #156]	; (80072d4 <SystemClock_Config+0xb4>)
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800723e:	60bb      	str	r3, [r7, #8]
 8007240:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007242:	2300      	movs	r3, #0
 8007244:	607b      	str	r3, [r7, #4]
 8007246:	4b24      	ldr	r3, [pc, #144]	; (80072d8 <SystemClock_Config+0xb8>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800724e:	4a22      	ldr	r2, [pc, #136]	; (80072d8 <SystemClock_Config+0xb8>)
 8007250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	4b20      	ldr	r3, [pc, #128]	; (80072d8 <SystemClock_Config+0xb8>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800725e:	607b      	str	r3, [r7, #4]
 8007260:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007262:	2302      	movs	r3, #2
 8007264:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007266:	2301      	movs	r3, #1
 8007268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800726a:	2310      	movs	r3, #16
 800726c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800726e:	2302      	movs	r3, #2
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007272:	2300      	movs	r3, #0
 8007274:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 8007276:	2310      	movs	r3, #16
 8007278:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800727a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800727e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8007280:	2304      	movs	r3, #4
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007284:	2307      	movs	r3, #7
 8007286:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007288:	f107 030c 	add.w	r3, r7, #12
 800728c:	4618      	mov	r0, r3
 800728e:	f7fd fdbb 	bl	8004e08 <HAL_RCC_OscConfig>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <SystemClock_Config+0x7e>
  {
    Error_Handler(0);
 8007298:	2000      	movs	r0, #0
 800729a:	f001 f98d 	bl	80085b8 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800729e:	230f      	movs	r3, #15
 80072a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80072a2:	2302      	movs	r3, #2
 80072a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072a6:	2300      	movs	r3, #0
 80072a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80072aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 80072b0:	2300      	movs	r3, #0
 80072b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80072b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80072b8:	2102      	movs	r1, #2
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fd ffe2 	bl	8005284 <HAL_RCC_ClockConfig>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d002      	beq.n	80072cc <SystemClock_Config+0xac>
  {
    Error_Handler(1);
 80072c6:	2001      	movs	r0, #1
 80072c8:	f001 f976 	bl	80085b8 <Error_Handler>
  }
}
 80072cc:	bf00      	nop
 80072ce:	3750      	adds	r7, #80	; 0x50
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	40023800 	.word	0x40023800
 80072d8:	40007000 	.word	0x40007000

080072dc <NVIC_SystemReset>:
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80072e0:	f3bf 8f4f 	dsb	sy
}
 80072e4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80072e6:	4b07      	ldr	r3, [pc, #28]	; (8007304 <NVIC_SystemReset+0x28>)
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80072ee:	4905      	ldr	r1, [pc, #20]	; (8007304 <NVIC_SystemReset+0x28>)
 80072f0:	4b05      	ldr	r3, [pc, #20]	; (8007308 <NVIC_SystemReset+0x2c>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80072f6:	f3bf 8f4f 	dsb	sy
}
 80072fa:	bf00      	nop
  __ASM volatile ("nop");
 80072fc:	bf00      	nop
}
 80072fe:	bf00      	nop
    __NOP();
 8007300:	e7fc      	b.n	80072fc <NVIC_SystemReset+0x20>
 8007302:	bf00      	nop
 8007304:	e000ed00 	.word	0xe000ed00
 8007308:	05fa0004 	.word	0x05fa0004

0800730c <Delay_Pulse>:
				"CMP R0, #0\n\t"\
				"BNE 1b \n\t" : : [loops] "r" (16*us) : "memory"\
		);\
} while(0)

int Delay_Pulse(){
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
	return desired_pwm_period == UINT32_MAX;
 8007310:	4b06      	ldr	r3, [pc, #24]	; (800732c <Delay_Pulse+0x20>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	bf0c      	ite	eq
 800731a:	2301      	moveq	r3, #1
 800731c:	2300      	movne	r3, #0
 800731e:	b2db      	uxtb	r3, r3
}
 8007320:	4618      	mov	r0, r3
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	20000c64 	.word	0x20000c64

08007330 <Main_StepClockHandler>:

/*
 * PWM pulse (step) interrupt
 */
void Main_StepClockHandler() {
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
	/*
	 *  Stepper motor acceleration, speed, direction and position control developed by Ryan Nemiroff
	 */

	uint32_t desired_pwm_period_local = desired_pwm_period;
 8007336:	4b0a      	ldr	r3, [pc, #40]	; (8007360 <Main_StepClockHandler+0x30>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	607b      	str	r3, [r7, #4]

	/*
	 * Add time reporting
	 */

	clock_int_time = DWT->CYCCNT;
 800733c:	4b09      	ldr	r3, [pc, #36]	; (8007364 <Main_StepClockHandler+0x34>)
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	4a09      	ldr	r2, [pc, #36]	; (8007368 <Main_StepClockHandler+0x38>)
 8007342:	6013      	str	r3, [r2, #0]

	if (desired_pwm_period_local != 0) {
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d005      	beq.n	8007356 <Main_StepClockHandler+0x26>
		L6474_Board_Pwm1SetPeriod(desired_pwm_period_local);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7fc f92e 	bl	80035ac <L6474_Board_Pwm1SetPeriod>
		current_pwm_period = desired_pwm_period_local;
 8007350:	4a06      	ldr	r2, [pc, #24]	; (800736c <Main_StepClockHandler+0x3c>)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6013      	str	r3, [r2, #0]
	}
}
 8007356:	bf00      	nop
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000c64 	.word	0x20000c64
 8007364:	e0001000 	.word	0xe0001000
 8007368:	20000c5c 	.word	0x20000c5c
 800736c:	20000c68 	.word	0x20000c68

08007370 <DWT_Delay_until_cycle>:
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
}

__STATIC_INLINE void DWT_Delay_until_cycle(volatile uint32_t cycle)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
	while (DWT->CYCCNT < cycle);
 8007378:	bf00      	nop
 800737a:	4b06      	ldr	r3, [pc, #24]	; (8007394 <DWT_Delay_until_cycle+0x24>)
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	d3fa      	bcc.n	800737a <DWT_Delay_until_cycle+0xa>
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	e0001000 	.word	0xe0001000

08007398 <initialize>:
int    LOOP_BACK_rotor_control_target_steps;
uint8_t  LOOP_BACK_gpioState;
uint32_t LOOP_BACK_L6474_Board_Pwm1Period;


void initialize(){
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
	/* Initialize reset state indicating that reset has occurred */

	reset_state = 1;
 800739c:	4bad      	ldr	r3, [pc, #692]	; (8007654 <initialize+0x2bc>)
 800739e:	2201      	movs	r2, #1
 80073a0:	601a      	str	r2, [r3, #0]

	/* Initialize and enable cycle counter */
	ITM->LAR = 0xC5ACCE55; 	// at address 0xE0001FB0
 80073a2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80073a6:	4aac      	ldr	r2, [pc, #688]	; (8007658 <initialize+0x2c0>)
 80073a8:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // at address 0xE000EDFC, CoreDebug_DEMCR_TRCENA_Msk = 0x01000000
 80073ac:	4bab      	ldr	r3, [pc, #684]	; (800765c <initialize+0x2c4>)
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	4aaa      	ldr	r2, [pc, #680]	; (800765c <initialize+0x2c4>)
 80073b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073b6:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= 1; 		// at address 0xE0001000
 80073b8:	4ba9      	ldr	r3, [pc, #676]	; (8007660 <initialize+0x2c8>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4aa8      	ldr	r2, [pc, #672]	; (8007660 <initialize+0x2c8>)
 80073be:	f043 0301 	orr.w	r3, r3, #1
 80073c2:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0; 		// at address 0xE0001004
 80073c4:	4ba6      	ldr	r3, [pc, #664]	; (8007660 <initialize+0x2c8>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	605a      	str	r2, [r3, #4]

	/* initialize Integrator Mode time variables */
	apply_acc_start_time = 0;
 80073ca:	4ba6      	ldr	r3, [pc, #664]	; (8007664 <initialize+0x2cc>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
	clock_int_time = 0;
 80073d0:	4ba5      	ldr	r3, [pc, #660]	; (8007668 <initialize+0x2d0>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
	clock_int_tick = 0;
 80073d6:	4ba5      	ldr	r3, [pc, #660]	; (800766c <initialize+0x2d4>)
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]

	/* Initialize PWM period variables used by step interrupt */
	desired_pwm_period = 0;
 80073dc:	4ba4      	ldr	r3, [pc, #656]	; (8007670 <initialize+0x2d8>)
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]
	current_pwm_period = 0;
 80073e2:	4ba4      	ldr	r3, [pc, #656]	; (8007674 <initialize+0x2dc>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	601a      	str	r2, [r3, #0]
	target_velocity_prescaled = 0;
 80073e8:	4ba3      	ldr	r3, [pc, #652]	; (8007678 <initialize+0x2e0>)
 80073ea:	f04f 0200 	mov.w	r2, #0
 80073ee:	601a      	str	r2, [r3, #0]


	LOOP_BACK_rotor_control_target_steps=0;
 80073f0:	4ba2      	ldr	r3, [pc, #648]	; (800767c <initialize+0x2e4>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]
	LOOP_BACK_gpioState=0;
 80073f6:	4ba2      	ldr	r3, [pc, #648]	; (8007680 <initialize+0x2e8>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	701a      	strb	r2, [r3, #0]
	LOOP_BACK_L6474_Board_Pwm1Period=0;
 80073fc:	4ba1      	ldr	r3, [pc, #644]	; (8007684 <initialize+0x2ec>)
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]


	/* Initialize default start mode and reporting mode */
	mode_index = 1;
 8007402:	4ba1      	ldr	r3, [pc, #644]	; (8007688 <initialize+0x2f0>)
 8007404:	2201      	movs	r2, #1
 8007406:	601a      	str	r2, [r3, #0]
	report_mode = 1;
 8007408:	4ba0      	ldr	r3, [pc, #640]	; (800768c <initialize+0x2f4>)
 800740a:	2201      	movs	r2, #1
 800740c:	601a      	str	r2, [r3, #0]

	/*Initialize serial read variables */
	RxBuffer_ReadIdx = 0;
 800740e:	4ba0      	ldr	r3, [pc, #640]	; (8007690 <initialize+0x2f8>)
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
	RxBuffer_WriteIdx = 0;
 8007414:	4b9f      	ldr	r3, [pc, #636]	; (8007694 <initialize+0x2fc>)
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]
	readBytes = 0;
 800741a:	4b9f      	ldr	r3, [pc, #636]	; (8007698 <initialize+0x300>)
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]

	/*Initialize encoder variables */
	encoder_position = 0;
 8007420:	4b9e      	ldr	r3, [pc, #632]	; (800769c <initialize+0x304>)
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	601a      	str	r2, [r3, #0]
	encoder_position_down = 0;
 8007428:	4b9d      	ldr	r3, [pc, #628]	; (80076a0 <initialize+0x308>)
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
	encoder_position_curr = 0;
 800742e:	4b9d      	ldr	r3, [pc, #628]	; (80076a4 <initialize+0x30c>)
 8007430:	2200      	movs	r2, #0
 8007432:	601a      	str	r2, [r3, #0]
	encoder_position_prev = 0;
 8007434:	4b9c      	ldr	r3, [pc, #624]	; (80076a8 <initialize+0x310>)
 8007436:	2200      	movs	r2, #0
 8007438:	601a      	str	r2, [r3, #0]
	angle_scale = ENCODER_READ_ANGLE_SCALE;
 800743a:	4b9c      	ldr	r3, [pc, #624]	; (80076ac <initialize+0x314>)
 800743c:	4a9c      	ldr	r2, [pc, #624]	; (80076b0 <initialize+0x318>)
 800743e:	601a      	str	r2, [r3, #0]

	/*Initialize rotor control variables */
	rotor_control_target_steps = 0;
 8007440:	4b9c      	ldr	r3, [pc, #624]	; (80076b4 <initialize+0x31c>)
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	601a      	str	r2, [r3, #0]
	rotor_control_target_steps_curr = 0;
 8007448:	4b9b      	ldr	r3, [pc, #620]	; (80076b8 <initialize+0x320>)
 800744a:	f04f 0200 	mov.w	r2, #0
 800744e:	601a      	str	r2, [r3, #0]
	rotor_control_target_steps_prev = 0;
 8007450:	4b9a      	ldr	r3, [pc, #616]	; (80076bc <initialize+0x324>)
 8007452:	f04f 0200 	mov.w	r2, #0
 8007456:	601a      	str	r2, [r3, #0]

	/*Initialize rotor plant design transfer function computation variables */
	rotor_control_target_steps_filter_prev_2 = 0.0;
 8007458:	4b99      	ldr	r3, [pc, #612]	; (80076c0 <initialize+0x328>)
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	601a      	str	r2, [r3, #0]
	rotor_control_target_steps_filter_prev_prev_2 = 0.0;
 8007460:	4b98      	ldr	r3, [pc, #608]	; (80076c4 <initialize+0x32c>)
 8007462:	f04f 0200 	mov.w	r2, #0
 8007466:	601a      	str	r2, [r3, #0]
	rotor_control_target_steps_prev_prev = 0.0;
 8007468:	4b97      	ldr	r3, [pc, #604]	; (80076c8 <initialize+0x330>)
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	601a      	str	r2, [r3, #0]

	/* Initialize LQR integral control variables */
	current_error_rotor_integral = 0;
 8007470:	4b96      	ldr	r3, [pc, #600]	; (80076cc <initialize+0x334>)
 8007472:	f04f 0200 	mov.w	r2, #0
 8007476:	601a      	str	r2, [r3, #0]

	/*Initialize rotor tracking signal variables */
	enable_rotor_chirp = 0;
 8007478:	4b95      	ldr	r3, [pc, #596]	; (80076d0 <initialize+0x338>)
 800747a:	2200      	movs	r2, #0
 800747c:	601a      	str	r2, [r3, #0]
	rotor_chirp_start_freq = ROTOR_CHIRP_START_FREQ;
 800747e:	4b95      	ldr	r3, [pc, #596]	; (80076d4 <initialize+0x33c>)
 8007480:	4a95      	ldr	r2, [pc, #596]	; (80076d8 <initialize+0x340>)
 8007482:	601a      	str	r2, [r3, #0]
	rotor_chirp_end_freq = ROTOR_CHIRP_END_FREQ;
 8007484:	4b95      	ldr	r3, [pc, #596]	; (80076dc <initialize+0x344>)
 8007486:	4a96      	ldr	r2, [pc, #600]	; (80076e0 <initialize+0x348>)
 8007488:	601a      	str	r2, [r3, #0]
	rotor_chirp_period = ROTOR_CHIRP_PERIOD;
 800748a:	4b96      	ldr	r3, [pc, #600]	; (80076e4 <initialize+0x34c>)
 800748c:	4a96      	ldr	r2, [pc, #600]	; (80076e8 <initialize+0x350>)
 800748e:	601a      	str	r2, [r3, #0]
	enable_mod_sin_rotor_tracking = ENABLE_MOD_SIN_ROTOR_TRACKING;
 8007490:	4b96      	ldr	r3, [pc, #600]	; (80076ec <initialize+0x354>)
 8007492:	2201      	movs	r2, #1
 8007494:	601a      	str	r2, [r3, #0]
	enable_rotor_position_step_response_cycle = ENABLE_ROTOR_POSITION_STEP_RESPONSE_CYCLE;
 8007496:	4b96      	ldr	r3, [pc, #600]	; (80076f0 <initialize+0x358>)
 8007498:	2201      	movs	r2, #1
 800749a:	601a      	str	r2, [r3, #0]
	disable_mod_sin_rotor_tracking = 0;
 800749c:	4b95      	ldr	r3, [pc, #596]	; (80076f4 <initialize+0x35c>)
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]
	sine_drive_transition = 0;
 80074a2:	4b95      	ldr	r3, [pc, #596]	; (80076f8 <initialize+0x360>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]
	mod_sin_amplitude = MOD_SIN_AMPLITUDE;
 80074a8:	4b94      	ldr	r3, [pc, #592]	; (80076fc <initialize+0x364>)
 80074aa:	4a95      	ldr	r2, [pc, #596]	; (8007700 <initialize+0x368>)
 80074ac:	601a      	str	r2, [r3, #0]
	rotor_control_sin_amplitude = MOD_SIN_AMPLITUDE;
 80074ae:	4b95      	ldr	r3, [pc, #596]	; (8007704 <initialize+0x36c>)
 80074b0:	4a93      	ldr	r2, [pc, #588]	; (8007700 <initialize+0x368>)
 80074b2:	601a      	str	r2, [r3, #0]

	/*Initialize sensitivity function selection variables */
	enable_disturbance_rejection_step = 0;
 80074b4:	4b94      	ldr	r3, [pc, #592]	; (8007708 <initialize+0x370>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
	enable_noise_rejection_step = 0;
 80074ba:	4b94      	ldr	r3, [pc, #592]	; (800770c <initialize+0x374>)
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]
	enable_sensitivity_fnc_step = 0;
 80074c0:	4b93      	ldr	r3, [pc, #588]	; (8007710 <initialize+0x378>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
	enable_pendulum_position_impulse_response_cycle = 0;
 80074c6:	4b93      	ldr	r3, [pc, #588]	; (8007714 <initialize+0x37c>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]

	/*Initialize user adjustment variables */
	step_size = 0;
 80074cc:	4b92      	ldr	r3, [pc, #584]	; (8007718 <initialize+0x380>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]
	adjust_increment = 0.5;
 80074d2:	4b92      	ldr	r3, [pc, #584]	; (800771c <initialize+0x384>)
 80074d4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80074d8:	601a      	str	r2, [r3, #0]

	/*Initialize adaptive mode state variables */
	mode_transition_state = 0;
 80074da:	4b91      	ldr	r3, [pc, #580]	; (8007720 <initialize+0x388>)
 80074dc:	2200      	movs	r2, #0
 80074de:	601a      	str	r2, [r3, #0]
	transition_to_adaptive_mode = 0;
 80074e0:	4b90      	ldr	r3, [pc, #576]	; (8007724 <initialize+0x38c>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]

	/*Initialize user interactive mode */
	char_mode_select = 0;
 80074e6:	4b90      	ldr	r3, [pc, #576]	; (8007728 <initialize+0x390>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	601a      	str	r2, [r3, #0]

	/* STM32xx HAL library initialization */
	HAL_Init();
 80074ec:	f7fc fda0 	bl	8004030 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80074f0:	f7ff fe96 	bl	8007220 <SystemClock_Config>

	/* Default select_suspended_mode */
	select_suspended_mode = ENABLE_SUSPENDED_PENDULUM_CONTROL;
 80074f4:	4b8d      	ldr	r3, [pc, #564]	; (800772c <initialize+0x394>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]

	//----- Initialize Motor Control Library
	/* Set the L6474 library to use 1 device */
	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_L6474, 1);
 80074fa:	2101      	movs	r1, #1
 80074fc:	f641 104a 	movw	r0, #6474	; 0x194a
 8007500:	f7fc fcd2 	bl	8003ea8 <BSP_MotorControl_SetNbDevices>
	/* Uncomment the call to BSP_MotorControl_Init below to initialize the      */
	/* device with the structure gL6474InitParams declared in the the main.c file */
	/* and comment the subsequent call having the NULL pointer                   */
	//BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474, NULL);

	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474, &gL6474InitParams);
 8007504:	498a      	ldr	r1, [pc, #552]	; (8007730 <initialize+0x398>)
 8007506:	f641 104a 	movw	r0, #6474	; 0x194a
 800750a:	f7fc fabb 	bl	8003a84 <BSP_MotorControl_Init>

	/* Initialize Timer and UART */
	MX_TIM3_Init();
 800750e:	f000 ff8d 	bl	800842c <MX_TIM3_Init>

	/* Initialize Pendulum Angle Encoder offset */
	encoder_position_init = 0;
 8007512:	4b88      	ldr	r3, [pc, #544]	; (8007734 <initialize+0x39c>)
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8007518:	200a      	movs	r0, #10
 800751a:	f7fc fe03 	bl	8004124 <HAL_Delay>
	/* Initialize UART communication port */
	MX_USART2_UART_Init();
 800751e:	f000 ffcd 	bl	80084bc <MX_USART2_UART_Init>

	/* Motor Range Initialization */
	HAL_Delay(1);
 8007522:	2001      	movs	r0, #1
 8007524:	f7fc fdfe 	bl	8004124 <HAL_Delay>
	BSP_MotorControl_SetMaxSpeed(0, MAX_SPEED_UPPER_INIT);
 8007528:	f242 7110 	movw	r1, #10000	; 0x2710
 800752c:	2000      	movs	r0, #0
 800752e:	f7fc fbe1 	bl	8003cf4 <BSP_MotorControl_SetMaxSpeed>
	HAL_Delay(1);
 8007532:	2001      	movs	r0, #1
 8007534:	f7fc fdf6 	bl	8004124 <HAL_Delay>
	BSP_MotorControl_SetMinSpeed(0, MIN_SPEED_UPPER_INIT);
 8007538:	f242 7110 	movw	r1, #10000	; 0x2710
 800753c:	2000      	movs	r0, #0
 800753e:	f7fc fc01 	bl	8003d44 <BSP_MotorControl_SetMinSpeed>
	HAL_Delay(1);
 8007542:	2001      	movs	r0, #1
 8007544:	f7fc fdee 	bl	8004124 <HAL_Delay>
	BSP_MotorControl_SetMaxSpeed(0, MAX_SPEED_LOWER_INIT);
 8007548:	211e      	movs	r1, #30
 800754a:	2000      	movs	r0, #0
 800754c:	f7fc fbd2 	bl	8003cf4 <BSP_MotorControl_SetMaxSpeed>
	HAL_Delay(1);
 8007550:	2001      	movs	r0, #1
 8007552:	f7fc fde7 	bl	8004124 <HAL_Delay>
	BSP_MotorControl_SetMinSpeed(0, MIN_SPEED_LOWER_INIT);
 8007556:	211e      	movs	r1, #30
 8007558:	2000      	movs	r0, #0
 800755a:	f7fc fbf3 	bl	8003d44 <BSP_MotorControl_SetMinSpeed>
	HAL_Delay(1);
 800755e:	2001      	movs	r0, #1
 8007560:	f7fc fde0 	bl	8004124 <HAL_Delay>
	BSP_MotorControl_SetAcceleration(0, MAX_ACCEL_UPPER_INIT);
 8007564:	f242 7110 	movw	r1, #10000	; 0x2710
 8007568:	2000      	movs	r0, #0
 800756a:	f7fc fb73 	bl	8003c54 <BSP_MotorControl_SetAcceleration>
	HAL_Delay(1);
 800756e:	2001      	movs	r0, #1
 8007570:	f7fc fdd8 	bl	8004124 <HAL_Delay>
	BSP_MotorControl_SetDeceleration(0, MAX_DECEL_UPPER_INIT);
 8007574:	f242 7110 	movw	r1, #10000	; 0x2710
 8007578:	2000      	movs	r0, #0
 800757a:	f7fc fb93 	bl	8003ca4 <BSP_MotorControl_SetDeceleration>
	HAL_Delay(1);
 800757e:	2001      	movs	r0, #1
 8007580:	f7fc fdd0 	bl	8004124 <HAL_Delay>

	/* Default Starting Control Configuration */
	max_accel = MAX_ACCEL;
 8007584:	4b6c      	ldr	r3, [pc, #432]	; (8007738 <initialize+0x3a0>)
 8007586:	f241 7270 	movw	r2, #6000	; 0x1770
 800758a:	801a      	strh	r2, [r3, #0]
	max_decel = MAX_DECEL;
 800758c:	4b6b      	ldr	r3, [pc, #428]	; (800773c <initialize+0x3a4>)
 800758e:	f241 7270 	movw	r2, #6000	; 0x1770
 8007592:	801a      	strh	r2, [r3, #0]
	max_speed = MAX_SPEED_MODE_1;
 8007594:	4b6a      	ldr	r3, [pc, #424]	; (8007740 <initialize+0x3a8>)
 8007596:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800759a:	801a      	strh	r2, [r3, #0]
	min_speed = MIN_SPEED_MODE_1;
 800759c:	4b69      	ldr	r3, [pc, #420]	; (8007744 <initialize+0x3ac>)
 800759e:	f44f 7248 	mov.w	r2, #800	; 0x320
 80075a2:	801a      	strh	r2, [r3, #0]
	HAL_Delay(1);
 80075a4:	2001      	movs	r0, #1
 80075a6:	f7fc fdbd 	bl	8004124 <HAL_Delay>
	BSP_MotorControl_SetMaxSpeed(0, max_speed);
 80075aa:	4b65      	ldr	r3, [pc, #404]	; (8007740 <initialize+0x3a8>)
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	4619      	mov	r1, r3
 80075b0:	2000      	movs	r0, #0
 80075b2:	f7fc fb9f 	bl	8003cf4 <BSP_MotorControl_SetMaxSpeed>
	HAL_Delay(1);
 80075b6:	2001      	movs	r0, #1
 80075b8:	f7fc fdb4 	bl	8004124 <HAL_Delay>
	BSP_MotorControl_SetMinSpeed(0, min_speed);
 80075bc:	4b61      	ldr	r3, [pc, #388]	; (8007744 <initialize+0x3ac>)
 80075be:	881b      	ldrh	r3, [r3, #0]
 80075c0:	4619      	mov	r1, r3
 80075c2:	2000      	movs	r0, #0
 80075c4:	f7fc fbbe 	bl	8003d44 <BSP_MotorControl_SetMinSpeed>
	HAL_Delay(1);
 80075c8:	2001      	movs	r0, #1
 80075ca:	f7fc fdab 	bl	8004124 <HAL_Delay>
	BSP_MotorControl_SetAcceleration(0, max_accel);
 80075ce:	4b5a      	ldr	r3, [pc, #360]	; (8007738 <initialize+0x3a0>)
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	4619      	mov	r1, r3
 80075d4:	2000      	movs	r0, #0
 80075d6:	f7fc fb3d 	bl	8003c54 <BSP_MotorControl_SetAcceleration>
	HAL_Delay(1);
 80075da:	2001      	movs	r0, #1
 80075dc:	f7fc fda2 	bl	8004124 <HAL_Delay>
	BSP_MotorControl_SetDeceleration(0, max_decel);
 80075e0:	4b56      	ldr	r3, [pc, #344]	; (800773c <initialize+0x3a4>)
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	4619      	mov	r1, r3
 80075e6:	2000      	movs	r0, #0
 80075e8:	f7fc fb5c 	bl	8003ca4 <BSP_MotorControl_SetDeceleration>
	HAL_Delay(1);
 80075ec:	2001      	movs	r0, #1
 80075ee:	f7fc fd99 	bl	8004124 <HAL_Delay>

	/* Default torque current */
	torq_current_val = MAX_TORQUE_CONFIG;
 80075f2:	4b55      	ldr	r3, [pc, #340]	; (8007748 <initialize+0x3b0>)
 80075f4:	4a55      	ldr	r2, [pc, #340]	; (800774c <initialize+0x3b4>)
 80075f6:	601a      	str	r2, [r3, #0]
	L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 80075f8:	4b53      	ldr	r3, [pc, #332]	; (8007748 <initialize+0x3b0>)
 80075fa:	edd3 7a00 	vldr	s15, [r3]
 80075fe:	eeb0 0a67 	vmov.f32	s0, s15
 8007602:	2109      	movs	r1, #9
 8007604:	2000      	movs	r0, #0
 8007606:	f7fa fbdf 	bl	8001dc8 <L6474_SetAnalogValue>

	/* Default controller gains */
	proportional = PRIMARY_PROPORTIONAL_MODE_1;
 800760a:	4b51      	ldr	r3, [pc, #324]	; (8007750 <initialize+0x3b8>)
 800760c:	4a3c      	ldr	r2, [pc, #240]	; (8007700 <initialize+0x368>)
 800760e:	601a      	str	r2, [r3, #0]
	integral = PRIMARY_INTEGRAL_MODE_1;
 8007610:	4b50      	ldr	r3, [pc, #320]	; (8007754 <initialize+0x3bc>)
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	601a      	str	r2, [r3, #0]
	derivative = PRIMARY_DERIVATIVE_MODE_1;
 8007618:	4b4f      	ldr	r3, [pc, #316]	; (8007758 <initialize+0x3c0>)
 800761a:	4a50      	ldr	r2, [pc, #320]	; (800775c <initialize+0x3c4>)
 800761c:	601a      	str	r2, [r3, #0]
	rotor_p_gain = SECONDARY_PROPORTIONAL_MODE_1;
 800761e:	4b50      	ldr	r3, [pc, #320]	; (8007760 <initialize+0x3c8>)
 8007620:	4a2f      	ldr	r2, [pc, #188]	; (80076e0 <initialize+0x348>)
 8007622:	601a      	str	r2, [r3, #0]
	rotor_i_gain = SECONDARY_INTEGRAL_MODE_1;
 8007624:	4b4f      	ldr	r3, [pc, #316]	; (8007764 <initialize+0x3cc>)
 8007626:	f04f 0200 	mov.w	r2, #0
 800762a:	601a      	str	r2, [r3, #0]
	rotor_d_gain = SECONDARY_DERIVATIVE_MODE_1;
 800762c:	4b4e      	ldr	r3, [pc, #312]	; (8007768 <initialize+0x3d0>)
 800762e:	4a4f      	ldr	r2, [pc, #316]	; (800776c <initialize+0x3d4>)
 8007630:	601a      	str	r2, [r3, #0]

	/* Enable State Feedback mode and Integral Action Compensator by default and set
	 * precompensation factor to unity
	 */
	enable_state_feedback = 1;
 8007632:	4b4f      	ldr	r3, [pc, #316]	; (8007770 <initialize+0x3d8>)
 8007634:	2201      	movs	r2, #1
 8007636:	601a      	str	r2, [r3, #0]
	integral_compensator_gain = 0;
 8007638:	4b4e      	ldr	r3, [pc, #312]	; (8007774 <initialize+0x3dc>)
 800763a:	f04f 0200 	mov.w	r2, #0
 800763e:	601a      	str	r2, [r3, #0]
	feedforward_gain = 1;
 8007640:	4b4d      	ldr	r3, [pc, #308]	; (8007778 <initialize+0x3e0>)
 8007642:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007646:	601a      	str	r2, [r3, #0]

	/* Disable adaptive_mode by default */
	enable_adaptive_mode = 0;
 8007648:	4b4c      	ldr	r3, [pc, #304]	; (800777c <initialize+0x3e4>)
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]

	/* DMA Buffer declarations */
	/* Start DMA just once because it's configured in "circular" mode */
	HAL_UART_Receive_DMA(&huart2, RxBuffer, UART_RX_BUFFER_SIZE);
 800764e:	22c8      	movs	r2, #200	; 0xc8
 8007650:	494b      	ldr	r1, [pc, #300]	; (8007780 <initialize+0x3e8>)
 8007652:	e097      	b.n	8007784 <initialize+0x3ec>
 8007654:	2000804c 	.word	0x2000804c
 8007658:	c5acce55 	.word	0xc5acce55
 800765c:	e000edf0 	.word	0xe000edf0
 8007660:	e0001000 	.word	0xe0001000
 8007664:	20000c58 	.word	0x20000c58
 8007668:	20000c5c 	.word	0x20000c5c
 800766c:	20000c60 	.word	0x20000c60
 8007670:	20000c64 	.word	0x20000c64
 8007674:	20000c68 	.word	0x20000c68
 8007678:	20000c6c 	.word	0x20000c6c
 800767c:	20008064 	.word	0x20008064
 8007680:	20008068 	.word	0x20008068
 8007684:	2000806c 	.word	0x2000806c
 8007688:	20004be0 	.word	0x20004be0
 800768c:	20004be4 	.word	0x20004be4
 8007690:	20008058 	.word	0x20008058
 8007694:	2000805c 	.word	0x2000805c
 8007698:	20008060 	.word	0x20008060
 800769c:	20001070 	.word	0x20001070
 80076a0:	2000108c 	.word	0x2000108c
 80076a4:	20001090 	.word	0x20001090
 80076a8:	20001094 	.word	0x20001094
 80076ac:	20008044 	.word	0x20008044
 80076b0:	40d55556 	.word	0x40d55556
 80076b4:	20000f4c 	.word	0x20000f4c
 80076b8:	20000f50 	.word	0x20000f50
 80076bc:	20000f54 	.word	0x20000f54
 80076c0:	20001028 	.word	0x20001028
 80076c4:	20001030 	.word	0x20001030
 80076c8:	2000102c 	.word	0x2000102c
 80076cc:	20000fc8 	.word	0x20000fc8
 80076d0:	20004a00 	.word	0x20004a00
 80076d4:	20004a10 	.word	0x20004a10
 80076d8:	3c23d70a 	.word	0x3c23d70a
 80076dc:	20004a14 	.word	0x20004a14
 80076e0:	41700000 	.word	0x41700000
 80076e4:	20004a18 	.word	0x20004a18
 80076e8:	469c4000 	.word	0x469c4000
 80076ec:	20004a2c 	.word	0x20004a2c
 80076f0:	20004a30 	.word	0x20004a30
 80076f4:	20004a34 	.word	0x20004a34
 80076f8:	20004a38 	.word	0x20004a38
 80076fc:	20004a3c 	.word	0x20004a3c
 8007700:	43960000 	.word	0x43960000
 8007704:	20004a40 	.word	0x20004a40
 8007708:	20004b9c 	.word	0x20004b9c
 800770c:	20004ba0 	.word	0x20004ba0
 8007710:	20004ba8 	.word	0x20004ba8
 8007714:	20004a54 	.word	0x20004a54
 8007718:	20004bd8 	.word	0x20004bd8
 800771c:	20004bdc 	.word	0x20004bdc
 8007720:	20004c48 	.word	0x20004c48
 8007724:	20004c4c 	.word	0x20004c4c
 8007728:	20007d88 	.word	0x20007d88
 800772c:	200049dc 	.word	0x200049dc
 8007730:	20000170 	.word	0x20000170
 8007734:	20001078 	.word	0x20001078
 8007738:	20008054 	.word	0x20008054
 800773c:	20008056 	.word	0x20008056
 8007740:	20008052 	.word	0x20008052
 8007744:	20008050 	.word	0x20008050
 8007748:	200049fc 	.word	0x200049fc
 800774c:	44480000 	.word	0x44480000
 8007750:	20000fa4 	.word	0x20000fa4
 8007754:	20000fac 	.word	0x20000fac
 8007758:	20000fb4 	.word	0x20000fb4
 800775c:	41f00000 	.word	0x41f00000
 8007760:	20000fa8 	.word	0x20000fa8
 8007764:	20000fb0 	.word	0x20000fb0
 8007768:	20000fb8 	.word	0x20000fb8
 800776c:	40f00000 	.word	0x40f00000
 8007770:	20000fbc 	.word	0x20000fbc
 8007774:	20000fc0 	.word	0x20000fc0
 8007778:	20000fc4 	.word	0x20000fc4
 800777c:	200049b8 	.word	0x200049b8
 8007780:	20000b80 	.word	0x20000b80
 8007784:	4820      	ldr	r0, [pc, #128]	; (8007808 <initialize+0x470>)
 8007786:	f7ff f987 	bl	8006a98 <HAL_UART_Receive_DMA>

	/* Motor Interface and Encoder initialization */
	/* Attach the function MyFlagInterruptHandler (defined below) to the flag interrupt */
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 800778a:	4820      	ldr	r0, [pc, #128]	; (800780c <initialize+0x474>)
 800778c:	f7fc f93e 	bl	8003a0c <BSP_MotorControl_AttachFlagInterrupt>

	/* Attach the function Error_Handler (defined below) to the error Handler*/
	BSP_MotorControl_AttachErrorHandler(Error_Handler);
 8007790:	481f      	ldr	r0, [pc, #124]	; (8007810 <initialize+0x478>)
 8007792:	f7fc f91d 	bl	80039d0 <BSP_MotorControl_AttachErrorHandler>

	/* Encoder initialization */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8007796:	2118      	movs	r1, #24
 8007798:	481e      	ldr	r0, [pc, #120]	; (8007814 <initialize+0x47c>)
 800779a:	f7fe fbcf 	bl	8005f3c <HAL_TIM_Encoder_Start>
//	}
//
//	/* Configure controller filter and sample time parameters */
//	*deriv_lp_corner_f = DERIVATIVE_LOW_PASS_CORNER_FREQUENCY;
//	*deriv_lp_corner_f_rotor = DERIVATIVE_LOW_PASS_CORNER_FREQUENCY_ROTOR;
	t_sample_cpu_cycles = (uint32_t) round(T_SAMPLE_DEFAULT * RCC_HCLK_FREQ);
 800779e:	4b1e      	ldr	r3, [pc, #120]	; (8007818 <initialize+0x480>)
 80077a0:	4a1e      	ldr	r2, [pc, #120]	; (800781c <initialize+0x484>)
 80077a2:	601a      	str	r2, [r3, #0]
	Tsample = (float) t_sample_cpu_cycles / RCC_HCLK_FREQ;
 80077a4:	4b1c      	ldr	r3, [pc, #112]	; (8007818 <initialize+0x480>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	ee07 3a90 	vmov	s15, r3
 80077ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80077b0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8007820 <initialize+0x488>
 80077b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077b8:	4b1a      	ldr	r3, [pc, #104]	; (8007824 <initialize+0x48c>)
 80077ba:	edc3 7a00 	vstr	s15, [r3]
	*sample_period = Tsample;
 80077be:	4b1a      	ldr	r3, [pc, #104]	; (8007828 <initialize+0x490>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a18      	ldr	r2, [pc, #96]	; (8007824 <initialize+0x48c>)
 80077c4:	6812      	ldr	r2, [r2, #0]
 80077c6:	601a      	str	r2, [r3, #0]
	Tsample_rotor = Tsample;
 80077c8:	4b16      	ldr	r3, [pc, #88]	; (8007824 <initialize+0x48c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a17      	ldr	r2, [pc, #92]	; (800782c <initialize+0x494>)
 80077ce:	6013      	str	r3, [r2, #0]
	*sample_period_rotor = Tsample_rotor;
 80077d0:	4b17      	ldr	r3, [pc, #92]	; (8007830 <initialize+0x498>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a15      	ldr	r2, [pc, #84]	; (800782c <initialize+0x494>)
 80077d6:	6812      	ldr	r2, [r2, #0]
 80077d8:	601a      	str	r2, [r3, #0]
//	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	/*
	 * Request user input for mode configuration
	 */

	enable_adaptive_mode = ENABLE_ADAPTIVE_MODE;
 80077da:	4b16      	ldr	r3, [pc, #88]	; (8007834 <initialize+0x49c>)
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]
	adaptive_threshold_low = ADAPTIVE_THRESHOLD_LOW;
 80077e0:	4b15      	ldr	r3, [pc, #84]	; (8007838 <initialize+0x4a0>)
 80077e2:	4a16      	ldr	r2, [pc, #88]	; (800783c <initialize+0x4a4>)
 80077e4:	601a      	str	r2, [r3, #0]
	adaptive_threshold_high = ADAPTIVE_THRESHOLD_HIGH;
 80077e6:	4b16      	ldr	r3, [pc, #88]	; (8007840 <initialize+0x4a8>)
 80077e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80077ec:	601a      	str	r2, [r3, #0]
	adaptive_state = ADAPTIVE_STATE;
 80077ee:	4b15      	ldr	r3, [pc, #84]	; (8007844 <initialize+0x4ac>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]
	adaptive_state_change = 0;
 80077f4:	4b14      	ldr	r3, [pc, #80]	; (8007848 <initialize+0x4b0>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]
	adaptive_dwell_period = ADAPTIVE_DWELL_PERIOD;
 80077fa:	4b14      	ldr	r3, [pc, #80]	; (800784c <initialize+0x4b4>)
 80077fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007800:	601a      	str	r2, [r3, #0]
}
 8007802:	bf00      	nop
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20000a78 	.word	0x20000a78
 800780c:	080085a1 	.word	0x080085a1
 8007810:	080085b9 	.word	0x080085b9
 8007814:	20000f10 	.word	0x20000f10
 8007818:	20000a24 	.word	0x20000a24
 800781c:	00029040 	.word	0x00029040
 8007820:	4ca037a0 	.word	0x4ca037a0
 8007824:	20008038 	.word	0x20008038
 8007828:	20000f88 	.word	0x20000f88
 800782c:	2000803c 	.word	0x2000803c
 8007830:	20000f8c 	.word	0x20000f8c
 8007834:	200049b8 	.word	0x200049b8
 8007838:	20004998 	.word	0x20004998
 800783c:	41f00000 	.word	0x41f00000
 8007840:	2000499c 	.word	0x2000499c
 8007844:	200049bc 	.word	0x200049bc
 8007848:	200049c0 	.word	0x200049c0
 800784c:	200049b4 	.word	0x200049b4

08007850 <initialize_main_loop>:
void initialize_main_loop(){
 8007850:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007854:	af00      	add	r7, sp, #0
//			sprintf(msg, "\n\rEnter Mode Selection Now: \n\r");
//			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
//		}

	/* Flush read buffer  */
	for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 8007856:	4b8a      	ldr	r3, [pc, #552]	; (8007a80 <initialize_main_loop+0x230>)
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	e00a      	b.n	8007874 <initialize_main_loop+0x24>
		Msg.Data[k] = 0;
 800785e:	4b88      	ldr	r3, [pc, #544]	; (8007a80 <initialize_main_loop+0x230>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a88      	ldr	r2, [pc, #544]	; (8007a84 <initialize_main_loop+0x234>)
 8007864:	4413      	add	r3, r2
 8007866:	2200      	movs	r2, #0
 8007868:	711a      	strb	r2, [r3, #4]
	for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 800786a:	4b85      	ldr	r3, [pc, #532]	; (8007a80 <initialize_main_loop+0x230>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3301      	adds	r3, #1
 8007870:	4a83      	ldr	r2, [pc, #524]	; (8007a80 <initialize_main_loop+0x230>)
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	4b82      	ldr	r3, [pc, #520]	; (8007a80 <initialize_main_loop+0x230>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b63      	cmp	r3, #99	; 0x63
 800787a:	ddf0      	ble.n	800785e <initialize_main_loop+0xe>
	}
	/* Start timer for configuration command read loop */
	tick_read_cycle_start = HAL_GetTick();
 800787c:	f7fc fc46 	bl	800410c <HAL_GetTick>
 8007880:	4603      	mov	r3, r0
 8007882:	4a81      	ldr	r2, [pc, #516]	; (8007a88 <initialize_main_loop+0x238>)
 8007884:	6013      	str	r3, [r2, #0]
	/* Configuration command read loop */
	user_configuration();
 8007886:	f000 fff7 	bl	8008878 <user_configuration>

	/* Set Motor Speed Profile and torque current */
	BSP_MotorControl_SoftStop(0);
 800788a:	2000      	movs	r0, #0
 800788c:	f7fc fa82 	bl	8003d94 <BSP_MotorControl_SoftStop>
	BSP_MotorControl_WaitWhileActive(0);
 8007890:	2000      	movs	r0, #0
 8007892:	f7fc fac3 	bl	8003e1c <BSP_MotorControl_WaitWhileActive>
	L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 8007896:	4b7d      	ldr	r3, [pc, #500]	; (8007a8c <initialize_main_loop+0x23c>)
 8007898:	edd3 7a00 	vldr	s15, [r3]
 800789c:	eeb0 0a67 	vmov.f32	s0, s15
 80078a0:	2109      	movs	r1, #9
 80078a2:	2000      	movs	r0, #0
 80078a4:	f7fa fa90 	bl	8001dc8 <L6474_SetAnalogValue>
	BSP_MotorControl_SetMaxSpeed(0, max_speed);
 80078a8:	4b79      	ldr	r3, [pc, #484]	; (8007a90 <initialize_main_loop+0x240>)
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	4619      	mov	r1, r3
 80078ae:	2000      	movs	r0, #0
 80078b0:	f7fc fa20 	bl	8003cf4 <BSP_MotorControl_SetMaxSpeed>
	BSP_MotorControl_SetMinSpeed(0, min_speed);
 80078b4:	4b77      	ldr	r3, [pc, #476]	; (8007a94 <initialize_main_loop+0x244>)
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	4619      	mov	r1, r3
 80078ba:	2000      	movs	r0, #0
 80078bc:	f7fc fa42 	bl	8003d44 <BSP_MotorControl_SetMinSpeed>
	BSP_MotorControl_SetAcceleration(0, MAX_ACCEL);
 80078c0:	f241 7170 	movw	r1, #6000	; 0x1770
 80078c4:	2000      	movs	r0, #0
 80078c6:	f7fc f9c5 	bl	8003c54 <BSP_MotorControl_SetAcceleration>
	BSP_MotorControl_SetDeceleration(0, MAX_DECEL);
 80078ca:	f241 7170 	movw	r1, #6000	; 0x1770
 80078ce:	2000      	movs	r0, #0
 80078d0:	f7fc f9e8 	bl	8003ca4 <BSP_MotorControl_SetDeceleration>
	 *
	 * *************************************************************************************************
	 */

	/* Setting enable_control_action enables control loop */
	enable_control_action = ENABLE_CONTROL_ACTION;
 80078d4:	4b70      	ldr	r3, [pc, #448]	; (8007a98 <initialize_main_loop+0x248>)
 80078d6:	2201      	movs	r2, #1
 80078d8:	601a      	str	r2, [r3, #0]
//		}

	//######## Jawad ************** Modification ########################################
	//SendGAMInput( COMMAND_INDEX_SEND_POSITION );

	ret = rotor_position_read(&rotor_position_steps);
 80078da:	4870      	ldr	r0, [pc, #448]	; (8007a9c <initialize_main_loop+0x24c>)
 80078dc:	f000 ff26 	bl	800872c <rotor_position_read>
 80078e0:	4603      	mov	r3, r0
 80078e2:	4a6f      	ldr	r2, [pc, #444]	; (8007aa0 <initialize_main_loop+0x250>)
 80078e4:	6013      	str	r3, [r2, #0]
	 * A small stimulus is applied to ensure Pendulum will fall to Suspended orientation
	 * in the event that it may be finely balanced in the vertical position
	 *
	 */

	BSP_MotorControl_GoTo(0, 3);
 80078e6:	2103      	movs	r1, #3
 80078e8:	2000      	movs	r0, #0
 80078ea:	f7fc f94d 	bl	8003b88 <BSP_MotorControl_GoTo>
	BSP_MotorControl_WaitWhileActive(0);
 80078ee:	2000      	movs	r0, #0
 80078f0:	f7fc fa94 	bl	8003e1c <BSP_MotorControl_WaitWhileActive>
	HAL_Delay(150);
 80078f4:	2096      	movs	r0, #150	; 0x96
 80078f6:	f7fc fc15 	bl	8004124 <HAL_Delay>
	BSP_MotorControl_GoTo(0, -3);
 80078fa:	f06f 0102 	mvn.w	r1, #2
 80078fe:	2000      	movs	r0, #0
 8007900:	f7fc f942 	bl	8003b88 <BSP_MotorControl_GoTo>
	BSP_MotorControl_WaitWhileActive(0);
 8007904:	2000      	movs	r0, #0
 8007906:	f7fc fa89 	bl	8003e1c <BSP_MotorControl_WaitWhileActive>
	HAL_Delay(150);
 800790a:	2096      	movs	r0, #150	; 0x96
 800790c:	f7fc fc0a 	bl	8004124 <HAL_Delay>
	BSP_MotorControl_GoTo(0, 3);
 8007910:	2103      	movs	r1, #3
 8007912:	2000      	movs	r0, #0
 8007914:	f7fc f938 	bl	8003b88 <BSP_MotorControl_GoTo>
	BSP_MotorControl_WaitWhileActive(0);
 8007918:	2000      	movs	r0, #0
 800791a:	f7fc fa7f 	bl	8003e1c <BSP_MotorControl_WaitWhileActive>
	HAL_Delay(150);
 800791e:	2096      	movs	r0, #150	; 0x96
 8007920:	f7fc fc00 	bl	8004124 <HAL_Delay>
	BSP_MotorControl_GoTo(0, 0);
 8007924:	2100      	movs	r1, #0
 8007926:	2000      	movs	r0, #0
 8007928:	f7fc f92e 	bl	8003b88 <BSP_MotorControl_GoTo>
	BSP_MotorControl_WaitWhileActive(0);
 800792c:	2000      	movs	r0, #0
 800792e:	f7fc fa75 	bl	8003e1c <BSP_MotorControl_WaitWhileActive>

	sprintf(msg, "Test for Pendulum at Rest - Waiting for Pendulum to Stabilize\r\n");
 8007932:	495c      	ldr	r1, [pc, #368]	; (8007aa4 <initialize_main_loop+0x254>)
 8007934:	485c      	ldr	r0, [pc, #368]	; (8007aa8 <initialize_main_loop+0x258>)
 8007936:	f001 fbbf 	bl	80090b8 <sprintf>
	SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 800793a:	200a      	movs	r0, #10
 800793c:	f000 ffda 	bl	80088f4 <SendGAMInput>
	//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

	encoder_position_init = 0;
 8007940:	4b5a      	ldr	r3, [pc, #360]	; (8007aac <initialize_main_loop+0x25c>)
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]
	ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007946:	4b59      	ldr	r3, [pc, #356]	; (8007aac <initialize_main_loop+0x25c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a59      	ldr	r2, [pc, #356]	; (8007ab0 <initialize_main_loop+0x260>)
 800794c:	4619      	mov	r1, r3
 800794e:	4859      	ldr	r0, [pc, #356]	; (8007ab4 <initialize_main_loop+0x264>)
 8007950:	f000 fe3e 	bl	80085d0 <encoder_position_read>
 8007954:	4603      	mov	r3, r0
 8007956:	4a52      	ldr	r2, [pc, #328]	; (8007aa0 <initialize_main_loop+0x250>)
 8007958:	6013      	str	r3, [r2, #0]
	encoder_position_prev = encoder_position_steps;
 800795a:	4b56      	ldr	r3, [pc, #344]	; (8007ab4 <initialize_main_loop+0x264>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a56      	ldr	r2, [pc, #344]	; (8007ab8 <initialize_main_loop+0x268>)
 8007960:	6013      	str	r3, [r2, #0]
	HAL_Delay(INITIAL_PENDULUM_MOTION_TEST_DELAY);
 8007962:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007966:	f7fc fbdd 	bl	8004124 <HAL_Delay>
	ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 800796a:	4b50      	ldr	r3, [pc, #320]	; (8007aac <initialize_main_loop+0x25c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a50      	ldr	r2, [pc, #320]	; (8007ab0 <initialize_main_loop+0x260>)
 8007970:	4619      	mov	r1, r3
 8007972:	4850      	ldr	r0, [pc, #320]	; (8007ab4 <initialize_main_loop+0x264>)
 8007974:	f000 fe2c 	bl	80085d0 <encoder_position_read>
 8007978:	4603      	mov	r3, r0
 800797a:	4a49      	ldr	r2, [pc, #292]	; (8007aa0 <initialize_main_loop+0x250>)
 800797c:	6013      	str	r3, [r2, #0]
	encoder_position_curr = encoder_position_steps;
 800797e:	4b4d      	ldr	r3, [pc, #308]	; (8007ab4 <initialize_main_loop+0x264>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a4e      	ldr	r2, [pc, #312]	; (8007abc <initialize_main_loop+0x26c>)
 8007984:	6013      	str	r3, [r2, #0]
	while (encoder_position_curr != encoder_position_prev) {
 8007986:	e06f      	b.n	8007a68 <initialize_main_loop+0x218>
		ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007988:	4b48      	ldr	r3, [pc, #288]	; (8007aac <initialize_main_loop+0x25c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a48      	ldr	r2, [pc, #288]	; (8007ab0 <initialize_main_loop+0x260>)
 800798e:	4619      	mov	r1, r3
 8007990:	4848      	ldr	r0, [pc, #288]	; (8007ab4 <initialize_main_loop+0x264>)
 8007992:	f000 fe1d 	bl	80085d0 <encoder_position_read>
 8007996:	4603      	mov	r3, r0
 8007998:	4a41      	ldr	r2, [pc, #260]	; (8007aa0 <initialize_main_loop+0x250>)
 800799a:	6013      	str	r3, [r2, #0]
		encoder_position_prev = encoder_position_steps;
 800799c:	4b45      	ldr	r3, [pc, #276]	; (8007ab4 <initialize_main_loop+0x264>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a45      	ldr	r2, [pc, #276]	; (8007ab8 <initialize_main_loop+0x268>)
 80079a2:	6013      	str	r3, [r2, #0]
		HAL_Delay(INITIAL_PENDULUM_MOTION_TEST_DELAY);
 80079a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80079a8:	f7fc fbbc 	bl	8004124 <HAL_Delay>
		ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 80079ac:	4b3f      	ldr	r3, [pc, #252]	; (8007aac <initialize_main_loop+0x25c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a3f      	ldr	r2, [pc, #252]	; (8007ab0 <initialize_main_loop+0x260>)
 80079b2:	4619      	mov	r1, r3
 80079b4:	483f      	ldr	r0, [pc, #252]	; (8007ab4 <initialize_main_loop+0x264>)
 80079b6:	f000 fe0b 	bl	80085d0 <encoder_position_read>
 80079ba:	4603      	mov	r3, r0
 80079bc:	4a38      	ldr	r2, [pc, #224]	; (8007aa0 <initialize_main_loop+0x250>)
 80079be:	6013      	str	r3, [r2, #0]
		encoder_position_curr = encoder_position_steps;
 80079c0:	4b3c      	ldr	r3, [pc, #240]	; (8007ab4 <initialize_main_loop+0x264>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a3d      	ldr	r2, [pc, #244]	; (8007abc <initialize_main_loop+0x26c>)
 80079c6:	6013      	str	r3, [r2, #0]

		/*
		 * Ensure stability reached with final motion test
		 */

		if (encoder_position_prev == encoder_position_curr) {
 80079c8:	4b3b      	ldr	r3, [pc, #236]	; (8007ab8 <initialize_main_loop+0x268>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	4b3b      	ldr	r3, [pc, #236]	; (8007abc <initialize_main_loop+0x26c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d129      	bne.n	8007a28 <initialize_main_loop+0x1d8>
			HAL_Delay(INITIAL_PENDULUM_MOTION_TEST_DELAY);
 80079d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80079d8:	f7fc fba4 	bl	8004124 <HAL_Delay>
			ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 80079dc:	4b33      	ldr	r3, [pc, #204]	; (8007aac <initialize_main_loop+0x25c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a33      	ldr	r2, [pc, #204]	; (8007ab0 <initialize_main_loop+0x260>)
 80079e2:	4619      	mov	r1, r3
 80079e4:	4833      	ldr	r0, [pc, #204]	; (8007ab4 <initialize_main_loop+0x264>)
 80079e6:	f000 fdf3 	bl	80085d0 <encoder_position_read>
 80079ea:	4603      	mov	r3, r0
 80079ec:	4a2c      	ldr	r2, [pc, #176]	; (8007aa0 <initialize_main_loop+0x250>)
 80079ee:	6013      	str	r3, [r2, #0]
			encoder_position_prev = encoder_position_steps;
 80079f0:	4b30      	ldr	r3, [pc, #192]	; (8007ab4 <initialize_main_loop+0x264>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a30      	ldr	r2, [pc, #192]	; (8007ab8 <initialize_main_loop+0x268>)
 80079f6:	6013      	str	r3, [r2, #0]
			HAL_Delay(INITIAL_PENDULUM_MOTION_TEST_DELAY);
 80079f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80079fc:	f7fc fb92 	bl	8004124 <HAL_Delay>
			ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007a00:	4b2a      	ldr	r3, [pc, #168]	; (8007aac <initialize_main_loop+0x25c>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a2a      	ldr	r2, [pc, #168]	; (8007ab0 <initialize_main_loop+0x260>)
 8007a06:	4619      	mov	r1, r3
 8007a08:	482a      	ldr	r0, [pc, #168]	; (8007ab4 <initialize_main_loop+0x264>)
 8007a0a:	f000 fde1 	bl	80085d0 <encoder_position_read>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	4a23      	ldr	r2, [pc, #140]	; (8007aa0 <initialize_main_loop+0x250>)
 8007a12:	6013      	str	r3, [r2, #0]
			encoder_position_curr = encoder_position_steps;
 8007a14:	4b27      	ldr	r3, [pc, #156]	; (8007ab4 <initialize_main_loop+0x264>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a28      	ldr	r2, [pc, #160]	; (8007abc <initialize_main_loop+0x26c>)
 8007a1a:	6013      	str	r3, [r2, #0]
			if (encoder_position_prev == encoder_position_curr) {
 8007a1c:	4b26      	ldr	r3, [pc, #152]	; (8007ab8 <initialize_main_loop+0x268>)
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	4b26      	ldr	r3, [pc, #152]	; (8007abc <initialize_main_loop+0x26c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d04d      	beq.n	8007ac4 <initialize_main_loop+0x274>
				break;
			}
		}
		/* Alert user of undesired motion */
		sprintf(msg, "Pendulum Motion Detected with angle %0.2f - Waiting for Pendulum to Stabilize\r\n",
				(float) ((encoder_position_curr - encoder_position_prev)
 8007a28:	4b24      	ldr	r3, [pc, #144]	; (8007abc <initialize_main_loop+0x26c>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	4b22      	ldr	r3, [pc, #136]	; (8007ab8 <initialize_main_loop+0x268>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	1ad3      	subs	r3, r2, r3
						/ ENCODER_READ_ANGLE_SCALE));
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7f8 fd7e 	bl	8000534 <__aeabi_i2d>
 8007a38:	a30f      	add	r3, pc, #60	; (adr r3, 8007a78 <initialize_main_loop+0x228>)
 8007a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3e:	f7f8 ff0d 	bl	800085c <__aeabi_ddiv>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
				(float) ((encoder_position_curr - encoder_position_prev)
 8007a46:	4610      	mov	r0, r2
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f7f9 f8b5 	bl	8000bb8 <__aeabi_d2f>
 8007a4e:	4603      	mov	r3, r0
		sprintf(msg, "Pendulum Motion Detected with angle %0.2f - Waiting for Pendulum to Stabilize\r\n",
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7f8 fd81 	bl	8000558 <__aeabi_f2d>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4919      	ldr	r1, [pc, #100]	; (8007ac0 <initialize_main_loop+0x270>)
 8007a5c:	4812      	ldr	r0, [pc, #72]	; (8007aa8 <initialize_main_loop+0x258>)
 8007a5e:	f001 fb2b 	bl	80090b8 <sprintf>
		SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8007a62:	200a      	movs	r0, #10
 8007a64:	f000 ff46 	bl	80088f4 <SendGAMInput>
	while (encoder_position_curr != encoder_position_prev) {
 8007a68:	4b14      	ldr	r3, [pc, #80]	; (8007abc <initialize_main_loop+0x26c>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	4b12      	ldr	r3, [pc, #72]	; (8007ab8 <initialize_main_loop+0x268>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d189      	bne.n	8007988 <initialize_main_loop+0x138>
 8007a74:	e027      	b.n	8007ac6 <initialize_main_loop+0x276>
 8007a76:	bf00      	nop
 8007a78:	c1094a2c 	.word	0xc1094a2c
 8007a7c:	401aaaaa 	.word	0x401aaaaa
 8007a80:	20000f6c 	.word	0x20000f6c
 8007a84:	20000b18 	.word	0x20000b18
 8007a88:	20008014 	.word	0x20008014
 8007a8c:	200049fc 	.word	0x200049fc
 8007a90:	20008052 	.word	0x20008052
 8007a94:	20008050 	.word	0x20008050
 8007a98:	20000a28 	.word	0x20000a28
 8007a9c:	20000fd0 	.word	0x20000fd0
 8007aa0:	20000f74 	.word	0x20000f74
 8007aa4:	0800dae8 	.word	0x0800dae8
 8007aa8:	20000d74 	.word	0x20000d74
 8007aac:	20001078 	.word	0x20001078
 8007ab0:	20000f10 	.word	0x20000f10
 8007ab4:	20001074 	.word	0x20001074
 8007ab8:	20001094 	.word	0x20001094
 8007abc:	20001090 	.word	0x20001090
 8007ac0:	0800db28 	.word	0x0800db28
				break;
 8007ac4:	bf00      	nop
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	}

	sprintf(msg, "Pendulum Now at Rest and Measuring Pendulum Down Angle\r\n");
 8007ac6:	4979      	ldr	r1, [pc, #484]	; (8007cac <initialize_main_loop+0x45c>)
 8007ac8:	4879      	ldr	r0, [pc, #484]	; (8007cb0 <initialize_main_loop+0x460>)
 8007aca:	f001 faf5 	bl	80090b8 <sprintf>
	SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8007ace:	200a      	movs	r0, #10
 8007ad0:	f000 ff10 	bl	80088f4 <SendGAMInput>

	/*
	 * Initialize Pendulum Angle Read offset by setting encoder_position_init
	 */

	HAL_Delay(100);
 8007ad4:	2064      	movs	r0, #100	; 0x64
 8007ad6:	f7fc fb25 	bl	8004124 <HAL_Delay>
	ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007ada:	4b76      	ldr	r3, [pc, #472]	; (8007cb4 <initialize_main_loop+0x464>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a76      	ldr	r2, [pc, #472]	; (8007cb8 <initialize_main_loop+0x468>)
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4876      	ldr	r0, [pc, #472]	; (8007cbc <initialize_main_loop+0x46c>)
 8007ae4:	f000 fd74 	bl	80085d0 <encoder_position_read>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	4a75      	ldr	r2, [pc, #468]	; (8007cc0 <initialize_main_loop+0x470>)
 8007aec:	6013      	str	r3, [r2, #0]
	encoder_position_init = encoder_position_steps;
 8007aee:	4b73      	ldr	r3, [pc, #460]	; (8007cbc <initialize_main_loop+0x46c>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a70      	ldr	r2, [pc, #448]	; (8007cb4 <initialize_main_loop+0x464>)
 8007af4:	6013      	str	r3, [r2, #0]

	if (ret == -1) {
 8007af6:	4b72      	ldr	r3, [pc, #456]	; (8007cc0 <initialize_main_loop+0x470>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afe:	d106      	bne.n	8007b0e <initialize_main_loop+0x2be>
		sprintf(msg, "Encoder Position Under Range Error\r\n");
 8007b00:	4970      	ldr	r1, [pc, #448]	; (8007cc4 <initialize_main_loop+0x474>)
 8007b02:	486b      	ldr	r0, [pc, #428]	; (8007cb0 <initialize_main_loop+0x460>)
 8007b04:	f001 fad8 	bl	80090b8 <sprintf>
		SendGAMInput( COMMAND_INDEX_SEND_STATUS_ERROR );
 8007b08:	200b      	movs	r0, #11
 8007b0a:	f000 fef3 	bl	80088f4 <SendGAMInput>
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	}
	if (ret == 1) {
 8007b0e:	4b6c      	ldr	r3, [pc, #432]	; (8007cc0 <initialize_main_loop+0x470>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d106      	bne.n	8007b24 <initialize_main_loop+0x2d4>
		sprintf(msg, "Encoder Position Over Range Error\r\n");
 8007b16:	496c      	ldr	r1, [pc, #432]	; (8007cc8 <initialize_main_loop+0x478>)
 8007b18:	4865      	ldr	r0, [pc, #404]	; (8007cb0 <initialize_main_loop+0x460>)
 8007b1a:	f001 facd 	bl	80090b8 <sprintf>
		SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8007b1e:	200a      	movs	r0, #10
 8007b20:	f000 fee8 	bl	80088f4 <SendGAMInput>
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
	}

	ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007b24:	4b63      	ldr	r3, [pc, #396]	; (8007cb4 <initialize_main_loop+0x464>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a63      	ldr	r2, [pc, #396]	; (8007cb8 <initialize_main_loop+0x468>)
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4863      	ldr	r0, [pc, #396]	; (8007cbc <initialize_main_loop+0x46c>)
 8007b2e:	f000 fd4f 	bl	80085d0 <encoder_position_read>
 8007b32:	4603      	mov	r3, r0
 8007b34:	4a62      	ldr	r2, [pc, #392]	; (8007cc0 <initialize_main_loop+0x470>)
 8007b36:	6013      	str	r3, [r2, #0]
	encoder_position_down = encoder_position_steps;
 8007b38:	4b60      	ldr	r3, [pc, #384]	; (8007cbc <initialize_main_loop+0x46c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a63      	ldr	r2, [pc, #396]	; (8007ccc <initialize_main_loop+0x47c>)
 8007b3e:	6013      	str	r3, [r2, #0]
	//sprintf(msg, "Pendulum Initial Angle %i\r\n", encoder_position_steps);
	//SendGAMInput( COMMAND_INDEX_SEND_POSITION );
	//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);


	if (enable_swing_up == 0){
 8007b40:	4b63      	ldr	r3, [pc, #396]	; (8007cd0 <initialize_main_loop+0x480>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d130      	bne.n	8007baa <initialize_main_loop+0x35a>
		/*
		 * Alert user with rotor motion prompt to adjust pendulum upright by
		 */
		BSP_MotorControl_GoTo(0, 30);
 8007b48:	211e      	movs	r1, #30
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	f7fc f81c 	bl	8003b88 <BSP_MotorControl_GoTo>
		BSP_MotorControl_WaitWhileActive(0);
 8007b50:	2000      	movs	r0, #0
 8007b52:	f7fc f963 	bl	8003e1c <BSP_MotorControl_WaitWhileActive>
		HAL_Delay(150);
 8007b56:	2096      	movs	r0, #150	; 0x96
 8007b58:	f7fc fae4 	bl	8004124 <HAL_Delay>
		BSP_MotorControl_GoTo(0, -30);
 8007b5c:	f06f 011d 	mvn.w	r1, #29
 8007b60:	2000      	movs	r0, #0
 8007b62:	f7fc f811 	bl	8003b88 <BSP_MotorControl_GoTo>
		BSP_MotorControl_WaitWhileActive(0);
 8007b66:	2000      	movs	r0, #0
 8007b68:	f7fc f958 	bl	8003e1c <BSP_MotorControl_WaitWhileActive>
		HAL_Delay(150);
 8007b6c:	2096      	movs	r0, #150	; 0x96
 8007b6e:	f7fc fad9 	bl	8004124 <HAL_Delay>
		BSP_MotorControl_GoTo(0, 30);
 8007b72:	211e      	movs	r1, #30
 8007b74:	2000      	movs	r0, #0
 8007b76:	f7fc f807 	bl	8003b88 <BSP_MotorControl_GoTo>
		BSP_MotorControl_WaitWhileActive(0);
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	f7fc f94e 	bl	8003e1c <BSP_MotorControl_WaitWhileActive>
		HAL_Delay(150);
 8007b80:	2096      	movs	r0, #150	; 0x96
 8007b82:	f7fc facf 	bl	8004124 <HAL_Delay>
		BSP_MotorControl_GoTo(0, 0);
 8007b86:	2100      	movs	r1, #0
 8007b88:	2000      	movs	r0, #0
 8007b8a:	f7fb fffd 	bl	8003b88 <BSP_MotorControl_GoTo>
		BSP_MotorControl_WaitWhileActive(0);
 8007b8e:	2000      	movs	r0, #0
 8007b90:	f7fc f944 	bl	8003e1c <BSP_MotorControl_WaitWhileActive>

		/* Request user action to bring pendulum upright */
		if(select_suspended_mode == 0){
 8007b94:	4b4f      	ldr	r3, [pc, #316]	; (8007cd4 <initialize_main_loop+0x484>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d106      	bne.n	8007baa <initialize_main_loop+0x35a>
			sprintf(msg, "Adjust Pendulum Upright By Turning CCW Control Will Start When Vertical\r\n");
 8007b9c:	494e      	ldr	r1, [pc, #312]	; (8007cd8 <initialize_main_loop+0x488>)
 8007b9e:	4844      	ldr	r0, [pc, #272]	; (8007cb0 <initialize_main_loop+0x460>)
 8007ba0:	f001 fa8a 	bl	80090b8 <sprintf>
			SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8007ba4:	200a      	movs	r0, #10
 8007ba6:	f000 fea5 	bl	80088f4 <SendGAMInput>

	/*
	 * System start option with manual lifting of Pendulum to vertical by user
	 */

	if (enable_swing_up == 0){
 8007baa:	4b49      	ldr	r3, [pc, #292]	; (8007cd0 <initialize_main_loop+0x480>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f040 80b3 	bne.w	8007d1a <initialize_main_loop+0x4ca>

		tick_wait_start = HAL_GetTick();
 8007bb4:	f7fc faaa 	bl	800410c <HAL_GetTick>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	4a48      	ldr	r2, [pc, #288]	; (8007cdc <initialize_main_loop+0x48c>)
 8007bbc:	6013      	str	r3, [r2, #0]
		if (select_suspended_mode == 0) {
 8007bbe:	4b45      	ldr	r3, [pc, #276]	; (8007cd4 <initialize_main_loop+0x484>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f040 80a9 	bne.w	8007d1a <initialize_main_loop+0x4ca>
			while (1){
				ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8007bc8:	4b3a      	ldr	r3, [pc, #232]	; (8007cb4 <initialize_main_loop+0x464>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a3a      	ldr	r2, [pc, #232]	; (8007cb8 <initialize_main_loop+0x468>)
 8007bce:	4619      	mov	r1, r3
 8007bd0:	483a      	ldr	r0, [pc, #232]	; (8007cbc <initialize_main_loop+0x46c>)
 8007bd2:	f000 fcfd 	bl	80085d0 <encoder_position_read>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	4a39      	ldr	r2, [pc, #228]	; (8007cc0 <initialize_main_loop+0x470>)
 8007bda:	6013      	str	r3, [r2, #0]
				if (fabs(encoder_position_steps - encoder_position_down - (int) (180 * angle_scale)) < START_ANGLE * angle_scale){
 8007bdc:	4b37      	ldr	r3, [pc, #220]	; (8007cbc <initialize_main_loop+0x46c>)
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	4b3a      	ldr	r3, [pc, #232]	; (8007ccc <initialize_main_loop+0x47c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	4a3e      	ldr	r2, [pc, #248]	; (8007ce0 <initialize_main_loop+0x490>)
 8007be8:	edd2 7a00 	vldr	s15, [r2]
 8007bec:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8007ce4 <initialize_main_loop+0x494>
 8007bf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bf8:	ee17 2a90 	vmov	r2, s15
 8007bfc:	1a9b      	subs	r3, r3, r2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7f8 fc98 	bl	8000534 <__aeabi_i2d>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	4614      	mov	r4, r2
 8007c0a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8007c0e:	4b34      	ldr	r3, [pc, #208]	; (8007ce0 <initialize_main_loop+0x490>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7f8 fca0 	bl	8000558 <__aeabi_f2d>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	4629      	mov	r1, r5
 8007c20:	f7f8 ff64 	bl	8000aec <__aeabi_dcmplt>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <initialize_main_loop+0x3e2>
					HAL_Delay(START_ANGLE_DELAY);
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	f7fc fa7a 	bl	8004124 <HAL_Delay>
					break;
 8007c30:	e073      	b.n	8007d1a <initialize_main_loop+0x4ca>
				}
				if (fabs(encoder_position_steps - encoder_position_down + (int)(180 * angle_scale)) < START_ANGLE * angle_scale){
 8007c32:	4b22      	ldr	r3, [pc, #136]	; (8007cbc <initialize_main_loop+0x46c>)
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	4b25      	ldr	r3, [pc, #148]	; (8007ccc <initialize_main_loop+0x47c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	4a28      	ldr	r2, [pc, #160]	; (8007ce0 <initialize_main_loop+0x490>)
 8007c3e:	edd2 7a00 	vldr	s15, [r2]
 8007c42:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007ce4 <initialize_main_loop+0x494>
 8007c46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c4e:	ee17 2a90 	vmov	r2, s15
 8007c52:	4413      	add	r3, r2
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7f8 fc6d 	bl	8000534 <__aeabi_i2d>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4690      	mov	r8, r2
 8007c60:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007c64:	4b1e      	ldr	r3, [pc, #120]	; (8007ce0 <initialize_main_loop+0x490>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7f8 fc75 	bl	8000558 <__aeabi_f2d>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	4640      	mov	r0, r8
 8007c74:	4649      	mov	r1, r9
 8007c76:	f7f8 ff39 	bl	8000aec <__aeabi_dcmplt>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d033      	beq.n	8007ce8 <initialize_main_loop+0x498>
					encoder_position_down = encoder_position_down - 2*(int)(180 * angle_scale);
 8007c80:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <initialize_main_loop+0x47c>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	4b16      	ldr	r3, [pc, #88]	; (8007ce0 <initialize_main_loop+0x490>)
 8007c86:	edd3 7a00 	vldr	s15, [r3]
 8007c8a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8007ce4 <initialize_main_loop+0x494>
 8007c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c96:	ee17 3a90 	vmov	r3, s15
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	4a0b      	ldr	r2, [pc, #44]	; (8007ccc <initialize_main_loop+0x47c>)
 8007ca0:	6013      	str	r3, [r2, #0]
					HAL_Delay(START_ANGLE_DELAY);
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	f7fc fa3e 	bl	8004124 <HAL_Delay>
					break;
 8007ca8:	e037      	b.n	8007d1a <initialize_main_loop+0x4ca>
 8007caa:	bf00      	nop
 8007cac:	0800db78 	.word	0x0800db78
 8007cb0:	20000d74 	.word	0x20000d74
 8007cb4:	20001078 	.word	0x20001078
 8007cb8:	20000f10 	.word	0x20000f10
 8007cbc:	20001074 	.word	0x20001074
 8007cc0:	20000f74 	.word	0x20000f74
 8007cc4:	0800dbb4 	.word	0x0800dbb4
 8007cc8:	0800dbdc 	.word	0x0800dbdc
 8007ccc:	2000108c 	.word	0x2000108c
 8007cd0:	2000491c 	.word	0x2000491c
 8007cd4:	200049dc 	.word	0x200049dc
 8007cd8:	0800dc00 	.word	0x0800dc00
 8007cdc:	20008018 	.word	0x20008018
 8007ce0:	20008044 	.word	0x20008044
 8007ce4:	43340000 	.word	0x43340000
				}
				tick_wait = HAL_GetTick();
 8007ce8:	f7fc fa10 	bl	800410c <HAL_GetTick>
 8007cec:	4603      	mov	r3, r0
 8007cee:	4a6d      	ldr	r2, [pc, #436]	; (8007ea4 <initialize_main_loop+0x654>)
 8007cf0:	6013      	str	r3, [r2, #0]

				if ( (tick_wait - tick_wait_start) > PENDULUM_ORIENTATION_START_DELAY){
 8007cf2:	4b6c      	ldr	r3, [pc, #432]	; (8007ea4 <initialize_main_loop+0x654>)
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	4b6c      	ldr	r3, [pc, #432]	; (8007ea8 <initialize_main_loop+0x658>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d00:	4293      	cmp	r3, r2
 8007d02:	f67f af61 	bls.w	8007bc8 <initialize_main_loop+0x378>
					sprintf(msg, "Pendulum Upright Action Not Detected - Restarting ...\r\n");
 8007d06:	4969      	ldr	r1, [pc, #420]	; (8007eac <initialize_main_loop+0x65c>)
 8007d08:	4869      	ldr	r0, [pc, #420]	; (8007eb0 <initialize_main_loop+0x660>)
 8007d0a:	f001 f9d5 	bl	80090b8 <sprintf>
					SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8007d0e:	200a      	movs	r0, #10
 8007d10:	f000 fdf0 	bl	80088f4 <SendGAMInput>
					//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
					enable_control_action = 0;
 8007d14:	4b67      	ldr	r3, [pc, #412]	; (8007eb4 <initialize_main_loop+0x664>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	601a      	str	r2, [r3, #0]
	/*
	 * For case of Suspended Mode Operation, no initial condition check is required
	 * for pendulum down angle.
	 */

	if(select_suspended_mode == 1){
 8007d1a:	4b67      	ldr	r3, [pc, #412]	; (8007eb8 <initialize_main_loop+0x668>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d107      	bne.n	8007d32 <initialize_main_loop+0x4e2>
		sprintf(msg, "Suspended Mode Control Will Start in %i Seconds\r\n", (int) (CONTROL_START_DELAY / 1000));
 8007d22:	2201      	movs	r2, #1
 8007d24:	4965      	ldr	r1, [pc, #404]	; (8007ebc <initialize_main_loop+0x66c>)
 8007d26:	4862      	ldr	r0, [pc, #392]	; (8007eb0 <initialize_main_loop+0x660>)
 8007d28:	f001 f9c6 	bl	80090b8 <sprintf>
		SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8007d2c:	200a      	movs	r0, #10
 8007d2e:	f000 fde1 	bl	80088f4 <SendGAMInput>
//		pid_filter_control_execute(&PID_Rotor, current_error_rotor_steps,
//				sample_period_rotor, Deriv_Filt_Rotor);

	/* Initialize control system variables */

	cycle_count = CYCLE_LIMIT;
 8007d32:	4b63      	ldr	r3, [pc, #396]	; (8007ec0 <initialize_main_loop+0x670>)
 8007d34:	4a63      	ldr	r2, [pc, #396]	; (8007ec4 <initialize_main_loop+0x674>)
 8007d36:	601a      	str	r2, [r3, #0]
	i = 0;
 8007d38:	4b63      	ldr	r3, [pc, #396]	; (8007ec8 <initialize_main_loop+0x678>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
	rotor_position_steps = 0;
 8007d3e:	4b63      	ldr	r3, [pc, #396]	; (8007ecc <initialize_main_loop+0x67c>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]
	rotor_position_steps_prev = 0;
 8007d44:	4b62      	ldr	r3, [pc, #392]	; (8007ed0 <initialize_main_loop+0x680>)
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]
	rotor_position_filter_steps = 0;
 8007d4c:	4b61      	ldr	r3, [pc, #388]	; (8007ed4 <initialize_main_loop+0x684>)
 8007d4e:	f04f 0200 	mov.w	r2, #0
 8007d52:	601a      	str	r2, [r3, #0]
	rotor_position_filter_steps_prev = 0;
 8007d54:	4b60      	ldr	r3, [pc, #384]	; (8007ed8 <initialize_main_loop+0x688>)
 8007d56:	f04f 0200 	mov.w	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]
	rotor_position_command_steps = 0;
 8007d5c:	4b5f      	ldr	r3, [pc, #380]	; (8007edc <initialize_main_loop+0x68c>)
 8007d5e:	f04f 0200 	mov.w	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]
	rotor_position_diff = 0;
 8007d64:	4b5e      	ldr	r3, [pc, #376]	; (8007ee0 <initialize_main_loop+0x690>)
 8007d66:	f04f 0200 	mov.w	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]
	rotor_position_diff_prev = 0;
 8007d6c:	4b5d      	ldr	r3, [pc, #372]	; (8007ee4 <initialize_main_loop+0x694>)
 8007d6e:	f04f 0200 	mov.w	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]
	rotor_position_diff_filter = 0;
 8007d74:	4b5c      	ldr	r3, [pc, #368]	; (8007ee8 <initialize_main_loop+0x698>)
 8007d76:	f04f 0200 	mov.w	r2, #0
 8007d7a:	601a      	str	r2, [r3, #0]
	rotor_position_diff_filter_prev = 0;
 8007d7c:	4b5b      	ldr	r3, [pc, #364]	; (8007eec <initialize_main_loop+0x69c>)
 8007d7e:	f04f 0200 	mov.w	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
	rotor_position_step_polarity = 1;
 8007d84:	4b5a      	ldr	r3, [pc, #360]	; (8007ef0 <initialize_main_loop+0x6a0>)
 8007d86:	2201      	movs	r2, #1
 8007d88:	601a      	str	r2, [r3, #0]
	encoder_angle_slope_corr_steps = 0;
 8007d8a:	4b5a      	ldr	r3, [pc, #360]	; (8007ef4 <initialize_main_loop+0x6a4>)
 8007d8c:	f04f 0200 	mov.w	r2, #0
 8007d90:	601a      	str	r2, [r3, #0]
	rotor_sine_drive = 0;
 8007d92:	4b59      	ldr	r3, [pc, #356]	; (8007ef8 <initialize_main_loop+0x6a8>)
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]
	sine_drive_transition = 0;
 8007d9a:	4b58      	ldr	r3, [pc, #352]	; (8007efc <initialize_main_loop+0x6ac>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]
	rotor_mod_control = 1.0;
 8007da0:	4b57      	ldr	r3, [pc, #348]	; (8007f00 <initialize_main_loop+0x6b0>)
 8007da2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007da6:	601a      	str	r2, [r3, #0]
	enable_adaptive_mode = 0;
 8007da8:	4b56      	ldr	r3, [pc, #344]	; (8007f04 <initialize_main_loop+0x6b4>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]
	tick_cycle_start = HAL_GetTick();
 8007dae:	f7fc f9ad 	bl	800410c <HAL_GetTick>
 8007db2:	4603      	mov	r3, r0
 8007db4:	4a54      	ldr	r2, [pc, #336]	; (8007f08 <initialize_main_loop+0x6b8>)
 8007db6:	6013      	str	r3, [r2, #0]
	tick_cycle_previous = tick_cycle_start;
 8007db8:	4b53      	ldr	r3, [pc, #332]	; (8007f08 <initialize_main_loop+0x6b8>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a53      	ldr	r2, [pc, #332]	; (8007f0c <initialize_main_loop+0x6bc>)
 8007dbe:	6013      	str	r3, [r2, #0]
	tick_cycle_current =  tick_cycle_start;
 8007dc0:	4b51      	ldr	r3, [pc, #324]	; (8007f08 <initialize_main_loop+0x6b8>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a52      	ldr	r2, [pc, #328]	; (8007f10 <initialize_main_loop+0x6c0>)
 8007dc6:	6013      	str	r3, [r2, #0]
	enable_cycle_delay_warning = ENABLE_CYCLE_DELAY_WARNING;
 8007dc8:	4b52      	ldr	r3, [pc, #328]	; (8007f14 <initialize_main_loop+0x6c4>)
 8007dca:	2201      	movs	r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
	chirp_cycle = 0;
 8007dce:	4b52      	ldr	r3, [pc, #328]	; (8007f18 <initialize_main_loop+0x6c8>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	601a      	str	r2, [r3, #0]
	chirp_dwell_cycle = 0;
 8007dd4:	4b51      	ldr	r3, [pc, #324]	; (8007f1c <initialize_main_loop+0x6cc>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
	pendulum_position_command_steps = 0;
 8007dda:	4b51      	ldr	r3, [pc, #324]	; (8007f20 <initialize_main_loop+0x6d0>)
 8007ddc:	f04f 0200 	mov.w	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
	impulse_start_index = 0;
 8007de2:	4b50      	ldr	r3, [pc, #320]	; (8007f24 <initialize_main_loop+0x6d4>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]
	mode_transition_state = 0;
 8007de8:	4b4f      	ldr	r3, [pc, #316]	; (8007f28 <initialize_main_loop+0x6d8>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]
	transition_to_adaptive_mode = 0;
 8007dee:	4b4f      	ldr	r3, [pc, #316]	; (8007f2c <initialize_main_loop+0x6dc>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	601a      	str	r2, [r3, #0]
	error_sum_prev = 0;
 8007df4:	4b4e      	ldr	r3, [pc, #312]	; (8007f30 <initialize_main_loop+0x6e0>)
 8007df6:	f04f 0200 	mov.w	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]
	error_sum_filter_prev = 0;
 8007dfc:	4b4d      	ldr	r3, [pc, #308]	; (8007f34 <initialize_main_loop+0x6e4>)
 8007dfe:	f04f 0200 	mov.w	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]
	adaptive_state = 4;
 8007e04:	4b4c      	ldr	r3, [pc, #304]	; (8007f38 <initialize_main_loop+0x6e8>)
 8007e06:	2204      	movs	r2, #4
 8007e08:	601a      	str	r2, [r3, #0]
	rotor_control_target_steps_prev = 0;
 8007e0a:	4b4c      	ldr	r3, [pc, #304]	; (8007f3c <initialize_main_loop+0x6ec>)
 8007e0c:	f04f 0200 	mov.w	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]
	rotor_position_command_steps_prev = 0;
 8007e12:	4b4b      	ldr	r3, [pc, #300]	; (8007f40 <initialize_main_loop+0x6f0>)
 8007e14:	f04f 0200 	mov.w	r2, #0
 8007e18:	601a      	str	r2, [r3, #0]
	rotor_position_command_steps_pf_prev = 0;
 8007e1a:	4b4a      	ldr	r3, [pc, #296]	; (8007f44 <initialize_main_loop+0x6f4>)
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	601a      	str	r2, [r3, #0]
	enable_high_speed_sampling = ENABLE_HIGH_SPEED_SAMPLING_MODE;
 8007e22:	4b49      	ldr	r3, [pc, #292]	; (8007f48 <initialize_main_loop+0x6f8>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	601a      	str	r2, [r3, #0]
	slope_prev = 0;
 8007e28:	4b48      	ldr	r3, [pc, #288]	; (8007f4c <initialize_main_loop+0x6fc>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]
	rotor_track_comb_command = 0;
 8007e2e:	4b48      	ldr	r3, [pc, #288]	; (8007f50 <initialize_main_loop+0x700>)
 8007e30:	f04f 0200 	mov.w	r2, #0
 8007e34:	601a      	str	r2, [r3, #0]
	noise_rej_signal_prev = 0;
 8007e36:	4b47      	ldr	r3, [pc, #284]	; (8007f54 <initialize_main_loop+0x704>)
 8007e38:	f04f 0200 	mov.w	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]
	noise_rej_signal_filter_prev = 0;
 8007e3e:	4b46      	ldr	r3, [pc, #280]	; (8007f58 <initialize_main_loop+0x708>)
 8007e40:	f04f 0200 	mov.w	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]
	full_sysid_start_index = -1;
 8007e46:	4b45      	ldr	r3, [pc, #276]	; (8007f5c <initialize_main_loop+0x70c>)
 8007e48:	f04f 32ff 	mov.w	r2, #4294967295
 8007e4c:	601a      	str	r2, [r3, #0]
	current_cpu_cycle = 0;
 8007e4e:	4b44      	ldr	r3, [pc, #272]	; (8007f60 <initialize_main_loop+0x710>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]
	speed_scale = DATA_REPORT_SPEED_SCALE;
 8007e54:	4b43      	ldr	r3, [pc, #268]	; (8007f64 <initialize_main_loop+0x714>)
 8007e56:	2214      	movs	r2, #20
 8007e58:	601a      	str	r2, [r3, #0]
	speed_governor = 0;
 8007e5a:	4b43      	ldr	r3, [pc, #268]	; (8007f68 <initialize_main_loop+0x718>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	601a      	str	r2, [r3, #0]
	encoder_position_offset = 0;
 8007e60:	4b42      	ldr	r3, [pc, #264]	; (8007f6c <initialize_main_loop+0x71c>)
 8007e62:	f04f 0200 	mov.w	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]
	encoder_position_offset_zero = 0;
 8007e68:	4b41      	ldr	r3, [pc, #260]	; (8007f70 <initialize_main_loop+0x720>)
 8007e6a:	f04f 0200 	mov.w	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]

	for (m = 0; m < ANGLE_CAL_OFFSET_STEP_COUNT + 1; m++){
 8007e70:	4b40      	ldr	r3, [pc, #256]	; (8007f74 <initialize_main_loop+0x724>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	e00a      	b.n	8007e8e <initialize_main_loop+0x63e>
		offset_angle[m] = 0;
 8007e78:	4b3e      	ldr	r3, [pc, #248]	; (8007f74 <initialize_main_loop+0x724>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a3e      	ldr	r2, [pc, #248]	; (8007f78 <initialize_main_loop+0x728>)
 8007e7e:	2100      	movs	r1, #0
 8007e80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (m = 0; m < ANGLE_CAL_OFFSET_STEP_COUNT + 1; m++){
 8007e84:	4b3b      	ldr	r3, [pc, #236]	; (8007f74 <initialize_main_loop+0x724>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	4a3a      	ldr	r2, [pc, #232]	; (8007f74 <initialize_main_loop+0x724>)
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	4b39      	ldr	r3, [pc, #228]	; (8007f74 <initialize_main_loop+0x724>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f240 7209 	movw	r2, #1801	; 0x709
 8007e96:	4293      	cmp	r3, r2
 8007e98:	ddee      	ble.n	8007e78 <initialize_main_loop+0x628>
	}

	/* Clear read buffer */
	for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 8007e9a:	4b38      	ldr	r3, [pc, #224]	; (8007f7c <initialize_main_loop+0x72c>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	e079      	b.n	8007f96 <initialize_main_loop+0x746>
 8007ea2:	bf00      	nop
 8007ea4:	2000801c 	.word	0x2000801c
 8007ea8:	20008018 	.word	0x20008018
 8007eac:	0800dc4c 	.word	0x0800dc4c
 8007eb0:	20000d74 	.word	0x20000d74
 8007eb4:	20000a28 	.word	0x20000a28
 8007eb8:	200049dc 	.word	0x200049dc
 8007ebc:	0800dc84 	.word	0x0800dc84
 8007ec0:	20000f60 	.word	0x20000f60
 8007ec4:	000186a0 	.word	0x000186a0
 8007ec8:	20000f64 	.word	0x20000f64
 8007ecc:	20000fd0 	.word	0x20000fd0
 8007ed0:	20000fe4 	.word	0x20000fe4
 8007ed4:	20000fe8 	.word	0x20000fe8
 8007ed8:	20000fec 	.word	0x20000fec
 8007edc:	20000fd4 	.word	0x20000fd4
 8007ee0:	20000ff0 	.word	0x20000ff0
 8007ee4:	20000ff4 	.word	0x20000ff4
 8007ee8:	20000ff8 	.word	0x20000ff8
 8007eec:	20000ffc 	.word	0x20000ffc
 8007ef0:	200049c8 	.word	0x200049c8
 8007ef4:	20004990 	.word	0x20004990
 8007ef8:	20004a44 	.word	0x20004a44
 8007efc:	20004a38 	.word	0x20004a38
 8007f00:	20004a4c 	.word	0x20004a4c
 8007f04:	200049b8 	.word	0x200049b8
 8007f08:	2000800c 	.word	0x2000800c
 8007f0c:	20008008 	.word	0x20008008
 8007f10:	20008004 	.word	0x20008004
 8007f14:	20000f98 	.word	0x20000f98
 8007f18:	20004a04 	.word	0x20004a04
 8007f1c:	20004a08 	.word	0x20004a08
 8007f20:	20004a28 	.word	0x20004a28
 8007f24:	200049cc 	.word	0x200049cc
 8007f28:	20004c48 	.word	0x20004c48
 8007f2c:	20004c4c 	.word	0x20004c4c
 8007f30:	200049a0 	.word	0x200049a0
 8007f34:	200049a8 	.word	0x200049a8
 8007f38:	200049bc 	.word	0x200049bc
 8007f3c:	20000f54 	.word	0x20000f54
 8007f40:	200049c4 	.word	0x200049c4
 8007f44:	20000fdc 	.word	0x20000fdc
 8007f48:	20008048 	.word	0x20008048
 8007f4c:	2000498c 	.word	0x2000498c
 8007f50:	20004b94 	.word	0x20004b94
 8007f54:	20004bb8 	.word	0x20004bb8
 8007f58:	20004bbc 	.word	0x20004bbc
 8007f5c:	20004b88 	.word	0x20004b88
 8007f60:	20008020 	.word	0x20008020
 8007f64:	20004be8 	.word	0x20004be8
 8007f68:	20004bec 	.word	0x20004bec
 8007f6c:	20001098 	.word	0x20001098
 8007f70:	2000109c 	.word	0x2000109c
 8007f74:	20000f70 	.word	0x20000f70
 8007f78:	200010bc 	.word	0x200010bc
 8007f7c:	20000f6c 	.word	0x20000f6c
		Msg.Data[k] = 0;
 8007f80:	4b5f      	ldr	r3, [pc, #380]	; (8008100 <initialize_main_loop+0x8b0>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a5f      	ldr	r2, [pc, #380]	; (8008104 <initialize_main_loop+0x8b4>)
 8007f86:	4413      	add	r3, r2
 8007f88:	2200      	movs	r2, #0
 8007f8a:	711a      	strb	r2, [r3, #4]
	for (k = 0; k < SERIAL_MSG_MAXLEN; k++) {
 8007f8c:	4b5c      	ldr	r3, [pc, #368]	; (8008100 <initialize_main_loop+0x8b0>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3301      	adds	r3, #1
 8007f92:	4a5b      	ldr	r2, [pc, #364]	; (8008100 <initialize_main_loop+0x8b0>)
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	4b5a      	ldr	r3, [pc, #360]	; (8008100 <initialize_main_loop+0x8b0>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b63      	cmp	r3, #99	; 0x63
 8007f9c:	ddf0      	ble.n	8007f80 <initialize_main_loop+0x730>
	}
	/* Initialize UART receive system */
	__HAL_DMA_RESET_HANDLE_STATE(&hdma_usart2_rx);
 8007f9e:	4b5a      	ldr	r3, [pc, #360]	; (8008108 <initialize_main_loop+0x8b8>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
//		int init_enable_sensitivity_fnc_step = enable_sensitivity_fnc_step;
//		int init_enable_noise_rejection_step = enable_noise_rejection_step;
//		int init_enable_rotor_plant_design = enable_rotor_plant_design;
//		int init_enable_rotor_plant_gain_design = enable_rotor_plant_gain_design;

	if(select_suspended_mode == 1){
 8007fa6:	4b59      	ldr	r3, [pc, #356]	; (800810c <initialize_main_loop+0x8bc>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d103      	bne.n	8007fb6 <initialize_main_loop+0x766>
		load_disturbance_sensitivity_scale = 1.0;
 8007fae:	4b58      	ldr	r3, [pc, #352]	; (8008110 <initialize_main_loop+0x8c0>)
 8007fb0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007fb4:	601a      	str	r2, [r3, #0]
	}
	if(select_suspended_mode == 0){
 8007fb6:	4b55      	ldr	r3, [pc, #340]	; (800810c <initialize_main_loop+0x8bc>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d102      	bne.n	8007fc4 <initialize_main_loop+0x774>
		load_disturbance_sensitivity_scale = LOAD_DISTURBANCE_SENSITIVITY_SCALE;
 8007fbe:	4b54      	ldr	r3, [pc, #336]	; (8008110 <initialize_main_loop+0x8c0>)
 8007fc0:	4a54      	ldr	r2, [pc, #336]	; (8008114 <initialize_main_loop+0x8c4>)
 8007fc2:	601a      	str	r2, [r3, #0]
	 * https://github.com/OevreFlataeker/steval_edukit_swingup
	 *
	 */


	if (enable_swing_up == 1 && select_suspended_mode == 0){
 8007fc4:	4b54      	ldr	r3, [pc, #336]	; (8008118 <initialize_main_loop+0x8c8>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d13f      	bne.n	800804c <initialize_main_loop+0x7fc>
 8007fcc:	4b4f      	ldr	r3, [pc, #316]	; (800810c <initialize_main_loop+0x8bc>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d13b      	bne.n	800804c <initialize_main_loop+0x7fc>
//			enable_noise_rejection_step = 0;
//			enable_rotor_plant_design = 0;
//			enable_rotor_plant_gain_design = 0;

		/* Set Torque Current value to 800 mA (normal operation will revert to 400 mA */
		torq_current_val = MAX_TORQUE_SWING_UP;
 8007fd4:	4b51      	ldr	r3, [pc, #324]	; (800811c <initialize_main_loop+0x8cc>)
 8007fd6:	4a52      	ldr	r2, [pc, #328]	; (8008120 <initialize_main_loop+0x8d0>)
 8007fd8:	601a      	str	r2, [r3, #0]
		L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 8007fda:	4b50      	ldr	r3, [pc, #320]	; (800811c <initialize_main_loop+0x8cc>)
 8007fdc:	edd3 7a00 	vldr	s15, [r3]
 8007fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8007fe4:	2109      	movs	r1, #9
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	f7f9 feee 	bl	8001dc8 <L6474_SetAnalogValue>

		sprintf(msg, "Pendulum Swing Up Starting\r\n");
 8007fec:	494d      	ldr	r1, [pc, #308]	; (8008124 <initialize_main_loop+0x8d4>)
 8007fee:	484e      	ldr	r0, [pc, #312]	; (8008128 <initialize_main_loop+0x8d8>)
 8007ff0:	f001 f862 	bl	80090b8 <sprintf>
		SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 8007ff4:	200a      	movs	r0, #10
 8007ff6:	f000 fc7d 	bl	80088f4 <SendGAMInput>
		//HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);

		/* Initialize position and motion variables */
		max_encoder_position = 0;
 8007ffa:	4b4c      	ldr	r3, [pc, #304]	; (800812c <initialize_main_loop+0x8dc>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
		global_max_encoder_position = 0;
 8008000:	4b4b      	ldr	r3, [pc, #300]	; (8008130 <initialize_main_loop+0x8e0>)
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
		peaked = 0;
 8008006:	4b4b      	ldr	r3, [pc, #300]	; (8008134 <initialize_main_loop+0x8e4>)
 8008008:	2200      	movs	r2, #0
 800800a:	701a      	strb	r2, [r3, #0]
		handled_peak = 0;
 800800c:	4b4a      	ldr	r3, [pc, #296]	; (8008138 <initialize_main_loop+0x8e8>)
 800800e:	2200      	movs	r2, #0
 8008010:	701a      	strb	r2, [r3, #0]
		swing_up_state = 0;
 8008012:	4b4a      	ldr	r3, [pc, #296]	; (800813c <initialize_main_loop+0x8ec>)
 8008014:	2200      	movs	r2, #0
 8008016:	601a      	str	r2, [r3, #0]
		swing_up_state_prev = 0;
 8008018:	4b49      	ldr	r3, [pc, #292]	; (8008140 <initialize_main_loop+0x8f0>)
 800801a:	2200      	movs	r2, #0
 800801c:	601a      	str	r2, [r3, #0]
		zero_crossed = 0;
 800801e:	4b49      	ldr	r3, [pc, #292]	; (8008144 <initialize_main_loop+0x8f4>)
 8008020:	2200      	movs	r2, #0
 8008022:	601a      	str	r2, [r3, #0]
		stage_count = 0;
 8008024:	4b48      	ldr	r3, [pc, #288]	; (8008148 <initialize_main_loop+0x8f8>)
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
		/* Select initial amplitude for rotor impulse */
		stage_amp = STAGE_0_AMP;
 800802a:	4b48      	ldr	r3, [pc, #288]	; (800814c <initialize_main_loop+0x8fc>)
 800802c:	22c8      	movs	r2, #200	; 0xc8
 800802e:	601a      	str	r2, [r3, #0]

		//sprintf(tmp_string,"Current Position Down %0.2f\r\n", encoder_position_down/angle_scale);
		//HAL_UART_Transmit(&huart2, (uint8_t*) tmp_string, strlen(tmp_string), HAL_MAX_DELAY);

		/* Initiate first swing */
		swing_up_direction = FORWARD;
 8008030:	4b47      	ldr	r3, [pc, #284]	; (8008150 <initialize_main_loop+0x900>)
 8008032:	2201      	movs	r2, #1
 8008034:	701a      	strb	r2, [r3, #0]
		BSP_MotorControl_Move(0, swing_up_direction, 150);
 8008036:	4b46      	ldr	r3, [pc, #280]	; (8008150 <initialize_main_loop+0x900>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2296      	movs	r2, #150	; 0x96
 800803c:	4619      	mov	r1, r3
 800803e:	2000      	movs	r0, #0
 8008040:	f7fb fde4 	bl	8003c0c <BSP_MotorControl_Move>
		BSP_MotorControl_WaitWhileActive(0);
 8008044:	2000      	movs	r0, #0
 8008046:	f7fb fee9 	bl	8003e1c <BSP_MotorControl_WaitWhileActive>


		/* Enter Swing Up Loop */
		while (1)
		{
			break;
 800804a:	bf00      	nop
		}
	}



	enable_control_action = 1;
 800804c:	4b41      	ldr	r3, [pc, #260]	; (8008154 <initialize_main_loop+0x904>)
 800804e:	2201      	movs	r2, #1
 8008050:	601a      	str	r2, [r3, #0]

	if (ACCEL_CONTROL == 1) {
		BSP_MotorControl_HardStop(0);
 8008052:	2000      	movs	r0, #0
 8008054:	f7fb fdba 	bl	8003bcc <BSP_MotorControl_HardStop>
		L6474_CmdEnable(0);
 8008058:	2000      	movs	r0, #0
 800805a:	f7f8 ffa9 	bl	8000fb0 <L6474_CmdEnable>
		target_velocity_prescaled = 0;
 800805e:	4b3e      	ldr	r3, [pc, #248]	; (8008158 <initialize_main_loop+0x908>)
 8008060:	f04f 0200 	mov.w	r2, #0
 8008064:	601a      	str	r2, [r3, #0]
		L6474_Board_SetDirectionGpio(0, BACKWARD);
 8008066:	2100      	movs	r1, #0
 8008068:	2000      	movs	r0, #0
 800806a:	f7fb fbd7 	bl	800381c <L6474_Board_SetDirectionGpio>
	}

	/*
	 * Set Torque Current to value for normal operation
	 */
	torq_current_val = MAX_TORQUE_CONFIG;
 800806e:	4b2b      	ldr	r3, [pc, #172]	; (800811c <initialize_main_loop+0x8cc>)
 8008070:	4a2b      	ldr	r2, [pc, #172]	; (8008120 <initialize_main_loop+0x8d0>)
 8008072:	601a      	str	r2, [r3, #0]
	L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 8008074:	4b29      	ldr	r3, [pc, #164]	; (800811c <initialize_main_loop+0x8cc>)
 8008076:	edd3 7a00 	vldr	s15, [r3]
 800807a:	eeb0 0a67 	vmov.f32	s0, s15
 800807e:	2109      	movs	r1, #9
 8008080:	2000      	movs	r0, #0
 8008082:	f7f9 fea1 	bl	8001dc8 <L6474_SetAnalogValue>

	target_cpu_cycle = DWT->CYCCNT;
 8008086:	4b35      	ldr	r3, [pc, #212]	; (800815c <initialize_main_loop+0x90c>)
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	4a35      	ldr	r2, [pc, #212]	; (8008160 <initialize_main_loop+0x910>)
 800808c:	6013      	str	r3, [r2, #0]
	prev_cpu_cycle = DWT->CYCCNT;
 800808e:	4b33      	ldr	r3, [pc, #204]	; (800815c <initialize_main_loop+0x90c>)
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	4a34      	ldr	r2, [pc, #208]	; (8008164 <initialize_main_loop+0x914>)
 8008094:	6013      	str	r3, [r2, #0]

	ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8008096:	4b34      	ldr	r3, [pc, #208]	; (8008168 <initialize_main_loop+0x918>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a34      	ldr	r2, [pc, #208]	; (800816c <initialize_main_loop+0x91c>)
 800809c:	4619      	mov	r1, r3
 800809e:	4834      	ldr	r0, [pc, #208]	; (8008170 <initialize_main_loop+0x920>)
 80080a0:	f000 fa96 	bl	80085d0 <encoder_position_read>
 80080a4:	4603      	mov	r3, r0
 80080a6:	4a33      	ldr	r2, [pc, #204]	; (8008174 <initialize_main_loop+0x924>)
 80080a8:	6013      	str	r3, [r2, #0]
	if (select_suspended_mode == 0) {
 80080aa:	4b18      	ldr	r3, [pc, #96]	; (800810c <initialize_main_loop+0x8bc>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d122      	bne.n	80080f8 <initialize_main_loop+0x8a8>
		encoder_position = encoder_position_steps - encoder_position_down - (int)(180 * angle_scale);
 80080b2:	4b2f      	ldr	r3, [pc, #188]	; (8008170 <initialize_main_loop+0x920>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	4b30      	ldr	r3, [pc, #192]	; (8008178 <initialize_main_loop+0x928>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	4a2f      	ldr	r2, [pc, #188]	; (800817c <initialize_main_loop+0x92c>)
 80080be:	edd2 7a00 	vldr	s15, [r2]
 80080c2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008180 <initialize_main_loop+0x930>
 80080c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80080ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080ce:	ee17 2a90 	vmov	r2, s15
 80080d2:	1a9b      	subs	r3, r3, r2
 80080d4:	ee07 3a90 	vmov	s15, r3
 80080d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080dc:	4b29      	ldr	r3, [pc, #164]	; (8008184 <initialize_main_loop+0x934>)
 80080de:	edc3 7a00 	vstr	s15, [r3]
		encoder_position = encoder_position - encoder_position_offset;
 80080e2:	4b28      	ldr	r3, [pc, #160]	; (8008184 <initialize_main_loop+0x934>)
 80080e4:	ed93 7a00 	vldr	s14, [r3]
 80080e8:	4b27      	ldr	r3, [pc, #156]	; (8008188 <initialize_main_loop+0x938>)
 80080ea:	edd3 7a00 	vldr	s15, [r3]
 80080ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080f2:	4b24      	ldr	r3, [pc, #144]	; (8008184 <initialize_main_loop+0x934>)
 80080f4:	edc3 7a00 	vstr	s15, [r3]
//				encoder_position = encoder_position_steps - encoder_position_down - (int)(180 * angle_scale);
//				encoder_position = encoder_position - encoder_position_offset;
//			}
//			return encoder_position;
//		}
}
 80080f8:	bf00      	nop
 80080fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80080fe:	bf00      	nop
 8008100:	20000f6c 	.word	0x20000f6c
 8008104:	20000b18 	.word	0x20000b18
 8008108:	20000ab8 	.word	0x20000ab8
 800810c:	200049dc 	.word	0x200049dc
 8008110:	20004bac 	.word	0x20004bac
 8008114:	41a00000 	.word	0x41a00000
 8008118:	2000491c 	.word	0x2000491c
 800811c:	200049fc 	.word	0x200049fc
 8008120:	44480000 	.word	0x44480000
 8008124:	0800dcb8 	.word	0x0800dcb8
 8008128:	20000d74 	.word	0x20000d74
 800812c:	20001080 	.word	0x20001080
 8008130:	20001084 	.word	0x20001084
 8008134:	20004924 	.word	0x20004924
 8008138:	20004925 	.word	0x20004925
 800813c:	20004930 	.word	0x20004930
 8008140:	20004934 	.word	0x20004934
 8008144:	20004928 	.word	0x20004928
 8008148:	20004938 	.word	0x20004938
 800814c:	2000493c 	.word	0x2000493c
 8008150:	2000492c 	.word	0x2000492c
 8008154:	20000a28 	.word	0x20000a28
 8008158:	20000c6c 	.word	0x20000c6c
 800815c:	e0001000 	.word	0xe0001000
 8008160:	2000802c 	.word	0x2000802c
 8008164:	20008024 	.word	0x20008024
 8008168:	20001078 	.word	0x20001078
 800816c:	20000f10 	.word	0x20000f10
 8008170:	20001074 	.word	0x20001074
 8008174:	20000f74 	.word	0x20000f74
 8008178:	2000108c 	.word	0x2000108c
 800817c:	20008044 	.word	0x20008044
 8008180:	43340000 	.word	0x43340000
 8008184:	20001070 	.word	0x20001070
 8008188:	20001098 	.word	0x20001098

0800818c <setControlCycle>:



}

bool setControlCycle(){
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0
	/* Compute 100 cycle time average of cycle period for system performance measurement */
	if(i == 1){
 8008190:	4b5e      	ldr	r3, [pc, #376]	; (800830c <setControlCycle+0x180>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d11a      	bne.n	80081ce <setControlCycle+0x42>
		cycle_period_start = HAL_GetTick();
 8008198:	f7fb ffb8 	bl	800410c <HAL_GetTick>
 800819c:	4603      	mov	r3, r0
 800819e:	461a      	mov	r2, r3
 80081a0:	4b5b      	ldr	r3, [pc, #364]	; (8008310 <setControlCycle+0x184>)
 80081a2:	601a      	str	r2, [r3, #0]
		cycle_period_sum = 100*Tsample*1000 - 1;
 80081a4:	4b5b      	ldr	r3, [pc, #364]	; (8008314 <setControlCycle+0x188>)
 80081a6:	edd3 7a00 	vldr	s15, [r3]
 80081aa:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8008318 <setControlCycle+0x18c>
 80081ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081b2:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800831c <setControlCycle+0x190>
 80081b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081c6:	ee17 2a90 	vmov	r2, s15
 80081ca:	4b55      	ldr	r3, [pc, #340]	; (8008320 <setControlCycle+0x194>)
 80081cc:	601a      	str	r2, [r3, #0]
	}
	if(i % 100 == 0){
 80081ce:	4b4f      	ldr	r3, [pc, #316]	; (800830c <setControlCycle+0x180>)
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	4b54      	ldr	r3, [pc, #336]	; (8008324 <setControlCycle+0x198>)
 80081d4:	fb83 1302 	smull	r1, r3, r3, r2
 80081d8:	1159      	asrs	r1, r3, #5
 80081da:	17d3      	asrs	r3, r2, #31
 80081dc:	1acb      	subs	r3, r1, r3
 80081de:	2164      	movs	r1, #100	; 0x64
 80081e0:	fb01 f303 	mul.w	r3, r1, r3
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10e      	bne.n	8008208 <setControlCycle+0x7c>
		cycle_period_sum = HAL_GetTick() - cycle_period_start;
 80081ea:	f7fb ff8f 	bl	800410c <HAL_GetTick>
 80081ee:	4603      	mov	r3, r0
 80081f0:	4a47      	ldr	r2, [pc, #284]	; (8008310 <setControlCycle+0x184>)
 80081f2:	6812      	ldr	r2, [r2, #0]
 80081f4:	1a9b      	subs	r3, r3, r2
 80081f6:	461a      	mov	r2, r3
 80081f8:	4b49      	ldr	r3, [pc, #292]	; (8008320 <setControlCycle+0x194>)
 80081fa:	601a      	str	r2, [r3, #0]
		cycle_period_start = HAL_GetTick();
 80081fc:	f7fb ff86 	bl	800410c <HAL_GetTick>
 8008200:	4603      	mov	r3, r0
 8008202:	461a      	mov	r2, r3
 8008204:	4b42      	ldr	r3, [pc, #264]	; (8008310 <setControlCycle+0x184>)
 8008206:	601a      	str	r2, [r3, #0]
	}
	tick = HAL_GetTick();
 8008208:	f7fb ff80 	bl	800410c <HAL_GetTick>
 800820c:	4603      	mov	r3, r0
 800820e:	4a46      	ldr	r2, [pc, #280]	; (8008328 <setControlCycle+0x19c>)
 8008210:	6013      	str	r3, [r2, #0]
	tick_cycle_previous = tick_cycle_current;
 8008212:	4b46      	ldr	r3, [pc, #280]	; (800832c <setControlCycle+0x1a0>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a46      	ldr	r2, [pc, #280]	; (8008330 <setControlCycle+0x1a4>)
 8008218:	6013      	str	r3, [r2, #0]
	tick_cycle_current = tick;
 800821a:	4b43      	ldr	r3, [pc, #268]	; (8008328 <setControlCycle+0x19c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a43      	ldr	r2, [pc, #268]	; (800832c <setControlCycle+0x1a0>)
 8008220:	6013      	str	r3, [r2, #0]


	prev_target_cpu_cycle = target_cpu_cycle;
 8008222:	4b44      	ldr	r3, [pc, #272]	; (8008334 <setControlCycle+0x1a8>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a44      	ldr	r2, [pc, #272]	; (8008338 <setControlCycle+0x1ac>)
 8008228:	6013      	str	r3, [r2, #0]
	target_cpu_cycle += t_sample_cpu_cycles; // Increment target_cpu_cycle by sample time
 800822a:	4b42      	ldr	r3, [pc, #264]	; (8008334 <setControlCycle+0x1a8>)
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	4b43      	ldr	r3, [pc, #268]	; (800833c <setControlCycle+0x1b0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4413      	add	r3, r2
 8008234:	4a3f      	ldr	r2, [pc, #252]	; (8008334 <setControlCycle+0x1a8>)
 8008236:	6013      	str	r3, [r2, #0]

	current_cpu_cycle = DWT->CYCCNT;
 8008238:	4b41      	ldr	r3, [pc, #260]	; (8008340 <setControlCycle+0x1b4>)
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	4a41      	ldr	r2, [pc, #260]	; (8008344 <setControlCycle+0x1b8>)
 800823e:	6013      	str	r3, [r2, #0]

	// If there is time left until target_cpu_cycle
	if (((int) (target_cpu_cycle - current_cpu_cycle)) > 0) {
 8008240:	4b3c      	ldr	r3, [pc, #240]	; (8008334 <setControlCycle+0x1a8>)
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	4b3f      	ldr	r3, [pc, #252]	; (8008344 <setControlCycle+0x1b8>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	dd19      	ble.n	8008282 <setControlCycle+0xf6>

		// If DWT->CYCCNT needs to overflow first
		if (current_cpu_cycle > target_cpu_cycle) {
 800824e:	4b3d      	ldr	r3, [pc, #244]	; (8008344 <setControlCycle+0x1b8>)
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	4b38      	ldr	r3, [pc, #224]	; (8008334 <setControlCycle+0x1a8>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	d90d      	bls.n	8008276 <setControlCycle+0xea>
			// Wait for DWT->CYCCNT to overflow
			do {
				last_cpu_cycle = current_cpu_cycle;
 800825a:	4b3a      	ldr	r3, [pc, #232]	; (8008344 <setControlCycle+0x1b8>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a3a      	ldr	r2, [pc, #232]	; (8008348 <setControlCycle+0x1bc>)
 8008260:	6013      	str	r3, [r2, #0]
				current_cpu_cycle = DWT->CYCCNT;
 8008262:	4b37      	ldr	r3, [pc, #220]	; (8008340 <setControlCycle+0x1b4>)
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	4a37      	ldr	r2, [pc, #220]	; (8008344 <setControlCycle+0x1b8>)
 8008268:	6013      	str	r3, [r2, #0]
			} while (current_cpu_cycle >= last_cpu_cycle);
 800826a:	4b36      	ldr	r3, [pc, #216]	; (8008344 <setControlCycle+0x1b8>)
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	4b36      	ldr	r3, [pc, #216]	; (8008348 <setControlCycle+0x1bc>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	429a      	cmp	r2, r3
 8008274:	d2f1      	bcs.n	800825a <setControlCycle+0xce>
		}

		DWT_Delay_until_cycle(target_cpu_cycle);
 8008276:	4b2f      	ldr	r3, [pc, #188]	; (8008334 <setControlCycle+0x1a8>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff f878 	bl	8007370 <DWT_Delay_until_cycle>
 8008280:	e020      	b.n	80082c4 <setControlCycle+0x138>
	} else {
		// Provide warning and exit if delay exceeds 5 cycles
		if (current_cpu_cycle - target_cpu_cycle > t_sample_cpu_cycles*5 && enable_cycle_delay_warning == 1) {
 8008282:	4b30      	ldr	r3, [pc, #192]	; (8008344 <setControlCycle+0x1b8>)
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	4b2b      	ldr	r3, [pc, #172]	; (8008334 <setControlCycle+0x1a8>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	1ad1      	subs	r1, r2, r3
 800828c:	4b2b      	ldr	r3, [pc, #172]	; (800833c <setControlCycle+0x1b0>)
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	4299      	cmp	r1, r3
 8008298:	d914      	bls.n	80082c4 <setControlCycle+0x138>
 800829a:	4b2c      	ldr	r3, [pc, #176]	; (800834c <setControlCycle+0x1c0>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d110      	bne.n	80082c4 <setControlCycle+0x138>
			sprintf(msg, "Error: control loop lag\r\n");
 80082a2:	492b      	ldr	r1, [pc, #172]	; (8008350 <setControlCycle+0x1c4>)
 80082a4:	482b      	ldr	r0, [pc, #172]	; (8008354 <setControlCycle+0x1c8>)
 80082a6:	f000 ff07 	bl	80090b8 <sprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80082aa:	482a      	ldr	r0, [pc, #168]	; (8008354 <setControlCycle+0x1c8>)
 80082ac:	f7f7 ff98 	bl	80001e0 <strlen>
 80082b0:	4603      	mov	r3, r0
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	f04f 33ff 	mov.w	r3, #4294967295
 80082b8:	4926      	ldr	r1, [pc, #152]	; (8008354 <setControlCycle+0x1c8>)
 80082ba:	4827      	ldr	r0, [pc, #156]	; (8008358 <setControlCycle+0x1cc>)
 80082bc:	f7fe fb52 	bl	8006964 <HAL_UART_Transmit>
			return 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	e021      	b.n	8008308 <setControlCycle+0x17c>
		}
	}

	/* Record current cpu cycle for delay computation at the end of loop execution */
	current_cpu_cycle = DWT->CYCCNT;
 80082c4:	4b1e      	ldr	r3, [pc, #120]	; (8008340 <setControlCycle+0x1b4>)
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	4a1e      	ldr	r2, [pc, #120]	; (8008344 <setControlCycle+0x1b8>)
 80082ca:	6013      	str	r3, [r2, #0]

	/* Compute value of relative delay after insertion of delay adjust */
	current_cpu_cycle_delay_relative_report = (int)(t_sample_cpu_cycles - (current_cpu_cycle - prev_cpu_cycle));
 80082cc:	4b23      	ldr	r3, [pc, #140]	; (800835c <setControlCycle+0x1d0>)
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	4b1c      	ldr	r3, [pc, #112]	; (8008344 <setControlCycle+0x1b8>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	1ad2      	subs	r2, r2, r3
 80082d6:	4b19      	ldr	r3, [pc, #100]	; (800833c <setControlCycle+0x1b0>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4413      	add	r3, r2
 80082dc:	461a      	mov	r2, r3
 80082de:	4b20      	ldr	r3, [pc, #128]	; (8008360 <setControlCycle+0x1d4>)
 80082e0:	601a      	str	r2, [r3, #0]
	current_cpu_cycle_delay_relative_report = (current_cpu_cycle_delay_relative_report*1000000)/RCC_HCLK_FREQ;
 80082e2:	4b1f      	ldr	r3, [pc, #124]	; (8008360 <setControlCycle+0x1d4>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a1f      	ldr	r2, [pc, #124]	; (8008364 <setControlCycle+0x1d8>)
 80082e8:	fb82 1203 	smull	r1, r2, r2, r3
 80082ec:	1112      	asrs	r2, r2, #4
 80082ee:	17db      	asrs	r3, r3, #31
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	4a1b      	ldr	r2, [pc, #108]	; (8008360 <setControlCycle+0x1d4>)
 80082f4:	6013      	str	r3, [r2, #0]

	prev_cpu_cycle = current_cpu_cycle;
 80082f6:	4b13      	ldr	r3, [pc, #76]	; (8008344 <setControlCycle+0x1b8>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a18      	ldr	r2, [pc, #96]	; (800835c <setControlCycle+0x1d0>)
 80082fc:	6013      	str	r3, [r2, #0]

	/* Increment cycle counter */

	i++;
 80082fe:	4b03      	ldr	r3, [pc, #12]	; (800830c <setControlCycle+0x180>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	3301      	adds	r3, #1
 8008304:	4a01      	ldr	r2, [pc, #4]	; (800830c <setControlCycle+0x180>)
 8008306:	6013      	str	r3, [r2, #0]

}
 8008308:	4618      	mov	r0, r3
 800830a:	bd80      	pop	{r7, pc}
 800830c:	20000f64 	.word	0x20000f64
 8008310:	20000f90 	.word	0x20000f90
 8008314:	20008038 	.word	0x20008038
 8008318:	42c80000 	.word	0x42c80000
 800831c:	447a0000 	.word	0x447a0000
 8008320:	20000f94 	.word	0x20000f94
 8008324:	51eb851f 	.word	0x51eb851f
 8008328:	20008000 	.word	0x20008000
 800832c:	20008004 	.word	0x20008004
 8008330:	20008008 	.word	0x20008008
 8008334:	2000802c 	.word	0x2000802c
 8008338:	20008030 	.word	0x20008030
 800833c:	20000a24 	.word	0x20000a24
 8008340:	e0001000 	.word	0xe0001000
 8008344:	20008020 	.word	0x20008020
 8008348:	20008028 	.word	0x20008028
 800834c:	20000f98 	.word	0x20000f98
 8008350:	0800dd30 	.word	0x0800dd30
 8008354:	20000d74 	.word	0x20000d74
 8008358:	20000a78 	.word	0x20000a78
 800835c:	20008024 	.word	0x20008024
 8008360:	20008034 	.word	0x20008034
 8008364:	30c30c31 	.word	0x30c30c31

08008368 <main>:

int main(void) {
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0

	initialize();
 800836c:	f7ff f814 	bl	8007398 <initialize>

	while (1) {

		initialize_main_loop();
 8008370:	f7ff fa6e 	bl	8007850 <initialize_main_loop>
		 *
		 * Control Loop Start
		 *
		 * *************************************************************************************************
		 */
		while (enable_control_action == 1) {
 8008374:	e008      	b.n	8008388 <main+0x20>
				sprintf(msg, "Exiting control because of cycle count limit \r\n");
				SendGAMInput( COMMAND_INDEX_SEND_STATUS_ERROR );
				break;
			}

			ProcessGAMOutput();
 8008376:	f000 fbc7 	bl	8008b08 <ProcessGAMOutput>
			SendGAMInputMain( );
 800837a:	f000 fac3 	bl	8008904 <SendGAMInputMain>

			if( !setControlCycle() ) break;
 800837e:	f7ff ff05 	bl	800818c <setControlCycle>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d004      	beq.n	8008392 <main+0x2a>
		while (enable_control_action == 1) {
 8008388:	4b21      	ldr	r3, [pc, #132]	; (8008410 <main+0xa8>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d0f2      	beq.n	8008376 <main+0xe>
 8008390:	e000      	b.n	8008394 <main+0x2c>
			if( !setControlCycle() ) break;
 8008392:	bf00      	nop

		/*
		 * Control System Exit Loop
		 */
		if (ACCEL_CONTROL == 1) {
			desired_pwm_period = 0;
 8008394:	4b1f      	ldr	r3, [pc, #124]	; (8008414 <main+0xac>)
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]
			current_pwm_period = 0;
 800839a:	4b1f      	ldr	r3, [pc, #124]	; (8008418 <main+0xb0>)
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]

		/*
		 * Restore rotor position at low speed profile
		 */

		ret = rotor_position_read(&rotor_position_steps);
 80083a0:	481e      	ldr	r0, [pc, #120]	; (800841c <main+0xb4>)
 80083a2:	f000 f9c3 	bl	800872c <rotor_position_read>
 80083a6:	4603      	mov	r3, r0
 80083a8:	4a1d      	ldr	r2, [pc, #116]	; (8008420 <main+0xb8>)
 80083aa:	6013      	str	r3, [r2, #0]
		BSP_MotorControl_GoTo(0, 0);
 80083ac:	2100      	movs	r1, #0
 80083ae:	2000      	movs	r0, #0
 80083b0:	f7fb fbea 	bl	8003b88 <BSP_MotorControl_GoTo>
		BSP_MotorControl_SoftStop(0);
 80083b4:	2000      	movs	r0, #0
 80083b6:	f7fb fced 	bl	8003d94 <BSP_MotorControl_SoftStop>

		/*
		 * Terminate motor control
		 */

		ret = rotor_position_read(&rotor_position_steps);
 80083ba:	4818      	ldr	r0, [pc, #96]	; (800841c <main+0xb4>)
 80083bc:	f000 f9b6 	bl	800872c <rotor_position_read>
 80083c0:	4603      	mov	r3, r0
 80083c2:	4a17      	ldr	r2, [pc, #92]	; (8008420 <main+0xb8>)
 80083c4:	6013      	str	r3, [r2, #0]
		sprintf(msg,"Exit Control at Rotor Angle, %.2f\r\n",
				(float) ((rotor_position_steps) / STEPPER_READ_POSITION_STEPS_PER_DEGREE));
 80083c6:	4b15      	ldr	r3, [pc, #84]	; (800841c <main+0xb4>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7f8 f8b2 	bl	8000534 <__aeabi_i2d>
 80083d0:	a30d      	add	r3, pc, #52	; (adr r3, 8008408 <main+0xa0>)
 80083d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d6:	f7f8 fa41 	bl	800085c <__aeabi_ddiv>
 80083da:	4602      	mov	r2, r0
 80083dc:	460b      	mov	r3, r1
 80083de:	4610      	mov	r0, r2
 80083e0:	4619      	mov	r1, r3
 80083e2:	f7f8 fbe9 	bl	8000bb8 <__aeabi_d2f>
 80083e6:	4603      	mov	r3, r0
		sprintf(msg,"Exit Control at Rotor Angle, %.2f\r\n",
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7f8 f8b5 	bl	8000558 <__aeabi_f2d>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	490c      	ldr	r1, [pc, #48]	; (8008424 <main+0xbc>)
 80083f4:	480c      	ldr	r0, [pc, #48]	; (8008428 <main+0xc0>)
 80083f6:	f000 fe5f 	bl	80090b8 <sprintf>
		SendGAMInput( COMMAND_INDEX_SEND_STATUS_INFO );
 80083fa:	200a      	movs	r0, #10
 80083fc:	f000 fa7a 	bl	80088f4 <SendGAMInput>

		/*
		 * System software reset
		 */

		NVIC_SystemReset();
 8008400:	f7fe ff6c 	bl	80072dc <NVIC_SystemReset>
	while (1) {
 8008404:	e7b4      	b.n	8008370 <main+0x8>
 8008406:	bf00      	nop
 8008408:	75818c5d 	.word	0x75818c5d
 800840c:	4021c71c 	.word	0x4021c71c
 8008410:	20000a28 	.word	0x20000a28
 8008414:	20000c64 	.word	0x20000c64
 8008418:	20000c68 	.word	0x20000c68
 800841c:	20000fd0 	.word	0x20000fd0
 8008420:	20000f74 	.word	0x20000f74
 8008424:	0800dd4c 	.word	0x0800dd4c
 8008428:	20000d74 	.word	0x20000d74

0800842c <MX_TIM3_Init>:
	}
	return 0;
}

/* TIM3 init function */
	void MX_TIM3_Init(void) {
 800842c:	b580      	push	{r7, lr}
 800842e:	b08c      	sub	sp, #48	; 0x30
 8008430:	af00      	add	r7, sp, #0

	TIM_Encoder_InitTypeDef sConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim3.Instance = TIM3;
 8008432:	4b20      	ldr	r3, [pc, #128]	; (80084b4 <MX_TIM3_Init+0x88>)
 8008434:	4a20      	ldr	r2, [pc, #128]	; (80084b8 <MX_TIM3_Init+0x8c>)
 8008436:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8008438:	4b1e      	ldr	r3, [pc, #120]	; (80084b4 <MX_TIM3_Init+0x88>)
 800843a:	2200      	movs	r2, #0
 800843c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800843e:	4b1d      	ldr	r3, [pc, #116]	; (80084b4 <MX_TIM3_Init+0x88>)
 8008440:	2200      	movs	r2, #0
 8008442:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8008444:	4b1b      	ldr	r3, [pc, #108]	; (80084b4 <MX_TIM3_Init+0x88>)
 8008446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800844a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800844c:	4b19      	ldr	r3, [pc, #100]	; (80084b4 <MX_TIM3_Init+0x88>)
 800844e:	2200      	movs	r2, #0
 8008450:	611a      	str	r2, [r3, #16]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008452:	2303      	movs	r3, #3
 8008454:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008456:	2300      	movs	r3, #0
 8008458:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800845a:	2301      	movs	r3, #1
 800845c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800845e:	2300      	movs	r3, #0
 8008460:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008466:	2300      	movs	r3, #0
 8008468:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800846a:	2301      	movs	r3, #1
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800846e:	2300      	movs	r3, #0
 8008470:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8008476:	f107 030c 	add.w	r3, r7, #12
 800847a:	4619      	mov	r1, r3
 800847c:	480d      	ldr	r0, [pc, #52]	; (80084b4 <MX_TIM3_Init+0x88>)
 800847e:	f7fd fcc7 	bl	8005e10 <HAL_TIM_Encoder_Init>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <MX_TIM3_Init+0x62>
		Error_Handler(0);
 8008488:	2000      	movs	r0, #0
 800848a:	f000 f895 	bl	80085b8 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800848e:	2300      	movs	r3, #0
 8008490:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008492:	2300      	movs	r3, #0
 8008494:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8008496:	1d3b      	adds	r3, r7, #4
 8008498:	4619      	mov	r1, r3
 800849a:	4806      	ldr	r0, [pc, #24]	; (80084b4 <MX_TIM3_Init+0x88>)
 800849c:	f7fe f9bc 	bl	8006818 <HAL_TIMEx_MasterConfigSynchronization>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <MX_TIM3_Init+0x80>
			!= HAL_OK) {
		Error_Handler(0);
 80084a6:	2000      	movs	r0, #0
 80084a8:	f000 f886 	bl	80085b8 <Error_Handler>
	}

}
 80084ac:	bf00      	nop
 80084ae:	3730      	adds	r7, #48	; 0x30
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000f10 	.word	0x20000f10
 80084b8:	40000400 	.word	0x40000400

080084bc <MX_USART2_UART_Init>:

/* USART2 init function */

	void MX_USART2_UART_Init(void) {
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE()
 80084c2:	2300      	movs	r3, #0
 80084c4:	607b      	str	r3, [r7, #4]
 80084c6:	4b31      	ldr	r3, [pc, #196]	; (800858c <MX_USART2_UART_Init+0xd0>)
 80084c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ca:	4a30      	ldr	r2, [pc, #192]	; (800858c <MX_USART2_UART_Init+0xd0>)
 80084cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084d0:	6313      	str	r3, [r2, #48]	; 0x30
 80084d2:	4b2e      	ldr	r3, [pc, #184]	; (800858c <MX_USART2_UART_Init+0xd0>)
 80084d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084da:	607b      	str	r3, [r7, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
							;

	huart2.Instance = USART2;
 80084de:	4b2c      	ldr	r3, [pc, #176]	; (8008590 <MX_USART2_UART_Init+0xd4>)
 80084e0:	4a2c      	ldr	r2, [pc, #176]	; (8008594 <MX_USART2_UART_Init+0xd8>)
 80084e2:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = SAMPLE_BAUD_RATE;
 80084e4:	4b2a      	ldr	r3, [pc, #168]	; (8008590 <MX_USART2_UART_Init+0xd4>)
 80084e6:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80084ea:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80084ec:	4b28      	ldr	r3, [pc, #160]	; (8008590 <MX_USART2_UART_Init+0xd4>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80084f2:	4b27      	ldr	r3, [pc, #156]	; (8008590 <MX_USART2_UART_Init+0xd4>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80084f8:	4b25      	ldr	r3, [pc, #148]	; (8008590 <MX_USART2_UART_Init+0xd4>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80084fe:	4b24      	ldr	r3, [pc, #144]	; (8008590 <MX_USART2_UART_Init+0xd4>)
 8008500:	220c      	movs	r2, #12
 8008502:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008504:	4b22      	ldr	r3, [pc, #136]	; (8008590 <MX_USART2_UART_Init+0xd4>)
 8008506:	2200      	movs	r2, #0
 8008508:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800850a:	4b21      	ldr	r3, [pc, #132]	; (8008590 <MX_USART2_UART_Init+0xd4>)
 800850c:	2200      	movs	r2, #0
 800850e:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8008510:	481f      	ldr	r0, [pc, #124]	; (8008590 <MX_USART2_UART_Init+0xd4>)
 8008512:	f7fe f9da 	bl	80068ca <HAL_UART_Init>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <MX_USART2_UART_Init+0x66>
		Error_Handler(0);
 800851c:	2000      	movs	r0, #0
 800851e:	f000 f84b 	bl	80085b8 <Error_Handler>
	}

	/* USART2 RX DMA Init */
	hdma_usart2_rx.Instance = DMA1_Stream5;
 8008522:	4b1d      	ldr	r3, [pc, #116]	; (8008598 <MX_USART2_UART_Init+0xdc>)
 8008524:	4a1d      	ldr	r2, [pc, #116]	; (800859c <MX_USART2_UART_Init+0xe0>)
 8008526:	601a      	str	r2, [r3, #0]
	hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8008528:	4b1b      	ldr	r3, [pc, #108]	; (8008598 <MX_USART2_UART_Init+0xdc>)
 800852a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800852e:	605a      	str	r2, [r3, #4]
	hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008530:	4b19      	ldr	r3, [pc, #100]	; (8008598 <MX_USART2_UART_Init+0xdc>)
 8008532:	2200      	movs	r2, #0
 8008534:	609a      	str	r2, [r3, #8]
	hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008536:	4b18      	ldr	r3, [pc, #96]	; (8008598 <MX_USART2_UART_Init+0xdc>)
 8008538:	2200      	movs	r2, #0
 800853a:	60da      	str	r2, [r3, #12]
	hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800853c:	4b16      	ldr	r3, [pc, #88]	; (8008598 <MX_USART2_UART_Init+0xdc>)
 800853e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008542:	611a      	str	r2, [r3, #16]
	hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008544:	4b14      	ldr	r3, [pc, #80]	; (8008598 <MX_USART2_UART_Init+0xdc>)
 8008546:	2200      	movs	r2, #0
 8008548:	615a      	str	r2, [r3, #20]
	hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800854a:	4b13      	ldr	r3, [pc, #76]	; (8008598 <MX_USART2_UART_Init+0xdc>)
 800854c:	2200      	movs	r2, #0
 800854e:	619a      	str	r2, [r3, #24]
	hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8008550:	4b11      	ldr	r3, [pc, #68]	; (8008598 <MX_USART2_UART_Init+0xdc>)
 8008552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008556:	61da      	str	r2, [r3, #28]
	hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008558:	4b0f      	ldr	r3, [pc, #60]	; (8008598 <MX_USART2_UART_Init+0xdc>)
 800855a:	2200      	movs	r2, #0
 800855c:	621a      	str	r2, [r3, #32]
	hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800855e:	4b0e      	ldr	r3, [pc, #56]	; (8008598 <MX_USART2_UART_Init+0xdc>)
 8008560:	2200      	movs	r2, #0
 8008562:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8008564:	480c      	ldr	r0, [pc, #48]	; (8008598 <MX_USART2_UART_Init+0xdc>)
 8008566:	f7fb ff0f 	bl	8004388 <HAL_DMA_Init>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <MX_USART2_UART_Init+0xba>
		Error_Handler(0);
 8008570:	2000      	movs	r0, #0
 8008572:	f000 f821 	bl	80085b8 <Error_Handler>
	}
	__HAL_LINKDMA(&huart2, hdmarx, hdma_usart2_rx);
 8008576:	4b06      	ldr	r3, [pc, #24]	; (8008590 <MX_USART2_UART_Init+0xd4>)
 8008578:	4a07      	ldr	r2, [pc, #28]	; (8008598 <MX_USART2_UART_Init+0xdc>)
 800857a:	635a      	str	r2, [r3, #52]	; 0x34
 800857c:	4b06      	ldr	r3, [pc, #24]	; (8008598 <MX_USART2_UART_Init+0xdc>)
 800857e:	4a04      	ldr	r2, [pc, #16]	; (8008590 <MX_USART2_UART_Init+0xd4>)
 8008580:	639a      	str	r2, [r3, #56]	; 0x38
}
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	40023800 	.word	0x40023800
 8008590:	20000a78 	.word	0x20000a78
 8008594:	40004400 	.word	0x40004400
 8008598:	20000ab8 	.word	0x20000ab8
 800859c:	40026088 	.word	0x40026088

080085a0 <MyFlagInterruptHandler>:
/**
 * @brief  This function is the User handler for the flag interrupt
 * @param  None
 * @retval None
 */
void MyFlagInterruptHandler(void) {
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
	/* Get the value of the status register via the L6474 command GET_STATUS */
	uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 80085a6:	2000      	movs	r0, #0
 80085a8:	f7fb fc58 	bl	8003e5c <BSP_MotorControl_CmdGetStatus>
 80085ac:	4603      	mov	r3, r0
 80085ae:	80fb      	strh	r3, [r7, #6]
	if ((statusRegister & L6474_STATUS_OCD) == 0) {
		//overcurrent detection
		// Action to be customized
	}

}
 80085b0:	bf00      	nop
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <Error_Handler>:
/**
 * @brief  This function is executed in event of error occurrence.
 * @param  error number of the error event
 * @retval None
 */
void Error_Handler(uint16_t error) {
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	4603      	mov	r3, r0
 80085c0:	80fb      	strh	r3, [r7, #6]
	/* Backup error number */
	gLastError = error;
 80085c2:	4a02      	ldr	r2, [pc, #8]	; (80085cc <Error_Handler+0x14>)
 80085c4:	88fb      	ldrh	r3, [r7, #6]
 80085c6:	8013      	strh	r3, [r2, #0]

	/* Infinite loop */
	while (1) {
 80085c8:	e7fe      	b.n	80085c8 <Error_Handler+0x10>
 80085ca:	bf00      	nop
 80085cc:	20000a74 	.word	0x20000a74

080085d0 <encoder_position_read>:
 * This is developed and provided by Markus Dauberschmidt.  Please see
 * https://github.com/OevreFlataeker/steval_edukit_swingup
 *
 */

__INLINE int encoder_position_read(int *encoder_position, int encoder_position_init, TIM_HandleTypeDef *htim3) {
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]

	cnt3 = __HAL_TIM_GET_COUNTER(htim3);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	4a41      	ldr	r2, [pc, #260]	; (80086e8 <encoder_position_read+0x118>)
 80085e4:	6013      	str	r3, [r2, #0]

	if (cnt3 >= 32768) {
 80085e6:	4b40      	ldr	r3, [pc, #256]	; (80086e8 <encoder_position_read+0x118>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ee:	d30b      	bcc.n	8008608 <encoder_position_read+0x38>
		*encoder_position = (int) (cnt3);
 80085f0:	4b3d      	ldr	r3, [pc, #244]	; (80086e8 <encoder_position_read+0x118>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	461a      	mov	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	601a      	str	r2, [r3, #0]
		*encoder_position = *encoder_position - 65536;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	e004      	b.n	8008612 <encoder_position_read+0x42>
	} else {
		*encoder_position = (int) (cnt3);
 8008608:	4b37      	ldr	r3, [pc, #220]	; (80086e8 <encoder_position_read+0x118>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	601a      	str	r2, [r3, #0]
	}

	range_error = 0;
 8008612:	4b36      	ldr	r3, [pc, #216]	; (80086ec <encoder_position_read+0x11c>)
 8008614:	2200      	movs	r2, #0
 8008616:	601a      	str	r2, [r3, #0]
	if (*encoder_position <= -32768) {
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8008620:	dc06      	bgt.n	8008630 <encoder_position_read+0x60>
		range_error = -1;
 8008622:	4b32      	ldr	r3, [pc, #200]	; (80086ec <encoder_position_read+0x11c>)
 8008624:	f04f 32ff 	mov.w	r2, #4294967295
 8008628:	601a      	str	r2, [r3, #0]
		*encoder_position = -32768;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	4a30      	ldr	r2, [pc, #192]	; (80086f0 <encoder_position_read+0x120>)
 800862e:	601a      	str	r2, [r3, #0]
	}
	if (*encoder_position >= 32767) {
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008638:	4293      	cmp	r3, r2
 800863a:	dd06      	ble.n	800864a <encoder_position_read+0x7a>
		range_error = 1;
 800863c:	4b2b      	ldr	r3, [pc, #172]	; (80086ec <encoder_position_read+0x11c>)
 800863e:	2201      	movs	r2, #1
 8008640:	601a      	str	r2, [r3, #0]
		*encoder_position = 32767;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008648:	601a      	str	r2, [r3, #0]
	}

	*encoder_position = *encoder_position - encoder_position_init;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	1ad2      	subs	r2, r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	601a      	str	r2, [r3, #0]
	 *  Detect if we passed the bottom, then re-arm peak flag
	 *  oppositeSigns returns true when we pass the bottom position
	 */


	if (oppositeSigns(*encoder_position, previous_encoder_position))
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a26      	ldr	r2, [pc, #152]	; (80086f4 <encoder_position_read+0x124>)
 800865c:	6812      	ldr	r2, [r2, #0]
 800865e:	4611      	mov	r1, r2
 8008660:	4618      	mov	r0, r3
 8008662:	f000 f853 	bl	800870c <oppositeSigns>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <encoder_position_read+0xa8>
	{
		peaked = 0;
 800866c:	4b22      	ldr	r3, [pc, #136]	; (80086f8 <encoder_position_read+0x128>)
 800866e:	2200      	movs	r2, #0
 8008670:	701a      	strb	r2, [r3, #0]
		zero_crossed = 1;
 8008672:	4b22      	ldr	r3, [pc, #136]	; (80086fc <encoder_position_read+0x12c>)
 8008674:	2201      	movs	r2, #1
 8008676:	601a      	str	r2, [r3, #0]
	}

	if (!peaked) // We don't need to evaluate anymore if we hit a maximum when we're still in downward motion and didn't cross the minimum
 8008678:	4b1f      	ldr	r3, [pc, #124]	; (80086f8 <encoder_position_read+0x128>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d128      	bne.n	80086d2 <encoder_position_read+0x102>
	{
		// Add global maximum
		if (abs(*encoder_position) >= abs(global_max_encoder_position))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8008688:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800868c:	4b1c      	ldr	r3, [pc, #112]	; (8008700 <encoder_position_read+0x130>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	bfb8      	it	lt
 8008694:	425b      	neglt	r3, r3
 8008696:	429a      	cmp	r2, r3
 8008698:	db03      	blt.n	80086a2 <encoder_position_read+0xd2>
		{
			global_max_encoder_position = *encoder_position;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a18      	ldr	r2, [pc, #96]	; (8008700 <encoder_position_read+0x130>)
 80086a0:	6013      	str	r3, [r2, #0]
		}
		// Check if new maximum
		if (abs(*encoder_position) >= abs(max_encoder_position))
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80086aa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80086ae:	4b15      	ldr	r3, [pc, #84]	; (8008704 <encoder_position_read+0x134>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	bfb8      	it	lt
 80086b6:	425b      	neglt	r3, r3
 80086b8:	429a      	cmp	r2, r3
 80086ba:	db04      	blt.n	80086c6 <encoder_position_read+0xf6>
		{
			max_encoder_position = *encoder_position;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a10      	ldr	r2, [pc, #64]	; (8008704 <encoder_position_read+0x134>)
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	e005      	b.n	80086d2 <encoder_position_read+0x102>
		}
		else
		{
			// We are at the peak and disable further checks until we traversed the minimum position again
			peaked = 1;
 80086c6:	4b0c      	ldr	r3, [pc, #48]	; (80086f8 <encoder_position_read+0x128>)
 80086c8:	2201      	movs	r2, #1
 80086ca:	701a      	strb	r2, [r3, #0]
			handled_peak = 0;
 80086cc:	4b0e      	ldr	r3, [pc, #56]	; (8008708 <encoder_position_read+0x138>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	701a      	strb	r2, [r3, #0]
		}
	}

	previous_encoder_position = *encoder_position;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a07      	ldr	r2, [pc, #28]	; (80086f4 <encoder_position_read+0x124>)
 80086d8:	6013      	str	r3, [r2, #0]


	return range_error;
 80086da:	4b04      	ldr	r3, [pc, #16]	; (80086ec <encoder_position_read+0x11c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20001068 	.word	0x20001068
 80086ec:	2000106c 	.word	0x2000106c
 80086f0:	ffff8000 	.word	0xffff8000
 80086f4:	2000107c 	.word	0x2000107c
 80086f8:	20004924 	.word	0x20004924
 80086fc:	20004928 	.word	0x20004928
 8008700:	20001084 	.word	0x20001084
 8008704:	20001080 	.word	0x20001080
 8008708:	20004925 	.word	0x20004925

0800870c <oppositeSigns>:
 * Returns true if the two arguments have opposite sign, false if not
 * @retval bool.
 * Developed and provided by Markus Dauberschmidt
 */

__INLINE bool oppositeSigns(int x, int y) {
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
	return ((x ^ y) < 0);
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	4053      	eors	r3, r2
 800871c:	0fdb      	lsrs	r3, r3, #31
 800871e:	b2db      	uxtb	r3, r3
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <rotor_position_read>:
 *
 * Returns error if overflow detected
 *
 */

__INLINE int rotor_position_read(int *rotor_position) {
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
	uint32_t rotor_position_u;
	int range_error;
	rotor_position_u = BSP_MotorControl_GetPosition(0);
 8008734:	2000      	movs	r0, #0
 8008736:	f7fb fa03 	bl	8003b40 <BSP_MotorControl_GetPosition>
 800873a:	4603      	mov	r3, r0
 800873c:	60bb      	str	r3, [r7, #8]

	if (rotor_position_u > 2147483648) {
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008744:	d903      	bls.n	800874e <rotor_position_read+0x22>
		*rotor_position = (int) (rotor_position_u) - 4294967296;
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	e002      	b.n	8008754 <rotor_position_read+0x28>
	} else {
		*rotor_position = (int) (rotor_position_u);
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	601a      	str	r2, [r3, #0]
	}
	range_error = 0;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
	if (*rotor_position <= -2147483648) {
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008760:	d106      	bne.n	8008770 <rotor_position_read+0x44>
		range_error = -1;
 8008762:	f04f 33ff 	mov.w	r3, #4294967295
 8008766:	60fb      	str	r3, [r7, #12]
		*rotor_position = -2147483648;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800876e:	601a      	str	r2, [r3, #0]
	}
	if (*rotor_position >= 2147483647) {
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008778:	4293      	cmp	r3, r2
 800877a:	d105      	bne.n	8008788 <rotor_position_read+0x5c>
		range_error = 1;
 800877c:	2301      	movs	r3, #1
 800877e:	60fb      	str	r3, [r7, #12]
		*rotor_position = 2147483647;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8008786:	601a      	str	r2, [r3, #0]
	}
	return range_error;
 8008788:	68fb      	ldr	r3, [r7, #12]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <user_configuration_default>:
		break;
	}

}

void user_configuration_default(void){
 8008794:	b580      	push	{r7, lr}
 8008796:	af00      	add	r7, sp, #0
	enable_state_feedback = 0;
 8008798:	4b20      	ldr	r3, [pc, #128]	; (800881c <user_configuration_default+0x88>)
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]
	select_suspended_mode = 0;
 800879e:	4b20      	ldr	r3, [pc, #128]	; (8008820 <user_configuration_default+0x8c>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	601a      	str	r2, [r3, #0]
	proportional = 		PRIMARY_PROPORTIONAL_MODE_1;
 80087a4:	4b1f      	ldr	r3, [pc, #124]	; (8008824 <user_configuration_default+0x90>)
 80087a6:	4a20      	ldr	r2, [pc, #128]	; (8008828 <user_configuration_default+0x94>)
 80087a8:	601a      	str	r2, [r3, #0]
	integral = 			PRIMARY_INTEGRAL_MODE_1;
 80087aa:	4b20      	ldr	r3, [pc, #128]	; (800882c <user_configuration_default+0x98>)
 80087ac:	f04f 0200 	mov.w	r2, #0
 80087b0:	601a      	str	r2, [r3, #0]
	derivative = 		PRIMARY_DERIVATIVE_MODE_1;
 80087b2:	4b1f      	ldr	r3, [pc, #124]	; (8008830 <user_configuration_default+0x9c>)
 80087b4:	4a1f      	ldr	r2, [pc, #124]	; (8008834 <user_configuration_default+0xa0>)
 80087b6:	601a      	str	r2, [r3, #0]
	rotor_p_gain = 		SECONDARY_PROPORTIONAL_MODE_1;
 80087b8:	4b1f      	ldr	r3, [pc, #124]	; (8008838 <user_configuration_default+0xa4>)
 80087ba:	4a20      	ldr	r2, [pc, #128]	; (800883c <user_configuration_default+0xa8>)
 80087bc:	601a      	str	r2, [r3, #0]
	rotor_i_gain = 		SECONDARY_INTEGRAL_MODE_1;
 80087be:	4b20      	ldr	r3, [pc, #128]	; (8008840 <user_configuration_default+0xac>)
 80087c0:	f04f 0200 	mov.w	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
	rotor_d_gain = 		SECONDARY_DERIVATIVE_MODE_1;
 80087c6:	4b1f      	ldr	r3, [pc, #124]	; (8008844 <user_configuration_default+0xb0>)
 80087c8:	4a1f      	ldr	r2, [pc, #124]	; (8008848 <user_configuration_default+0xb4>)
 80087ca:	601a      	str	r2, [r3, #0]
	max_speed = 		MAX_SPEED_MODE_1;
 80087cc:	4b1f      	ldr	r3, [pc, #124]	; (800884c <user_configuration_default+0xb8>)
 80087ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80087d2:	801a      	strh	r2, [r3, #0]
	min_speed = 		MIN_SPEED_MODE_1;
 80087d4:	4b1e      	ldr	r3, [pc, #120]	; (8008850 <user_configuration_default+0xbc>)
 80087d6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80087da:	801a      	strh	r2, [r3, #0]
	enable_rotor_plant_design = 0;
 80087dc:	4b1d      	ldr	r3, [pc, #116]	; (8008854 <user_configuration_default+0xc0>)
 80087de:	2200      	movs	r2, #0
 80087e0:	601a      	str	r2, [r3, #0]
	enable_rotor_plant_gain_design = 0;
 80087e2:	4b1d      	ldr	r3, [pc, #116]	; (8008858 <user_configuration_default+0xc4>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]
	enable_rotor_position_step_response_cycle = 0;
 80087e8:	4b1c      	ldr	r3, [pc, #112]	; (800885c <user_configuration_default+0xc8>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	601a      	str	r2, [r3, #0]
	enable_pendulum_position_impulse_response_cycle = 0;
 80087ee:	4b1c      	ldr	r3, [pc, #112]	; (8008860 <user_configuration_default+0xcc>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	601a      	str	r2, [r3, #0]
	enable_rotor_chirp = 0;
 80087f4:	4b1b      	ldr	r3, [pc, #108]	; (8008864 <user_configuration_default+0xd0>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	601a      	str	r2, [r3, #0]
	enable_mod_sin_rotor_tracking = 1;
 80087fa:	4b1b      	ldr	r3, [pc, #108]	; (8008868 <user_configuration_default+0xd4>)
 80087fc:	2201      	movs	r2, #1
 80087fe:	601a      	str	r2, [r3, #0]
	enable_angle_cal = 1;
 8008800:	4b1a      	ldr	r3, [pc, #104]	; (800886c <user_configuration_default+0xd8>)
 8008802:	2201      	movs	r2, #1
 8008804:	601a      	str	r2, [r3, #0]
	enable_swing_up = 1;
 8008806:	4b1a      	ldr	r3, [pc, #104]	; (8008870 <user_configuration_default+0xdc>)
 8008808:	2201      	movs	r2, #1
 800880a:	601a      	str	r2, [r3, #0]
	L6474_SetAnalogValue(0, L6474_TVAL, TORQ_CURRENT_DEFAULT);
 800880c:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008874 <user_configuration_default+0xe0>
 8008810:	2109      	movs	r1, #9
 8008812:	2000      	movs	r0, #0
 8008814:	f7f9 fad8 	bl	8001dc8 <L6474_SetAnalogValue>
}
 8008818:	bf00      	nop
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20000fbc 	.word	0x20000fbc
 8008820:	200049dc 	.word	0x200049dc
 8008824:	20000fa4 	.word	0x20000fa4
 8008828:	43960000 	.word	0x43960000
 800882c:	20000fac 	.word	0x20000fac
 8008830:	20000fb4 	.word	0x20000fb4
 8008834:	41f00000 	.word	0x41f00000
 8008838:	20000fa8 	.word	0x20000fa8
 800883c:	41700000 	.word	0x41700000
 8008840:	20000fb0 	.word	0x20000fb0
 8008844:	20000fb8 	.word	0x20000fb8
 8008848:	40f00000 	.word	0x40f00000
 800884c:	20008052 	.word	0x20008052
 8008850:	20008050 	.word	0x20008050
 8008854:	20001008 	.word	0x20001008
 8008858:	2000100c 	.word	0x2000100c
 800885c:	20004a30 	.word	0x20004a30
 8008860:	20004a54 	.word	0x20004a54
 8008864:	20004a00 	.word	0x20004a00
 8008868:	20004a2c 	.word	0x20004a2c
 800886c:	200010a0 	.word	0x200010a0
 8008870:	2000491c 	.word	0x2000491c
 8008874:	44480000 	.word	0x44480000

08008878 <user_configuration>:
/*
 * Configure system based on user selection
 */

void user_configuration(void){
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0



	enable_rotor_actuator_test = 0;
 800887c:	4b12      	ldr	r3, [pc, #72]	; (80088c8 <user_configuration+0x50>)
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]
	enable_rotor_actuator_control = 0;
 8008882:	4b12      	ldr	r3, [pc, #72]	; (80088cc <user_configuration+0x54>)
 8008884:	2200      	movs	r2, #0
 8008886:	601a      	str	r2, [r3, #0]
	enable_encoder_test = 0;
 8008888:	4b11      	ldr	r3, [pc, #68]	; (80088d0 <user_configuration+0x58>)
 800888a:	2200      	movs	r2, #0
 800888c:	601a      	str	r2, [r3, #0]
	enable_rotor_actuator_high_speed_test = 0;
 800888e:	4b11      	ldr	r3, [pc, #68]	; (80088d4 <user_configuration+0x5c>)
 8008890:	2200      	movs	r2, #0
 8008892:	601a      	str	r2, [r3, #0]
	enable_motor_actuator_characterization_mode = 0;
 8008894:	4b10      	ldr	r3, [pc, #64]	; (80088d8 <user_configuration+0x60>)
 8008896:	2200      	movs	r2, #0
 8008898:	601a      	str	r2, [r3, #0]
	enable_full_sysid = 0;
 800889a:	4b10      	ldr	r3, [pc, #64]	; (80088dc <user_configuration+0x64>)
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]

	enable_rotor_tracking_comb_signal = 0;
 80088a0:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <user_configuration+0x68>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
	rotor_track_comb_amplitude = 0;
 80088a6:	4b0f      	ldr	r3, [pc, #60]	; (80088e4 <user_configuration+0x6c>)
 80088a8:	f04f 0200 	mov.w	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]
	enable_disturbance_rejection_step = 0;
 80088ae:	4b0e      	ldr	r3, [pc, #56]	; (80088e8 <user_configuration+0x70>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
	enable_noise_rejection_step = 0;
 80088b4:	4b0d      	ldr	r3, [pc, #52]	; (80088ec <user_configuration+0x74>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]
	enable_sensitivity_fnc_step = 0;
 80088ba:	4b0d      	ldr	r3, [pc, #52]	; (80088f0 <user_configuration+0x78>)
 80088bc:	2200      	movs	r2, #0
 80088be:	601a      	str	r2, [r3, #0]

//############## Jawad Modification  -->> ###############################
	user_configuration_default();
 80088c0:	f7ff ff68 	bl	8008794 <user_configuration_default>
	return;
 80088c4:	bf00      	nop
			}
			return;
		}
	}
	return;
}
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	200049e4 	.word	0x200049e4
 80088cc:	200049e8 	.word	0x200049e8
 80088d0:	200049ec 	.word	0x200049ec
 80088d4:	200049f0 	.word	0x200049f0
 80088d8:	200049f4 	.word	0x200049f4
 80088dc:	20004b70 	.word	0x20004b70
 80088e0:	20004b8c 	.word	0x20004b8c
 80088e4:	20004b98 	.word	0x20004b98
 80088e8:	20004b9c 	.word	0x20004b9c
 80088ec:	20004ba0 	.word	0x20004ba0
 80088f0:	20004ba8 	.word	0x20004ba8

080088f4 <SendGAMInput>:
 * Positions  ==> 1
 */



void SendGAMInput(  ){
 80088f4:	b480      	push	{r7}
 80088f6:	af00      	add	r7, sp, #0
//			break;
//	}

	//ret = HAL_UART_Transmit(&huart2, (uint8_t*) msg_cmd, sizeof(frame), HAL_MAX_DELAY);

}
 80088f8:	bf00      	nop
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
	...

08008904 <SendGAMInputMain>:


void SendGAMInputMain(  ){
 8008904:	b5b0      	push	{r4, r5, r7, lr}
 8008906:	b088      	sub	sp, #32
 8008908:	af00      	add	r7, sp, #0
	ret = rotor_position_read(&rotor_position_steps);
 800890a:	4842      	ldr	r0, [pc, #264]	; (8008a14 <SendGAMInputMain+0x110>)
 800890c:	f7ff ff0e 	bl	800872c <rotor_position_read>
 8008910:	4603      	mov	r3, r0
 8008912:	4a41      	ldr	r2, [pc, #260]	; (8008a18 <SendGAMInputMain+0x114>)
 8008914:	6013      	str	r3, [r2, #0]
	ret = encoder_position_read(&encoder_position_steps, encoder_position_init, &htim3);
 8008916:	4b41      	ldr	r3, [pc, #260]	; (8008a1c <SendGAMInputMain+0x118>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a41      	ldr	r2, [pc, #260]	; (8008a20 <SendGAMInputMain+0x11c>)
 800891c:	4619      	mov	r1, r3
 800891e:	4841      	ldr	r0, [pc, #260]	; (8008a24 <SendGAMInputMain+0x120>)
 8008920:	f7ff fe56 	bl	80085d0 <encoder_position_read>
 8008924:	4603      	mov	r3, r0
 8008926:	4a3c      	ldr	r2, [pc, #240]	; (8008a18 <SendGAMInputMain+0x114>)
 8008928:	6013      	str	r3, [r2, #0]
	if (select_suspended_mode == 0) {
 800892a:	4b3f      	ldr	r3, [pc, #252]	; (8008a28 <SendGAMInputMain+0x124>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d122      	bne.n	8008978 <SendGAMInputMain+0x74>
		encoder_position = encoder_position_steps - encoder_position_down - (int)(180 * angle_scale);
 8008932:	4b3c      	ldr	r3, [pc, #240]	; (8008a24 <SendGAMInputMain+0x120>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	4b3d      	ldr	r3, [pc, #244]	; (8008a2c <SendGAMInputMain+0x128>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	4a3c      	ldr	r2, [pc, #240]	; (8008a30 <SendGAMInputMain+0x12c>)
 800893e:	edd2 7a00 	vldr	s15, [r2]
 8008942:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8008a34 <SendGAMInputMain+0x130>
 8008946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800894a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800894e:	ee17 2a90 	vmov	r2, s15
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	ee07 3a90 	vmov	s15, r3
 8008958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800895c:	4b36      	ldr	r3, [pc, #216]	; (8008a38 <SendGAMInputMain+0x134>)
 800895e:	edc3 7a00 	vstr	s15, [r3]
		encoder_position = encoder_position - encoder_position_offset;
 8008962:	4b35      	ldr	r3, [pc, #212]	; (8008a38 <SendGAMInputMain+0x134>)
 8008964:	ed93 7a00 	vldr	s14, [r3]
 8008968:	4b34      	ldr	r3, [pc, #208]	; (8008a3c <SendGAMInputMain+0x138>)
 800896a:	edd3 7a00 	vldr	s15, [r3]
 800896e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008972:	4b31      	ldr	r3, [pc, #196]	; (8008a38 <SendGAMInputMain+0x134>)
 8008974:	edc3 7a00 	vstr	s15, [r3]
	}
	if (select_suspended_mode == 1) {
 8008978:	4b2b      	ldr	r3, [pc, #172]	; (8008a28 <SendGAMInputMain+0x124>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d116      	bne.n	80089ae <SendGAMInputMain+0xaa>
		encoder_position = encoder_position_steps - encoder_position_down;
 8008980:	4b28      	ldr	r3, [pc, #160]	; (8008a24 <SendGAMInputMain+0x120>)
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	4b29      	ldr	r3, [pc, #164]	; (8008a2c <SendGAMInputMain+0x128>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008992:	4b29      	ldr	r3, [pc, #164]	; (8008a38 <SendGAMInputMain+0x134>)
 8008994:	edc3 7a00 	vstr	s15, [r3]
		encoder_position = encoder_position - encoder_position_offset;
 8008998:	4b27      	ldr	r3, [pc, #156]	; (8008a38 <SendGAMInputMain+0x134>)
 800899a:	ed93 7a00 	vldr	s14, [r3]
 800899e:	4b27      	ldr	r3, [pc, #156]	; (8008a3c <SendGAMInputMain+0x138>)
 80089a0:	edd3 7a00 	vldr	s15, [r3]
 80089a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089a8:	4b23      	ldr	r3, [pc, #140]	; (8008a38 <SendGAMInputMain+0x134>)
 80089aa:	edc3 7a00 	vstr	s15, [r3]
	}

	uint32_t pwm_count = L6474_Board_Pwm1GetCounter();
 80089ae:	f7fa fdf1 	bl	8003594 <L6474_Board_Pwm1GetCounter>
 80089b2:	61f8      	str	r0, [r7, #28]
	apply_acc_start_time = DWT->CYCCNT;
 80089b4:	4b22      	ldr	r3, [pc, #136]	; (8008a40 <SendGAMInputMain+0x13c>)
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	4a22      	ldr	r2, [pc, #136]	; (8008a44 <SendGAMInputMain+0x140>)
 80089ba:	6013      	str	r3, [r2, #0]


	DataFrame frame = {
 80089bc:	4b15      	ldr	r3, [pc, #84]	; (8008a14 <SendGAMInputMain+0x110>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	603b      	str	r3, [r7, #0]
 80089c2:	4b18      	ldr	r3, [pc, #96]	; (8008a24 <SendGAMInputMain+0x120>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	607b      	str	r3, [r7, #4]
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	60bb      	str	r3, [r7, #8]
 80089cc:	4b1d      	ldr	r3, [pc, #116]	; (8008a44 <SendGAMInputMain+0x140>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	4b1d      	ldr	r3, [pc, #116]	; (8008a48 <SendGAMInputMain+0x144>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	613b      	str	r3, [r7, #16]
 80089d8:	4b1c      	ldr	r3, [pc, #112]	; (8008a4c <SendGAMInputMain+0x148>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	617b      	str	r3, [r7, #20]
 80089de:	4b1c      	ldr	r3, [pc, #112]	; (8008a50 <SendGAMInputMain+0x14c>)
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	763b      	strb	r3, [r7, #24]
		LOOP_BACK_rotor_control_target_steps,
		LOOP_BACK_L6474_Board_Pwm1Period,
		LOOP_BACK_gpioState
	};

	memcpy(msg_cmd, &frame, sizeof(frame) );
 80089e4:	4b1b      	ldr	r3, [pc, #108]	; (8008a54 <SendGAMInputMain+0x150>)
 80089e6:	461c      	mov	r4, r3
 80089e8:	463d      	mov	r5, r7
 80089ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80089f2:	c403      	stmia	r4!, {r0, r1}
 80089f4:	7022      	strb	r2, [r4, #0]

	ret = HAL_UART_Transmit(&huart2, (uint8_t*) msg_cmd, sizeof(frame), HAL_MAX_DELAY);
 80089f6:	f04f 33ff 	mov.w	r3, #4294967295
 80089fa:	2219      	movs	r2, #25
 80089fc:	4915      	ldr	r1, [pc, #84]	; (8008a54 <SendGAMInputMain+0x150>)
 80089fe:	4816      	ldr	r0, [pc, #88]	; (8008a58 <SendGAMInputMain+0x154>)
 8008a00:	f7fd ffb0 	bl	8006964 <HAL_UART_Transmit>
 8008a04:	4603      	mov	r3, r0
 8008a06:	461a      	mov	r2, r3
 8008a08:	4b03      	ldr	r3, [pc, #12]	; (8008a18 <SendGAMInputMain+0x114>)
 8008a0a:	601a      	str	r2, [r3, #0]

}
 8008a0c:	bf00      	nop
 8008a0e:	3720      	adds	r7, #32
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bdb0      	pop	{r4, r5, r7, pc}
 8008a14:	20000fd0 	.word	0x20000fd0
 8008a18:	20000f74 	.word	0x20000f74
 8008a1c:	20001078 	.word	0x20001078
 8008a20:	20000f10 	.word	0x20000f10
 8008a24:	20001074 	.word	0x20001074
 8008a28:	200049dc 	.word	0x200049dc
 8008a2c:	2000108c 	.word	0x2000108c
 8008a30:	20008044 	.word	0x20008044
 8008a34:	43340000 	.word	0x43340000
 8008a38:	20001070 	.word	0x20001070
 8008a3c:	20001098 	.word	0x20001098
 8008a40:	e0001000 	.word	0xe0001000
 8008a44:	20000c58 	.word	0x20000c58
 8008a48:	20008064 	.word	0x20008064
 8008a4c:	2000806c 	.word	0x2000806c
 8008a50:	20008068 	.word	0x20008068
 8008a54:	20000e34 	.word	0x20000e34
 8008a58:	20000a78 	.word	0x20000a78

08008a5c <read_Frame>:

/*
 * Single integer value read
 */

int read_Frame() {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0

	int k;

	/* Number of bytes to be analyzed */
	uint16_t NumNewByte = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	80fb      	strh	r3, [r7, #6]

	RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 8008a66:	4b21      	ldr	r3, [pc, #132]	; (8008aec <read_Frame+0x90>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8008a70:	4a1f      	ldr	r2, [pc, #124]	; (8008af0 <read_Frame+0x94>)
 8008a72:	6013      	str	r3, [r2, #0]
	uint16_t LastPos  = RxBuffer_WriteIdx;
 8008a74:	4b1e      	ldr	r3, [pc, #120]	; (8008af0 <read_Frame+0x94>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	80bb      	strh	r3, [r7, #4]
	uint16_t StartPos = RxBuffer_ReadIdx;
 8008a7a:	4b1e      	ldr	r3, [pc, #120]	; (8008af4 <read_Frame+0x98>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	807b      	strh	r3, [r7, #2]

	/* Two index for ByteStuffing process  */
	uint16_t BuffIdx;

	if (LastPos >= StartPos) {
 8008a80:	88ba      	ldrh	r2, [r7, #4]
 8008a82:	887b      	ldrh	r3, [r7, #2]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d304      	bcc.n	8008a92 <read_Frame+0x36>
		NumNewByte = LastPos - StartPos;
 8008a88:	88ba      	ldrh	r2, [r7, #4]
 8008a8a:	887b      	ldrh	r3, [r7, #2]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	80fb      	strh	r3, [r7, #6]
 8008a90:	e005      	b.n	8008a9e <read_Frame+0x42>
	} else {
		NumNewByte = UART_RX_BUFFER_SIZE + LastPos - StartPos;
 8008a92:	88ba      	ldrh	r2, [r7, #4]
 8008a94:	887b      	ldrh	r3, [r7, #2]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	33c8      	adds	r3, #200	; 0xc8
 8008a9c:	80fb      	strh	r3, [r7, #6]
	}

	if( NumNewByte < sizeof(*rx_frame) ) return 0;
 8008a9e:	88fb      	ldrh	r3, [r7, #6]
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	d801      	bhi.n	8008aa8 <read_Frame+0x4c>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	e01d      	b.n	8008ae4 <read_Frame+0x88>

	NumNewByte = sizeof(*rx_frame);
 8008aa8:	2309      	movs	r3, #9
 8008aaa:	80fb      	strh	r3, [r7, #6]

	BuffIdx = StartPos;
 8008aac:	887b      	ldrh	r3, [r7, #2]
 8008aae:	803b      	strh	r3, [r7, #0]

	memcpy(rx_frameBuffer, RxBuffer+StartPos, NumNewByte );
 8008ab0:	887b      	ldrh	r3, [r7, #2]
 8008ab2:	4a11      	ldr	r2, [pc, #68]	; (8008af8 <read_Frame+0x9c>)
 8008ab4:	4413      	add	r3, r2
 8008ab6:	88fa      	ldrh	r2, [r7, #6]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4810      	ldr	r0, [pc, #64]	; (8008afc <read_Frame+0xa0>)
 8008abc:	f000 fbe2 	bl	8009284 <memcpy>
	rx_frame = (DataFrameReceive)rx_frameBuffer;
 8008ac0:	4b0f      	ldr	r3, [pc, #60]	; (8008b00 <read_Frame+0xa4>)
 8008ac2:	4a0e      	ldr	r2, [pc, #56]	; (8008afc <read_Frame+0xa0>)
 8008ac4:	601a      	str	r2, [r3, #0]

	RxBuffer_ReadIdx = (RxBuffer_ReadIdx + NumNewByte) % UART_RX_BUFFER_SIZE;
 8008ac6:	88fa      	ldrh	r2, [r7, #6]
 8008ac8:	4b0a      	ldr	r3, [pc, #40]	; (8008af4 <read_Frame+0x98>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	441a      	add	r2, r3
 8008ace:	4b0d      	ldr	r3, [pc, #52]	; (8008b04 <read_Frame+0xa8>)
 8008ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ad4:	099b      	lsrs	r3, r3, #6
 8008ad6:	21c8      	movs	r1, #200	; 0xc8
 8008ad8:	fb01 f303 	mul.w	r3, r1, r3
 8008adc:	1ad3      	subs	r3, r2, r3
 8008ade:	4a05      	ldr	r2, [pc, #20]	; (8008af4 <read_Frame+0x98>)
 8008ae0:	6013      	str	r3, [r2, #0]

	return 1;
 8008ae2:	2301      	movs	r3, #1

}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	20000ab8 	.word	0x20000ab8
 8008af0:	2000805c 	.word	0x2000805c
 8008af4:	20008058 	.word	0x20008058
 8008af8:	20000b80 	.word	0x20000b80
 8008afc:	20000c4c 	.word	0x20000c4c
 8008b00:	20000c48 	.word	0x20000c48
 8008b04:	51eb851f 	.word	0x51eb851f

08008b08 <ProcessGAMOutput>:

/*
 *Jawad Modification ======== ########################
 *Command processor
 */
void ProcessGAMOutput( void ){
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0


	if ( read_Frame() ) // Message found
 8008b0c:	f7ff ffa6 	bl	8008a5c <read_Frame>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d02d      	beq.n	8008b72 <ProcessGAMOutput+0x6a>
	{

		if( rx_frame->control_target_steps == 0 )
 8008b16:	4b18      	ldr	r3, [pc, #96]	; (8008b78 <ProcessGAMOutput+0x70>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d106      	bne.n	8008b2e <ProcessGAMOutput+0x26>
			L6474_Board_Pwm1SetPeriod(rx_frame->Pwm1Period);
 8008b20:	4b15      	ldr	r3, [pc, #84]	; (8008b78 <ProcessGAMOutput+0x70>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fa fd40 	bl	80035ac <L6474_Board_Pwm1SetPeriod>
 8008b2c:	e006      	b.n	8008b3c <ProcessGAMOutput+0x34>
		else
			BSP_MotorControl_GoTo(0,rx_frame->control_target_steps );
 8008b2e:	4b12      	ldr	r3, [pc, #72]	; (8008b78 <ProcessGAMOutput+0x70>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4619      	mov	r1, r3
 8008b36:	2000      	movs	r0, #0
 8008b38:	f7fb f826 	bl	8003b88 <BSP_MotorControl_GoTo>

		if( rx_frame->gpioState != UNKNOW_DIR )
 8008b3c:	4b0e      	ldr	r3, [pc, #56]	; (8008b78 <ProcessGAMOutput+0x70>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	7a1b      	ldrb	r3, [r3, #8]
 8008b42:	2bff      	cmp	r3, #255	; 0xff
 8008b44:	d006      	beq.n	8008b54 <ProcessGAMOutput+0x4c>
			L6474_Board_SetDirectionGpio(0, rx_frame->gpioState);
 8008b46:	4b0c      	ldr	r3, [pc, #48]	; (8008b78 <ProcessGAMOutput+0x70>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	7a1b      	ldrb	r3, [r3, #8]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	2000      	movs	r0, #0
 8008b50:	f7fa fe64 	bl	800381c <L6474_Board_SetDirectionGpio>

		LOOP_BACK_rotor_control_target_steps = rx_frame->control_target_steps;
 8008b54:	4b08      	ldr	r3, [pc, #32]	; (8008b78 <ProcessGAMOutput+0x70>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a08      	ldr	r2, [pc, #32]	; (8008b7c <ProcessGAMOutput+0x74>)
 8008b5c:	6013      	str	r3, [r2, #0]
		LOOP_BACK_gpioState = rx_frame->gpioState;
 8008b5e:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <ProcessGAMOutput+0x70>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	7a1a      	ldrb	r2, [r3, #8]
 8008b64:	4b06      	ldr	r3, [pc, #24]	; (8008b80 <ProcessGAMOutput+0x78>)
 8008b66:	701a      	strb	r2, [r3, #0]
		LOOP_BACK_L6474_Board_Pwm1Period = rx_frame->Pwm1Period;
 8008b68:	4b03      	ldr	r3, [pc, #12]	; (8008b78 <ProcessGAMOutput+0x70>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	4a05      	ldr	r2, [pc, #20]	; (8008b84 <ProcessGAMOutput+0x7c>)
 8008b70:	6013      	str	r3, [r2, #0]

	}
}
 8008b72:	bf00      	nop
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	20000c48 	.word	0x20000c48
 8008b7c:	20008064 	.word	0x20008064
 8008b80:	20008068 	.word	0x20008068
 8008b84:	2000806c 	.word	0x2000806c

08008b88 <HAL_SPI_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param[in] hspi SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08c      	sub	sp, #48	; 0x30
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hspi->Instance == SPIx)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a31      	ldr	r2, [pc, #196]	; (8008c5c <HAL_SPI_MspInit+0xd4>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d15b      	bne.n	8008c52 <HAL_SPI_MspInit+0xca>
  {  
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	61bb      	str	r3, [r7, #24]
 8008b9e:	4b30      	ldr	r3, [pc, #192]	; (8008c60 <HAL_SPI_MspInit+0xd8>)
 8008ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba2:	4a2f      	ldr	r2, [pc, #188]	; (8008c60 <HAL_SPI_MspInit+0xd8>)
 8008ba4:	f043 0301 	orr.w	r3, r3, #1
 8008ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8008baa:	4b2d      	ldr	r3, [pc, #180]	; (8008c60 <HAL_SPI_MspInit+0xd8>)
 8008bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	61bb      	str	r3, [r7, #24]
 8008bb4:	69bb      	ldr	r3, [r7, #24]
    SPIx_MISO_GPIO_CLK_ENABLE();
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	617b      	str	r3, [r7, #20]
 8008bba:	4b29      	ldr	r3, [pc, #164]	; (8008c60 <HAL_SPI_MspInit+0xd8>)
 8008bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbe:	4a28      	ldr	r2, [pc, #160]	; (8008c60 <HAL_SPI_MspInit+0xd8>)
 8008bc0:	f043 0301 	orr.w	r3, r3, #1
 8008bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8008bc6:	4b26      	ldr	r3, [pc, #152]	; (8008c60 <HAL_SPI_MspInit+0xd8>)
 8008bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bca:	f003 0301 	and.w	r3, r3, #1
 8008bce:	617b      	str	r3, [r7, #20]
 8008bd0:	697b      	ldr	r3, [r7, #20]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	4b22      	ldr	r3, [pc, #136]	; (8008c60 <HAL_SPI_MspInit+0xd8>)
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	4a21      	ldr	r2, [pc, #132]	; (8008c60 <HAL_SPI_MspInit+0xd8>)
 8008bdc:	f043 0301 	orr.w	r3, r3, #1
 8008be0:	6313      	str	r3, [r2, #48]	; 0x30
 8008be2:	4b1f      	ldr	r3, [pc, #124]	; (8008c60 <HAL_SPI_MspInit+0xd8>)
 8008be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	613b      	str	r3, [r7, #16]
 8008bec:	693b      	ldr	r3, [r7, #16]
    /* Enable SPI clock */
    SPIx_CLK_ENABLE(); 
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	4b1b      	ldr	r3, [pc, #108]	; (8008c60 <HAL_SPI_MspInit+0xd8>)
 8008bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf6:	4a1a      	ldr	r2, [pc, #104]	; (8008c60 <HAL_SPI_MspInit+0xd8>)
 8008bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8008bfe:	4b18      	ldr	r3, [pc, #96]	; (8008c60 <HAL_SPI_MspInit+0xd8>)
 8008c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	68fb      	ldr	r3, [r7, #12]
    
    /*##-2- Configure peripheral GPIO ##########################################*/  
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 8008c0a:	2320      	movs	r3, #32
 8008c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8008c0e:	2302      	movs	r3, #2
 8008c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8008c12:	2300      	movs	r3, #0
 8008c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed     = GPIO_SPEED_MEDIUM;
 8008c16:	2301      	movs	r3, #1
 8008c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8008c1a:	2305      	movs	r3, #5
 8008c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8008c1e:	f107 031c 	add.w	r3, r7, #28
 8008c22:	4619      	mov	r1, r3
 8008c24:	480f      	ldr	r0, [pc, #60]	; (8008c64 <HAL_SPI_MspInit+0xdc>)
 8008c26:	f7fb ff27 	bl	8004a78 <HAL_GPIO_Init>
      
    /* SPI MISO GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8008c2a:	2340      	movs	r3, #64	; 0x40
 8008c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8008c2e:	2305      	movs	r3, #5
 8008c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8008c32:	f107 031c 	add.w	r3, r7, #28
 8008c36:	4619      	mov	r1, r3
 8008c38:	480a      	ldr	r0, [pc, #40]	; (8008c64 <HAL_SPI_MspInit+0xdc>)
 8008c3a:	f7fb ff1d 	bl	8004a78 <HAL_GPIO_Init>
    
    /* SPI MOSI GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8008c3e:	2380      	movs	r3, #128	; 0x80
 8008c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8008c42:	2305      	movs	r3, #5
 8008c44:	62fb      	str	r3, [r7, #44]	; 0x2c
      
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);   
 8008c46:	f107 031c 	add.w	r3, r7, #28
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	4805      	ldr	r0, [pc, #20]	; (8008c64 <HAL_SPI_MspInit+0xdc>)
 8008c4e:	f7fb ff13 	bl	8004a78 <HAL_GPIO_Init>
  }
}
 8008c52:	bf00      	nop
 8008c54:	3730      	adds	r7, #48	; 0x30
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	40013000 	.word	0x40013000
 8008c60:	40023800 	.word	0x40023800
 8008c64:	40020000 	.word	0x40020000

08008c68 <HAL_TIM_PWM_MspInit>:
  * @brief PWM MSP Initialization 
  * @param[in] htim_pwm PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c78:	d123      	bne.n	8008cc2 <HAL_TIM_PWM_MspInit+0x5a>
	  {
			GPIO_InitTypeDef GPIO_InitStruct;
			/* Peripheral clock enable */
			__BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1_CLCK_ENABLE();
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60bb      	str	r3, [r7, #8]
 8008c7e:	4b13      	ldr	r3, [pc, #76]	; (8008ccc <HAL_TIM_PWM_MspInit+0x64>)
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	4a12      	ldr	r2, [pc, #72]	; (8008ccc <HAL_TIM_PWM_MspInit+0x64>)
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	6413      	str	r3, [r2, #64]	; 0x40
 8008c8a:	4b10      	ldr	r3, [pc, #64]	; (8008ccc <HAL_TIM_PWM_MspInit+0x64>)
 8008c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	60bb      	str	r3, [r7, #8]
 8008c94:	68bb      	ldr	r3, [r7, #8]

			/* GPIO configuration */
			GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_1_PIN;
 8008c96:	2380      	movs	r3, #128	; 0x80
 8008c98:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;//GPIO_MODE_AF_PP;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	613b      	str	r3, [r7, #16]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	617b      	str	r3, [r7, #20]
			GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	61bb      	str	r3, [r7, #24]
			//GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AFx_TIMx_PWM1;
			HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PWM_1_PORT, &GPIO_InitStruct);
 8008ca6:	f107 030c 	add.w	r3, r7, #12
 8008caa:	4619      	mov	r1, r3
 8008cac:	4808      	ldr	r0, [pc, #32]	; (8008cd0 <HAL_TIM_PWM_MspInit+0x68>)
 8008cae:	f7fb fee3 	bl	8004a78 <HAL_GPIO_Init>

			/* Set Interrupt Group Priority of Timer Interrupt*/
			HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_PWM1_IRQn, 4, 0);
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2104      	movs	r1, #4
 8008cb6:	201c      	movs	r0, #28
 8008cb8:	f7fb fb2f 	bl	800431a <HAL_NVIC_SetPriority>

			/* Enable the timer global Interrupt */
			HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_PWM1_IRQn);
 8008cbc:	201c      	movs	r0, #28
 8008cbe:	f7fb fb48 	bl	8004352 <HAL_NVIC_EnableIRQ>
	  }
}
 8008cc2:	bf00      	nop
 8008cc4:	3720      	adds	r7, #32
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	40023800 	.word	0x40023800
 8008cd0:	40020800 	.word	0x40020800

08008cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief PWM Callback
  * @param[in] htim PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  if ((htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1)&& (htim->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce4:	d11c      	bne.n	8008d20 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	7e1b      	ldrb	r3, [r3, #24]
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d118      	bne.n	8008d20 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>
  {
	int delay_pulse = Delay_Pulse();
 8008cee:	f7fe fb0d 	bl	800730c <Delay_Pulse>
 8008cf2:	60f8      	str	r0, [r7, #12]
	if (delay_pulse == 0){
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d107      	bne.n	8008d0a <HAL_TIM_PWM_PulseFinishedCallback+0x36>
		HAL_GPIO_TogglePin(BSP_MOTOR_CONTROL_BOARD_PWM_1_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_1_PIN);
 8008cfa:	2180      	movs	r1, #128	; 0x80
 8008cfc:	480a      	ldr	r0, [pc, #40]	; (8008d28 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 8008cfe:	f7fc f858 	bl	8004db2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BSP_MOTOR_CONTROL_BOARD_PWM_1_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_1_PIN);
 8008d02:	2180      	movs	r1, #128	; 0x80
 8008d04:	4808      	ldr	r0, [pc, #32]	; (8008d28 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 8008d06:	f7fc f854 	bl	8004db2 <HAL_GPIO_TogglePin>
	}
    if (BSP_MotorControl_GetDeviceState(0) != INACTIVE)
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	f7fa fef4 	bl	8003af8 <BSP_MotorControl_GetDeviceState>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b08      	cmp	r3, #8
 8008d14:	d002      	beq.n	8008d1c <HAL_TIM_PWM_PulseFinishedCallback+0x48>
    {
    	BSP_MotorControl_StepClockHandler(0);
 8008d16:	2000      	movs	r0, #0
 8008d18:	f7fb f860 	bl	8003ddc <BSP_MotorControl_StepClockHandler>
    }
    Main_StepClockHandler();
 8008d1c:	f7fe fb08 	bl	8007330 <Main_StepClockHandler>
  }
}
 8008d20:	bf00      	nop
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	40020800 	.word	0x40020800

08008d2c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b088      	sub	sp, #32
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM3)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a12      	ldr	r2, [pc, #72]	; (8008d84 <HAL_TIM_Encoder_MspInit+0x58>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d11d      	bne.n	8008d7a <HAL_TIM_Encoder_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008d3e:	2300      	movs	r3, #0
 8008d40:	60bb      	str	r3, [r7, #8]
 8008d42:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <HAL_TIM_Encoder_MspInit+0x5c>)
 8008d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d46:	4a10      	ldr	r2, [pc, #64]	; (8008d88 <HAL_TIM_Encoder_MspInit+0x5c>)
 8008d48:	f043 0302 	orr.w	r3, r3, #2
 8008d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8008d4e:	4b0e      	ldr	r3, [pc, #56]	; (8008d88 <HAL_TIM_Encoder_MspInit+0x5c>)
 8008d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d52:	f003 0302 	and.w	r3, r3, #2
 8008d56:	60bb      	str	r3, [r7, #8]
 8008d58:	68bb      	ldr	r3, [r7, #8]

    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8008d5a:	2330      	movs	r3, #48	; 0x30
 8008d5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d5e:	2302      	movs	r3, #2
 8008d60:	613b      	str	r3, [r7, #16]
    // GPIO_InitStruct.Pull = GPIO_NOPULL;
       /*
        * Pull Up Set for Encoder with Open Collector Output
        */
       GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008d62:	2301      	movs	r3, #1
 8008d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d66:	2303      	movs	r3, #3
 8008d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d6e:	f107 030c 	add.w	r3, r7, #12
 8008d72:	4619      	mov	r1, r3
 8008d74:	4805      	ldr	r0, [pc, #20]	; (8008d8c <HAL_TIM_Encoder_MspInit+0x60>)
 8008d76:	f7fb fe7f 	bl	8004a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008d7a:	bf00      	nop
 8008d7c:	3720      	adds	r7, #32
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	40000400 	.word	0x40000400
 8008d88:	40023800 	.word	0x40023800
 8008d8c:	40020400 	.word	0x40020400

08008d90 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b088      	sub	sp, #32
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a16      	ldr	r2, [pc, #88]	; (8008df8 <HAL_UART_MspInit+0x68>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d125      	bne.n	8008dee <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008da2:	2300      	movs	r3, #0
 8008da4:	60bb      	str	r3, [r7, #8]
 8008da6:	4b15      	ldr	r3, [pc, #84]	; (8008dfc <HAL_UART_MspInit+0x6c>)
 8008da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008daa:	4a14      	ldr	r2, [pc, #80]	; (8008dfc <HAL_UART_MspInit+0x6c>)
 8008dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008db0:	6413      	str	r3, [r2, #64]	; 0x40
 8008db2:	4b12      	ldr	r3, [pc, #72]	; (8008dfc <HAL_UART_MspInit+0x6c>)
 8008db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dba:	60bb      	str	r3, [r7, #8]
 8008dbc:	68bb      	ldr	r3, [r7, #8]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008dbe:	230c      	movs	r3, #12
 8008dc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008dca:	2302      	movs	r3, #2
 8008dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008dce:	2307      	movs	r3, #7
 8008dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dd2:	f107 030c 	add.w	r3, r7, #12
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	4809      	ldr	r0, [pc, #36]	; (8008e00 <HAL_UART_MspInit+0x70>)
 8008dda:	f7fb fe4d 	bl	8004a78 <HAL_GPIO_Init>

    /* Configure the NVIC for UART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8008dde:	2201      	movs	r2, #1
 8008de0:	2100      	movs	r1, #0
 8008de2:	2026      	movs	r0, #38	; 0x26
 8008de4:	f7fb fa99 	bl	800431a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008de8:	2026      	movs	r0, #38	; 0x26
 8008dea:	f7fb fab2 	bl	8004352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008dee:	bf00      	nop
 8008df0:	3720      	adds	r7, #32
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	40004400 	.word	0x40004400
 8008dfc:	40023800 	.word	0x40023800
 8008e00:	40020000 	.word	0x40020000

08008e04 <HAL_GPIO_EXTI_Callback>:
  * @brief External Line Callback 
  * @param[in] GPIO_Pin pin number
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BSP_MOTOR_CONTROL_BOARD_FLAG_PIN)
 8008e0e:	88fb      	ldrh	r3, [r7, #6]
 8008e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e14:	d101      	bne.n	8008e1a <HAL_GPIO_EXTI_Callback+0x16>
  {
    BSP_MotorControl_FlagInterruptHandler();
 8008e16:	f7fa fe55 	bl	8003ac4 <BSP_MotorControl_FlagInterruptHandler>
  }
 }
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8008e22:	b480      	push	{r7}
 8008e24:	af00      	add	r7, sp, #0
}
 8008e26:	bf00      	nop
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8008e34:	e7fe      	b.n	8008e34 <HardFault_Handler+0x4>

08008e36 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8008e36:	b480      	push	{r7}
 8008e38:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8008e3a:	e7fe      	b.n	8008e3a <MemManage_Handler+0x4>

08008e3c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8008e40:	e7fe      	b.n	8008e40 <BusFault_Handler+0x4>

08008e42 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8008e42:	b480      	push	{r7}
 8008e44:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8008e46:	e7fe      	b.n	8008e46 <UsageFault_Handler+0x4>

08008e48 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	af00      	add	r7, sp, #0
}
 8008e4c:	bf00      	nop
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8008e56:	b480      	push	{r7}
 8008e58:	af00      	add	r7, sp, #0
}
 8008e5a:	bf00      	nop
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8008e64:	b480      	push	{r7}
 8008e66:	af00      	add	r7, sp, #0
}
 8008e68:	bf00      	nop
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8008e76:	f7fb f935 	bl	80040e4 <HAL_IncTick>
}
 8008e7a:	bf00      	nop
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <EXTI15_10_IRQHandler>:
  * @brief  This function handles interrupt for External lines 10 to 15
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8008e82:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008e86:	f7fb ffa7 	bl	8004dd8 <HAL_GPIO_EXTI_IRQHandler>
}
 8008e8a:	bf00      	nop
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <TIM2_IRQHandler>:
  * @brief  This function handles TIM2 interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm1);
 8008e94:	4802      	ldr	r0, [pc, #8]	; (8008ea0 <TIM2_IRQHandler+0x10>)
 8008e96:	f7fd f889 	bl	8005fac <HAL_TIM_IRQHandler>
}
 8008e9a:	bf00      	nop
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20000964 	.word	0x20000964

08008ea4 <TIM3_IRQHandler>:
  * @brief  This function handles TIM3 interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm2);
 8008ea8:	4802      	ldr	r0, [pc, #8]	; (8008eb4 <TIM3_IRQHandler+0x10>)
 8008eaa:	f7fd f87f 	bl	8005fac <HAL_TIM_IRQHandler>
}
 8008eae:	bf00      	nop
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	200009a0 	.word	0x200009a0

08008eb8 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm3);
 8008ebc:	4802      	ldr	r0, [pc, #8]	; (8008ec8 <TIM4_IRQHandler+0x10>)
 8008ebe:	f7fd f875 	bl	8005fac <HAL_TIM_IRQHandler>
}
 8008ec2:	bf00      	nop
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	200009dc 	.word	0x200009dc

08008ecc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008ed0:	4802      	ldr	r0, [pc, #8]	; (8008edc <DMA1_Stream5_IRQHandler+0x10>)
 8008ed2:	f7fb fb67 	bl	80045a4 <HAL_DMA_IRQHandler>
}
 8008ed6:	bf00      	nop
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	20000ab8 	.word	0x20000ab8

08008ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008f18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008ee4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008ee6:	e003      	b.n	8008ef0 <LoopCopyDataInit>

08008ee8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008ee8:	4b0c      	ldr	r3, [pc, #48]	; (8008f1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008eea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008eec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008eee:	3104      	adds	r1, #4

08008ef0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008ef0:	480b      	ldr	r0, [pc, #44]	; (8008f20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008ef2:	4b0c      	ldr	r3, [pc, #48]	; (8008f24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008ef4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008ef6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008ef8:	d3f6      	bcc.n	8008ee8 <CopyDataInit>
  ldr  r2, =_sbss
 8008efa:	4a0b      	ldr	r2, [pc, #44]	; (8008f28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008efc:	e002      	b.n	8008f04 <LoopFillZerobss>

08008efe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008efe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008f00:	f842 3b04 	str.w	r3, [r2], #4

08008f04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008f04:	4b09      	ldr	r3, [pc, #36]	; (8008f2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008f06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008f08:	d3f9      	bcc.n	8008efe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008f0a:	f7fb f85b 	bl	8003fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008f0e:	f000 f991 	bl	8009234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008f12:	f7ff fa29 	bl	8008368 <main>
  bx  lr    
 8008f16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008f18:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8008f1c:	0800ec70 	.word	0x0800ec70
  ldr  r0, =_sdata
 8008f20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008f24:	20000850 	.word	0x20000850
  ldr  r2, =_sbss
 8008f28:	20000850 	.word	0x20000850
  ldr  r3, = _ebss
 8008f2c:	20008380 	.word	0x20008380

08008f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008f30:	e7fe      	b.n	8008f30 <ADC_IRQHandler>
	...

08008f34 <std>:
 8008f34:	2300      	movs	r3, #0
 8008f36:	b510      	push	{r4, lr}
 8008f38:	4604      	mov	r4, r0
 8008f3a:	e9c0 3300 	strd	r3, r3, [r0]
 8008f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f42:	6083      	str	r3, [r0, #8]
 8008f44:	8181      	strh	r1, [r0, #12]
 8008f46:	6643      	str	r3, [r0, #100]	; 0x64
 8008f48:	81c2      	strh	r2, [r0, #14]
 8008f4a:	6183      	str	r3, [r0, #24]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	2208      	movs	r2, #8
 8008f50:	305c      	adds	r0, #92	; 0x5c
 8008f52:	f000 f914 	bl	800917e <memset>
 8008f56:	4b0d      	ldr	r3, [pc, #52]	; (8008f8c <std+0x58>)
 8008f58:	6223      	str	r3, [r4, #32]
 8008f5a:	4b0d      	ldr	r3, [pc, #52]	; (8008f90 <std+0x5c>)
 8008f5c:	6263      	str	r3, [r4, #36]	; 0x24
 8008f5e:	4b0d      	ldr	r3, [pc, #52]	; (8008f94 <std+0x60>)
 8008f60:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f62:	4b0d      	ldr	r3, [pc, #52]	; (8008f98 <std+0x64>)
 8008f64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f66:	4b0d      	ldr	r3, [pc, #52]	; (8008f9c <std+0x68>)
 8008f68:	61e4      	str	r4, [r4, #28]
 8008f6a:	429c      	cmp	r4, r3
 8008f6c:	d006      	beq.n	8008f7c <std+0x48>
 8008f6e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008f72:	4294      	cmp	r4, r2
 8008f74:	d002      	beq.n	8008f7c <std+0x48>
 8008f76:	33d0      	adds	r3, #208	; 0xd0
 8008f78:	429c      	cmp	r4, r3
 8008f7a:	d105      	bne.n	8008f88 <std+0x54>
 8008f7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f84:	f000 b97a 	b.w	800927c <__retarget_lock_init_recursive>
 8008f88:	bd10      	pop	{r4, pc}
 8008f8a:	bf00      	nop
 8008f8c:	080090f9 	.word	0x080090f9
 8008f90:	0800911b 	.word	0x0800911b
 8008f94:	08009153 	.word	0x08009153
 8008f98:	08009177 	.word	0x08009177
 8008f9c:	20008070 	.word	0x20008070

08008fa0 <stdio_exit_handler>:
 8008fa0:	4a02      	ldr	r2, [pc, #8]	; (8008fac <stdio_exit_handler+0xc>)
 8008fa2:	4903      	ldr	r1, [pc, #12]	; (8008fb0 <stdio_exit_handler+0x10>)
 8008fa4:	4803      	ldr	r0, [pc, #12]	; (8008fb4 <stdio_exit_handler+0x14>)
 8008fa6:	f000 b869 	b.w	800907c <_fwalk_sglue>
 8008faa:	bf00      	nop
 8008fac:	2000019c 	.word	0x2000019c
 8008fb0:	0800b3ed 	.word	0x0800b3ed
 8008fb4:	20000318 	.word	0x20000318

08008fb8 <cleanup_stdio>:
 8008fb8:	6841      	ldr	r1, [r0, #4]
 8008fba:	4b0c      	ldr	r3, [pc, #48]	; (8008fec <cleanup_stdio+0x34>)
 8008fbc:	4299      	cmp	r1, r3
 8008fbe:	b510      	push	{r4, lr}
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	d001      	beq.n	8008fc8 <cleanup_stdio+0x10>
 8008fc4:	f002 fa12 	bl	800b3ec <_fclose_r>
 8008fc8:	68a1      	ldr	r1, [r4, #8]
 8008fca:	4b09      	ldr	r3, [pc, #36]	; (8008ff0 <cleanup_stdio+0x38>)
 8008fcc:	4299      	cmp	r1, r3
 8008fce:	d002      	beq.n	8008fd6 <cleanup_stdio+0x1e>
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f002 fa0b 	bl	800b3ec <_fclose_r>
 8008fd6:	68e1      	ldr	r1, [r4, #12]
 8008fd8:	4b06      	ldr	r3, [pc, #24]	; (8008ff4 <cleanup_stdio+0x3c>)
 8008fda:	4299      	cmp	r1, r3
 8008fdc:	d004      	beq.n	8008fe8 <cleanup_stdio+0x30>
 8008fde:	4620      	mov	r0, r4
 8008fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe4:	f002 ba02 	b.w	800b3ec <_fclose_r>
 8008fe8:	bd10      	pop	{r4, pc}
 8008fea:	bf00      	nop
 8008fec:	20008070 	.word	0x20008070
 8008ff0:	200080d8 	.word	0x200080d8
 8008ff4:	20008140 	.word	0x20008140

08008ff8 <global_stdio_init.part.0>:
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	; (8009028 <global_stdio_init.part.0+0x30>)
 8008ffc:	4c0b      	ldr	r4, [pc, #44]	; (800902c <global_stdio_init.part.0+0x34>)
 8008ffe:	4a0c      	ldr	r2, [pc, #48]	; (8009030 <global_stdio_init.part.0+0x38>)
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	4620      	mov	r0, r4
 8009004:	2200      	movs	r2, #0
 8009006:	2104      	movs	r1, #4
 8009008:	f7ff ff94 	bl	8008f34 <std>
 800900c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009010:	2201      	movs	r2, #1
 8009012:	2109      	movs	r1, #9
 8009014:	f7ff ff8e 	bl	8008f34 <std>
 8009018:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800901c:	2202      	movs	r2, #2
 800901e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009022:	2112      	movs	r1, #18
 8009024:	f7ff bf86 	b.w	8008f34 <std>
 8009028:	200081a8 	.word	0x200081a8
 800902c:	20008070 	.word	0x20008070
 8009030:	08008fa1 	.word	0x08008fa1

08009034 <__sfp_lock_acquire>:
 8009034:	4801      	ldr	r0, [pc, #4]	; (800903c <__sfp_lock_acquire+0x8>)
 8009036:	f000 b923 	b.w	8009280 <__retarget_lock_acquire_recursive>
 800903a:	bf00      	nop
 800903c:	200081b2 	.word	0x200081b2

08009040 <__sfp_lock_release>:
 8009040:	4801      	ldr	r0, [pc, #4]	; (8009048 <__sfp_lock_release+0x8>)
 8009042:	f000 b91e 	b.w	8009282 <__retarget_lock_release_recursive>
 8009046:	bf00      	nop
 8009048:	200081b2 	.word	0x200081b2

0800904c <__sinit>:
 800904c:	b510      	push	{r4, lr}
 800904e:	4604      	mov	r4, r0
 8009050:	f7ff fff0 	bl	8009034 <__sfp_lock_acquire>
 8009054:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009056:	b11b      	cbz	r3, 8009060 <__sinit+0x14>
 8009058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800905c:	f7ff bff0 	b.w	8009040 <__sfp_lock_release>
 8009060:	4b04      	ldr	r3, [pc, #16]	; (8009074 <__sinit+0x28>)
 8009062:	6363      	str	r3, [r4, #52]	; 0x34
 8009064:	4b04      	ldr	r3, [pc, #16]	; (8009078 <__sinit+0x2c>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1f5      	bne.n	8009058 <__sinit+0xc>
 800906c:	f7ff ffc4 	bl	8008ff8 <global_stdio_init.part.0>
 8009070:	e7f2      	b.n	8009058 <__sinit+0xc>
 8009072:	bf00      	nop
 8009074:	08008fb9 	.word	0x08008fb9
 8009078:	200081a8 	.word	0x200081a8

0800907c <_fwalk_sglue>:
 800907c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009080:	4607      	mov	r7, r0
 8009082:	4688      	mov	r8, r1
 8009084:	4614      	mov	r4, r2
 8009086:	2600      	movs	r6, #0
 8009088:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800908c:	f1b9 0901 	subs.w	r9, r9, #1
 8009090:	d505      	bpl.n	800909e <_fwalk_sglue+0x22>
 8009092:	6824      	ldr	r4, [r4, #0]
 8009094:	2c00      	cmp	r4, #0
 8009096:	d1f7      	bne.n	8009088 <_fwalk_sglue+0xc>
 8009098:	4630      	mov	r0, r6
 800909a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d907      	bls.n	80090b4 <_fwalk_sglue+0x38>
 80090a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090a8:	3301      	adds	r3, #1
 80090aa:	d003      	beq.n	80090b4 <_fwalk_sglue+0x38>
 80090ac:	4629      	mov	r1, r5
 80090ae:	4638      	mov	r0, r7
 80090b0:	47c0      	blx	r8
 80090b2:	4306      	orrs	r6, r0
 80090b4:	3568      	adds	r5, #104	; 0x68
 80090b6:	e7e9      	b.n	800908c <_fwalk_sglue+0x10>

080090b8 <sprintf>:
 80090b8:	b40e      	push	{r1, r2, r3}
 80090ba:	b500      	push	{lr}
 80090bc:	b09c      	sub	sp, #112	; 0x70
 80090be:	ab1d      	add	r3, sp, #116	; 0x74
 80090c0:	9002      	str	r0, [sp, #8]
 80090c2:	9006      	str	r0, [sp, #24]
 80090c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090c8:	4809      	ldr	r0, [pc, #36]	; (80090f0 <sprintf+0x38>)
 80090ca:	9107      	str	r1, [sp, #28]
 80090cc:	9104      	str	r1, [sp, #16]
 80090ce:	4909      	ldr	r1, [pc, #36]	; (80090f4 <sprintf+0x3c>)
 80090d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80090d4:	9105      	str	r1, [sp, #20]
 80090d6:	6800      	ldr	r0, [r0, #0]
 80090d8:	9301      	str	r3, [sp, #4]
 80090da:	a902      	add	r1, sp, #8
 80090dc:	f000 ff98 	bl	800a010 <_svfprintf_r>
 80090e0:	9b02      	ldr	r3, [sp, #8]
 80090e2:	2200      	movs	r2, #0
 80090e4:	701a      	strb	r2, [r3, #0]
 80090e6:	b01c      	add	sp, #112	; 0x70
 80090e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80090ec:	b003      	add	sp, #12
 80090ee:	4770      	bx	lr
 80090f0:	20000438 	.word	0x20000438
 80090f4:	ffff0208 	.word	0xffff0208

080090f8 <__sread>:
 80090f8:	b510      	push	{r4, lr}
 80090fa:	460c      	mov	r4, r1
 80090fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009100:	f000 f86e 	bl	80091e0 <_read_r>
 8009104:	2800      	cmp	r0, #0
 8009106:	bfab      	itete	ge
 8009108:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800910a:	89a3      	ldrhlt	r3, [r4, #12]
 800910c:	181b      	addge	r3, r3, r0
 800910e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009112:	bfac      	ite	ge
 8009114:	6523      	strge	r3, [r4, #80]	; 0x50
 8009116:	81a3      	strhlt	r3, [r4, #12]
 8009118:	bd10      	pop	{r4, pc}

0800911a <__swrite>:
 800911a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800911e:	461f      	mov	r7, r3
 8009120:	898b      	ldrh	r3, [r1, #12]
 8009122:	05db      	lsls	r3, r3, #23
 8009124:	4605      	mov	r5, r0
 8009126:	460c      	mov	r4, r1
 8009128:	4616      	mov	r6, r2
 800912a:	d505      	bpl.n	8009138 <__swrite+0x1e>
 800912c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009130:	2302      	movs	r3, #2
 8009132:	2200      	movs	r2, #0
 8009134:	f000 f842 	bl	80091bc <_lseek_r>
 8009138:	89a3      	ldrh	r3, [r4, #12]
 800913a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800913e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	4632      	mov	r2, r6
 8009146:	463b      	mov	r3, r7
 8009148:	4628      	mov	r0, r5
 800914a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800914e:	f000 b859 	b.w	8009204 <_write_r>

08009152 <__sseek>:
 8009152:	b510      	push	{r4, lr}
 8009154:	460c      	mov	r4, r1
 8009156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800915a:	f000 f82f 	bl	80091bc <_lseek_r>
 800915e:	1c43      	adds	r3, r0, #1
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	bf15      	itete	ne
 8009164:	6520      	strne	r0, [r4, #80]	; 0x50
 8009166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800916a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800916e:	81a3      	strheq	r3, [r4, #12]
 8009170:	bf18      	it	ne
 8009172:	81a3      	strhne	r3, [r4, #12]
 8009174:	bd10      	pop	{r4, pc}

08009176 <__sclose>:
 8009176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800917a:	f000 b80f 	b.w	800919c <_close_r>

0800917e <memset>:
 800917e:	4402      	add	r2, r0
 8009180:	4603      	mov	r3, r0
 8009182:	4293      	cmp	r3, r2
 8009184:	d100      	bne.n	8009188 <memset+0xa>
 8009186:	4770      	bx	lr
 8009188:	f803 1b01 	strb.w	r1, [r3], #1
 800918c:	e7f9      	b.n	8009182 <memset+0x4>
	...

08009190 <__locale_mb_cur_max>:
 8009190:	4b01      	ldr	r3, [pc, #4]	; (8009198 <__locale_mb_cur_max+0x8>)
 8009192:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8009196:	4770      	bx	lr
 8009198:	200001a8 	.word	0x200001a8

0800919c <_close_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4d06      	ldr	r5, [pc, #24]	; (80091b8 <_close_r+0x1c>)
 80091a0:	2300      	movs	r3, #0
 80091a2:	4604      	mov	r4, r0
 80091a4:	4608      	mov	r0, r1
 80091a6:	602b      	str	r3, [r5, #0]
 80091a8:	f004 fc30 	bl	800da0c <_close>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d102      	bne.n	80091b6 <_close_r+0x1a>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	b103      	cbz	r3, 80091b6 <_close_r+0x1a>
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
 80091b8:	200081ac 	.word	0x200081ac

080091bc <_lseek_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	4d07      	ldr	r5, [pc, #28]	; (80091dc <_lseek_r+0x20>)
 80091c0:	4604      	mov	r4, r0
 80091c2:	4608      	mov	r0, r1
 80091c4:	4611      	mov	r1, r2
 80091c6:	2200      	movs	r2, #0
 80091c8:	602a      	str	r2, [r5, #0]
 80091ca:	461a      	mov	r2, r3
 80091cc:	f004 fc46 	bl	800da5c <_lseek>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d102      	bne.n	80091da <_lseek_r+0x1e>
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	b103      	cbz	r3, 80091da <_lseek_r+0x1e>
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	200081ac 	.word	0x200081ac

080091e0 <_read_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4d07      	ldr	r5, [pc, #28]	; (8009200 <_read_r+0x20>)
 80091e4:	4604      	mov	r4, r0
 80091e6:	4608      	mov	r0, r1
 80091e8:	4611      	mov	r1, r2
 80091ea:	2200      	movs	r2, #0
 80091ec:	602a      	str	r2, [r5, #0]
 80091ee:	461a      	mov	r2, r3
 80091f0:	f004 fc3c 	bl	800da6c <_read>
 80091f4:	1c43      	adds	r3, r0, #1
 80091f6:	d102      	bne.n	80091fe <_read_r+0x1e>
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	b103      	cbz	r3, 80091fe <_read_r+0x1e>
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	bd38      	pop	{r3, r4, r5, pc}
 8009200:	200081ac 	.word	0x200081ac

08009204 <_write_r>:
 8009204:	b538      	push	{r3, r4, r5, lr}
 8009206:	4d07      	ldr	r5, [pc, #28]	; (8009224 <_write_r+0x20>)
 8009208:	4604      	mov	r4, r0
 800920a:	4608      	mov	r0, r1
 800920c:	4611      	mov	r1, r2
 800920e:	2200      	movs	r2, #0
 8009210:	602a      	str	r2, [r5, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	f004 fc40 	bl	800da98 <_write>
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	d102      	bne.n	8009222 <_write_r+0x1e>
 800921c:	682b      	ldr	r3, [r5, #0]
 800921e:	b103      	cbz	r3, 8009222 <_write_r+0x1e>
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	bd38      	pop	{r3, r4, r5, pc}
 8009224:	200081ac 	.word	0x200081ac

08009228 <__errno>:
 8009228:	4b01      	ldr	r3, [pc, #4]	; (8009230 <__errno+0x8>)
 800922a:	6818      	ldr	r0, [r3, #0]
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	20000438 	.word	0x20000438

08009234 <__libc_init_array>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	4d0d      	ldr	r5, [pc, #52]	; (800926c <__libc_init_array+0x38>)
 8009238:	4c0d      	ldr	r4, [pc, #52]	; (8009270 <__libc_init_array+0x3c>)
 800923a:	1b64      	subs	r4, r4, r5
 800923c:	10a4      	asrs	r4, r4, #2
 800923e:	2600      	movs	r6, #0
 8009240:	42a6      	cmp	r6, r4
 8009242:	d109      	bne.n	8009258 <__libc_init_array+0x24>
 8009244:	4d0b      	ldr	r5, [pc, #44]	; (8009274 <__libc_init_array+0x40>)
 8009246:	4c0c      	ldr	r4, [pc, #48]	; (8009278 <__libc_init_array+0x44>)
 8009248:	f004 fc30 	bl	800daac <_init>
 800924c:	1b64      	subs	r4, r4, r5
 800924e:	10a4      	asrs	r4, r4, #2
 8009250:	2600      	movs	r6, #0
 8009252:	42a6      	cmp	r6, r4
 8009254:	d105      	bne.n	8009262 <__libc_init_array+0x2e>
 8009256:	bd70      	pop	{r4, r5, r6, pc}
 8009258:	f855 3b04 	ldr.w	r3, [r5], #4
 800925c:	4798      	blx	r3
 800925e:	3601      	adds	r6, #1
 8009260:	e7ee      	b.n	8009240 <__libc_init_array+0xc>
 8009262:	f855 3b04 	ldr.w	r3, [r5], #4
 8009266:	4798      	blx	r3
 8009268:	3601      	adds	r6, #1
 800926a:	e7f2      	b.n	8009252 <__libc_init_array+0x1e>
 800926c:	0800ec64 	.word	0x0800ec64
 8009270:	0800ec64 	.word	0x0800ec64
 8009274:	0800ec64 	.word	0x0800ec64
 8009278:	0800ec6c 	.word	0x0800ec6c

0800927c <__retarget_lock_init_recursive>:
 800927c:	4770      	bx	lr

0800927e <__retarget_lock_close_recursive>:
 800927e:	4770      	bx	lr

08009280 <__retarget_lock_acquire_recursive>:
 8009280:	4770      	bx	lr

08009282 <__retarget_lock_release_recursive>:
 8009282:	4770      	bx	lr

08009284 <memcpy>:
 8009284:	440a      	add	r2, r1
 8009286:	4291      	cmp	r1, r2
 8009288:	f100 33ff 	add.w	r3, r0, #4294967295
 800928c:	d100      	bne.n	8009290 <memcpy+0xc>
 800928e:	4770      	bx	lr
 8009290:	b510      	push	{r4, lr}
 8009292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800929a:	4291      	cmp	r1, r2
 800929c:	d1f9      	bne.n	8009292 <memcpy+0xe>
 800929e:	bd10      	pop	{r4, pc}

080092a0 <register_fini>:
 80092a0:	4b02      	ldr	r3, [pc, #8]	; (80092ac <register_fini+0xc>)
 80092a2:	b113      	cbz	r3, 80092aa <register_fini+0xa>
 80092a4:	4802      	ldr	r0, [pc, #8]	; (80092b0 <register_fini+0x10>)
 80092a6:	f000 b805 	b.w	80092b4 <atexit>
 80092aa:	4770      	bx	lr
 80092ac:	00000000 	.word	0x00000000
 80092b0:	0800b651 	.word	0x0800b651

080092b4 <atexit>:
 80092b4:	2300      	movs	r3, #0
 80092b6:	4601      	mov	r1, r0
 80092b8:	461a      	mov	r2, r3
 80092ba:	4618      	mov	r0, r3
 80092bc:	f002 ba20 	b.w	800b700 <__register_exitproc>

080092c0 <_malloc_trim_r>:
 80092c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c4:	4606      	mov	r6, r0
 80092c6:	2008      	movs	r0, #8
 80092c8:	460c      	mov	r4, r1
 80092ca:	f002 f9d5 	bl	800b678 <sysconf>
 80092ce:	4f23      	ldr	r7, [pc, #140]	; (800935c <_malloc_trim_r+0x9c>)
 80092d0:	4680      	mov	r8, r0
 80092d2:	4630      	mov	r0, r6
 80092d4:	f000 fb54 	bl	8009980 <__malloc_lock>
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	685d      	ldr	r5, [r3, #4]
 80092dc:	f025 0503 	bic.w	r5, r5, #3
 80092e0:	1b2c      	subs	r4, r5, r4
 80092e2:	3c11      	subs	r4, #17
 80092e4:	4444      	add	r4, r8
 80092e6:	fbb4 f4f8 	udiv	r4, r4, r8
 80092ea:	3c01      	subs	r4, #1
 80092ec:	fb08 f404 	mul.w	r4, r8, r4
 80092f0:	45a0      	cmp	r8, r4
 80092f2:	dd05      	ble.n	8009300 <_malloc_trim_r+0x40>
 80092f4:	4630      	mov	r0, r6
 80092f6:	f000 fb49 	bl	800998c <__malloc_unlock>
 80092fa:	2000      	movs	r0, #0
 80092fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009300:	2100      	movs	r1, #0
 8009302:	4630      	mov	r0, r6
 8009304:	f002 f994 	bl	800b630 <_sbrk_r>
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	442b      	add	r3, r5
 800930c:	4298      	cmp	r0, r3
 800930e:	d1f1      	bne.n	80092f4 <_malloc_trim_r+0x34>
 8009310:	4261      	negs	r1, r4
 8009312:	4630      	mov	r0, r6
 8009314:	f002 f98c 	bl	800b630 <_sbrk_r>
 8009318:	3001      	adds	r0, #1
 800931a:	d110      	bne.n	800933e <_malloc_trim_r+0x7e>
 800931c:	2100      	movs	r1, #0
 800931e:	4630      	mov	r0, r6
 8009320:	f002 f986 	bl	800b630 <_sbrk_r>
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	1a83      	subs	r3, r0, r2
 8009328:	2b0f      	cmp	r3, #15
 800932a:	dde3      	ble.n	80092f4 <_malloc_trim_r+0x34>
 800932c:	490c      	ldr	r1, [pc, #48]	; (8009360 <_malloc_trim_r+0xa0>)
 800932e:	6809      	ldr	r1, [r1, #0]
 8009330:	1a40      	subs	r0, r0, r1
 8009332:	490c      	ldr	r1, [pc, #48]	; (8009364 <_malloc_trim_r+0xa4>)
 8009334:	f043 0301 	orr.w	r3, r3, #1
 8009338:	6008      	str	r0, [r1, #0]
 800933a:	6053      	str	r3, [r2, #4]
 800933c:	e7da      	b.n	80092f4 <_malloc_trim_r+0x34>
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	4a08      	ldr	r2, [pc, #32]	; (8009364 <_malloc_trim_r+0xa4>)
 8009342:	1b2d      	subs	r5, r5, r4
 8009344:	f045 0501 	orr.w	r5, r5, #1
 8009348:	605d      	str	r5, [r3, #4]
 800934a:	6813      	ldr	r3, [r2, #0]
 800934c:	4630      	mov	r0, r6
 800934e:	1b1b      	subs	r3, r3, r4
 8009350:	6013      	str	r3, [r2, #0]
 8009352:	f000 fb1b 	bl	800998c <__malloc_unlock>
 8009356:	2001      	movs	r0, #1
 8009358:	e7d0      	b.n	80092fc <_malloc_trim_r+0x3c>
 800935a:	bf00      	nop
 800935c:	20000440 	.word	0x20000440
 8009360:	20000848 	.word	0x20000848
 8009364:	200081b8 	.word	0x200081b8

08009368 <_free_r>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	4605      	mov	r5, r0
 800936c:	460f      	mov	r7, r1
 800936e:	2900      	cmp	r1, #0
 8009370:	f000 80b1 	beq.w	80094d6 <_free_r+0x16e>
 8009374:	f000 fb04 	bl	8009980 <__malloc_lock>
 8009378:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800937c:	4856      	ldr	r0, [pc, #344]	; (80094d8 <_free_r+0x170>)
 800937e:	f022 0401 	bic.w	r4, r2, #1
 8009382:	f1a7 0308 	sub.w	r3, r7, #8
 8009386:	eb03 0c04 	add.w	ip, r3, r4
 800938a:	6881      	ldr	r1, [r0, #8]
 800938c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8009390:	4561      	cmp	r1, ip
 8009392:	f026 0603 	bic.w	r6, r6, #3
 8009396:	f002 0201 	and.w	r2, r2, #1
 800939a:	d11b      	bne.n	80093d4 <_free_r+0x6c>
 800939c:	4426      	add	r6, r4
 800939e:	b93a      	cbnz	r2, 80093b0 <_free_r+0x48>
 80093a0:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80093a4:	1a9b      	subs	r3, r3, r2
 80093a6:	4416      	add	r6, r2
 80093a8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80093ac:	60ca      	str	r2, [r1, #12]
 80093ae:	6091      	str	r1, [r2, #8]
 80093b0:	f046 0201 	orr.w	r2, r6, #1
 80093b4:	605a      	str	r2, [r3, #4]
 80093b6:	6083      	str	r3, [r0, #8]
 80093b8:	4b48      	ldr	r3, [pc, #288]	; (80094dc <_free_r+0x174>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	42b3      	cmp	r3, r6
 80093be:	d804      	bhi.n	80093ca <_free_r+0x62>
 80093c0:	4b47      	ldr	r3, [pc, #284]	; (80094e0 <_free_r+0x178>)
 80093c2:	4628      	mov	r0, r5
 80093c4:	6819      	ldr	r1, [r3, #0]
 80093c6:	f7ff ff7b 	bl	80092c0 <_malloc_trim_r>
 80093ca:	4628      	mov	r0, r5
 80093cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80093d0:	f000 badc 	b.w	800998c <__malloc_unlock>
 80093d4:	f8cc 6004 	str.w	r6, [ip, #4]
 80093d8:	2a00      	cmp	r2, #0
 80093da:	d138      	bne.n	800944e <_free_r+0xe6>
 80093dc:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80093e0:	1a5b      	subs	r3, r3, r1
 80093e2:	440c      	add	r4, r1
 80093e4:	6899      	ldr	r1, [r3, #8]
 80093e6:	f100 0708 	add.w	r7, r0, #8
 80093ea:	42b9      	cmp	r1, r7
 80093ec:	d031      	beq.n	8009452 <_free_r+0xea>
 80093ee:	68df      	ldr	r7, [r3, #12]
 80093f0:	60cf      	str	r7, [r1, #12]
 80093f2:	60b9      	str	r1, [r7, #8]
 80093f4:	eb0c 0106 	add.w	r1, ip, r6
 80093f8:	6849      	ldr	r1, [r1, #4]
 80093fa:	07c9      	lsls	r1, r1, #31
 80093fc:	d40b      	bmi.n	8009416 <_free_r+0xae>
 80093fe:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8009402:	4434      	add	r4, r6
 8009404:	bb3a      	cbnz	r2, 8009456 <_free_r+0xee>
 8009406:	4e37      	ldr	r6, [pc, #220]	; (80094e4 <_free_r+0x17c>)
 8009408:	42b1      	cmp	r1, r6
 800940a:	d124      	bne.n	8009456 <_free_r+0xee>
 800940c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009410:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009414:	2201      	movs	r2, #1
 8009416:	f044 0101 	orr.w	r1, r4, #1
 800941a:	6059      	str	r1, [r3, #4]
 800941c:	511c      	str	r4, [r3, r4]
 800941e:	2a00      	cmp	r2, #0
 8009420:	d1d3      	bne.n	80093ca <_free_r+0x62>
 8009422:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8009426:	d21b      	bcs.n	8009460 <_free_r+0xf8>
 8009428:	08e2      	lsrs	r2, r4, #3
 800942a:	2101      	movs	r1, #1
 800942c:	0964      	lsrs	r4, r4, #5
 800942e:	40a1      	lsls	r1, r4
 8009430:	6844      	ldr	r4, [r0, #4]
 8009432:	3201      	adds	r2, #1
 8009434:	4321      	orrs	r1, r4
 8009436:	6041      	str	r1, [r0, #4]
 8009438:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800943c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8009440:	3908      	subs	r1, #8
 8009442:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8009446:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800944a:	60e3      	str	r3, [r4, #12]
 800944c:	e7bd      	b.n	80093ca <_free_r+0x62>
 800944e:	2200      	movs	r2, #0
 8009450:	e7d0      	b.n	80093f4 <_free_r+0x8c>
 8009452:	2201      	movs	r2, #1
 8009454:	e7ce      	b.n	80093f4 <_free_r+0x8c>
 8009456:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800945a:	60ce      	str	r6, [r1, #12]
 800945c:	60b1      	str	r1, [r6, #8]
 800945e:	e7da      	b.n	8009416 <_free_r+0xae>
 8009460:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8009464:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8009468:	d214      	bcs.n	8009494 <_free_r+0x12c>
 800946a:	09a2      	lsrs	r2, r4, #6
 800946c:	3238      	adds	r2, #56	; 0x38
 800946e:	1c51      	adds	r1, r2, #1
 8009470:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8009474:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8009478:	428e      	cmp	r6, r1
 800947a:	d125      	bne.n	80094c8 <_free_r+0x160>
 800947c:	2401      	movs	r4, #1
 800947e:	1092      	asrs	r2, r2, #2
 8009480:	fa04 f202 	lsl.w	r2, r4, r2
 8009484:	6844      	ldr	r4, [r0, #4]
 8009486:	4322      	orrs	r2, r4
 8009488:	6042      	str	r2, [r0, #4]
 800948a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800948e:	60b3      	str	r3, [r6, #8]
 8009490:	60cb      	str	r3, [r1, #12]
 8009492:	e79a      	b.n	80093ca <_free_r+0x62>
 8009494:	2a14      	cmp	r2, #20
 8009496:	d801      	bhi.n	800949c <_free_r+0x134>
 8009498:	325b      	adds	r2, #91	; 0x5b
 800949a:	e7e8      	b.n	800946e <_free_r+0x106>
 800949c:	2a54      	cmp	r2, #84	; 0x54
 800949e:	d802      	bhi.n	80094a6 <_free_r+0x13e>
 80094a0:	0b22      	lsrs	r2, r4, #12
 80094a2:	326e      	adds	r2, #110	; 0x6e
 80094a4:	e7e3      	b.n	800946e <_free_r+0x106>
 80094a6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80094aa:	d802      	bhi.n	80094b2 <_free_r+0x14a>
 80094ac:	0be2      	lsrs	r2, r4, #15
 80094ae:	3277      	adds	r2, #119	; 0x77
 80094b0:	e7dd      	b.n	800946e <_free_r+0x106>
 80094b2:	f240 5154 	movw	r1, #1364	; 0x554
 80094b6:	428a      	cmp	r2, r1
 80094b8:	bf9a      	itte	ls
 80094ba:	0ca2      	lsrls	r2, r4, #18
 80094bc:	327c      	addls	r2, #124	; 0x7c
 80094be:	227e      	movhi	r2, #126	; 0x7e
 80094c0:	e7d5      	b.n	800946e <_free_r+0x106>
 80094c2:	6889      	ldr	r1, [r1, #8]
 80094c4:	428e      	cmp	r6, r1
 80094c6:	d004      	beq.n	80094d2 <_free_r+0x16a>
 80094c8:	684a      	ldr	r2, [r1, #4]
 80094ca:	f022 0203 	bic.w	r2, r2, #3
 80094ce:	42a2      	cmp	r2, r4
 80094d0:	d8f7      	bhi.n	80094c2 <_free_r+0x15a>
 80094d2:	68ce      	ldr	r6, [r1, #12]
 80094d4:	e7d9      	b.n	800948a <_free_r+0x122>
 80094d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094d8:	20000440 	.word	0x20000440
 80094dc:	2000084c 	.word	0x2000084c
 80094e0:	200081e8 	.word	0x200081e8
 80094e4:	20000448 	.word	0x20000448

080094e8 <_malloc_r>:
 80094e8:	f101 030b 	add.w	r3, r1, #11
 80094ec:	2b16      	cmp	r3, #22
 80094ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f2:	4605      	mov	r5, r0
 80094f4:	d906      	bls.n	8009504 <_malloc_r+0x1c>
 80094f6:	f033 0707 	bics.w	r7, r3, #7
 80094fa:	d504      	bpl.n	8009506 <_malloc_r+0x1e>
 80094fc:	230c      	movs	r3, #12
 80094fe:	602b      	str	r3, [r5, #0]
 8009500:	2400      	movs	r4, #0
 8009502:	e1a3      	b.n	800984c <_malloc_r+0x364>
 8009504:	2710      	movs	r7, #16
 8009506:	42b9      	cmp	r1, r7
 8009508:	d8f8      	bhi.n	80094fc <_malloc_r+0x14>
 800950a:	4628      	mov	r0, r5
 800950c:	f000 fa38 	bl	8009980 <__malloc_lock>
 8009510:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8009514:	4eaf      	ldr	r6, [pc, #700]	; (80097d4 <_malloc_r+0x2ec>)
 8009516:	d237      	bcs.n	8009588 <_malloc_r+0xa0>
 8009518:	f107 0208 	add.w	r2, r7, #8
 800951c:	4432      	add	r2, r6
 800951e:	f1a2 0108 	sub.w	r1, r2, #8
 8009522:	6854      	ldr	r4, [r2, #4]
 8009524:	428c      	cmp	r4, r1
 8009526:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800952a:	d102      	bne.n	8009532 <_malloc_r+0x4a>
 800952c:	68d4      	ldr	r4, [r2, #12]
 800952e:	42a2      	cmp	r2, r4
 8009530:	d010      	beq.n	8009554 <_malloc_r+0x6c>
 8009532:	6863      	ldr	r3, [r4, #4]
 8009534:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009538:	f023 0303 	bic.w	r3, r3, #3
 800953c:	60ca      	str	r2, [r1, #12]
 800953e:	4423      	add	r3, r4
 8009540:	6091      	str	r1, [r2, #8]
 8009542:	685a      	ldr	r2, [r3, #4]
 8009544:	f042 0201 	orr.w	r2, r2, #1
 8009548:	605a      	str	r2, [r3, #4]
 800954a:	4628      	mov	r0, r5
 800954c:	f000 fa1e 	bl	800998c <__malloc_unlock>
 8009550:	3408      	adds	r4, #8
 8009552:	e17b      	b.n	800984c <_malloc_r+0x364>
 8009554:	3302      	adds	r3, #2
 8009556:	6934      	ldr	r4, [r6, #16]
 8009558:	499f      	ldr	r1, [pc, #636]	; (80097d8 <_malloc_r+0x2f0>)
 800955a:	428c      	cmp	r4, r1
 800955c:	d077      	beq.n	800964e <_malloc_r+0x166>
 800955e:	6862      	ldr	r2, [r4, #4]
 8009560:	f022 0c03 	bic.w	ip, r2, #3
 8009564:	ebac 0007 	sub.w	r0, ip, r7
 8009568:	280f      	cmp	r0, #15
 800956a:	dd48      	ble.n	80095fe <_malloc_r+0x116>
 800956c:	19e2      	adds	r2, r4, r7
 800956e:	f040 0301 	orr.w	r3, r0, #1
 8009572:	f047 0701 	orr.w	r7, r7, #1
 8009576:	6067      	str	r7, [r4, #4]
 8009578:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800957c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009580:	6053      	str	r3, [r2, #4]
 8009582:	f844 000c 	str.w	r0, [r4, ip]
 8009586:	e7e0      	b.n	800954a <_malloc_r+0x62>
 8009588:	0a7b      	lsrs	r3, r7, #9
 800958a:	d02a      	beq.n	80095e2 <_malloc_r+0xfa>
 800958c:	2b04      	cmp	r3, #4
 800958e:	d812      	bhi.n	80095b6 <_malloc_r+0xce>
 8009590:	09bb      	lsrs	r3, r7, #6
 8009592:	3338      	adds	r3, #56	; 0x38
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800959a:	f1a2 0c08 	sub.w	ip, r2, #8
 800959e:	6854      	ldr	r4, [r2, #4]
 80095a0:	4564      	cmp	r4, ip
 80095a2:	d006      	beq.n	80095b2 <_malloc_r+0xca>
 80095a4:	6862      	ldr	r2, [r4, #4]
 80095a6:	f022 0203 	bic.w	r2, r2, #3
 80095aa:	1bd0      	subs	r0, r2, r7
 80095ac:	280f      	cmp	r0, #15
 80095ae:	dd1c      	ble.n	80095ea <_malloc_r+0x102>
 80095b0:	3b01      	subs	r3, #1
 80095b2:	3301      	adds	r3, #1
 80095b4:	e7cf      	b.n	8009556 <_malloc_r+0x6e>
 80095b6:	2b14      	cmp	r3, #20
 80095b8:	d801      	bhi.n	80095be <_malloc_r+0xd6>
 80095ba:	335b      	adds	r3, #91	; 0x5b
 80095bc:	e7ea      	b.n	8009594 <_malloc_r+0xac>
 80095be:	2b54      	cmp	r3, #84	; 0x54
 80095c0:	d802      	bhi.n	80095c8 <_malloc_r+0xe0>
 80095c2:	0b3b      	lsrs	r3, r7, #12
 80095c4:	336e      	adds	r3, #110	; 0x6e
 80095c6:	e7e5      	b.n	8009594 <_malloc_r+0xac>
 80095c8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80095cc:	d802      	bhi.n	80095d4 <_malloc_r+0xec>
 80095ce:	0bfb      	lsrs	r3, r7, #15
 80095d0:	3377      	adds	r3, #119	; 0x77
 80095d2:	e7df      	b.n	8009594 <_malloc_r+0xac>
 80095d4:	f240 5254 	movw	r2, #1364	; 0x554
 80095d8:	4293      	cmp	r3, r2
 80095da:	d804      	bhi.n	80095e6 <_malloc_r+0xfe>
 80095dc:	0cbb      	lsrs	r3, r7, #18
 80095de:	337c      	adds	r3, #124	; 0x7c
 80095e0:	e7d8      	b.n	8009594 <_malloc_r+0xac>
 80095e2:	233f      	movs	r3, #63	; 0x3f
 80095e4:	e7d6      	b.n	8009594 <_malloc_r+0xac>
 80095e6:	237e      	movs	r3, #126	; 0x7e
 80095e8:	e7d4      	b.n	8009594 <_malloc_r+0xac>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	68e1      	ldr	r1, [r4, #12]
 80095ee:	db04      	blt.n	80095fa <_malloc_r+0x112>
 80095f0:	68a3      	ldr	r3, [r4, #8]
 80095f2:	60d9      	str	r1, [r3, #12]
 80095f4:	608b      	str	r3, [r1, #8]
 80095f6:	18a3      	adds	r3, r4, r2
 80095f8:	e7a3      	b.n	8009542 <_malloc_r+0x5a>
 80095fa:	460c      	mov	r4, r1
 80095fc:	e7d0      	b.n	80095a0 <_malloc_r+0xb8>
 80095fe:	2800      	cmp	r0, #0
 8009600:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8009604:	db07      	blt.n	8009616 <_malloc_r+0x12e>
 8009606:	44a4      	add	ip, r4
 8009608:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800960c:	f043 0301 	orr.w	r3, r3, #1
 8009610:	f8cc 3004 	str.w	r3, [ip, #4]
 8009614:	e799      	b.n	800954a <_malloc_r+0x62>
 8009616:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800961a:	6870      	ldr	r0, [r6, #4]
 800961c:	f080 8095 	bcs.w	800974a <_malloc_r+0x262>
 8009620:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8009624:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8009628:	f04f 0c01 	mov.w	ip, #1
 800962c:	3201      	adds	r2, #1
 800962e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009632:	ea4c 0000 	orr.w	r0, ip, r0
 8009636:	6070      	str	r0, [r6, #4]
 8009638:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800963c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8009640:	3808      	subs	r0, #8
 8009642:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8009646:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800964a:	f8cc 400c 	str.w	r4, [ip, #12]
 800964e:	1098      	asrs	r0, r3, #2
 8009650:	2201      	movs	r2, #1
 8009652:	4082      	lsls	r2, r0
 8009654:	6870      	ldr	r0, [r6, #4]
 8009656:	4290      	cmp	r0, r2
 8009658:	d326      	bcc.n	80096a8 <_malloc_r+0x1c0>
 800965a:	4210      	tst	r0, r2
 800965c:	d106      	bne.n	800966c <_malloc_r+0x184>
 800965e:	f023 0303 	bic.w	r3, r3, #3
 8009662:	0052      	lsls	r2, r2, #1
 8009664:	4210      	tst	r0, r2
 8009666:	f103 0304 	add.w	r3, r3, #4
 800966a:	d0fa      	beq.n	8009662 <_malloc_r+0x17a>
 800966c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8009670:	46c1      	mov	r9, r8
 8009672:	469e      	mov	lr, r3
 8009674:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8009678:	454c      	cmp	r4, r9
 800967a:	f040 80b9 	bne.w	80097f0 <_malloc_r+0x308>
 800967e:	f10e 0e01 	add.w	lr, lr, #1
 8009682:	f01e 0f03 	tst.w	lr, #3
 8009686:	f109 0908 	add.w	r9, r9, #8
 800968a:	d1f3      	bne.n	8009674 <_malloc_r+0x18c>
 800968c:	0798      	lsls	r0, r3, #30
 800968e:	f040 80e3 	bne.w	8009858 <_malloc_r+0x370>
 8009692:	6873      	ldr	r3, [r6, #4]
 8009694:	ea23 0302 	bic.w	r3, r3, r2
 8009698:	6073      	str	r3, [r6, #4]
 800969a:	6870      	ldr	r0, [r6, #4]
 800969c:	0052      	lsls	r2, r2, #1
 800969e:	4290      	cmp	r0, r2
 80096a0:	d302      	bcc.n	80096a8 <_malloc_r+0x1c0>
 80096a2:	2a00      	cmp	r2, #0
 80096a4:	f040 80e5 	bne.w	8009872 <_malloc_r+0x38a>
 80096a8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80096ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 80096b0:	f023 0903 	bic.w	r9, r3, #3
 80096b4:	45b9      	cmp	r9, r7
 80096b6:	d304      	bcc.n	80096c2 <_malloc_r+0x1da>
 80096b8:	eba9 0207 	sub.w	r2, r9, r7
 80096bc:	2a0f      	cmp	r2, #15
 80096be:	f300 8141 	bgt.w	8009944 <_malloc_r+0x45c>
 80096c2:	4b46      	ldr	r3, [pc, #280]	; (80097dc <_malloc_r+0x2f4>)
 80096c4:	6819      	ldr	r1, [r3, #0]
 80096c6:	3110      	adds	r1, #16
 80096c8:	4439      	add	r1, r7
 80096ca:	2008      	movs	r0, #8
 80096cc:	9101      	str	r1, [sp, #4]
 80096ce:	f001 ffd3 	bl	800b678 <sysconf>
 80096d2:	4a43      	ldr	r2, [pc, #268]	; (80097e0 <_malloc_r+0x2f8>)
 80096d4:	9901      	ldr	r1, [sp, #4]
 80096d6:	6813      	ldr	r3, [r2, #0]
 80096d8:	3301      	adds	r3, #1
 80096da:	bf1f      	itttt	ne
 80096dc:	f101 31ff 	addne.w	r1, r1, #4294967295
 80096e0:	1809      	addne	r1, r1, r0
 80096e2:	4243      	negne	r3, r0
 80096e4:	4019      	andne	r1, r3
 80096e6:	4680      	mov	r8, r0
 80096e8:	4628      	mov	r0, r5
 80096ea:	9101      	str	r1, [sp, #4]
 80096ec:	f001 ffa0 	bl	800b630 <_sbrk_r>
 80096f0:	1c42      	adds	r2, r0, #1
 80096f2:	eb0a 0b09 	add.w	fp, sl, r9
 80096f6:	4604      	mov	r4, r0
 80096f8:	f000 80f7 	beq.w	80098ea <_malloc_r+0x402>
 80096fc:	4583      	cmp	fp, r0
 80096fe:	9901      	ldr	r1, [sp, #4]
 8009700:	4a37      	ldr	r2, [pc, #220]	; (80097e0 <_malloc_r+0x2f8>)
 8009702:	d902      	bls.n	800970a <_malloc_r+0x222>
 8009704:	45b2      	cmp	sl, r6
 8009706:	f040 80f0 	bne.w	80098ea <_malloc_r+0x402>
 800970a:	4b36      	ldr	r3, [pc, #216]	; (80097e4 <_malloc_r+0x2fc>)
 800970c:	6818      	ldr	r0, [r3, #0]
 800970e:	45a3      	cmp	fp, r4
 8009710:	eb00 0e01 	add.w	lr, r0, r1
 8009714:	f8c3 e000 	str.w	lr, [r3]
 8009718:	f108 3cff 	add.w	ip, r8, #4294967295
 800971c:	f040 80ab 	bne.w	8009876 <_malloc_r+0x38e>
 8009720:	ea1b 0f0c 	tst.w	fp, ip
 8009724:	f040 80a7 	bne.w	8009876 <_malloc_r+0x38e>
 8009728:	68b2      	ldr	r2, [r6, #8]
 800972a:	4449      	add	r1, r9
 800972c:	f041 0101 	orr.w	r1, r1, #1
 8009730:	6051      	str	r1, [r2, #4]
 8009732:	4a2d      	ldr	r2, [pc, #180]	; (80097e8 <_malloc_r+0x300>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6811      	ldr	r1, [r2, #0]
 8009738:	428b      	cmp	r3, r1
 800973a:	bf88      	it	hi
 800973c:	6013      	strhi	r3, [r2, #0]
 800973e:	4a2b      	ldr	r2, [pc, #172]	; (80097ec <_malloc_r+0x304>)
 8009740:	6811      	ldr	r1, [r2, #0]
 8009742:	428b      	cmp	r3, r1
 8009744:	bf88      	it	hi
 8009746:	6013      	strhi	r3, [r2, #0]
 8009748:	e0cf      	b.n	80098ea <_malloc_r+0x402>
 800974a:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800974e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009752:	d218      	bcs.n	8009786 <_malloc_r+0x29e>
 8009754:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8009758:	3238      	adds	r2, #56	; 0x38
 800975a:	f102 0e01 	add.w	lr, r2, #1
 800975e:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8009762:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8009766:	45f0      	cmp	r8, lr
 8009768:	d12b      	bne.n	80097c2 <_malloc_r+0x2da>
 800976a:	1092      	asrs	r2, r2, #2
 800976c:	f04f 0c01 	mov.w	ip, #1
 8009770:	fa0c f202 	lsl.w	r2, ip, r2
 8009774:	4302      	orrs	r2, r0
 8009776:	6072      	str	r2, [r6, #4]
 8009778:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800977c:	f8c8 4008 	str.w	r4, [r8, #8]
 8009780:	f8ce 400c 	str.w	r4, [lr, #12]
 8009784:	e763      	b.n	800964e <_malloc_r+0x166>
 8009786:	2a14      	cmp	r2, #20
 8009788:	d801      	bhi.n	800978e <_malloc_r+0x2a6>
 800978a:	325b      	adds	r2, #91	; 0x5b
 800978c:	e7e5      	b.n	800975a <_malloc_r+0x272>
 800978e:	2a54      	cmp	r2, #84	; 0x54
 8009790:	d803      	bhi.n	800979a <_malloc_r+0x2b2>
 8009792:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8009796:	326e      	adds	r2, #110	; 0x6e
 8009798:	e7df      	b.n	800975a <_malloc_r+0x272>
 800979a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800979e:	d803      	bhi.n	80097a8 <_malloc_r+0x2c0>
 80097a0:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80097a4:	3277      	adds	r2, #119	; 0x77
 80097a6:	e7d8      	b.n	800975a <_malloc_r+0x272>
 80097a8:	f240 5e54 	movw	lr, #1364	; 0x554
 80097ac:	4572      	cmp	r2, lr
 80097ae:	bf9a      	itte	ls
 80097b0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80097b4:	327c      	addls	r2, #124	; 0x7c
 80097b6:	227e      	movhi	r2, #126	; 0x7e
 80097b8:	e7cf      	b.n	800975a <_malloc_r+0x272>
 80097ba:	f8de e008 	ldr.w	lr, [lr, #8]
 80097be:	45f0      	cmp	r8, lr
 80097c0:	d005      	beq.n	80097ce <_malloc_r+0x2e6>
 80097c2:	f8de 2004 	ldr.w	r2, [lr, #4]
 80097c6:	f022 0203 	bic.w	r2, r2, #3
 80097ca:	4562      	cmp	r2, ip
 80097cc:	d8f5      	bhi.n	80097ba <_malloc_r+0x2d2>
 80097ce:	f8de 800c 	ldr.w	r8, [lr, #12]
 80097d2:	e7d1      	b.n	8009778 <_malloc_r+0x290>
 80097d4:	20000440 	.word	0x20000440
 80097d8:	20000448 	.word	0x20000448
 80097dc:	200081e8 	.word	0x200081e8
 80097e0:	20000848 	.word	0x20000848
 80097e4:	200081b8 	.word	0x200081b8
 80097e8:	200081e0 	.word	0x200081e0
 80097ec:	200081e4 	.word	0x200081e4
 80097f0:	6860      	ldr	r0, [r4, #4]
 80097f2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80097f6:	f020 0003 	bic.w	r0, r0, #3
 80097fa:	eba0 0a07 	sub.w	sl, r0, r7
 80097fe:	f1ba 0f0f 	cmp.w	sl, #15
 8009802:	dd12      	ble.n	800982a <_malloc_r+0x342>
 8009804:	68a3      	ldr	r3, [r4, #8]
 8009806:	19e2      	adds	r2, r4, r7
 8009808:	f047 0701 	orr.w	r7, r7, #1
 800980c:	6067      	str	r7, [r4, #4]
 800980e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009812:	f8cc 3008 	str.w	r3, [ip, #8]
 8009816:	f04a 0301 	orr.w	r3, sl, #1
 800981a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800981e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009822:	6053      	str	r3, [r2, #4]
 8009824:	f844 a000 	str.w	sl, [r4, r0]
 8009828:	e68f      	b.n	800954a <_malloc_r+0x62>
 800982a:	f1ba 0f00 	cmp.w	sl, #0
 800982e:	db11      	blt.n	8009854 <_malloc_r+0x36c>
 8009830:	4420      	add	r0, r4
 8009832:	6843      	ldr	r3, [r0, #4]
 8009834:	f043 0301 	orr.w	r3, r3, #1
 8009838:	6043      	str	r3, [r0, #4]
 800983a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800983e:	4628      	mov	r0, r5
 8009840:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009844:	f8cc 3008 	str.w	r3, [ip, #8]
 8009848:	f000 f8a0 	bl	800998c <__malloc_unlock>
 800984c:	4620      	mov	r0, r4
 800984e:	b003      	add	sp, #12
 8009850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009854:	4664      	mov	r4, ip
 8009856:	e70f      	b.n	8009678 <_malloc_r+0x190>
 8009858:	f858 0908 	ldr.w	r0, [r8], #-8
 800985c:	4540      	cmp	r0, r8
 800985e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009862:	f43f af13 	beq.w	800968c <_malloc_r+0x1a4>
 8009866:	e718      	b.n	800969a <_malloc_r+0x1b2>
 8009868:	3304      	adds	r3, #4
 800986a:	0052      	lsls	r2, r2, #1
 800986c:	4210      	tst	r0, r2
 800986e:	d0fb      	beq.n	8009868 <_malloc_r+0x380>
 8009870:	e6fc      	b.n	800966c <_malloc_r+0x184>
 8009872:	4673      	mov	r3, lr
 8009874:	e7fa      	b.n	800986c <_malloc_r+0x384>
 8009876:	6810      	ldr	r0, [r2, #0]
 8009878:	3001      	adds	r0, #1
 800987a:	bf1b      	ittet	ne
 800987c:	eba4 0b0b 	subne.w	fp, r4, fp
 8009880:	eb0b 020e 	addne.w	r2, fp, lr
 8009884:	6014      	streq	r4, [r2, #0]
 8009886:	601a      	strne	r2, [r3, #0]
 8009888:	f014 0b07 	ands.w	fp, r4, #7
 800988c:	bf1a      	itte	ne
 800988e:	f1cb 0008 	rsbne	r0, fp, #8
 8009892:	1824      	addne	r4, r4, r0
 8009894:	4658      	moveq	r0, fp
 8009896:	1862      	adds	r2, r4, r1
 8009898:	ea02 010c 	and.w	r1, r2, ip
 800989c:	4480      	add	r8, r0
 800989e:	eba8 0801 	sub.w	r8, r8, r1
 80098a2:	ea08 080c 	and.w	r8, r8, ip
 80098a6:	4641      	mov	r1, r8
 80098a8:	4628      	mov	r0, r5
 80098aa:	9201      	str	r2, [sp, #4]
 80098ac:	f001 fec0 	bl	800b630 <_sbrk_r>
 80098b0:	1c43      	adds	r3, r0, #1
 80098b2:	9a01      	ldr	r2, [sp, #4]
 80098b4:	4b28      	ldr	r3, [pc, #160]	; (8009958 <_malloc_r+0x470>)
 80098b6:	d107      	bne.n	80098c8 <_malloc_r+0x3e0>
 80098b8:	f1bb 0f00 	cmp.w	fp, #0
 80098bc:	d023      	beq.n	8009906 <_malloc_r+0x41e>
 80098be:	f1ab 0008 	sub.w	r0, fp, #8
 80098c2:	4410      	add	r0, r2
 80098c4:	f04f 0800 	mov.w	r8, #0
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	60b4      	str	r4, [r6, #8]
 80098cc:	1b00      	subs	r0, r0, r4
 80098ce:	4440      	add	r0, r8
 80098d0:	4442      	add	r2, r8
 80098d2:	f040 0001 	orr.w	r0, r0, #1
 80098d6:	45b2      	cmp	sl, r6
 80098d8:	601a      	str	r2, [r3, #0]
 80098da:	6060      	str	r0, [r4, #4]
 80098dc:	f43f af29 	beq.w	8009732 <_malloc_r+0x24a>
 80098e0:	f1b9 0f0f 	cmp.w	r9, #15
 80098e4:	d812      	bhi.n	800990c <_malloc_r+0x424>
 80098e6:	2301      	movs	r3, #1
 80098e8:	6063      	str	r3, [r4, #4]
 80098ea:	68b3      	ldr	r3, [r6, #8]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f023 0303 	bic.w	r3, r3, #3
 80098f2:	42bb      	cmp	r3, r7
 80098f4:	eba3 0207 	sub.w	r2, r3, r7
 80098f8:	d301      	bcc.n	80098fe <_malloc_r+0x416>
 80098fa:	2a0f      	cmp	r2, #15
 80098fc:	dc22      	bgt.n	8009944 <_malloc_r+0x45c>
 80098fe:	4628      	mov	r0, r5
 8009900:	f000 f844 	bl	800998c <__malloc_unlock>
 8009904:	e5fc      	b.n	8009500 <_malloc_r+0x18>
 8009906:	4610      	mov	r0, r2
 8009908:	46d8      	mov	r8, fp
 800990a:	e7dd      	b.n	80098c8 <_malloc_r+0x3e0>
 800990c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009910:	f1a9 090c 	sub.w	r9, r9, #12
 8009914:	f029 0907 	bic.w	r9, r9, #7
 8009918:	f002 0201 	and.w	r2, r2, #1
 800991c:	ea42 0209 	orr.w	r2, r2, r9
 8009920:	f8ca 2004 	str.w	r2, [sl, #4]
 8009924:	2105      	movs	r1, #5
 8009926:	eb0a 0209 	add.w	r2, sl, r9
 800992a:	f1b9 0f0f 	cmp.w	r9, #15
 800992e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8009932:	f67f aefe 	bls.w	8009732 <_malloc_r+0x24a>
 8009936:	f10a 0108 	add.w	r1, sl, #8
 800993a:	4628      	mov	r0, r5
 800993c:	f7ff fd14 	bl	8009368 <_free_r>
 8009940:	4b05      	ldr	r3, [pc, #20]	; (8009958 <_malloc_r+0x470>)
 8009942:	e6f6      	b.n	8009732 <_malloc_r+0x24a>
 8009944:	68b4      	ldr	r4, [r6, #8]
 8009946:	f047 0301 	orr.w	r3, r7, #1
 800994a:	4427      	add	r7, r4
 800994c:	f042 0201 	orr.w	r2, r2, #1
 8009950:	6063      	str	r3, [r4, #4]
 8009952:	60b7      	str	r7, [r6, #8]
 8009954:	607a      	str	r2, [r7, #4]
 8009956:	e5f8      	b.n	800954a <_malloc_r+0x62>
 8009958:	200081b8 	.word	0x200081b8

0800995c <__ascii_mbtowc>:
 800995c:	b082      	sub	sp, #8
 800995e:	b901      	cbnz	r1, 8009962 <__ascii_mbtowc+0x6>
 8009960:	a901      	add	r1, sp, #4
 8009962:	b142      	cbz	r2, 8009976 <__ascii_mbtowc+0x1a>
 8009964:	b14b      	cbz	r3, 800997a <__ascii_mbtowc+0x1e>
 8009966:	7813      	ldrb	r3, [r2, #0]
 8009968:	600b      	str	r3, [r1, #0]
 800996a:	7812      	ldrb	r2, [r2, #0]
 800996c:	1e10      	subs	r0, r2, #0
 800996e:	bf18      	it	ne
 8009970:	2001      	movne	r0, #1
 8009972:	b002      	add	sp, #8
 8009974:	4770      	bx	lr
 8009976:	4610      	mov	r0, r2
 8009978:	e7fb      	b.n	8009972 <__ascii_mbtowc+0x16>
 800997a:	f06f 0001 	mvn.w	r0, #1
 800997e:	e7f8      	b.n	8009972 <__ascii_mbtowc+0x16>

08009980 <__malloc_lock>:
 8009980:	4801      	ldr	r0, [pc, #4]	; (8009988 <__malloc_lock+0x8>)
 8009982:	f7ff bc7d 	b.w	8009280 <__retarget_lock_acquire_recursive>
 8009986:	bf00      	nop
 8009988:	200081b1 	.word	0x200081b1

0800998c <__malloc_unlock>:
 800998c:	4801      	ldr	r0, [pc, #4]	; (8009994 <__malloc_unlock+0x8>)
 800998e:	f7ff bc78 	b.w	8009282 <__retarget_lock_release_recursive>
 8009992:	bf00      	nop
 8009994:	200081b1 	.word	0x200081b1

08009998 <_Balloc>:
 8009998:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800999a:	b570      	push	{r4, r5, r6, lr}
 800999c:	4605      	mov	r5, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	b17b      	cbz	r3, 80099c2 <_Balloc+0x2a>
 80099a2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80099a4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80099a8:	b9a0      	cbnz	r0, 80099d4 <_Balloc+0x3c>
 80099aa:	2101      	movs	r1, #1
 80099ac:	fa01 f604 	lsl.w	r6, r1, r4
 80099b0:	1d72      	adds	r2, r6, #5
 80099b2:	0092      	lsls	r2, r2, #2
 80099b4:	4628      	mov	r0, r5
 80099b6:	f001 ff01 	bl	800b7bc <_calloc_r>
 80099ba:	b148      	cbz	r0, 80099d0 <_Balloc+0x38>
 80099bc:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80099c0:	e00b      	b.n	80099da <_Balloc+0x42>
 80099c2:	2221      	movs	r2, #33	; 0x21
 80099c4:	2104      	movs	r1, #4
 80099c6:	f001 fef9 	bl	800b7bc <_calloc_r>
 80099ca:	6468      	str	r0, [r5, #68]	; 0x44
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d1e8      	bne.n	80099a2 <_Balloc+0xa>
 80099d0:	2000      	movs	r0, #0
 80099d2:	bd70      	pop	{r4, r5, r6, pc}
 80099d4:	6802      	ldr	r2, [r0, #0]
 80099d6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80099da:	2300      	movs	r3, #0
 80099dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099e0:	e7f7      	b.n	80099d2 <_Balloc+0x3a>

080099e2 <_Bfree>:
 80099e2:	b131      	cbz	r1, 80099f2 <_Bfree+0x10>
 80099e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80099e6:	684a      	ldr	r2, [r1, #4]
 80099e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80099ec:	6008      	str	r0, [r1, #0]
 80099ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80099f2:	4770      	bx	lr

080099f4 <__multadd>:
 80099f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f8:	690d      	ldr	r5, [r1, #16]
 80099fa:	4607      	mov	r7, r0
 80099fc:	460c      	mov	r4, r1
 80099fe:	461e      	mov	r6, r3
 8009a00:	f101 0c14 	add.w	ip, r1, #20
 8009a04:	2000      	movs	r0, #0
 8009a06:	f8dc 3000 	ldr.w	r3, [ip]
 8009a0a:	b299      	uxth	r1, r3
 8009a0c:	fb02 6101 	mla	r1, r2, r1, r6
 8009a10:	0c1e      	lsrs	r6, r3, #16
 8009a12:	0c0b      	lsrs	r3, r1, #16
 8009a14:	fb02 3306 	mla	r3, r2, r6, r3
 8009a18:	b289      	uxth	r1, r1
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a20:	4285      	cmp	r5, r0
 8009a22:	f84c 1b04 	str.w	r1, [ip], #4
 8009a26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a2a:	dcec      	bgt.n	8009a06 <__multadd+0x12>
 8009a2c:	b30e      	cbz	r6, 8009a72 <__multadd+0x7e>
 8009a2e:	68a3      	ldr	r3, [r4, #8]
 8009a30:	42ab      	cmp	r3, r5
 8009a32:	dc19      	bgt.n	8009a68 <__multadd+0x74>
 8009a34:	6861      	ldr	r1, [r4, #4]
 8009a36:	4638      	mov	r0, r7
 8009a38:	3101      	adds	r1, #1
 8009a3a:	f7ff ffad 	bl	8009998 <_Balloc>
 8009a3e:	4680      	mov	r8, r0
 8009a40:	b928      	cbnz	r0, 8009a4e <__multadd+0x5a>
 8009a42:	4602      	mov	r2, r0
 8009a44:	4b0c      	ldr	r3, [pc, #48]	; (8009a78 <__multadd+0x84>)
 8009a46:	480d      	ldr	r0, [pc, #52]	; (8009a7c <__multadd+0x88>)
 8009a48:	21ba      	movs	r1, #186	; 0xba
 8009a4a:	f001 fe99 	bl	800b780 <__assert_func>
 8009a4e:	6922      	ldr	r2, [r4, #16]
 8009a50:	3202      	adds	r2, #2
 8009a52:	f104 010c 	add.w	r1, r4, #12
 8009a56:	0092      	lsls	r2, r2, #2
 8009a58:	300c      	adds	r0, #12
 8009a5a:	f7ff fc13 	bl	8009284 <memcpy>
 8009a5e:	4621      	mov	r1, r4
 8009a60:	4638      	mov	r0, r7
 8009a62:	f7ff ffbe 	bl	80099e2 <_Bfree>
 8009a66:	4644      	mov	r4, r8
 8009a68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a6c:	3501      	adds	r5, #1
 8009a6e:	615e      	str	r6, [r3, #20]
 8009a70:	6125      	str	r5, [r4, #16]
 8009a72:	4620      	mov	r0, r4
 8009a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a78:	0800e9dd 	.word	0x0800e9dd
 8009a7c:	0800e9ee 	.word	0x0800e9ee

08009a80 <__hi0bits>:
 8009a80:	0c03      	lsrs	r3, r0, #16
 8009a82:	041b      	lsls	r3, r3, #16
 8009a84:	b9d3      	cbnz	r3, 8009abc <__hi0bits+0x3c>
 8009a86:	0400      	lsls	r0, r0, #16
 8009a88:	2310      	movs	r3, #16
 8009a8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a8e:	bf04      	itt	eq
 8009a90:	0200      	lsleq	r0, r0, #8
 8009a92:	3308      	addeq	r3, #8
 8009a94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a98:	bf04      	itt	eq
 8009a9a:	0100      	lsleq	r0, r0, #4
 8009a9c:	3304      	addeq	r3, #4
 8009a9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009aa2:	bf04      	itt	eq
 8009aa4:	0080      	lsleq	r0, r0, #2
 8009aa6:	3302      	addeq	r3, #2
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	db05      	blt.n	8009ab8 <__hi0bits+0x38>
 8009aac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ab0:	f103 0301 	add.w	r3, r3, #1
 8009ab4:	bf08      	it	eq
 8009ab6:	2320      	moveq	r3, #32
 8009ab8:	4618      	mov	r0, r3
 8009aba:	4770      	bx	lr
 8009abc:	2300      	movs	r3, #0
 8009abe:	e7e4      	b.n	8009a8a <__hi0bits+0xa>

08009ac0 <__lo0bits>:
 8009ac0:	6803      	ldr	r3, [r0, #0]
 8009ac2:	f013 0207 	ands.w	r2, r3, #7
 8009ac6:	d00c      	beq.n	8009ae2 <__lo0bits+0x22>
 8009ac8:	07d9      	lsls	r1, r3, #31
 8009aca:	d422      	bmi.n	8009b12 <__lo0bits+0x52>
 8009acc:	079a      	lsls	r2, r3, #30
 8009ace:	bf49      	itett	mi
 8009ad0:	085b      	lsrmi	r3, r3, #1
 8009ad2:	089b      	lsrpl	r3, r3, #2
 8009ad4:	6003      	strmi	r3, [r0, #0]
 8009ad6:	2201      	movmi	r2, #1
 8009ad8:	bf5c      	itt	pl
 8009ada:	6003      	strpl	r3, [r0, #0]
 8009adc:	2202      	movpl	r2, #2
 8009ade:	4610      	mov	r0, r2
 8009ae0:	4770      	bx	lr
 8009ae2:	b299      	uxth	r1, r3
 8009ae4:	b909      	cbnz	r1, 8009aea <__lo0bits+0x2a>
 8009ae6:	0c1b      	lsrs	r3, r3, #16
 8009ae8:	2210      	movs	r2, #16
 8009aea:	b2d9      	uxtb	r1, r3
 8009aec:	b909      	cbnz	r1, 8009af2 <__lo0bits+0x32>
 8009aee:	3208      	adds	r2, #8
 8009af0:	0a1b      	lsrs	r3, r3, #8
 8009af2:	0719      	lsls	r1, r3, #28
 8009af4:	bf04      	itt	eq
 8009af6:	091b      	lsreq	r3, r3, #4
 8009af8:	3204      	addeq	r2, #4
 8009afa:	0799      	lsls	r1, r3, #30
 8009afc:	bf04      	itt	eq
 8009afe:	089b      	lsreq	r3, r3, #2
 8009b00:	3202      	addeq	r2, #2
 8009b02:	07d9      	lsls	r1, r3, #31
 8009b04:	d403      	bmi.n	8009b0e <__lo0bits+0x4e>
 8009b06:	085b      	lsrs	r3, r3, #1
 8009b08:	f102 0201 	add.w	r2, r2, #1
 8009b0c:	d003      	beq.n	8009b16 <__lo0bits+0x56>
 8009b0e:	6003      	str	r3, [r0, #0]
 8009b10:	e7e5      	b.n	8009ade <__lo0bits+0x1e>
 8009b12:	2200      	movs	r2, #0
 8009b14:	e7e3      	b.n	8009ade <__lo0bits+0x1e>
 8009b16:	2220      	movs	r2, #32
 8009b18:	e7e1      	b.n	8009ade <__lo0bits+0x1e>
	...

08009b1c <__i2b>:
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	460c      	mov	r4, r1
 8009b20:	2101      	movs	r1, #1
 8009b22:	f7ff ff39 	bl	8009998 <_Balloc>
 8009b26:	4602      	mov	r2, r0
 8009b28:	b928      	cbnz	r0, 8009b36 <__i2b+0x1a>
 8009b2a:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <__i2b+0x24>)
 8009b2c:	4805      	ldr	r0, [pc, #20]	; (8009b44 <__i2b+0x28>)
 8009b2e:	f240 1145 	movw	r1, #325	; 0x145
 8009b32:	f001 fe25 	bl	800b780 <__assert_func>
 8009b36:	2301      	movs	r3, #1
 8009b38:	6144      	str	r4, [r0, #20]
 8009b3a:	6103      	str	r3, [r0, #16]
 8009b3c:	bd10      	pop	{r4, pc}
 8009b3e:	bf00      	nop
 8009b40:	0800e9dd 	.word	0x0800e9dd
 8009b44:	0800e9ee 	.word	0x0800e9ee

08009b48 <__multiply>:
 8009b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4c:	4691      	mov	r9, r2
 8009b4e:	690a      	ldr	r2, [r1, #16]
 8009b50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	bfb8      	it	lt
 8009b58:	460b      	movlt	r3, r1
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	bfbc      	itt	lt
 8009b5e:	464c      	movlt	r4, r9
 8009b60:	4699      	movlt	r9, r3
 8009b62:	6927      	ldr	r7, [r4, #16]
 8009b64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b68:	68a3      	ldr	r3, [r4, #8]
 8009b6a:	6861      	ldr	r1, [r4, #4]
 8009b6c:	eb07 060a 	add.w	r6, r7, sl
 8009b70:	42b3      	cmp	r3, r6
 8009b72:	b085      	sub	sp, #20
 8009b74:	bfb8      	it	lt
 8009b76:	3101      	addlt	r1, #1
 8009b78:	f7ff ff0e 	bl	8009998 <_Balloc>
 8009b7c:	b930      	cbnz	r0, 8009b8c <__multiply+0x44>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	4b44      	ldr	r3, [pc, #272]	; (8009c94 <__multiply+0x14c>)
 8009b82:	4845      	ldr	r0, [pc, #276]	; (8009c98 <__multiply+0x150>)
 8009b84:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009b88:	f001 fdfa 	bl	800b780 <__assert_func>
 8009b8c:	f100 0514 	add.w	r5, r0, #20
 8009b90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b94:	462b      	mov	r3, r5
 8009b96:	2200      	movs	r2, #0
 8009b98:	4543      	cmp	r3, r8
 8009b9a:	d321      	bcc.n	8009be0 <__multiply+0x98>
 8009b9c:	f104 0314 	add.w	r3, r4, #20
 8009ba0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ba4:	f109 0314 	add.w	r3, r9, #20
 8009ba8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009bac:	9202      	str	r2, [sp, #8]
 8009bae:	1b3a      	subs	r2, r7, r4
 8009bb0:	3a15      	subs	r2, #21
 8009bb2:	f022 0203 	bic.w	r2, r2, #3
 8009bb6:	3204      	adds	r2, #4
 8009bb8:	f104 0115 	add.w	r1, r4, #21
 8009bbc:	428f      	cmp	r7, r1
 8009bbe:	bf38      	it	cc
 8009bc0:	2204      	movcc	r2, #4
 8009bc2:	9201      	str	r2, [sp, #4]
 8009bc4:	9a02      	ldr	r2, [sp, #8]
 8009bc6:	9303      	str	r3, [sp, #12]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d80c      	bhi.n	8009be6 <__multiply+0x9e>
 8009bcc:	2e00      	cmp	r6, #0
 8009bce:	dd03      	ble.n	8009bd8 <__multiply+0x90>
 8009bd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d05b      	beq.n	8009c90 <__multiply+0x148>
 8009bd8:	6106      	str	r6, [r0, #16]
 8009bda:	b005      	add	sp, #20
 8009bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be0:	f843 2b04 	str.w	r2, [r3], #4
 8009be4:	e7d8      	b.n	8009b98 <__multiply+0x50>
 8009be6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bea:	f1ba 0f00 	cmp.w	sl, #0
 8009bee:	d024      	beq.n	8009c3a <__multiply+0xf2>
 8009bf0:	f104 0e14 	add.w	lr, r4, #20
 8009bf4:	46a9      	mov	r9, r5
 8009bf6:	f04f 0c00 	mov.w	ip, #0
 8009bfa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009bfe:	f8d9 1000 	ldr.w	r1, [r9]
 8009c02:	fa1f fb82 	uxth.w	fp, r2
 8009c06:	b289      	uxth	r1, r1
 8009c08:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c10:	f8d9 2000 	ldr.w	r2, [r9]
 8009c14:	4461      	add	r1, ip
 8009c16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c1a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c22:	b289      	uxth	r1, r1
 8009c24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c28:	4577      	cmp	r7, lr
 8009c2a:	f849 1b04 	str.w	r1, [r9], #4
 8009c2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c32:	d8e2      	bhi.n	8009bfa <__multiply+0xb2>
 8009c34:	9a01      	ldr	r2, [sp, #4]
 8009c36:	f845 c002 	str.w	ip, [r5, r2]
 8009c3a:	9a03      	ldr	r2, [sp, #12]
 8009c3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c40:	3304      	adds	r3, #4
 8009c42:	f1b9 0f00 	cmp.w	r9, #0
 8009c46:	d021      	beq.n	8009c8c <__multiply+0x144>
 8009c48:	6829      	ldr	r1, [r5, #0]
 8009c4a:	f104 0c14 	add.w	ip, r4, #20
 8009c4e:	46ae      	mov	lr, r5
 8009c50:	f04f 0a00 	mov.w	sl, #0
 8009c54:	f8bc b000 	ldrh.w	fp, [ip]
 8009c58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c5c:	fb09 220b 	mla	r2, r9, fp, r2
 8009c60:	4452      	add	r2, sl
 8009c62:	b289      	uxth	r1, r1
 8009c64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c68:	f84e 1b04 	str.w	r1, [lr], #4
 8009c6c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c74:	f8be 1000 	ldrh.w	r1, [lr]
 8009c78:	fb09 110a 	mla	r1, r9, sl, r1
 8009c7c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009c80:	4567      	cmp	r7, ip
 8009c82:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c86:	d8e5      	bhi.n	8009c54 <__multiply+0x10c>
 8009c88:	9a01      	ldr	r2, [sp, #4]
 8009c8a:	50a9      	str	r1, [r5, r2]
 8009c8c:	3504      	adds	r5, #4
 8009c8e:	e799      	b.n	8009bc4 <__multiply+0x7c>
 8009c90:	3e01      	subs	r6, #1
 8009c92:	e79b      	b.n	8009bcc <__multiply+0x84>
 8009c94:	0800e9dd 	.word	0x0800e9dd
 8009c98:	0800e9ee 	.word	0x0800e9ee

08009c9c <__pow5mult>:
 8009c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ca0:	4615      	mov	r5, r2
 8009ca2:	f012 0203 	ands.w	r2, r2, #3
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	460f      	mov	r7, r1
 8009caa:	d007      	beq.n	8009cbc <__pow5mult+0x20>
 8009cac:	4c1a      	ldr	r4, [pc, #104]	; (8009d18 <__pow5mult+0x7c>)
 8009cae:	3a01      	subs	r2, #1
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cb6:	f7ff fe9d 	bl	80099f4 <__multadd>
 8009cba:	4607      	mov	r7, r0
 8009cbc:	10ad      	asrs	r5, r5, #2
 8009cbe:	d027      	beq.n	8009d10 <__pow5mult+0x74>
 8009cc0:	6c34      	ldr	r4, [r6, #64]	; 0x40
 8009cc2:	b944      	cbnz	r4, 8009cd6 <__pow5mult+0x3a>
 8009cc4:	f240 2171 	movw	r1, #625	; 0x271
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f7ff ff27 	bl	8009b1c <__i2b>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	6430      	str	r0, [r6, #64]	; 0x40
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	6003      	str	r3, [r0, #0]
 8009cd6:	f04f 0900 	mov.w	r9, #0
 8009cda:	07eb      	lsls	r3, r5, #31
 8009cdc:	d50a      	bpl.n	8009cf4 <__pow5mult+0x58>
 8009cde:	4639      	mov	r1, r7
 8009ce0:	4622      	mov	r2, r4
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7ff ff30 	bl	8009b48 <__multiply>
 8009ce8:	4639      	mov	r1, r7
 8009cea:	4680      	mov	r8, r0
 8009cec:	4630      	mov	r0, r6
 8009cee:	f7ff fe78 	bl	80099e2 <_Bfree>
 8009cf2:	4647      	mov	r7, r8
 8009cf4:	106d      	asrs	r5, r5, #1
 8009cf6:	d00b      	beq.n	8009d10 <__pow5mult+0x74>
 8009cf8:	6820      	ldr	r0, [r4, #0]
 8009cfa:	b938      	cbnz	r0, 8009d0c <__pow5mult+0x70>
 8009cfc:	4622      	mov	r2, r4
 8009cfe:	4621      	mov	r1, r4
 8009d00:	4630      	mov	r0, r6
 8009d02:	f7ff ff21 	bl	8009b48 <__multiply>
 8009d06:	6020      	str	r0, [r4, #0]
 8009d08:	f8c0 9000 	str.w	r9, [r0]
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	e7e4      	b.n	8009cda <__pow5mult+0x3e>
 8009d10:	4638      	mov	r0, r7
 8009d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d16:	bf00      	nop
 8009d18:	0800eb38 	.word	0x0800eb38

08009d1c <__lshift>:
 8009d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d20:	460c      	mov	r4, r1
 8009d22:	6849      	ldr	r1, [r1, #4]
 8009d24:	6923      	ldr	r3, [r4, #16]
 8009d26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d2a:	68a3      	ldr	r3, [r4, #8]
 8009d2c:	4607      	mov	r7, r0
 8009d2e:	4691      	mov	r9, r2
 8009d30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d34:	f108 0601 	add.w	r6, r8, #1
 8009d38:	42b3      	cmp	r3, r6
 8009d3a:	db0b      	blt.n	8009d54 <__lshift+0x38>
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	f7ff fe2b 	bl	8009998 <_Balloc>
 8009d42:	4605      	mov	r5, r0
 8009d44:	b948      	cbnz	r0, 8009d5a <__lshift+0x3e>
 8009d46:	4602      	mov	r2, r0
 8009d48:	4b28      	ldr	r3, [pc, #160]	; (8009dec <__lshift+0xd0>)
 8009d4a:	4829      	ldr	r0, [pc, #164]	; (8009df0 <__lshift+0xd4>)
 8009d4c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009d50:	f001 fd16 	bl	800b780 <__assert_func>
 8009d54:	3101      	adds	r1, #1
 8009d56:	005b      	lsls	r3, r3, #1
 8009d58:	e7ee      	b.n	8009d38 <__lshift+0x1c>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f100 0114 	add.w	r1, r0, #20
 8009d60:	f100 0210 	add.w	r2, r0, #16
 8009d64:	4618      	mov	r0, r3
 8009d66:	4553      	cmp	r3, sl
 8009d68:	db33      	blt.n	8009dd2 <__lshift+0xb6>
 8009d6a:	6920      	ldr	r0, [r4, #16]
 8009d6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d70:	f104 0314 	add.w	r3, r4, #20
 8009d74:	f019 091f 	ands.w	r9, r9, #31
 8009d78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d80:	d02b      	beq.n	8009dda <__lshift+0xbe>
 8009d82:	f1c9 0e20 	rsb	lr, r9, #32
 8009d86:	468a      	mov	sl, r1
 8009d88:	2200      	movs	r2, #0
 8009d8a:	6818      	ldr	r0, [r3, #0]
 8009d8c:	fa00 f009 	lsl.w	r0, r0, r9
 8009d90:	4310      	orrs	r0, r2
 8009d92:	f84a 0b04 	str.w	r0, [sl], #4
 8009d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d9a:	459c      	cmp	ip, r3
 8009d9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009da0:	d8f3      	bhi.n	8009d8a <__lshift+0x6e>
 8009da2:	ebac 0304 	sub.w	r3, ip, r4
 8009da6:	3b15      	subs	r3, #21
 8009da8:	f023 0303 	bic.w	r3, r3, #3
 8009dac:	3304      	adds	r3, #4
 8009dae:	f104 0015 	add.w	r0, r4, #21
 8009db2:	4584      	cmp	ip, r0
 8009db4:	bf38      	it	cc
 8009db6:	2304      	movcc	r3, #4
 8009db8:	50ca      	str	r2, [r1, r3]
 8009dba:	b10a      	cbz	r2, 8009dc0 <__lshift+0xa4>
 8009dbc:	f108 0602 	add.w	r6, r8, #2
 8009dc0:	3e01      	subs	r6, #1
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	612e      	str	r6, [r5, #16]
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	f7ff fe0b 	bl	80099e2 <_Bfree>
 8009dcc:	4628      	mov	r0, r5
 8009dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	e7c5      	b.n	8009d66 <__lshift+0x4a>
 8009dda:	3904      	subs	r1, #4
 8009ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009de0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009de4:	459c      	cmp	ip, r3
 8009de6:	d8f9      	bhi.n	8009ddc <__lshift+0xc0>
 8009de8:	e7ea      	b.n	8009dc0 <__lshift+0xa4>
 8009dea:	bf00      	nop
 8009dec:	0800e9dd 	.word	0x0800e9dd
 8009df0:	0800e9ee 	.word	0x0800e9ee

08009df4 <__mcmp>:
 8009df4:	b530      	push	{r4, r5, lr}
 8009df6:	6902      	ldr	r2, [r0, #16]
 8009df8:	690c      	ldr	r4, [r1, #16]
 8009dfa:	1b12      	subs	r2, r2, r4
 8009dfc:	d10e      	bne.n	8009e1c <__mcmp+0x28>
 8009dfe:	f100 0314 	add.w	r3, r0, #20
 8009e02:	3114      	adds	r1, #20
 8009e04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e14:	42a5      	cmp	r5, r4
 8009e16:	d003      	beq.n	8009e20 <__mcmp+0x2c>
 8009e18:	d305      	bcc.n	8009e26 <__mcmp+0x32>
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	bd30      	pop	{r4, r5, pc}
 8009e20:	4283      	cmp	r3, r0
 8009e22:	d3f3      	bcc.n	8009e0c <__mcmp+0x18>
 8009e24:	e7fa      	b.n	8009e1c <__mcmp+0x28>
 8009e26:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2a:	e7f7      	b.n	8009e1c <__mcmp+0x28>

08009e2c <__mdiff>:
 8009e2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e30:	460c      	mov	r4, r1
 8009e32:	4606      	mov	r6, r0
 8009e34:	4611      	mov	r1, r2
 8009e36:	4620      	mov	r0, r4
 8009e38:	4690      	mov	r8, r2
 8009e3a:	f7ff ffdb 	bl	8009df4 <__mcmp>
 8009e3e:	1e05      	subs	r5, r0, #0
 8009e40:	d110      	bne.n	8009e64 <__mdiff+0x38>
 8009e42:	4629      	mov	r1, r5
 8009e44:	4630      	mov	r0, r6
 8009e46:	f7ff fda7 	bl	8009998 <_Balloc>
 8009e4a:	b930      	cbnz	r0, 8009e5a <__mdiff+0x2e>
 8009e4c:	4b3a      	ldr	r3, [pc, #232]	; (8009f38 <__mdiff+0x10c>)
 8009e4e:	4602      	mov	r2, r0
 8009e50:	f240 2137 	movw	r1, #567	; 0x237
 8009e54:	4839      	ldr	r0, [pc, #228]	; (8009f3c <__mdiff+0x110>)
 8009e56:	f001 fc93 	bl	800b780 <__assert_func>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e64:	bfa4      	itt	ge
 8009e66:	4643      	movge	r3, r8
 8009e68:	46a0      	movge	r8, r4
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e70:	bfa6      	itte	ge
 8009e72:	461c      	movge	r4, r3
 8009e74:	2500      	movge	r5, #0
 8009e76:	2501      	movlt	r5, #1
 8009e78:	f7ff fd8e 	bl	8009998 <_Balloc>
 8009e7c:	b920      	cbnz	r0, 8009e88 <__mdiff+0x5c>
 8009e7e:	4b2e      	ldr	r3, [pc, #184]	; (8009f38 <__mdiff+0x10c>)
 8009e80:	4602      	mov	r2, r0
 8009e82:	f240 2145 	movw	r1, #581	; 0x245
 8009e86:	e7e5      	b.n	8009e54 <__mdiff+0x28>
 8009e88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e8c:	6926      	ldr	r6, [r4, #16]
 8009e8e:	60c5      	str	r5, [r0, #12]
 8009e90:	f104 0914 	add.w	r9, r4, #20
 8009e94:	f108 0514 	add.w	r5, r8, #20
 8009e98:	f100 0e14 	add.w	lr, r0, #20
 8009e9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ea0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ea4:	f108 0210 	add.w	r2, r8, #16
 8009ea8:	46f2      	mov	sl, lr
 8009eaa:	2100      	movs	r1, #0
 8009eac:	f859 3b04 	ldr.w	r3, [r9], #4
 8009eb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009eb4:	fa11 f88b 	uxtah	r8, r1, fp
 8009eb8:	b299      	uxth	r1, r3
 8009eba:	0c1b      	lsrs	r3, r3, #16
 8009ebc:	eba8 0801 	sub.w	r8, r8, r1
 8009ec0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ec4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ec8:	fa1f f888 	uxth.w	r8, r8
 8009ecc:	1419      	asrs	r1, r3, #16
 8009ece:	454e      	cmp	r6, r9
 8009ed0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ed4:	f84a 3b04 	str.w	r3, [sl], #4
 8009ed8:	d8e8      	bhi.n	8009eac <__mdiff+0x80>
 8009eda:	1b33      	subs	r3, r6, r4
 8009edc:	3b15      	subs	r3, #21
 8009ede:	f023 0303 	bic.w	r3, r3, #3
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	3415      	adds	r4, #21
 8009ee6:	42a6      	cmp	r6, r4
 8009ee8:	bf38      	it	cc
 8009eea:	2304      	movcc	r3, #4
 8009eec:	441d      	add	r5, r3
 8009eee:	4473      	add	r3, lr
 8009ef0:	469e      	mov	lr, r3
 8009ef2:	462e      	mov	r6, r5
 8009ef4:	4566      	cmp	r6, ip
 8009ef6:	d30e      	bcc.n	8009f16 <__mdiff+0xea>
 8009ef8:	f10c 0203 	add.w	r2, ip, #3
 8009efc:	1b52      	subs	r2, r2, r5
 8009efe:	f022 0203 	bic.w	r2, r2, #3
 8009f02:	3d03      	subs	r5, #3
 8009f04:	45ac      	cmp	ip, r5
 8009f06:	bf38      	it	cc
 8009f08:	2200      	movcc	r2, #0
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f10:	b17a      	cbz	r2, 8009f32 <__mdiff+0x106>
 8009f12:	6107      	str	r7, [r0, #16]
 8009f14:	e7a4      	b.n	8009e60 <__mdiff+0x34>
 8009f16:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f1a:	fa11 f288 	uxtah	r2, r1, r8
 8009f1e:	1414      	asrs	r4, r2, #16
 8009f20:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f24:	b292      	uxth	r2, r2
 8009f26:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f2a:	f84e 2b04 	str.w	r2, [lr], #4
 8009f2e:	1421      	asrs	r1, r4, #16
 8009f30:	e7e0      	b.n	8009ef4 <__mdiff+0xc8>
 8009f32:	3f01      	subs	r7, #1
 8009f34:	e7ea      	b.n	8009f0c <__mdiff+0xe0>
 8009f36:	bf00      	nop
 8009f38:	0800e9dd 	.word	0x0800e9dd
 8009f3c:	0800e9ee 	.word	0x0800e9ee

08009f40 <__d2b>:
 8009f40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f44:	460f      	mov	r7, r1
 8009f46:	2101      	movs	r1, #1
 8009f48:	ec59 8b10 	vmov	r8, r9, d0
 8009f4c:	4616      	mov	r6, r2
 8009f4e:	f7ff fd23 	bl	8009998 <_Balloc>
 8009f52:	4604      	mov	r4, r0
 8009f54:	b930      	cbnz	r0, 8009f64 <__d2b+0x24>
 8009f56:	4602      	mov	r2, r0
 8009f58:	4b24      	ldr	r3, [pc, #144]	; (8009fec <__d2b+0xac>)
 8009f5a:	4825      	ldr	r0, [pc, #148]	; (8009ff0 <__d2b+0xb0>)
 8009f5c:	f240 310f 	movw	r1, #783	; 0x30f
 8009f60:	f001 fc0e 	bl	800b780 <__assert_func>
 8009f64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f6c:	bb2d      	cbnz	r5, 8009fba <__d2b+0x7a>
 8009f6e:	9301      	str	r3, [sp, #4]
 8009f70:	f1b8 0300 	subs.w	r3, r8, #0
 8009f74:	d026      	beq.n	8009fc4 <__d2b+0x84>
 8009f76:	4668      	mov	r0, sp
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	f7ff fda1 	bl	8009ac0 <__lo0bits>
 8009f7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f82:	b1e8      	cbz	r0, 8009fc0 <__d2b+0x80>
 8009f84:	f1c0 0320 	rsb	r3, r0, #32
 8009f88:	fa02 f303 	lsl.w	r3, r2, r3
 8009f8c:	430b      	orrs	r3, r1
 8009f8e:	40c2      	lsrs	r2, r0
 8009f90:	6163      	str	r3, [r4, #20]
 8009f92:	9201      	str	r2, [sp, #4]
 8009f94:	9b01      	ldr	r3, [sp, #4]
 8009f96:	61a3      	str	r3, [r4, #24]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	bf14      	ite	ne
 8009f9c:	2202      	movne	r2, #2
 8009f9e:	2201      	moveq	r2, #1
 8009fa0:	6122      	str	r2, [r4, #16]
 8009fa2:	b1bd      	cbz	r5, 8009fd4 <__d2b+0x94>
 8009fa4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009fa8:	4405      	add	r5, r0
 8009faa:	603d      	str	r5, [r7, #0]
 8009fac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009fb0:	6030      	str	r0, [r6, #0]
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	b003      	add	sp, #12
 8009fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fbe:	e7d6      	b.n	8009f6e <__d2b+0x2e>
 8009fc0:	6161      	str	r1, [r4, #20]
 8009fc2:	e7e7      	b.n	8009f94 <__d2b+0x54>
 8009fc4:	a801      	add	r0, sp, #4
 8009fc6:	f7ff fd7b 	bl	8009ac0 <__lo0bits>
 8009fca:	9b01      	ldr	r3, [sp, #4]
 8009fcc:	6163      	str	r3, [r4, #20]
 8009fce:	3020      	adds	r0, #32
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	e7e5      	b.n	8009fa0 <__d2b+0x60>
 8009fd4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fdc:	6038      	str	r0, [r7, #0]
 8009fde:	6918      	ldr	r0, [r3, #16]
 8009fe0:	f7ff fd4e 	bl	8009a80 <__hi0bits>
 8009fe4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fe8:	e7e2      	b.n	8009fb0 <__d2b+0x70>
 8009fea:	bf00      	nop
 8009fec:	0800e9dd 	.word	0x0800e9dd
 8009ff0:	0800e9ee 	.word	0x0800e9ee

08009ff4 <__ascii_wctomb>:
 8009ff4:	b149      	cbz	r1, 800a00a <__ascii_wctomb+0x16>
 8009ff6:	2aff      	cmp	r2, #255	; 0xff
 8009ff8:	bf85      	ittet	hi
 8009ffa:	238a      	movhi	r3, #138	; 0x8a
 8009ffc:	6003      	strhi	r3, [r0, #0]
 8009ffe:	700a      	strbls	r2, [r1, #0]
 800a000:	f04f 30ff 	movhi.w	r0, #4294967295
 800a004:	bf98      	it	ls
 800a006:	2001      	movls	r0, #1
 800a008:	4770      	bx	lr
 800a00a:	4608      	mov	r0, r1
 800a00c:	4770      	bx	lr
	...

0800a010 <_svfprintf_r>:
 800a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a014:	ed2d 8b04 	vpush	{d8-d9}
 800a018:	b0cf      	sub	sp, #316	; 0x13c
 800a01a:	4689      	mov	r9, r1
 800a01c:	9203      	str	r2, [sp, #12]
 800a01e:	461d      	mov	r5, r3
 800a020:	4682      	mov	sl, r0
 800a022:	f001 fb01 	bl	800b628 <_localeconv_r>
 800a026:	6803      	ldr	r3, [r0, #0]
 800a028:	9313      	str	r3, [sp, #76]	; 0x4c
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7f6 f8d8 	bl	80001e0 <strlen>
 800a030:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a034:	900e      	str	r0, [sp, #56]	; 0x38
 800a036:	0619      	lsls	r1, r3, #24
 800a038:	d51a      	bpl.n	800a070 <_svfprintf_r+0x60>
 800a03a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a03e:	b9bb      	cbnz	r3, 800a070 <_svfprintf_r+0x60>
 800a040:	2140      	movs	r1, #64	; 0x40
 800a042:	4650      	mov	r0, sl
 800a044:	f7ff fa50 	bl	80094e8 <_malloc_r>
 800a048:	f8c9 0000 	str.w	r0, [r9]
 800a04c:	f8c9 0010 	str.w	r0, [r9, #16]
 800a050:	b958      	cbnz	r0, 800a06a <_svfprintf_r+0x5a>
 800a052:	230c      	movs	r3, #12
 800a054:	f8ca 3000 	str.w	r3, [sl]
 800a058:	f04f 33ff 	mov.w	r3, #4294967295
 800a05c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a05e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a060:	b04f      	add	sp, #316	; 0x13c
 800a062:	ecbd 8b04 	vpop	{d8-d9}
 800a066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06a:	2340      	movs	r3, #64	; 0x40
 800a06c:	f8c9 3014 	str.w	r3, [r9, #20]
 800a070:	ed9f 7b91 	vldr	d7, [pc, #580]	; 800a2b8 <_svfprintf_r+0x2a8>
 800a074:	2300      	movs	r3, #0
 800a076:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 800a07a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a07e:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 800a082:	ac25      	add	r4, sp, #148	; 0x94
 800a084:	9422      	str	r4, [sp, #136]	; 0x88
 800a086:	9305      	str	r3, [sp, #20]
 800a088:	9309      	str	r3, [sp, #36]	; 0x24
 800a08a:	9311      	str	r3, [sp, #68]	; 0x44
 800a08c:	9314      	str	r3, [sp, #80]	; 0x50
 800a08e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a090:	9b03      	ldr	r3, [sp, #12]
 800a092:	461e      	mov	r6, r3
 800a094:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a098:	b10a      	cbz	r2, 800a09e <_svfprintf_r+0x8e>
 800a09a:	2a25      	cmp	r2, #37	; 0x25
 800a09c:	d1f9      	bne.n	800a092 <_svfprintf_r+0x82>
 800a09e:	9b03      	ldr	r3, [sp, #12]
 800a0a0:	1af7      	subs	r7, r6, r3
 800a0a2:	d00d      	beq.n	800a0c0 <_svfprintf_r+0xb0>
 800a0a4:	e9c4 3700 	strd	r3, r7, [r4]
 800a0a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a0aa:	443b      	add	r3, r7
 800a0ac:	9324      	str	r3, [sp, #144]	; 0x90
 800a0ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	2b07      	cmp	r3, #7
 800a0b4:	9323      	str	r3, [sp, #140]	; 0x8c
 800a0b6:	dc78      	bgt.n	800a1aa <_svfprintf_r+0x19a>
 800a0b8:	3408      	adds	r4, #8
 800a0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0bc:	443b      	add	r3, r7
 800a0be:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0c0:	7833      	ldrb	r3, [r6, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f001 815a 	beq.w	800b37c <_svfprintf_r+0x136c>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	3601      	adds	r6, #1
 800a0cc:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a0d0:	f04f 38ff 	mov.w	r8, #4294967295
 800a0d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0d6:	469b      	mov	fp, r3
 800a0d8:	270a      	movs	r7, #10
 800a0da:	212b      	movs	r1, #43	; 0x2b
 800a0dc:	4633      	mov	r3, r6
 800a0de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0e2:	9207      	str	r2, [sp, #28]
 800a0e4:	930a      	str	r3, [sp, #40]	; 0x28
 800a0e6:	9b07      	ldr	r3, [sp, #28]
 800a0e8:	3b20      	subs	r3, #32
 800a0ea:	2b5a      	cmp	r3, #90	; 0x5a
 800a0ec:	f200 85c6 	bhi.w	800ac7c <_svfprintf_r+0xc6c>
 800a0f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a0f4:	05c4007e 	.word	0x05c4007e
 800a0f8:	008605c4 	.word	0x008605c4
 800a0fc:	05c405c4 	.word	0x05c405c4
 800a100:	006505c4 	.word	0x006505c4
 800a104:	05c405c4 	.word	0x05c405c4
 800a108:	00930089 	.word	0x00930089
 800a10c:	009005c4 	.word	0x009005c4
 800a110:	05c40096 	.word	0x05c40096
 800a114:	00b200af 	.word	0x00b200af
 800a118:	00b200b2 	.word	0x00b200b2
 800a11c:	00b200b2 	.word	0x00b200b2
 800a120:	00b200b2 	.word	0x00b200b2
 800a124:	00b200b2 	.word	0x00b200b2
 800a128:	05c405c4 	.word	0x05c405c4
 800a12c:	05c405c4 	.word	0x05c405c4
 800a130:	05c405c4 	.word	0x05c405c4
 800a134:	012905c4 	.word	0x012905c4
 800a138:	00e605c4 	.word	0x00e605c4
 800a13c:	012900f9 	.word	0x012900f9
 800a140:	01290129 	.word	0x01290129
 800a144:	05c405c4 	.word	0x05c405c4
 800a148:	05c405c4 	.word	0x05c405c4
 800a14c:	05c400c2 	.word	0x05c400c2
 800a150:	049105c4 	.word	0x049105c4
 800a154:	05c405c4 	.word	0x05c405c4
 800a158:	04db05c4 	.word	0x04db05c4
 800a15c:	050105c4 	.word	0x050105c4
 800a160:	05c405c4 	.word	0x05c405c4
 800a164:	05c40523 	.word	0x05c40523
 800a168:	05c405c4 	.word	0x05c405c4
 800a16c:	05c405c4 	.word	0x05c405c4
 800a170:	05c405c4 	.word	0x05c405c4
 800a174:	012905c4 	.word	0x012905c4
 800a178:	00e605c4 	.word	0x00e605c4
 800a17c:	012900fb 	.word	0x012900fb
 800a180:	01290129 	.word	0x01290129
 800a184:	00fb00c5 	.word	0x00fb00c5
 800a188:	05c400d9 	.word	0x05c400d9
 800a18c:	05c400d2 	.word	0x05c400d2
 800a190:	0493046c 	.word	0x0493046c
 800a194:	00d904ca 	.word	0x00d904ca
 800a198:	04db05c4 	.word	0x04db05c4
 800a19c:	0503007c 	.word	0x0503007c
 800a1a0:	05c405c4 	.word	0x05c405c4
 800a1a4:	05c40542 	.word	0x05c40542
 800a1a8:	007c      	.short	0x007c
 800a1aa:	aa22      	add	r2, sp, #136	; 0x88
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	4650      	mov	r0, sl
 800a1b0:	f002 f9aa 	bl	800c508 <__ssprint_r>
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	f040 8137 	bne.w	800a428 <_svfprintf_r+0x418>
 800a1ba:	ac25      	add	r4, sp, #148	; 0x94
 800a1bc:	e77d      	b.n	800a0ba <_svfprintf_r+0xaa>
 800a1be:	4650      	mov	r0, sl
 800a1c0:	f001 fa32 	bl	800b628 <_localeconv_r>
 800a1c4:	6843      	ldr	r3, [r0, #4]
 800a1c6:	9314      	str	r3, [sp, #80]	; 0x50
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7f6 f809 	bl	80001e0 <strlen>
 800a1ce:	9011      	str	r0, [sp, #68]	; 0x44
 800a1d0:	4650      	mov	r0, sl
 800a1d2:	f001 fa29 	bl	800b628 <_localeconv_r>
 800a1d6:	6883      	ldr	r3, [r0, #8]
 800a1d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1dc:	212b      	movs	r1, #43	; 0x2b
 800a1de:	b12b      	cbz	r3, 800a1ec <_svfprintf_r+0x1dc>
 800a1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e2:	b11b      	cbz	r3, 800a1ec <_svfprintf_r+0x1dc>
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	b10b      	cbz	r3, 800a1ec <_svfprintf_r+0x1dc>
 800a1e8:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 800a1ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a1ee:	e775      	b.n	800a0dc <_svfprintf_r+0xcc>
 800a1f0:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1f9      	bne.n	800a1ec <_svfprintf_r+0x1dc>
 800a1f8:	2320      	movs	r3, #32
 800a1fa:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a1fe:	e7f5      	b.n	800a1ec <_svfprintf_r+0x1dc>
 800a200:	f04b 0b01 	orr.w	fp, fp, #1
 800a204:	e7f2      	b.n	800a1ec <_svfprintf_r+0x1dc>
 800a206:	f855 3b04 	ldr.w	r3, [r5], #4
 800a20a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	daed      	bge.n	800a1ec <_svfprintf_r+0x1dc>
 800a210:	425b      	negs	r3, r3
 800a212:	930f      	str	r3, [sp, #60]	; 0x3c
 800a214:	f04b 0b04 	orr.w	fp, fp, #4
 800a218:	e7e8      	b.n	800a1ec <_svfprintf_r+0x1dc>
 800a21a:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 800a21e:	e7e5      	b.n	800a1ec <_svfprintf_r+0x1dc>
 800a220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a222:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a226:	9207      	str	r2, [sp, #28]
 800a228:	2a2a      	cmp	r2, #42	; 0x2a
 800a22a:	d10f      	bne.n	800a24c <_svfprintf_r+0x23c>
 800a22c:	f855 2b04 	ldr.w	r2, [r5], #4
 800a230:	930a      	str	r3, [sp, #40]	; 0x28
 800a232:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800a236:	e7d9      	b.n	800a1ec <_svfprintf_r+0x1dc>
 800a238:	fb07 2808 	mla	r8, r7, r8, r2
 800a23c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a240:	9207      	str	r2, [sp, #28]
 800a242:	9a07      	ldr	r2, [sp, #28]
 800a244:	3a30      	subs	r2, #48	; 0x30
 800a246:	2a09      	cmp	r2, #9
 800a248:	d9f6      	bls.n	800a238 <_svfprintf_r+0x228>
 800a24a:	e74b      	b.n	800a0e4 <_svfprintf_r+0xd4>
 800a24c:	f04f 0800 	mov.w	r8, #0
 800a250:	e7f7      	b.n	800a242 <_svfprintf_r+0x232>
 800a252:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800a256:	e7c9      	b.n	800a1ec <_svfprintf_r+0x1dc>
 800a258:	2200      	movs	r2, #0
 800a25a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a25c:	920f      	str	r2, [sp, #60]	; 0x3c
 800a25e:	9a07      	ldr	r2, [sp, #28]
 800a260:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a262:	3a30      	subs	r2, #48	; 0x30
 800a264:	fb07 2200 	mla	r2, r7, r0, r2
 800a268:	920f      	str	r2, [sp, #60]	; 0x3c
 800a26a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a26e:	9207      	str	r2, [sp, #28]
 800a270:	3a30      	subs	r2, #48	; 0x30
 800a272:	2a09      	cmp	r2, #9
 800a274:	d9f3      	bls.n	800a25e <_svfprintf_r+0x24e>
 800a276:	e735      	b.n	800a0e4 <_svfprintf_r+0xd4>
 800a278:	f04b 0b08 	orr.w	fp, fp, #8
 800a27c:	e7b6      	b.n	800a1ec <_svfprintf_r+0x1dc>
 800a27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	2b68      	cmp	r3, #104	; 0x68
 800a284:	bf01      	itttt	eq
 800a286:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 800a288:	3301      	addeq	r3, #1
 800a28a:	930a      	streq	r3, [sp, #40]	; 0x28
 800a28c:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 800a290:	bf18      	it	ne
 800a292:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 800a296:	e7a9      	b.n	800a1ec <_svfprintf_r+0x1dc>
 800a298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	2b6c      	cmp	r3, #108	; 0x6c
 800a29e:	d105      	bne.n	800a2ac <_svfprintf_r+0x29c>
 800a2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	930a      	str	r3, [sp, #40]	; 0x28
 800a2a6:	f04b 0b20 	orr.w	fp, fp, #32
 800a2aa:	e79f      	b.n	800a1ec <_svfprintf_r+0x1dc>
 800a2ac:	f04b 0b10 	orr.w	fp, fp, #16
 800a2b0:	e79c      	b.n	800a1ec <_svfprintf_r+0x1dc>
 800a2b2:	bf00      	nop
 800a2b4:	f3af 8000 	nop.w
	...
 800a2c0:	462a      	mov	r2, r5
 800a2c2:	f852 3b04 	ldr.w	r3, [r2], #4
 800a2c6:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	9206      	str	r2, [sp, #24]
 800a2ce:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a2d2:	9304      	str	r3, [sp, #16]
 800a2d4:	461f      	mov	r7, r3
 800a2d6:	461e      	mov	r6, r3
 800a2d8:	9308      	str	r3, [sp, #32]
 800a2da:	461d      	mov	r5, r3
 800a2dc:	ab35      	add	r3, sp, #212	; 0xd4
 800a2de:	f04f 0801 	mov.w	r8, #1
 800a2e2:	9303      	str	r3, [sp, #12]
 800a2e4:	e1b9      	b.n	800a65a <_svfprintf_r+0x64a>
 800a2e6:	f04b 0b10 	orr.w	fp, fp, #16
 800a2ea:	f01b 0f20 	tst.w	fp, #32
 800a2ee:	d012      	beq.n	800a316 <_svfprintf_r+0x306>
 800a2f0:	3507      	adds	r5, #7
 800a2f2:	f025 0307 	bic.w	r3, r5, #7
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	685e      	ldr	r6, [r3, #4]
 800a2fa:	f852 5b08 	ldr.w	r5, [r2], #8
 800a2fe:	9206      	str	r2, [sp, #24]
 800a300:	2e00      	cmp	r6, #0
 800a302:	da06      	bge.n	800a312 <_svfprintf_r+0x302>
 800a304:	426d      	negs	r5, r5
 800a306:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800a30a:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 800a30e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a312:	2301      	movs	r3, #1
 800a314:	e392      	b.n	800aa3c <_svfprintf_r+0xa2c>
 800a316:	462b      	mov	r3, r5
 800a318:	f01b 0f10 	tst.w	fp, #16
 800a31c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a320:	9306      	str	r3, [sp, #24]
 800a322:	d002      	beq.n	800a32a <_svfprintf_r+0x31a>
 800a324:	4635      	mov	r5, r6
 800a326:	17f6      	asrs	r6, r6, #31
 800a328:	e7ea      	b.n	800a300 <_svfprintf_r+0x2f0>
 800a32a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800a32e:	d003      	beq.n	800a338 <_svfprintf_r+0x328>
 800a330:	b235      	sxth	r5, r6
 800a332:	f346 36c0 	sbfx	r6, r6, #15, #1
 800a336:	e7e3      	b.n	800a300 <_svfprintf_r+0x2f0>
 800a338:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800a33c:	d0f2      	beq.n	800a324 <_svfprintf_r+0x314>
 800a33e:	b275      	sxtb	r5, r6
 800a340:	f346 16c0 	sbfx	r6, r6, #7, #1
 800a344:	e7dc      	b.n	800a300 <_svfprintf_r+0x2f0>
 800a346:	3507      	adds	r5, #7
 800a348:	f025 0307 	bic.w	r3, r5, #7
 800a34c:	ecb3 7b02 	vldmia	r3!, {d7}
 800a350:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a354:	9306      	str	r3, [sp, #24]
 800a356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a358:	ee09 3a10 	vmov	s18, r3
 800a35c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a35e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a362:	ee09 3a90 	vmov	s19, r3
 800a366:	f04f 32ff 	mov.w	r2, #4294967295
 800a36a:	4b34      	ldr	r3, [pc, #208]	; (800a43c <_svfprintf_r+0x42c>)
 800a36c:	ec51 0b19 	vmov	r0, r1, d9
 800a370:	f7f6 fbe4 	bl	8000b3c <__aeabi_dcmpun>
 800a374:	bb18      	cbnz	r0, 800a3be <_svfprintf_r+0x3ae>
 800a376:	4b31      	ldr	r3, [pc, #196]	; (800a43c <_svfprintf_r+0x42c>)
 800a378:	ec51 0b19 	vmov	r0, r1, d9
 800a37c:	f04f 32ff 	mov.w	r2, #4294967295
 800a380:	f7f6 fbbe 	bl	8000b00 <__aeabi_dcmple>
 800a384:	b9d8      	cbnz	r0, 800a3be <_svfprintf_r+0x3ae>
 800a386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a38a:	2200      	movs	r2, #0
 800a38c:	2300      	movs	r3, #0
 800a38e:	f7f6 fbad 	bl	8000aec <__aeabi_dcmplt>
 800a392:	b110      	cbz	r0, 800a39a <_svfprintf_r+0x38a>
 800a394:	232d      	movs	r3, #45	; 0x2d
 800a396:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a39a:	4a29      	ldr	r2, [pc, #164]	; (800a440 <_svfprintf_r+0x430>)
 800a39c:	4b29      	ldr	r3, [pc, #164]	; (800a444 <_svfprintf_r+0x434>)
 800a39e:	9907      	ldr	r1, [sp, #28]
 800a3a0:	2947      	cmp	r1, #71	; 0x47
 800a3a2:	bfc8      	it	gt
 800a3a4:	461a      	movgt	r2, r3
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	9203      	str	r2, [sp, #12]
 800a3aa:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 800a3ae:	9304      	str	r3, [sp, #16]
 800a3b0:	f04f 0803 	mov.w	r8, #3
 800a3b4:	461f      	mov	r7, r3
 800a3b6:	461e      	mov	r6, r3
 800a3b8:	9308      	str	r3, [sp, #32]
 800a3ba:	461d      	mov	r5, r3
 800a3bc:	e14d      	b.n	800a65a <_svfprintf_r+0x64a>
 800a3be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a3c2:	4610      	mov	r0, r2
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	f7f6 fbb9 	bl	8000b3c <__aeabi_dcmpun>
 800a3ca:	b140      	cbz	r0, 800a3de <_svfprintf_r+0x3ce>
 800a3cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3ce:	4a1e      	ldr	r2, [pc, #120]	; (800a448 <_svfprintf_r+0x438>)
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	bfbc      	itt	lt
 800a3d4:	232d      	movlt	r3, #45	; 0x2d
 800a3d6:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800a3da:	4b1c      	ldr	r3, [pc, #112]	; (800a44c <_svfprintf_r+0x43c>)
 800a3dc:	e7df      	b.n	800a39e <_svfprintf_r+0x38e>
 800a3de:	9b07      	ldr	r3, [sp, #28]
 800a3e0:	f023 0320 	bic.w	r3, r3, #32
 800a3e4:	2b41      	cmp	r3, #65	; 0x41
 800a3e6:	9308      	str	r3, [sp, #32]
 800a3e8:	d132      	bne.n	800a450 <_svfprintf_r+0x440>
 800a3ea:	2330      	movs	r3, #48	; 0x30
 800a3ec:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800a3f0:	9b07      	ldr	r3, [sp, #28]
 800a3f2:	2b61      	cmp	r3, #97	; 0x61
 800a3f4:	bf0c      	ite	eq
 800a3f6:	2378      	moveq	r3, #120	; 0x78
 800a3f8:	2358      	movne	r3, #88	; 0x58
 800a3fa:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 800a3fe:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800a402:	f04b 0b02 	orr.w	fp, fp, #2
 800a406:	f340 8204 	ble.w	800a812 <_svfprintf_r+0x802>
 800a40a:	f108 0101 	add.w	r1, r8, #1
 800a40e:	4650      	mov	r0, sl
 800a410:	f7ff f86a 	bl	80094e8 <_malloc_r>
 800a414:	9003      	str	r0, [sp, #12]
 800a416:	2800      	cmp	r0, #0
 800a418:	f040 81ff 	bne.w	800a81a <_svfprintf_r+0x80a>
 800a41c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a424:	f8a9 300c 	strh.w	r3, [r9, #12]
 800a428:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a42c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a432:	bf18      	it	ne
 800a434:	f04f 33ff 	movne.w	r3, #4294967295
 800a438:	e610      	b.n	800a05c <_svfprintf_r+0x4c>
 800a43a:	bf00      	nop
 800a43c:	7fefffff 	.word	0x7fefffff
 800a440:	0800eb44 	.word	0x0800eb44
 800a444:	0800eb48 	.word	0x0800eb48
 800a448:	0800eb4c 	.word	0x0800eb4c
 800a44c:	0800eb50 	.word	0x0800eb50
 800a450:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a454:	f000 81e4 	beq.w	800a820 <_svfprintf_r+0x810>
 800a458:	9b08      	ldr	r3, [sp, #32]
 800a45a:	2b47      	cmp	r3, #71	; 0x47
 800a45c:	f040 81e4 	bne.w	800a828 <_svfprintf_r+0x818>
 800a460:	f1b8 0f00 	cmp.w	r8, #0
 800a464:	f040 81e0 	bne.w	800a828 <_svfprintf_r+0x818>
 800a468:	f8cd 8010 	str.w	r8, [sp, #16]
 800a46c:	f04f 0801 	mov.w	r8, #1
 800a470:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 800a474:	9310      	str	r3, [sp, #64]	; 0x40
 800a476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f280 81d7 	bge.w	800a82c <_svfprintf_r+0x81c>
 800a47e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a480:	ee08 3a10 	vmov	s16, r3
 800a484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a486:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a48a:	ee08 3a90 	vmov	s17, r3
 800a48e:	232d      	movs	r3, #45	; 0x2d
 800a490:	9318      	str	r3, [sp, #96]	; 0x60
 800a492:	9b08      	ldr	r3, [sp, #32]
 800a494:	2b41      	cmp	r3, #65	; 0x41
 800a496:	f040 81e7 	bne.w	800a868 <_svfprintf_r+0x858>
 800a49a:	eeb0 0a48 	vmov.f32	s0, s16
 800a49e:	eef0 0a68 	vmov.f32	s1, s17
 800a4a2:	a81c      	add	r0, sp, #112	; 0x70
 800a4a4:	f001 f8f4 	bl	800b690 <frexp>
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a4ae:	ec51 0b10 	vmov	r0, r1, d0
 800a4b2:	f7f6 f8a9 	bl	8000608 <__aeabi_dmul>
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	4606      	mov	r6, r0
 800a4bc:	460f      	mov	r7, r1
 800a4be:	f7f6 fb0b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4c2:	b108      	cbz	r0, 800a4c8 <_svfprintf_r+0x4b8>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	931c      	str	r3, [sp, #112]	; 0x70
 800a4c8:	4bac      	ldr	r3, [pc, #688]	; (800a77c <_svfprintf_r+0x76c>)
 800a4ca:	4aad      	ldr	r2, [pc, #692]	; (800a780 <_svfprintf_r+0x770>)
 800a4cc:	9907      	ldr	r1, [sp, #28]
 800a4ce:	9d03      	ldr	r5, [sp, #12]
 800a4d0:	2961      	cmp	r1, #97	; 0x61
 800a4d2:	bf18      	it	ne
 800a4d4:	461a      	movne	r2, r3
 800a4d6:	f108 33ff 	add.w	r3, r8, #4294967295
 800a4da:	9217      	str	r2, [sp, #92]	; 0x5c
 800a4dc:	9305      	str	r3, [sp, #20]
 800a4de:	4ba9      	ldr	r3, [pc, #676]	; (800a784 <_svfprintf_r+0x774>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	4639      	mov	r1, r7
 800a4e6:	f7f6 f88f 	bl	8000608 <__aeabi_dmul>
 800a4ea:	460f      	mov	r7, r1
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	f7f6 fb3b 	bl	8000b68 <__aeabi_d2iz>
 800a4f2:	9019      	str	r0, [sp, #100]	; 0x64
 800a4f4:	f7f6 f81e 	bl	8000534 <__aeabi_i2d>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	4639      	mov	r1, r7
 800a500:	f7f5 feca 	bl	8000298 <__aeabi_dsub>
 800a504:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a506:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a508:	5c9b      	ldrb	r3, [r3, r2]
 800a50a:	f805 3b01 	strb.w	r3, [r5], #1
 800a50e:	9b05      	ldr	r3, [sp, #20]
 800a510:	9312      	str	r3, [sp, #72]	; 0x48
 800a512:	1c5a      	adds	r2, r3, #1
 800a514:	4606      	mov	r6, r0
 800a516:	460f      	mov	r7, r1
 800a518:	d007      	beq.n	800a52a <_svfprintf_r+0x51a>
 800a51a:	3b01      	subs	r3, #1
 800a51c:	9305      	str	r3, [sp, #20]
 800a51e:	2200      	movs	r2, #0
 800a520:	2300      	movs	r3, #0
 800a522:	f7f6 fad9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a526:	2800      	cmp	r0, #0
 800a528:	d0d9      	beq.n	800a4de <_svfprintf_r+0x4ce>
 800a52a:	4b97      	ldr	r3, [pc, #604]	; (800a788 <_svfprintf_r+0x778>)
 800a52c:	2200      	movs	r2, #0
 800a52e:	4630      	mov	r0, r6
 800a530:	4639      	mov	r1, r7
 800a532:	f7f6 faf9 	bl	8000b28 <__aeabi_dcmpgt>
 800a536:	b960      	cbnz	r0, 800a552 <_svfprintf_r+0x542>
 800a538:	4b93      	ldr	r3, [pc, #588]	; (800a788 <_svfprintf_r+0x778>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	4630      	mov	r0, r6
 800a53e:	4639      	mov	r1, r7
 800a540:	f7f6 faca 	bl	8000ad8 <__aeabi_dcmpeq>
 800a544:	2800      	cmp	r0, #0
 800a546:	f000 818a 	beq.w	800a85e <_svfprintf_r+0x84e>
 800a54a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a54c:	07de      	lsls	r6, r3, #31
 800a54e:	f140 8186 	bpl.w	800a85e <_svfprintf_r+0x84e>
 800a552:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a554:	9520      	str	r5, [sp, #128]	; 0x80
 800a556:	7bd9      	ldrb	r1, [r3, #15]
 800a558:	2030      	movs	r0, #48	; 0x30
 800a55a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a55c:	1e53      	subs	r3, r2, #1
 800a55e:	9320      	str	r3, [sp, #128]	; 0x80
 800a560:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800a564:	428b      	cmp	r3, r1
 800a566:	f000 8169 	beq.w	800a83c <_svfprintf_r+0x82c>
 800a56a:	2b39      	cmp	r3, #57	; 0x39
 800a56c:	bf0b      	itete	eq
 800a56e:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800a570:	3301      	addne	r3, #1
 800a572:	7a9b      	ldrbeq	r3, [r3, #10]
 800a574:	b2db      	uxtbne	r3, r3
 800a576:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a57a:	9b03      	ldr	r3, [sp, #12]
 800a57c:	1aeb      	subs	r3, r5, r3
 800a57e:	9305      	str	r3, [sp, #20]
 800a580:	9b08      	ldr	r3, [sp, #32]
 800a582:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800a584:	2b47      	cmp	r3, #71	; 0x47
 800a586:	f040 81b9 	bne.w	800a8fc <_svfprintf_r+0x8ec>
 800a58a:	1ce8      	adds	r0, r5, #3
 800a58c:	db02      	blt.n	800a594 <_svfprintf_r+0x584>
 800a58e:	45a8      	cmp	r8, r5
 800a590:	f280 81d7 	bge.w	800a942 <_svfprintf_r+0x932>
 800a594:	9b07      	ldr	r3, [sp, #28]
 800a596:	3b02      	subs	r3, #2
 800a598:	9307      	str	r3, [sp, #28]
 800a59a:	9907      	ldr	r1, [sp, #28]
 800a59c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800a5a0:	f021 0120 	bic.w	r1, r1, #32
 800a5a4:	2941      	cmp	r1, #65	; 0x41
 800a5a6:	bf08      	it	eq
 800a5a8:	320f      	addeq	r2, #15
 800a5aa:	f105 33ff 	add.w	r3, r5, #4294967295
 800a5ae:	bf06      	itte	eq
 800a5b0:	b2d2      	uxtbeq	r2, r2
 800a5b2:	2101      	moveq	r1, #1
 800a5b4:	2100      	movne	r1, #0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	931c      	str	r3, [sp, #112]	; 0x70
 800a5ba:	bfb8      	it	lt
 800a5bc:	f1c5 0301 	rsblt	r3, r5, #1
 800a5c0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800a5c4:	bfb4      	ite	lt
 800a5c6:	222d      	movlt	r2, #45	; 0x2d
 800a5c8:	222b      	movge	r2, #43	; 0x2b
 800a5ca:	2b09      	cmp	r3, #9
 800a5cc:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 800a5d0:	f340 81aa 	ble.w	800a928 <_svfprintf_r+0x918>
 800a5d4:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 800a5d8:	260a      	movs	r6, #10
 800a5da:	4602      	mov	r2, r0
 800a5dc:	fb93 f5f6 	sdiv	r5, r3, r6
 800a5e0:	fb06 3115 	mls	r1, r6, r5, r3
 800a5e4:	3130      	adds	r1, #48	; 0x30
 800a5e6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	2963      	cmp	r1, #99	; 0x63
 800a5ee:	f100 30ff 	add.w	r0, r0, #4294967295
 800a5f2:	462b      	mov	r3, r5
 800a5f4:	dcf1      	bgt.n	800a5da <_svfprintf_r+0x5ca>
 800a5f6:	3330      	adds	r3, #48	; 0x30
 800a5f8:	1e91      	subs	r1, r2, #2
 800a5fa:	f800 3c01 	strb.w	r3, [r0, #-1]
 800a5fe:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 800a602:	460b      	mov	r3, r1
 800a604:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 800a608:	4283      	cmp	r3, r0
 800a60a:	f0c0 8188 	bcc.w	800a91e <_svfprintf_r+0x90e>
 800a60e:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 800a612:	1a9b      	subs	r3, r3, r2
 800a614:	4281      	cmp	r1, r0
 800a616:	bf88      	it	hi
 800a618:	2300      	movhi	r3, #0
 800a61a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800a61e:	441a      	add	r2, r3
 800a620:	ab1e      	add	r3, sp, #120	; 0x78
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	9a05      	ldr	r2, [sp, #20]
 800a626:	9315      	str	r3, [sp, #84]	; 0x54
 800a628:	2a01      	cmp	r2, #1
 800a62a:	eb03 0802 	add.w	r8, r3, r2
 800a62e:	dc02      	bgt.n	800a636 <_svfprintf_r+0x626>
 800a630:	f01b 0f01 	tst.w	fp, #1
 800a634:	d001      	beq.n	800a63a <_svfprintf_r+0x62a>
 800a636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a638:	4498      	add	r8, r3
 800a63a:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 800a63e:	2600      	movs	r6, #0
 800a640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a644:	9310      	str	r3, [sp, #64]	; 0x40
 800a646:	9608      	str	r6, [sp, #32]
 800a648:	4635      	mov	r5, r6
 800a64a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a64c:	b113      	cbz	r3, 800a654 <_svfprintf_r+0x644>
 800a64e:	232d      	movs	r3, #45	; 0x2d
 800a650:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a654:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800a658:	2700      	movs	r7, #0
 800a65a:	4547      	cmp	r7, r8
 800a65c:	463b      	mov	r3, r7
 800a65e:	bfb8      	it	lt
 800a660:	4643      	movlt	r3, r8
 800a662:	9310      	str	r3, [sp, #64]	; 0x40
 800a664:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800a668:	b113      	cbz	r3, 800a670 <_svfprintf_r+0x660>
 800a66a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a66c:	3301      	adds	r3, #1
 800a66e:	9310      	str	r3, [sp, #64]	; 0x40
 800a670:	f01b 0302 	ands.w	r3, fp, #2
 800a674:	9317      	str	r3, [sp, #92]	; 0x5c
 800a676:	bf1e      	ittt	ne
 800a678:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 800a67a:	3302      	addne	r3, #2
 800a67c:	9310      	strne	r3, [sp, #64]	; 0x40
 800a67e:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800a682:	9318      	str	r3, [sp, #96]	; 0x60
 800a684:	d122      	bne.n	800a6cc <_svfprintf_r+0x6bc>
 800a686:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800a68a:	1a9b      	subs	r3, r3, r2
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	9312      	str	r3, [sp, #72]	; 0x48
 800a690:	dd1c      	ble.n	800a6cc <_svfprintf_r+0x6bc>
 800a692:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a694:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800a698:	2810      	cmp	r0, #16
 800a69a:	483c      	ldr	r0, [pc, #240]	; (800a78c <_svfprintf_r+0x77c>)
 800a69c:	6020      	str	r0, [r4, #0]
 800a69e:	f102 0201 	add.w	r2, r2, #1
 800a6a2:	f104 0108 	add.w	r1, r4, #8
 800a6a6:	f300 82f7 	bgt.w	800ac98 <_svfprintf_r+0xc88>
 800a6aa:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a6ac:	6060      	str	r0, [r4, #4]
 800a6ae:	4403      	add	r3, r0
 800a6b0:	2a07      	cmp	r2, #7
 800a6b2:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800a6b6:	f340 8304 	ble.w	800acc2 <_svfprintf_r+0xcb2>
 800a6ba:	aa22      	add	r2, sp, #136	; 0x88
 800a6bc:	4649      	mov	r1, r9
 800a6be:	4650      	mov	r0, sl
 800a6c0:	f001 ff22 	bl	800c508 <__ssprint_r>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	f040 8637 	bne.w	800b338 <_svfprintf_r+0x1328>
 800a6ca:	ac25      	add	r4, sp, #148	; 0x94
 800a6cc:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800a6d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a6d2:	b16a      	cbz	r2, 800a6f0 <_svfprintf_r+0x6e0>
 800a6d4:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 800a6d8:	6022      	str	r2, [r4, #0]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	4413      	add	r3, r2
 800a6de:	9324      	str	r3, [sp, #144]	; 0x90
 800a6e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6e2:	6062      	str	r2, [r4, #4]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	2b07      	cmp	r3, #7
 800a6e8:	9323      	str	r3, [sp, #140]	; 0x8c
 800a6ea:	f300 82ec 	bgt.w	800acc6 <_svfprintf_r+0xcb6>
 800a6ee:	3408      	adds	r4, #8
 800a6f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a6f4:	b162      	cbz	r2, 800a710 <_svfprintf_r+0x700>
 800a6f6:	aa1b      	add	r2, sp, #108	; 0x6c
 800a6f8:	6022      	str	r2, [r4, #0]
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	9324      	str	r3, [sp, #144]	; 0x90
 800a700:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a702:	6062      	str	r2, [r4, #4]
 800a704:	3301      	adds	r3, #1
 800a706:	2b07      	cmp	r3, #7
 800a708:	9323      	str	r3, [sp, #140]	; 0x8c
 800a70a:	f300 82e6 	bgt.w	800acda <_svfprintf_r+0xcca>
 800a70e:	3408      	adds	r4, #8
 800a710:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a712:	2b80      	cmp	r3, #128	; 0x80
 800a714:	d122      	bne.n	800a75c <_svfprintf_r+0x74c>
 800a716:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800a71a:	1a9b      	subs	r3, r3, r2
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	9312      	str	r3, [sp, #72]	; 0x48
 800a720:	dd1c      	ble.n	800a75c <_svfprintf_r+0x74c>
 800a722:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a724:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800a728:	2810      	cmp	r0, #16
 800a72a:	4819      	ldr	r0, [pc, #100]	; (800a790 <_svfprintf_r+0x780>)
 800a72c:	6020      	str	r0, [r4, #0]
 800a72e:	f102 0201 	add.w	r2, r2, #1
 800a732:	f104 0108 	add.w	r1, r4, #8
 800a736:	f300 82da 	bgt.w	800acee <_svfprintf_r+0xcde>
 800a73a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a73c:	6060      	str	r0, [r4, #4]
 800a73e:	4403      	add	r3, r0
 800a740:	2a07      	cmp	r2, #7
 800a742:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800a746:	f340 82e7 	ble.w	800ad18 <_svfprintf_r+0xd08>
 800a74a:	aa22      	add	r2, sp, #136	; 0x88
 800a74c:	4649      	mov	r1, r9
 800a74e:	4650      	mov	r0, sl
 800a750:	f001 feda 	bl	800c508 <__ssprint_r>
 800a754:	2800      	cmp	r0, #0
 800a756:	f040 85ef 	bne.w	800b338 <_svfprintf_r+0x1328>
 800a75a:	ac25      	add	r4, sp, #148	; 0x94
 800a75c:	eba7 0708 	sub.w	r7, r7, r8
 800a760:	2f00      	cmp	r7, #0
 800a762:	dd27      	ble.n	800a7b4 <_svfprintf_r+0x7a4>
 800a764:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a768:	4809      	ldr	r0, [pc, #36]	; (800a790 <_svfprintf_r+0x780>)
 800a76a:	6020      	str	r0, [r4, #0]
 800a76c:	2f10      	cmp	r7, #16
 800a76e:	f103 0301 	add.w	r3, r3, #1
 800a772:	f104 0108 	add.w	r1, r4, #8
 800a776:	f300 82d1 	bgt.w	800ad1c <_svfprintf_r+0xd0c>
 800a77a:	e00b      	b.n	800a794 <_svfprintf_r+0x784>
 800a77c:	0800eb65 	.word	0x0800eb65
 800a780:	0800eb54 	.word	0x0800eb54
 800a784:	40300000 	.word	0x40300000
 800a788:	3fe00000 	.word	0x3fe00000
 800a78c:	0800eb78 	.word	0x0800eb78
 800a790:	0800eb88 	.word	0x0800eb88
 800a794:	6067      	str	r7, [r4, #4]
 800a796:	2b07      	cmp	r3, #7
 800a798:	4417      	add	r7, r2
 800a79a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800a79e:	f340 82d0 	ble.w	800ad42 <_svfprintf_r+0xd32>
 800a7a2:	aa22      	add	r2, sp, #136	; 0x88
 800a7a4:	4649      	mov	r1, r9
 800a7a6:	4650      	mov	r0, sl
 800a7a8:	f001 feae 	bl	800c508 <__ssprint_r>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	f040 85c3 	bne.w	800b338 <_svfprintf_r+0x1328>
 800a7b2:	ac25      	add	r4, sp, #148	; 0x94
 800a7b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a7b8:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800a7ba:	f040 82c9 	bne.w	800ad50 <_svfprintf_r+0xd40>
 800a7be:	9b03      	ldr	r3, [sp, #12]
 800a7c0:	e9c4 3800 	strd	r3, r8, [r4]
 800a7c4:	4447      	add	r7, r8
 800a7c6:	9724      	str	r7, [sp, #144]	; 0x90
 800a7c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	2b07      	cmp	r3, #7
 800a7ce:	9323      	str	r3, [sp, #140]	; 0x8c
 800a7d0:	f300 8303 	bgt.w	800adda <_svfprintf_r+0xdca>
 800a7d4:	3408      	adds	r4, #8
 800a7d6:	f01b 0f04 	tst.w	fp, #4
 800a7da:	f040 858f 	bne.w	800b2fc <_svfprintf_r+0x12ec>
 800a7de:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800a7e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7e4:	428a      	cmp	r2, r1
 800a7e6:	bfac      	ite	ge
 800a7e8:	189b      	addge	r3, r3, r2
 800a7ea:	185b      	addlt	r3, r3, r1
 800a7ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a7f0:	b13b      	cbz	r3, 800a802 <_svfprintf_r+0x7f2>
 800a7f2:	aa22      	add	r2, sp, #136	; 0x88
 800a7f4:	4649      	mov	r1, r9
 800a7f6:	4650      	mov	r0, sl
 800a7f8:	f001 fe86 	bl	800c508 <__ssprint_r>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	f040 859b 	bne.w	800b338 <_svfprintf_r+0x1328>
 800a802:	2300      	movs	r3, #0
 800a804:	9323      	str	r3, [sp, #140]	; 0x8c
 800a806:	9b04      	ldr	r3, [sp, #16]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f040 85b1 	bne.w	800b370 <_svfprintf_r+0x1360>
 800a80e:	ac25      	add	r4, sp, #148	; 0x94
 800a810:	e0e7      	b.n	800a9e2 <_svfprintf_r+0x9d2>
 800a812:	ab35      	add	r3, sp, #212	; 0xd4
 800a814:	9004      	str	r0, [sp, #16]
 800a816:	9303      	str	r3, [sp, #12]
 800a818:	e62a      	b.n	800a470 <_svfprintf_r+0x460>
 800a81a:	9b03      	ldr	r3, [sp, #12]
 800a81c:	9304      	str	r3, [sp, #16]
 800a81e:	e627      	b.n	800a470 <_svfprintf_r+0x460>
 800a820:	9004      	str	r0, [sp, #16]
 800a822:	f04f 0806 	mov.w	r8, #6
 800a826:	e623      	b.n	800a470 <_svfprintf_r+0x460>
 800a828:	9004      	str	r0, [sp, #16]
 800a82a:	e621      	b.n	800a470 <_svfprintf_r+0x460>
 800a82c:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 800a830:	2300      	movs	r3, #0
 800a832:	eeb0 8a47 	vmov.f32	s16, s14
 800a836:	eef0 8a67 	vmov.f32	s17, s15
 800a83a:	e629      	b.n	800a490 <_svfprintf_r+0x480>
 800a83c:	f802 0c01 	strb.w	r0, [r2, #-1]
 800a840:	e68b      	b.n	800a55a <_svfprintf_r+0x54a>
 800a842:	f803 0b01 	strb.w	r0, [r3], #1
 800a846:	1aca      	subs	r2, r1, r3
 800a848:	2a00      	cmp	r2, #0
 800a84a:	dafa      	bge.n	800a842 <_svfprintf_r+0x832>
 800a84c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a84e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a850:	3201      	adds	r2, #1
 800a852:	f103 0301 	add.w	r3, r3, #1
 800a856:	bfb8      	it	lt
 800a858:	2300      	movlt	r3, #0
 800a85a:	441d      	add	r5, r3
 800a85c:	e68d      	b.n	800a57a <_svfprintf_r+0x56a>
 800a85e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a860:	462b      	mov	r3, r5
 800a862:	18a9      	adds	r1, r5, r2
 800a864:	2030      	movs	r0, #48	; 0x30
 800a866:	e7ee      	b.n	800a846 <_svfprintf_r+0x836>
 800a868:	9b08      	ldr	r3, [sp, #32]
 800a86a:	2b46      	cmp	r3, #70	; 0x46
 800a86c:	d005      	beq.n	800a87a <_svfprintf_r+0x86a>
 800a86e:	2b45      	cmp	r3, #69	; 0x45
 800a870:	d11d      	bne.n	800a8ae <_svfprintf_r+0x89e>
 800a872:	f108 0501 	add.w	r5, r8, #1
 800a876:	2102      	movs	r1, #2
 800a878:	e001      	b.n	800a87e <_svfprintf_r+0x86e>
 800a87a:	4645      	mov	r5, r8
 800a87c:	2103      	movs	r1, #3
 800a87e:	ab20      	add	r3, sp, #128	; 0x80
 800a880:	9301      	str	r3, [sp, #4]
 800a882:	ab1d      	add	r3, sp, #116	; 0x74
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	462a      	mov	r2, r5
 800a888:	ab1c      	add	r3, sp, #112	; 0x70
 800a88a:	4650      	mov	r0, sl
 800a88c:	eeb0 0a48 	vmov.f32	s0, s16
 800a890:	eef0 0a68 	vmov.f32	s1, s17
 800a894:	f001 f850 	bl	800b938 <_dtoa_r>
 800a898:	9b08      	ldr	r3, [sp, #32]
 800a89a:	9003      	str	r0, [sp, #12]
 800a89c:	2b47      	cmp	r3, #71	; 0x47
 800a89e:	d108      	bne.n	800a8b2 <_svfprintf_r+0x8a2>
 800a8a0:	f01b 0f01 	tst.w	fp, #1
 800a8a4:	d105      	bne.n	800a8b2 <_svfprintf_r+0x8a2>
 800a8a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a8a8:	9a03      	ldr	r2, [sp, #12]
 800a8aa:	1a9b      	subs	r3, r3, r2
 800a8ac:	e667      	b.n	800a57e <_svfprintf_r+0x56e>
 800a8ae:	4645      	mov	r5, r8
 800a8b0:	e7e1      	b.n	800a876 <_svfprintf_r+0x866>
 800a8b2:	9b03      	ldr	r3, [sp, #12]
 800a8b4:	195e      	adds	r6, r3, r5
 800a8b6:	9b08      	ldr	r3, [sp, #32]
 800a8b8:	2b46      	cmp	r3, #70	; 0x46
 800a8ba:	d10f      	bne.n	800a8dc <_svfprintf_r+0x8cc>
 800a8bc:	9b03      	ldr	r3, [sp, #12]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	2b30      	cmp	r3, #48	; 0x30
 800a8c2:	d109      	bne.n	800a8d8 <_svfprintf_r+0x8c8>
 800a8c4:	ec51 0b18 	vmov	r0, r1, d8
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f7f6 f904 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8d0:	b910      	cbnz	r0, 800a8d8 <_svfprintf_r+0x8c8>
 800a8d2:	f1c5 0501 	rsb	r5, r5, #1
 800a8d6:	951c      	str	r5, [sp, #112]	; 0x70
 800a8d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a8da:	441e      	add	r6, r3
 800a8dc:	ec51 0b18 	vmov	r0, r1, d8
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	f7f6 f8f8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8e8:	b100      	cbz	r0, 800a8ec <_svfprintf_r+0x8dc>
 800a8ea:	9620      	str	r6, [sp, #128]	; 0x80
 800a8ec:	2230      	movs	r2, #48	; 0x30
 800a8ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a8f0:	429e      	cmp	r6, r3
 800a8f2:	d9d8      	bls.n	800a8a6 <_svfprintf_r+0x896>
 800a8f4:	1c59      	adds	r1, r3, #1
 800a8f6:	9120      	str	r1, [sp, #128]	; 0x80
 800a8f8:	701a      	strb	r2, [r3, #0]
 800a8fa:	e7f8      	b.n	800a8ee <_svfprintf_r+0x8de>
 800a8fc:	9b08      	ldr	r3, [sp, #32]
 800a8fe:	2b46      	cmp	r3, #70	; 0x46
 800a900:	f47f ae4b 	bne.w	800a59a <_svfprintf_r+0x58a>
 800a904:	f00b 0301 	and.w	r3, fp, #1
 800a908:	2d00      	cmp	r5, #0
 800a90a:	ea43 0308 	orr.w	r3, r3, r8
 800a90e:	dd25      	ble.n	800a95c <_svfprintf_r+0x94c>
 800a910:	b383      	cbz	r3, 800a974 <_svfprintf_r+0x964>
 800a912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a914:	18eb      	adds	r3, r5, r3
 800a916:	4498      	add	r8, r3
 800a918:	2366      	movs	r3, #102	; 0x66
 800a91a:	9307      	str	r3, [sp, #28]
 800a91c:	e030      	b.n	800a980 <_svfprintf_r+0x970>
 800a91e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a922:	f805 6f01 	strb.w	r6, [r5, #1]!
 800a926:	e66f      	b.n	800a608 <_svfprintf_r+0x5f8>
 800a928:	b941      	cbnz	r1, 800a93c <_svfprintf_r+0x92c>
 800a92a:	2230      	movs	r2, #48	; 0x30
 800a92c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800a930:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800a934:	3330      	adds	r3, #48	; 0x30
 800a936:	f802 3b01 	strb.w	r3, [r2], #1
 800a93a:	e671      	b.n	800a620 <_svfprintf_r+0x610>
 800a93c:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800a940:	e7f8      	b.n	800a934 <_svfprintf_r+0x924>
 800a942:	9b05      	ldr	r3, [sp, #20]
 800a944:	42ab      	cmp	r3, r5
 800a946:	dd0d      	ble.n	800a964 <_svfprintf_r+0x954>
 800a948:	9b05      	ldr	r3, [sp, #20]
 800a94a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a94c:	2d00      	cmp	r5, #0
 800a94e:	eb03 0802 	add.w	r8, r3, r2
 800a952:	dc0d      	bgt.n	800a970 <_svfprintf_r+0x960>
 800a954:	f1c5 0301 	rsb	r3, r5, #1
 800a958:	4498      	add	r8, r3
 800a95a:	e009      	b.n	800a970 <_svfprintf_r+0x960>
 800a95c:	b163      	cbz	r3, 800a978 <_svfprintf_r+0x968>
 800a95e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a960:	3301      	adds	r3, #1
 800a962:	e7d8      	b.n	800a916 <_svfprintf_r+0x906>
 800a964:	f01b 0f01 	tst.w	fp, #1
 800a968:	d01d      	beq.n	800a9a6 <_svfprintf_r+0x996>
 800a96a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a96c:	eb05 0803 	add.w	r8, r5, r3
 800a970:	2367      	movs	r3, #103	; 0x67
 800a972:	e7d2      	b.n	800a91a <_svfprintf_r+0x90a>
 800a974:	46a8      	mov	r8, r5
 800a976:	e7cf      	b.n	800a918 <_svfprintf_r+0x908>
 800a978:	2366      	movs	r3, #102	; 0x66
 800a97a:	9307      	str	r3, [sp, #28]
 800a97c:	f04f 0801 	mov.w	r8, #1
 800a980:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800a984:	9308      	str	r3, [sp, #32]
 800a986:	d01f      	beq.n	800a9c8 <_svfprintf_r+0x9b8>
 800a988:	2600      	movs	r6, #0
 800a98a:	2d00      	cmp	r5, #0
 800a98c:	9608      	str	r6, [sp, #32]
 800a98e:	f77f ae5c 	ble.w	800a64a <_svfprintf_r+0x63a>
 800a992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	2bff      	cmp	r3, #255	; 0xff
 800a998:	d107      	bne.n	800a9aa <_svfprintf_r+0x99a>
 800a99a:	9b08      	ldr	r3, [sp, #32]
 800a99c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a99e:	4433      	add	r3, r6
 800a9a0:	fb02 8803 	mla	r8, r2, r3, r8
 800a9a4:	e651      	b.n	800a64a <_svfprintf_r+0x63a>
 800a9a6:	46a8      	mov	r8, r5
 800a9a8:	e7e2      	b.n	800a970 <_svfprintf_r+0x960>
 800a9aa:	42ab      	cmp	r3, r5
 800a9ac:	daf5      	bge.n	800a99a <_svfprintf_r+0x98a>
 800a9ae:	1aed      	subs	r5, r5, r3
 800a9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b2:	785b      	ldrb	r3, [r3, #1]
 800a9b4:	b133      	cbz	r3, 800a9c4 <_svfprintf_r+0x9b4>
 800a9b6:	9b08      	ldr	r3, [sp, #32]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	9308      	str	r3, [sp, #32]
 800a9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9be:	3301      	adds	r3, #1
 800a9c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c2:	e7e6      	b.n	800a992 <_svfprintf_r+0x982>
 800a9c4:	3601      	adds	r6, #1
 800a9c6:	e7e4      	b.n	800a992 <_svfprintf_r+0x982>
 800a9c8:	9e08      	ldr	r6, [sp, #32]
 800a9ca:	e63e      	b.n	800a64a <_svfprintf_r+0x63a>
 800a9cc:	1d2b      	adds	r3, r5, #4
 800a9ce:	f01b 0f20 	tst.w	fp, #32
 800a9d2:	9306      	str	r3, [sp, #24]
 800a9d4:	d00a      	beq.n	800a9ec <_svfprintf_r+0x9dc>
 800a9d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9dc:	17d2      	asrs	r2, r2, #31
 800a9de:	e9c3 1200 	strd	r1, r2, [r3]
 800a9e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9e4:	9d06      	ldr	r5, [sp, #24]
 800a9e6:	9303      	str	r3, [sp, #12]
 800a9e8:	f7ff bb52 	b.w	800a090 <_svfprintf_r+0x80>
 800a9ec:	f01b 0f10 	tst.w	fp, #16
 800a9f0:	d003      	beq.n	800a9fa <_svfprintf_r+0x9ea>
 800a9f2:	682b      	ldr	r3, [r5, #0]
 800a9f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9f6:	601a      	str	r2, [r3, #0]
 800a9f8:	e7f3      	b.n	800a9e2 <_svfprintf_r+0x9d2>
 800a9fa:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800a9fe:	d003      	beq.n	800aa08 <_svfprintf_r+0x9f8>
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa04:	801a      	strh	r2, [r3, #0]
 800aa06:	e7ec      	b.n	800a9e2 <_svfprintf_r+0x9d2>
 800aa08:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800aa0c:	d0f1      	beq.n	800a9f2 <_svfprintf_r+0x9e2>
 800aa0e:	682b      	ldr	r3, [r5, #0]
 800aa10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa12:	701a      	strb	r2, [r3, #0]
 800aa14:	e7e5      	b.n	800a9e2 <_svfprintf_r+0x9d2>
 800aa16:	f04b 0b10 	orr.w	fp, fp, #16
 800aa1a:	f01b 0320 	ands.w	r3, fp, #32
 800aa1e:	d020      	beq.n	800aa62 <_svfprintf_r+0xa52>
 800aa20:	3507      	adds	r5, #7
 800aa22:	f025 0307 	bic.w	r3, r5, #7
 800aa26:	461a      	mov	r2, r3
 800aa28:	685e      	ldr	r6, [r3, #4]
 800aa2a:	f852 5b08 	ldr.w	r5, [r2], #8
 800aa2e:	9206      	str	r2, [sp, #24]
 800aa30:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800aa34:	2300      	movs	r3, #0
 800aa36:	2200      	movs	r2, #0
 800aa38:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800aa3c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800aa40:	f000 84a7 	beq.w	800b392 <_svfprintf_r+0x1382>
 800aa44:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 800aa48:	9204      	str	r2, [sp, #16]
 800aa4a:	ea55 0206 	orrs.w	r2, r5, r6
 800aa4e:	f040 84a6 	bne.w	800b39e <_svfprintf_r+0x138e>
 800aa52:	f1b8 0f00 	cmp.w	r8, #0
 800aa56:	f000 8107 	beq.w	800ac68 <_svfprintf_r+0xc58>
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	f040 84a2 	bne.w	800b3a4 <_svfprintf_r+0x1394>
 800aa60:	e0a3      	b.n	800abaa <_svfprintf_r+0xb9a>
 800aa62:	462a      	mov	r2, r5
 800aa64:	f01b 0610 	ands.w	r6, fp, #16
 800aa68:	f852 5b04 	ldr.w	r5, [r2], #4
 800aa6c:	9206      	str	r2, [sp, #24]
 800aa6e:	d001      	beq.n	800aa74 <_svfprintf_r+0xa64>
 800aa70:	461e      	mov	r6, r3
 800aa72:	e7dd      	b.n	800aa30 <_svfprintf_r+0xa20>
 800aa74:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800aa78:	d001      	beq.n	800aa7e <_svfprintf_r+0xa6e>
 800aa7a:	b2ad      	uxth	r5, r5
 800aa7c:	e7d8      	b.n	800aa30 <_svfprintf_r+0xa20>
 800aa7e:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800aa82:	d0d5      	beq.n	800aa30 <_svfprintf_r+0xa20>
 800aa84:	b2ed      	uxtb	r5, r5
 800aa86:	e7f3      	b.n	800aa70 <_svfprintf_r+0xa60>
 800aa88:	462b      	mov	r3, r5
 800aa8a:	2278      	movs	r2, #120	; 0x78
 800aa8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa90:	9306      	str	r3, [sp, #24]
 800aa92:	f647 0330 	movw	r3, #30768	; 0x7830
 800aa96:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800aa9a:	4bab      	ldr	r3, [pc, #684]	; (800ad48 <_svfprintf_r+0xd38>)
 800aa9c:	9316      	str	r3, [sp, #88]	; 0x58
 800aa9e:	2600      	movs	r6, #0
 800aaa0:	f04b 0b02 	orr.w	fp, fp, #2
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	9207      	str	r2, [sp, #28]
 800aaa8:	e7c5      	b.n	800aa36 <_svfprintf_r+0xa26>
 800aaaa:	462b      	mov	r3, r5
 800aaac:	f1b8 3fff 	cmp.w	r8, #4294967295
 800aab0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aab4:	9203      	str	r2, [sp, #12]
 800aab6:	f04f 0500 	mov.w	r5, #0
 800aaba:	9306      	str	r3, [sp, #24]
 800aabc:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800aac0:	d010      	beq.n	800aae4 <_svfprintf_r+0xad4>
 800aac2:	9803      	ldr	r0, [sp, #12]
 800aac4:	4642      	mov	r2, r8
 800aac6:	4629      	mov	r1, r5
 800aac8:	f7f5 fb92 	bl	80001f0 <memchr>
 800aacc:	9004      	str	r0, [sp, #16]
 800aace:	2800      	cmp	r0, #0
 800aad0:	f000 80e0 	beq.w	800ac94 <_svfprintf_r+0xc84>
 800aad4:	9a03      	ldr	r2, [sp, #12]
 800aad6:	9504      	str	r5, [sp, #16]
 800aad8:	eba0 0802 	sub.w	r8, r0, r2
 800aadc:	462f      	mov	r7, r5
 800aade:	462e      	mov	r6, r5
 800aae0:	9508      	str	r5, [sp, #32]
 800aae2:	e5ba      	b.n	800a65a <_svfprintf_r+0x64a>
 800aae4:	9803      	ldr	r0, [sp, #12]
 800aae6:	f7f5 fb7b 	bl	80001e0 <strlen>
 800aaea:	462f      	mov	r7, r5
 800aaec:	4680      	mov	r8, r0
 800aaee:	9504      	str	r5, [sp, #16]
 800aaf0:	463e      	mov	r6, r7
 800aaf2:	463b      	mov	r3, r7
 800aaf4:	e460      	b.n	800a3b8 <_svfprintf_r+0x3a8>
 800aaf6:	f04b 0b10 	orr.w	fp, fp, #16
 800aafa:	f01b 0320 	ands.w	r3, fp, #32
 800aafe:	d009      	beq.n	800ab14 <_svfprintf_r+0xb04>
 800ab00:	3507      	adds	r5, #7
 800ab02:	f025 0307 	bic.w	r3, r5, #7
 800ab06:	461a      	mov	r2, r3
 800ab08:	685e      	ldr	r6, [r3, #4]
 800ab0a:	f852 5b08 	ldr.w	r5, [r2], #8
 800ab0e:	9206      	str	r2, [sp, #24]
 800ab10:	2301      	movs	r3, #1
 800ab12:	e790      	b.n	800aa36 <_svfprintf_r+0xa26>
 800ab14:	462a      	mov	r2, r5
 800ab16:	f01b 0610 	ands.w	r6, fp, #16
 800ab1a:	f852 5b04 	ldr.w	r5, [r2], #4
 800ab1e:	9206      	str	r2, [sp, #24]
 800ab20:	d001      	beq.n	800ab26 <_svfprintf_r+0xb16>
 800ab22:	461e      	mov	r6, r3
 800ab24:	e7f4      	b.n	800ab10 <_svfprintf_r+0xb00>
 800ab26:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800ab2a:	d001      	beq.n	800ab30 <_svfprintf_r+0xb20>
 800ab2c:	b2ad      	uxth	r5, r5
 800ab2e:	e7ef      	b.n	800ab10 <_svfprintf_r+0xb00>
 800ab30:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800ab34:	d0ec      	beq.n	800ab10 <_svfprintf_r+0xb00>
 800ab36:	b2ed      	uxtb	r5, r5
 800ab38:	e7f3      	b.n	800ab22 <_svfprintf_r+0xb12>
 800ab3a:	4b84      	ldr	r3, [pc, #528]	; (800ad4c <_svfprintf_r+0xd3c>)
 800ab3c:	9316      	str	r3, [sp, #88]	; 0x58
 800ab3e:	f01b 0320 	ands.w	r3, fp, #32
 800ab42:	d01b      	beq.n	800ab7c <_svfprintf_r+0xb6c>
 800ab44:	3507      	adds	r5, #7
 800ab46:	f025 0307 	bic.w	r3, r5, #7
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	685e      	ldr	r6, [r3, #4]
 800ab4e:	f852 5b08 	ldr.w	r5, [r2], #8
 800ab52:	9206      	str	r2, [sp, #24]
 800ab54:	f01b 0f01 	tst.w	fp, #1
 800ab58:	d00a      	beq.n	800ab70 <_svfprintf_r+0xb60>
 800ab5a:	ea55 0306 	orrs.w	r3, r5, r6
 800ab5e:	d007      	beq.n	800ab70 <_svfprintf_r+0xb60>
 800ab60:	2330      	movs	r3, #48	; 0x30
 800ab62:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800ab66:	9b07      	ldr	r3, [sp, #28]
 800ab68:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800ab6c:	f04b 0b02 	orr.w	fp, fp, #2
 800ab70:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800ab74:	2302      	movs	r3, #2
 800ab76:	e75e      	b.n	800aa36 <_svfprintf_r+0xa26>
 800ab78:	4b73      	ldr	r3, [pc, #460]	; (800ad48 <_svfprintf_r+0xd38>)
 800ab7a:	e7df      	b.n	800ab3c <_svfprintf_r+0xb2c>
 800ab7c:	462a      	mov	r2, r5
 800ab7e:	f01b 0610 	ands.w	r6, fp, #16
 800ab82:	f852 5b04 	ldr.w	r5, [r2], #4
 800ab86:	9206      	str	r2, [sp, #24]
 800ab88:	d001      	beq.n	800ab8e <_svfprintf_r+0xb7e>
 800ab8a:	461e      	mov	r6, r3
 800ab8c:	e7e2      	b.n	800ab54 <_svfprintf_r+0xb44>
 800ab8e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800ab92:	d001      	beq.n	800ab98 <_svfprintf_r+0xb88>
 800ab94:	b2ad      	uxth	r5, r5
 800ab96:	e7dd      	b.n	800ab54 <_svfprintf_r+0xb44>
 800ab98:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800ab9c:	d0da      	beq.n	800ab54 <_svfprintf_r+0xb44>
 800ab9e:	b2ed      	uxtb	r5, r5
 800aba0:	e7f3      	b.n	800ab8a <_svfprintf_r+0xb7a>
 800aba2:	2d0a      	cmp	r5, #10
 800aba4:	f176 0300 	sbcs.w	r3, r6, #0
 800aba8:	d206      	bcs.n	800abb8 <_svfprintf_r+0xba8>
 800abaa:	3530      	adds	r5, #48	; 0x30
 800abac:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 800abb0:	f20d 1337 	addw	r3, sp, #311	; 0x137
 800abb4:	f000 bc16 	b.w	800b3e4 <_svfprintf_r+0x13d4>
 800abb8:	2300      	movs	r3, #0
 800abba:	9305      	str	r3, [sp, #20]
 800abbc:	9b04      	ldr	r3, [sp, #16]
 800abbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abc2:	af4e      	add	r7, sp, #312	; 0x138
 800abc4:	9308      	str	r3, [sp, #32]
 800abc6:	220a      	movs	r2, #10
 800abc8:	2300      	movs	r3, #0
 800abca:	4628      	mov	r0, r5
 800abcc:	4631      	mov	r1, r6
 800abce:	f7f6 f843 	bl	8000c58 <__aeabi_uldivmod>
 800abd2:	1e7b      	subs	r3, r7, #1
 800abd4:	9303      	str	r3, [sp, #12]
 800abd6:	9b05      	ldr	r3, [sp, #20]
 800abd8:	9010      	str	r0, [sp, #64]	; 0x40
 800abda:	3301      	adds	r3, #1
 800abdc:	9305      	str	r3, [sp, #20]
 800abde:	9b08      	ldr	r3, [sp, #32]
 800abe0:	3230      	adds	r2, #48	; 0x30
 800abe2:	468b      	mov	fp, r1
 800abe4:	f807 2c01 	strb.w	r2, [r7, #-1]
 800abe8:	b1d3      	cbz	r3, 800ac20 <_svfprintf_r+0xc10>
 800abea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abec:	9a05      	ldr	r2, [sp, #20]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d115      	bne.n	800ac20 <_svfprintf_r+0xc10>
 800abf4:	2aff      	cmp	r2, #255	; 0xff
 800abf6:	d013      	beq.n	800ac20 <_svfprintf_r+0xc10>
 800abf8:	2d0a      	cmp	r5, #10
 800abfa:	f176 0300 	sbcs.w	r3, r6, #0
 800abfe:	d30f      	bcc.n	800ac20 <_svfprintf_r+0xc10>
 800ac00:	9b03      	ldr	r3, [sp, #12]
 800ac02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ac04:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ac06:	1a9b      	subs	r3, r3, r2
 800ac08:	4618      	mov	r0, r3
 800ac0a:	9303      	str	r3, [sp, #12]
 800ac0c:	f000 fcf9 	bl	800b602 <strncpy>
 800ac10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac12:	785b      	ldrb	r3, [r3, #1]
 800ac14:	b11b      	cbz	r3, 800ac1e <_svfprintf_r+0xc0e>
 800ac16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac18:	3301      	adds	r3, #1
 800ac1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	9305      	str	r3, [sp, #20]
 800ac20:	2d0a      	cmp	r5, #10
 800ac22:	f176 0600 	sbcs.w	r6, r6, #0
 800ac26:	d20b      	bcs.n	800ac40 <_svfprintf_r+0xc30>
 800ac28:	9b03      	ldr	r3, [sp, #12]
 800ac2a:	f8dd b010 	ldr.w	fp, [sp, #16]
 800ac2e:	aa4e      	add	r2, sp, #312	; 0x138
 800ac30:	4647      	mov	r7, r8
 800ac32:	eba2 0803 	sub.w	r8, r2, r3
 800ac36:	2300      	movs	r3, #0
 800ac38:	9304      	str	r3, [sp, #16]
 800ac3a:	461e      	mov	r6, r3
 800ac3c:	f7ff bbbc 	b.w	800a3b8 <_svfprintf_r+0x3a8>
 800ac40:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ac42:	9f03      	ldr	r7, [sp, #12]
 800ac44:	465e      	mov	r6, fp
 800ac46:	e7be      	b.n	800abc6 <_svfprintf_r+0xbb6>
 800ac48:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ac4a:	f005 030f 	and.w	r3, r5, #15
 800ac4e:	092d      	lsrs	r5, r5, #4
 800ac50:	5cd3      	ldrb	r3, [r2, r3]
 800ac52:	9a03      	ldr	r2, [sp, #12]
 800ac54:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 800ac58:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800ac5c:	0936      	lsrs	r6, r6, #4
 800ac5e:	ea55 0306 	orrs.w	r3, r5, r6
 800ac62:	9203      	str	r2, [sp, #12]
 800ac64:	d1f0      	bne.n	800ac48 <_svfprintf_r+0xc38>
 800ac66:	e7df      	b.n	800ac28 <_svfprintf_r+0xc18>
 800ac68:	b933      	cbnz	r3, 800ac78 <_svfprintf_r+0xc68>
 800ac6a:	f01b 0f01 	tst.w	fp, #1
 800ac6e:	d003      	beq.n	800ac78 <_svfprintf_r+0xc68>
 800ac70:	2330      	movs	r3, #48	; 0x30
 800ac72:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800ac76:	e79b      	b.n	800abb0 <_svfprintf_r+0xba0>
 800ac78:	ab4e      	add	r3, sp, #312	; 0x138
 800ac7a:	e3b3      	b.n	800b3e4 <_svfprintf_r+0x13d4>
 800ac7c:	9b07      	ldr	r3, [sp, #28]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f000 837c 	beq.w	800b37c <_svfprintf_r+0x136c>
 800ac84:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800ac88:	2300      	movs	r3, #0
 800ac8a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800ac8e:	9506      	str	r5, [sp, #24]
 800ac90:	f7ff bb1f 	b.w	800a2d2 <_svfprintf_r+0x2c2>
 800ac94:	9f04      	ldr	r7, [sp, #16]
 800ac96:	e72b      	b.n	800aaf0 <_svfprintf_r+0xae0>
 800ac98:	2010      	movs	r0, #16
 800ac9a:	4403      	add	r3, r0
 800ac9c:	2a07      	cmp	r2, #7
 800ac9e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800aca2:	6060      	str	r0, [r4, #4]
 800aca4:	dd08      	ble.n	800acb8 <_svfprintf_r+0xca8>
 800aca6:	aa22      	add	r2, sp, #136	; 0x88
 800aca8:	4649      	mov	r1, r9
 800acaa:	4650      	mov	r0, sl
 800acac:	f001 fc2c 	bl	800c508 <__ssprint_r>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	f040 8341 	bne.w	800b338 <_svfprintf_r+0x1328>
 800acb6:	a925      	add	r1, sp, #148	; 0x94
 800acb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acba:	3b10      	subs	r3, #16
 800acbc:	9312      	str	r3, [sp, #72]	; 0x48
 800acbe:	460c      	mov	r4, r1
 800acc0:	e4e7      	b.n	800a692 <_svfprintf_r+0x682>
 800acc2:	460c      	mov	r4, r1
 800acc4:	e502      	b.n	800a6cc <_svfprintf_r+0x6bc>
 800acc6:	aa22      	add	r2, sp, #136	; 0x88
 800acc8:	4649      	mov	r1, r9
 800acca:	4650      	mov	r0, sl
 800accc:	f001 fc1c 	bl	800c508 <__ssprint_r>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	f040 8331 	bne.w	800b338 <_svfprintf_r+0x1328>
 800acd6:	ac25      	add	r4, sp, #148	; 0x94
 800acd8:	e50a      	b.n	800a6f0 <_svfprintf_r+0x6e0>
 800acda:	aa22      	add	r2, sp, #136	; 0x88
 800acdc:	4649      	mov	r1, r9
 800acde:	4650      	mov	r0, sl
 800ace0:	f001 fc12 	bl	800c508 <__ssprint_r>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	f040 8327 	bne.w	800b338 <_svfprintf_r+0x1328>
 800acea:	ac25      	add	r4, sp, #148	; 0x94
 800acec:	e510      	b.n	800a710 <_svfprintf_r+0x700>
 800acee:	2010      	movs	r0, #16
 800acf0:	4403      	add	r3, r0
 800acf2:	2a07      	cmp	r2, #7
 800acf4:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800acf8:	6060      	str	r0, [r4, #4]
 800acfa:	dd08      	ble.n	800ad0e <_svfprintf_r+0xcfe>
 800acfc:	aa22      	add	r2, sp, #136	; 0x88
 800acfe:	4649      	mov	r1, r9
 800ad00:	4650      	mov	r0, sl
 800ad02:	f001 fc01 	bl	800c508 <__ssprint_r>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	f040 8316 	bne.w	800b338 <_svfprintf_r+0x1328>
 800ad0c:	a925      	add	r1, sp, #148	; 0x94
 800ad0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad10:	3b10      	subs	r3, #16
 800ad12:	9312      	str	r3, [sp, #72]	; 0x48
 800ad14:	460c      	mov	r4, r1
 800ad16:	e504      	b.n	800a722 <_svfprintf_r+0x712>
 800ad18:	460c      	mov	r4, r1
 800ad1a:	e51f      	b.n	800a75c <_svfprintf_r+0x74c>
 800ad1c:	2010      	movs	r0, #16
 800ad1e:	4402      	add	r2, r0
 800ad20:	2b07      	cmp	r3, #7
 800ad22:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800ad26:	6060      	str	r0, [r4, #4]
 800ad28:	dd08      	ble.n	800ad3c <_svfprintf_r+0xd2c>
 800ad2a:	aa22      	add	r2, sp, #136	; 0x88
 800ad2c:	4649      	mov	r1, r9
 800ad2e:	4650      	mov	r0, sl
 800ad30:	f001 fbea 	bl	800c508 <__ssprint_r>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	f040 82ff 	bne.w	800b338 <_svfprintf_r+0x1328>
 800ad3a:	a925      	add	r1, sp, #148	; 0x94
 800ad3c:	3f10      	subs	r7, #16
 800ad3e:	460c      	mov	r4, r1
 800ad40:	e510      	b.n	800a764 <_svfprintf_r+0x754>
 800ad42:	460c      	mov	r4, r1
 800ad44:	e536      	b.n	800a7b4 <_svfprintf_r+0x7a4>
 800ad46:	bf00      	nop
 800ad48:	0800eb54 	.word	0x0800eb54
 800ad4c:	0800eb65 	.word	0x0800eb65
 800ad50:	9b07      	ldr	r3, [sp, #28]
 800ad52:	2b65      	cmp	r3, #101	; 0x65
 800ad54:	f340 823a 	ble.w	800b1cc <_svfprintf_r+0x11bc>
 800ad58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f7f5 feba 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d068      	beq.n	800ae3a <_svfprintf_r+0xe2a>
 800ad68:	4b6d      	ldr	r3, [pc, #436]	; (800af20 <_svfprintf_r+0xf10>)
 800ad6a:	6023      	str	r3, [r4, #0]
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	441f      	add	r7, r3
 800ad70:	6063      	str	r3, [r4, #4]
 800ad72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad74:	9724      	str	r7, [sp, #144]	; 0x90
 800ad76:	3301      	adds	r3, #1
 800ad78:	2b07      	cmp	r3, #7
 800ad7a:	9323      	str	r3, [sp, #140]	; 0x8c
 800ad7c:	dc37      	bgt.n	800adee <_svfprintf_r+0xdde>
 800ad7e:	3408      	adds	r4, #8
 800ad80:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ad82:	9a05      	ldr	r2, [sp, #20]
 800ad84:	4293      	cmp	r3, r2
 800ad86:	db03      	blt.n	800ad90 <_svfprintf_r+0xd80>
 800ad88:	f01b 0f01 	tst.w	fp, #1
 800ad8c:	f43f ad23 	beq.w	800a7d6 <_svfprintf_r+0x7c6>
 800ad90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad92:	6023      	str	r3, [r4, #0]
 800ad94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad98:	6063      	str	r3, [r4, #4]
 800ad9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad9c:	4413      	add	r3, r2
 800ad9e:	9324      	str	r3, [sp, #144]	; 0x90
 800ada0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ada2:	3301      	adds	r3, #1
 800ada4:	2b07      	cmp	r3, #7
 800ada6:	9323      	str	r3, [sp, #140]	; 0x8c
 800ada8:	dc2b      	bgt.n	800ae02 <_svfprintf_r+0xdf2>
 800adaa:	3408      	adds	r4, #8
 800adac:	9b05      	ldr	r3, [sp, #20]
 800adae:	1e5d      	subs	r5, r3, #1
 800adb0:	2d00      	cmp	r5, #0
 800adb2:	f77f ad10 	ble.w	800a7d6 <_svfprintf_r+0x7c6>
 800adb6:	4e5b      	ldr	r6, [pc, #364]	; (800af24 <_svfprintf_r+0xf14>)
 800adb8:	2710      	movs	r7, #16
 800adba:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800adbe:	2d10      	cmp	r5, #16
 800adc0:	f103 0301 	add.w	r3, r3, #1
 800adc4:	f104 0108 	add.w	r1, r4, #8
 800adc8:	6026      	str	r6, [r4, #0]
 800adca:	dc24      	bgt.n	800ae16 <_svfprintf_r+0xe06>
 800adcc:	6065      	str	r5, [r4, #4]
 800adce:	4415      	add	r5, r2
 800add0:	9524      	str	r5, [sp, #144]	; 0x90
 800add2:	2b07      	cmp	r3, #7
 800add4:	9323      	str	r3, [sp, #140]	; 0x8c
 800add6:	f340 828e 	ble.w	800b2f6 <_svfprintf_r+0x12e6>
 800adda:	aa22      	add	r2, sp, #136	; 0x88
 800addc:	4649      	mov	r1, r9
 800adde:	4650      	mov	r0, sl
 800ade0:	f001 fb92 	bl	800c508 <__ssprint_r>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	f040 82a7 	bne.w	800b338 <_svfprintf_r+0x1328>
 800adea:	ac25      	add	r4, sp, #148	; 0x94
 800adec:	e4f3      	b.n	800a7d6 <_svfprintf_r+0x7c6>
 800adee:	aa22      	add	r2, sp, #136	; 0x88
 800adf0:	4649      	mov	r1, r9
 800adf2:	4650      	mov	r0, sl
 800adf4:	f001 fb88 	bl	800c508 <__ssprint_r>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	f040 829d 	bne.w	800b338 <_svfprintf_r+0x1328>
 800adfe:	ac25      	add	r4, sp, #148	; 0x94
 800ae00:	e7be      	b.n	800ad80 <_svfprintf_r+0xd70>
 800ae02:	aa22      	add	r2, sp, #136	; 0x88
 800ae04:	4649      	mov	r1, r9
 800ae06:	4650      	mov	r0, sl
 800ae08:	f001 fb7e 	bl	800c508 <__ssprint_r>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	f040 8293 	bne.w	800b338 <_svfprintf_r+0x1328>
 800ae12:	ac25      	add	r4, sp, #148	; 0x94
 800ae14:	e7ca      	b.n	800adac <_svfprintf_r+0xd9c>
 800ae16:	3210      	adds	r2, #16
 800ae18:	2b07      	cmp	r3, #7
 800ae1a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800ae1e:	6067      	str	r7, [r4, #4]
 800ae20:	dd08      	ble.n	800ae34 <_svfprintf_r+0xe24>
 800ae22:	aa22      	add	r2, sp, #136	; 0x88
 800ae24:	4649      	mov	r1, r9
 800ae26:	4650      	mov	r0, sl
 800ae28:	f001 fb6e 	bl	800c508 <__ssprint_r>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	f040 8283 	bne.w	800b338 <_svfprintf_r+0x1328>
 800ae32:	a925      	add	r1, sp, #148	; 0x94
 800ae34:	3d10      	subs	r5, #16
 800ae36:	460c      	mov	r4, r1
 800ae38:	e7bf      	b.n	800adba <_svfprintf_r+0xdaa>
 800ae3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	dc73      	bgt.n	800af28 <_svfprintf_r+0xf18>
 800ae40:	4b37      	ldr	r3, [pc, #220]	; (800af20 <_svfprintf_r+0xf10>)
 800ae42:	6023      	str	r3, [r4, #0]
 800ae44:	2301      	movs	r3, #1
 800ae46:	441f      	add	r7, r3
 800ae48:	6063      	str	r3, [r4, #4]
 800ae4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae4c:	9724      	str	r7, [sp, #144]	; 0x90
 800ae4e:	3301      	adds	r3, #1
 800ae50:	2b07      	cmp	r3, #7
 800ae52:	9323      	str	r3, [sp, #140]	; 0x8c
 800ae54:	dc3d      	bgt.n	800aed2 <_svfprintf_r+0xec2>
 800ae56:	3408      	adds	r4, #8
 800ae58:	9905      	ldr	r1, [sp, #20]
 800ae5a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ae5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ae5e:	430b      	orrs	r3, r1
 800ae60:	f00b 0101 	and.w	r1, fp, #1
 800ae64:	430b      	orrs	r3, r1
 800ae66:	f43f acb6 	beq.w	800a7d6 <_svfprintf_r+0x7c6>
 800ae6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae70:	6063      	str	r3, [r4, #4]
 800ae72:	441a      	add	r2, r3
 800ae74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae76:	9224      	str	r2, [sp, #144]	; 0x90
 800ae78:	3301      	adds	r3, #1
 800ae7a:	2b07      	cmp	r3, #7
 800ae7c:	9323      	str	r3, [sp, #140]	; 0x8c
 800ae7e:	dc32      	bgt.n	800aee6 <_svfprintf_r+0xed6>
 800ae80:	3408      	adds	r4, #8
 800ae82:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800ae84:	2d00      	cmp	r5, #0
 800ae86:	da1b      	bge.n	800aec0 <_svfprintf_r+0xeb0>
 800ae88:	4e26      	ldr	r6, [pc, #152]	; (800af24 <_svfprintf_r+0xf14>)
 800ae8a:	426d      	negs	r5, r5
 800ae8c:	4623      	mov	r3, r4
 800ae8e:	2710      	movs	r7, #16
 800ae90:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800ae94:	2d10      	cmp	r5, #16
 800ae96:	f102 0201 	add.w	r2, r2, #1
 800ae9a:	f104 0408 	add.w	r4, r4, #8
 800ae9e:	601e      	str	r6, [r3, #0]
 800aea0:	dc2b      	bgt.n	800aefa <_svfprintf_r+0xeea>
 800aea2:	605d      	str	r5, [r3, #4]
 800aea4:	2a07      	cmp	r2, #7
 800aea6:	440d      	add	r5, r1
 800aea8:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800aeac:	dd08      	ble.n	800aec0 <_svfprintf_r+0xeb0>
 800aeae:	aa22      	add	r2, sp, #136	; 0x88
 800aeb0:	4649      	mov	r1, r9
 800aeb2:	4650      	mov	r0, sl
 800aeb4:	f001 fb28 	bl	800c508 <__ssprint_r>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	f040 823d 	bne.w	800b338 <_svfprintf_r+0x1328>
 800aebe:	ac25      	add	r4, sp, #148	; 0x94
 800aec0:	9b03      	ldr	r3, [sp, #12]
 800aec2:	6023      	str	r3, [r4, #0]
 800aec4:	9b05      	ldr	r3, [sp, #20]
 800aec6:	9a05      	ldr	r2, [sp, #20]
 800aec8:	6063      	str	r3, [r4, #4]
 800aeca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aecc:	4413      	add	r3, r2
 800aece:	9324      	str	r3, [sp, #144]	; 0x90
 800aed0:	e47a      	b.n	800a7c8 <_svfprintf_r+0x7b8>
 800aed2:	aa22      	add	r2, sp, #136	; 0x88
 800aed4:	4649      	mov	r1, r9
 800aed6:	4650      	mov	r0, sl
 800aed8:	f001 fb16 	bl	800c508 <__ssprint_r>
 800aedc:	2800      	cmp	r0, #0
 800aede:	f040 822b 	bne.w	800b338 <_svfprintf_r+0x1328>
 800aee2:	ac25      	add	r4, sp, #148	; 0x94
 800aee4:	e7b8      	b.n	800ae58 <_svfprintf_r+0xe48>
 800aee6:	aa22      	add	r2, sp, #136	; 0x88
 800aee8:	4649      	mov	r1, r9
 800aeea:	4650      	mov	r0, sl
 800aeec:	f001 fb0c 	bl	800c508 <__ssprint_r>
 800aef0:	2800      	cmp	r0, #0
 800aef2:	f040 8221 	bne.w	800b338 <_svfprintf_r+0x1328>
 800aef6:	ac25      	add	r4, sp, #148	; 0x94
 800aef8:	e7c3      	b.n	800ae82 <_svfprintf_r+0xe72>
 800aefa:	3110      	adds	r1, #16
 800aefc:	2a07      	cmp	r2, #7
 800aefe:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800af02:	605f      	str	r7, [r3, #4]
 800af04:	dd08      	ble.n	800af18 <_svfprintf_r+0xf08>
 800af06:	aa22      	add	r2, sp, #136	; 0x88
 800af08:	4649      	mov	r1, r9
 800af0a:	4650      	mov	r0, sl
 800af0c:	f001 fafc 	bl	800c508 <__ssprint_r>
 800af10:	2800      	cmp	r0, #0
 800af12:	f040 8211 	bne.w	800b338 <_svfprintf_r+0x1328>
 800af16:	ac25      	add	r4, sp, #148	; 0x94
 800af18:	3d10      	subs	r5, #16
 800af1a:	4623      	mov	r3, r4
 800af1c:	e7b8      	b.n	800ae90 <_svfprintf_r+0xe80>
 800af1e:	bf00      	nop
 800af20:	0800eb76 	.word	0x0800eb76
 800af24:	0800eb88 	.word	0x0800eb88
 800af28:	9b05      	ldr	r3, [sp, #20]
 800af2a:	42ab      	cmp	r3, r5
 800af2c:	bfa8      	it	ge
 800af2e:	462b      	movge	r3, r5
 800af30:	2b00      	cmp	r3, #0
 800af32:	4698      	mov	r8, r3
 800af34:	dd0a      	ble.n	800af4c <_svfprintf_r+0xf3c>
 800af36:	9b03      	ldr	r3, [sp, #12]
 800af38:	e9c4 3800 	strd	r3, r8, [r4]
 800af3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af3e:	3301      	adds	r3, #1
 800af40:	4447      	add	r7, r8
 800af42:	2b07      	cmp	r3, #7
 800af44:	9724      	str	r7, [sp, #144]	; 0x90
 800af46:	9323      	str	r3, [sp, #140]	; 0x8c
 800af48:	dc7b      	bgt.n	800b042 <_svfprintf_r+0x1032>
 800af4a:	3408      	adds	r4, #8
 800af4c:	f1b8 0f00 	cmp.w	r8, #0
 800af50:	bfac      	ite	ge
 800af52:	eba5 0708 	subge.w	r7, r5, r8
 800af56:	462f      	movlt	r7, r5
 800af58:	2f00      	cmp	r7, #0
 800af5a:	dd1a      	ble.n	800af92 <_svfprintf_r+0xf82>
 800af5c:	f8df 8368 	ldr.w	r8, [pc, #872]	; 800b2c8 <_svfprintf_r+0x12b8>
 800af60:	f8c4 8000 	str.w	r8, [r4]
 800af64:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800af68:	2f10      	cmp	r7, #16
 800af6a:	f103 0301 	add.w	r3, r3, #1
 800af6e:	f104 0108 	add.w	r1, r4, #8
 800af72:	dc70      	bgt.n	800b056 <_svfprintf_r+0x1046>
 800af74:	6067      	str	r7, [r4, #4]
 800af76:	2b07      	cmp	r3, #7
 800af78:	4417      	add	r7, r2
 800af7a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800af7e:	dd7d      	ble.n	800b07c <_svfprintf_r+0x106c>
 800af80:	aa22      	add	r2, sp, #136	; 0x88
 800af82:	4649      	mov	r1, r9
 800af84:	4650      	mov	r0, sl
 800af86:	f001 fabf 	bl	800c508 <__ssprint_r>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	f040 81d4 	bne.w	800b338 <_svfprintf_r+0x1328>
 800af90:	ac25      	add	r4, sp, #148	; 0x94
 800af92:	9b03      	ldr	r3, [sp, #12]
 800af94:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800af98:	441d      	add	r5, r3
 800af9a:	d00a      	beq.n	800afb2 <_svfprintf_r+0xfa2>
 800af9c:	9b08      	ldr	r3, [sp, #32]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d16e      	bne.n	800b080 <_svfprintf_r+0x1070>
 800afa2:	2e00      	cmp	r6, #0
 800afa4:	d16e      	bne.n	800b084 <_svfprintf_r+0x1074>
 800afa6:	9b03      	ldr	r3, [sp, #12]
 800afa8:	9a05      	ldr	r2, [sp, #20]
 800afaa:	4413      	add	r3, r2
 800afac:	429d      	cmp	r5, r3
 800afae:	bf28      	it	cs
 800afb0:	461d      	movcs	r5, r3
 800afb2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800afb4:	9a05      	ldr	r2, [sp, #20]
 800afb6:	4293      	cmp	r3, r2
 800afb8:	db02      	blt.n	800afc0 <_svfprintf_r+0xfb0>
 800afba:	f01b 0f01 	tst.w	fp, #1
 800afbe:	d00e      	beq.n	800afde <_svfprintf_r+0xfce>
 800afc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800afc2:	6023      	str	r3, [r4, #0]
 800afc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afc8:	6063      	str	r3, [r4, #4]
 800afca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800afcc:	4413      	add	r3, r2
 800afce:	9324      	str	r3, [sp, #144]	; 0x90
 800afd0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afd2:	3301      	adds	r3, #1
 800afd4:	2b07      	cmp	r3, #7
 800afd6:	9323      	str	r3, [sp, #140]	; 0x8c
 800afd8:	f300 80d2 	bgt.w	800b180 <_svfprintf_r+0x1170>
 800afdc:	3408      	adds	r4, #8
 800afde:	9b05      	ldr	r3, [sp, #20]
 800afe0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800afe2:	9a05      	ldr	r2, [sp, #20]
 800afe4:	1b9e      	subs	r6, r3, r6
 800afe6:	9b03      	ldr	r3, [sp, #12]
 800afe8:	4413      	add	r3, r2
 800afea:	1b5b      	subs	r3, r3, r5
 800afec:	429e      	cmp	r6, r3
 800afee:	bfa8      	it	ge
 800aff0:	461e      	movge	r6, r3
 800aff2:	2e00      	cmp	r6, #0
 800aff4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aff6:	dd0a      	ble.n	800b00e <_svfprintf_r+0xffe>
 800aff8:	4433      	add	r3, r6
 800affa:	9324      	str	r3, [sp, #144]	; 0x90
 800affc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800affe:	3301      	adds	r3, #1
 800b000:	2b07      	cmp	r3, #7
 800b002:	e9c4 5600 	strd	r5, r6, [r4]
 800b006:	9323      	str	r3, [sp, #140]	; 0x8c
 800b008:	f300 80c4 	bgt.w	800b194 <_svfprintf_r+0x1184>
 800b00c:	3408      	adds	r4, #8
 800b00e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800b010:	9b05      	ldr	r3, [sp, #20]
 800b012:	2e00      	cmp	r6, #0
 800b014:	eba3 0505 	sub.w	r5, r3, r5
 800b018:	bfa8      	it	ge
 800b01a:	1bad      	subge	r5, r5, r6
 800b01c:	2d00      	cmp	r5, #0
 800b01e:	f77f abda 	ble.w	800a7d6 <_svfprintf_r+0x7c6>
 800b022:	4ea9      	ldr	r6, [pc, #676]	; (800b2c8 <_svfprintf_r+0x12b8>)
 800b024:	2710      	movs	r7, #16
 800b026:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800b02a:	2d10      	cmp	r5, #16
 800b02c:	f103 0301 	add.w	r3, r3, #1
 800b030:	f104 0108 	add.w	r1, r4, #8
 800b034:	6026      	str	r6, [r4, #0]
 800b036:	f300 80b7 	bgt.w	800b1a8 <_svfprintf_r+0x1198>
 800b03a:	442a      	add	r2, r5
 800b03c:	6065      	str	r5, [r4, #4]
 800b03e:	9224      	str	r2, [sp, #144]	; 0x90
 800b040:	e6c7      	b.n	800add2 <_svfprintf_r+0xdc2>
 800b042:	aa22      	add	r2, sp, #136	; 0x88
 800b044:	4649      	mov	r1, r9
 800b046:	4650      	mov	r0, sl
 800b048:	f001 fa5e 	bl	800c508 <__ssprint_r>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	f040 8173 	bne.w	800b338 <_svfprintf_r+0x1328>
 800b052:	ac25      	add	r4, sp, #148	; 0x94
 800b054:	e77a      	b.n	800af4c <_svfprintf_r+0xf3c>
 800b056:	2010      	movs	r0, #16
 800b058:	4402      	add	r2, r0
 800b05a:	2b07      	cmp	r3, #7
 800b05c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b060:	6060      	str	r0, [r4, #4]
 800b062:	dd08      	ble.n	800b076 <_svfprintf_r+0x1066>
 800b064:	aa22      	add	r2, sp, #136	; 0x88
 800b066:	4649      	mov	r1, r9
 800b068:	4650      	mov	r0, sl
 800b06a:	f001 fa4d 	bl	800c508 <__ssprint_r>
 800b06e:	2800      	cmp	r0, #0
 800b070:	f040 8162 	bne.w	800b338 <_svfprintf_r+0x1328>
 800b074:	a925      	add	r1, sp, #148	; 0x94
 800b076:	3f10      	subs	r7, #16
 800b078:	460c      	mov	r4, r1
 800b07a:	e771      	b.n	800af60 <_svfprintf_r+0xf50>
 800b07c:	460c      	mov	r4, r1
 800b07e:	e788      	b.n	800af92 <_svfprintf_r+0xf82>
 800b080:	2e00      	cmp	r6, #0
 800b082:	d04d      	beq.n	800b120 <_svfprintf_r+0x1110>
 800b084:	3e01      	subs	r6, #1
 800b086:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b08c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b08e:	6063      	str	r3, [r4, #4]
 800b090:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b092:	4413      	add	r3, r2
 800b094:	9324      	str	r3, [sp, #144]	; 0x90
 800b096:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b098:	3301      	adds	r3, #1
 800b09a:	2b07      	cmp	r3, #7
 800b09c:	9323      	str	r3, [sp, #140]	; 0x8c
 800b09e:	dc46      	bgt.n	800b12e <_svfprintf_r+0x111e>
 800b0a0:	3408      	adds	r4, #8
 800b0a2:	9b03      	ldr	r3, [sp, #12]
 800b0a4:	9a05      	ldr	r2, [sp, #20]
 800b0a6:	eb03 0802 	add.w	r8, r3, r2
 800b0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	eba8 0805 	sub.w	r8, r8, r5
 800b0b2:	4598      	cmp	r8, r3
 800b0b4:	bfa8      	it	ge
 800b0b6:	4698      	movge	r8, r3
 800b0b8:	f1b8 0f00 	cmp.w	r8, #0
 800b0bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b0be:	dd09      	ble.n	800b0d4 <_svfprintf_r+0x10c4>
 800b0c0:	4443      	add	r3, r8
 800b0c2:	9324      	str	r3, [sp, #144]	; 0x90
 800b0c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	2b07      	cmp	r3, #7
 800b0ca:	e9c4 5800 	strd	r5, r8, [r4]
 800b0ce:	9323      	str	r3, [sp, #140]	; 0x8c
 800b0d0:	dc37      	bgt.n	800b142 <_svfprintf_r+0x1132>
 800b0d2:	3408      	adds	r4, #8
 800b0d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d6:	781f      	ldrb	r7, [r3, #0]
 800b0d8:	f1b8 0f00 	cmp.w	r8, #0
 800b0dc:	bfa8      	it	ge
 800b0de:	eba7 0708 	subge.w	r7, r7, r8
 800b0e2:	2f00      	cmp	r7, #0
 800b0e4:	dd18      	ble.n	800b118 <_svfprintf_r+0x1108>
 800b0e6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800b0ea:	4877      	ldr	r0, [pc, #476]	; (800b2c8 <_svfprintf_r+0x12b8>)
 800b0ec:	6020      	str	r0, [r4, #0]
 800b0ee:	2f10      	cmp	r7, #16
 800b0f0:	f103 0301 	add.w	r3, r3, #1
 800b0f4:	f104 0108 	add.w	r1, r4, #8
 800b0f8:	dc2d      	bgt.n	800b156 <_svfprintf_r+0x1146>
 800b0fa:	443a      	add	r2, r7
 800b0fc:	2b07      	cmp	r3, #7
 800b0fe:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b102:	6067      	str	r7, [r4, #4]
 800b104:	dd3a      	ble.n	800b17c <_svfprintf_r+0x116c>
 800b106:	aa22      	add	r2, sp, #136	; 0x88
 800b108:	4649      	mov	r1, r9
 800b10a:	4650      	mov	r0, sl
 800b10c:	f001 f9fc 	bl	800c508 <__ssprint_r>
 800b110:	2800      	cmp	r0, #0
 800b112:	f040 8111 	bne.w	800b338 <_svfprintf_r+0x1328>
 800b116:	ac25      	add	r4, sp, #148	; 0x94
 800b118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	441d      	add	r5, r3
 800b11e:	e73d      	b.n	800af9c <_svfprintf_r+0xf8c>
 800b120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b122:	3b01      	subs	r3, #1
 800b124:	9309      	str	r3, [sp, #36]	; 0x24
 800b126:	9b08      	ldr	r3, [sp, #32]
 800b128:	3b01      	subs	r3, #1
 800b12a:	9308      	str	r3, [sp, #32]
 800b12c:	e7ab      	b.n	800b086 <_svfprintf_r+0x1076>
 800b12e:	aa22      	add	r2, sp, #136	; 0x88
 800b130:	4649      	mov	r1, r9
 800b132:	4650      	mov	r0, sl
 800b134:	f001 f9e8 	bl	800c508 <__ssprint_r>
 800b138:	2800      	cmp	r0, #0
 800b13a:	f040 80fd 	bne.w	800b338 <_svfprintf_r+0x1328>
 800b13e:	ac25      	add	r4, sp, #148	; 0x94
 800b140:	e7af      	b.n	800b0a2 <_svfprintf_r+0x1092>
 800b142:	aa22      	add	r2, sp, #136	; 0x88
 800b144:	4649      	mov	r1, r9
 800b146:	4650      	mov	r0, sl
 800b148:	f001 f9de 	bl	800c508 <__ssprint_r>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	f040 80f3 	bne.w	800b338 <_svfprintf_r+0x1328>
 800b152:	ac25      	add	r4, sp, #148	; 0x94
 800b154:	e7be      	b.n	800b0d4 <_svfprintf_r+0x10c4>
 800b156:	2010      	movs	r0, #16
 800b158:	4402      	add	r2, r0
 800b15a:	2b07      	cmp	r3, #7
 800b15c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b160:	6060      	str	r0, [r4, #4]
 800b162:	dd08      	ble.n	800b176 <_svfprintf_r+0x1166>
 800b164:	aa22      	add	r2, sp, #136	; 0x88
 800b166:	4649      	mov	r1, r9
 800b168:	4650      	mov	r0, sl
 800b16a:	f001 f9cd 	bl	800c508 <__ssprint_r>
 800b16e:	2800      	cmp	r0, #0
 800b170:	f040 80e2 	bne.w	800b338 <_svfprintf_r+0x1328>
 800b174:	a925      	add	r1, sp, #148	; 0x94
 800b176:	3f10      	subs	r7, #16
 800b178:	460c      	mov	r4, r1
 800b17a:	e7b4      	b.n	800b0e6 <_svfprintf_r+0x10d6>
 800b17c:	460c      	mov	r4, r1
 800b17e:	e7cb      	b.n	800b118 <_svfprintf_r+0x1108>
 800b180:	aa22      	add	r2, sp, #136	; 0x88
 800b182:	4649      	mov	r1, r9
 800b184:	4650      	mov	r0, sl
 800b186:	f001 f9bf 	bl	800c508 <__ssprint_r>
 800b18a:	2800      	cmp	r0, #0
 800b18c:	f040 80d4 	bne.w	800b338 <_svfprintf_r+0x1328>
 800b190:	ac25      	add	r4, sp, #148	; 0x94
 800b192:	e724      	b.n	800afde <_svfprintf_r+0xfce>
 800b194:	aa22      	add	r2, sp, #136	; 0x88
 800b196:	4649      	mov	r1, r9
 800b198:	4650      	mov	r0, sl
 800b19a:	f001 f9b5 	bl	800c508 <__ssprint_r>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	f040 80ca 	bne.w	800b338 <_svfprintf_r+0x1328>
 800b1a4:	ac25      	add	r4, sp, #148	; 0x94
 800b1a6:	e732      	b.n	800b00e <_svfprintf_r+0xffe>
 800b1a8:	3210      	adds	r2, #16
 800b1aa:	2b07      	cmp	r3, #7
 800b1ac:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b1b0:	6067      	str	r7, [r4, #4]
 800b1b2:	dd08      	ble.n	800b1c6 <_svfprintf_r+0x11b6>
 800b1b4:	aa22      	add	r2, sp, #136	; 0x88
 800b1b6:	4649      	mov	r1, r9
 800b1b8:	4650      	mov	r0, sl
 800b1ba:	f001 f9a5 	bl	800c508 <__ssprint_r>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	f040 80ba 	bne.w	800b338 <_svfprintf_r+0x1328>
 800b1c4:	a925      	add	r1, sp, #148	; 0x94
 800b1c6:	3d10      	subs	r5, #16
 800b1c8:	460c      	mov	r4, r1
 800b1ca:	e72c      	b.n	800b026 <_svfprintf_r+0x1016>
 800b1cc:	9a05      	ldr	r2, [sp, #20]
 800b1ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b1d0:	2a01      	cmp	r2, #1
 800b1d2:	9a03      	ldr	r2, [sp, #12]
 800b1d4:	6022      	str	r2, [r4, #0]
 800b1d6:	f107 0701 	add.w	r7, r7, #1
 800b1da:	f103 0301 	add.w	r3, r3, #1
 800b1de:	f04f 0201 	mov.w	r2, #1
 800b1e2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800b1e6:	f104 0508 	add.w	r5, r4, #8
 800b1ea:	6062      	str	r2, [r4, #4]
 800b1ec:	dc02      	bgt.n	800b1f4 <_svfprintf_r+0x11e4>
 800b1ee:	f01b 0f01 	tst.w	fp, #1
 800b1f2:	d07b      	beq.n	800b2ec <_svfprintf_r+0x12dc>
 800b1f4:	2b07      	cmp	r3, #7
 800b1f6:	dd08      	ble.n	800b20a <_svfprintf_r+0x11fa>
 800b1f8:	aa22      	add	r2, sp, #136	; 0x88
 800b1fa:	4649      	mov	r1, r9
 800b1fc:	4650      	mov	r0, sl
 800b1fe:	f001 f983 	bl	800c508 <__ssprint_r>
 800b202:	2800      	cmp	r0, #0
 800b204:	f040 8098 	bne.w	800b338 <_svfprintf_r+0x1328>
 800b208:	ad25      	add	r5, sp, #148	; 0x94
 800b20a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b20c:	602b      	str	r3, [r5, #0]
 800b20e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b210:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b212:	606b      	str	r3, [r5, #4]
 800b214:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b216:	4413      	add	r3, r2
 800b218:	9324      	str	r3, [sp, #144]	; 0x90
 800b21a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b21c:	3301      	adds	r3, #1
 800b21e:	2b07      	cmp	r3, #7
 800b220:	9323      	str	r3, [sp, #140]	; 0x8c
 800b222:	dc32      	bgt.n	800b28a <_svfprintf_r+0x127a>
 800b224:	3508      	adds	r5, #8
 800b226:	9b05      	ldr	r3, [sp, #20]
 800b228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b22c:	1e5c      	subs	r4, r3, #1
 800b22e:	2200      	movs	r2, #0
 800b230:	2300      	movs	r3, #0
 800b232:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 800b236:	f7f5 fc4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d12e      	bne.n	800b29c <_svfprintf_r+0x128c>
 800b23e:	9b03      	ldr	r3, [sp, #12]
 800b240:	3301      	adds	r3, #1
 800b242:	e9c5 3400 	strd	r3, r4, [r5]
 800b246:	9b05      	ldr	r3, [sp, #20]
 800b248:	3701      	adds	r7, #1
 800b24a:	3e01      	subs	r6, #1
 800b24c:	441e      	add	r6, r3
 800b24e:	2f07      	cmp	r7, #7
 800b250:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 800b254:	dd4d      	ble.n	800b2f2 <_svfprintf_r+0x12e2>
 800b256:	aa22      	add	r2, sp, #136	; 0x88
 800b258:	4649      	mov	r1, r9
 800b25a:	4650      	mov	r0, sl
 800b25c:	f001 f954 	bl	800c508 <__ssprint_r>
 800b260:	2800      	cmp	r0, #0
 800b262:	d169      	bne.n	800b338 <_svfprintf_r+0x1328>
 800b264:	ad25      	add	r5, sp, #148	; 0x94
 800b266:	ab1e      	add	r3, sp, #120	; 0x78
 800b268:	602b      	str	r3, [r5, #0]
 800b26a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b26c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b26e:	606b      	str	r3, [r5, #4]
 800b270:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b272:	4413      	add	r3, r2
 800b274:	9324      	str	r3, [sp, #144]	; 0x90
 800b276:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b278:	3301      	adds	r3, #1
 800b27a:	2b07      	cmp	r3, #7
 800b27c:	9323      	str	r3, [sp, #140]	; 0x8c
 800b27e:	f73f adac 	bgt.w	800adda <_svfprintf_r+0xdca>
 800b282:	f105 0408 	add.w	r4, r5, #8
 800b286:	f7ff baa6 	b.w	800a7d6 <_svfprintf_r+0x7c6>
 800b28a:	aa22      	add	r2, sp, #136	; 0x88
 800b28c:	4649      	mov	r1, r9
 800b28e:	4650      	mov	r0, sl
 800b290:	f001 f93a 	bl	800c508 <__ssprint_r>
 800b294:	2800      	cmp	r0, #0
 800b296:	d14f      	bne.n	800b338 <_svfprintf_r+0x1328>
 800b298:	ad25      	add	r5, sp, #148	; 0x94
 800b29a:	e7c4      	b.n	800b226 <_svfprintf_r+0x1216>
 800b29c:	2c00      	cmp	r4, #0
 800b29e:	dde2      	ble.n	800b266 <_svfprintf_r+0x1256>
 800b2a0:	4e09      	ldr	r6, [pc, #36]	; (800b2c8 <_svfprintf_r+0x12b8>)
 800b2a2:	2710      	movs	r7, #16
 800b2a4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800b2a8:	2c10      	cmp	r4, #16
 800b2aa:	f103 0301 	add.w	r3, r3, #1
 800b2ae:	f105 0108 	add.w	r1, r5, #8
 800b2b2:	602e      	str	r6, [r5, #0]
 800b2b4:	dc0a      	bgt.n	800b2cc <_svfprintf_r+0x12bc>
 800b2b6:	606c      	str	r4, [r5, #4]
 800b2b8:	2b07      	cmp	r3, #7
 800b2ba:	4414      	add	r4, r2
 800b2bc:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800b2c0:	dcc9      	bgt.n	800b256 <_svfprintf_r+0x1246>
 800b2c2:	460d      	mov	r5, r1
 800b2c4:	e7cf      	b.n	800b266 <_svfprintf_r+0x1256>
 800b2c6:	bf00      	nop
 800b2c8:	0800eb88 	.word	0x0800eb88
 800b2cc:	3210      	adds	r2, #16
 800b2ce:	2b07      	cmp	r3, #7
 800b2d0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b2d4:	606f      	str	r7, [r5, #4]
 800b2d6:	dd06      	ble.n	800b2e6 <_svfprintf_r+0x12d6>
 800b2d8:	aa22      	add	r2, sp, #136	; 0x88
 800b2da:	4649      	mov	r1, r9
 800b2dc:	4650      	mov	r0, sl
 800b2de:	f001 f913 	bl	800c508 <__ssprint_r>
 800b2e2:	bb48      	cbnz	r0, 800b338 <_svfprintf_r+0x1328>
 800b2e4:	a925      	add	r1, sp, #148	; 0x94
 800b2e6:	3c10      	subs	r4, #16
 800b2e8:	460d      	mov	r5, r1
 800b2ea:	e7db      	b.n	800b2a4 <_svfprintf_r+0x1294>
 800b2ec:	2b07      	cmp	r3, #7
 800b2ee:	ddba      	ble.n	800b266 <_svfprintf_r+0x1256>
 800b2f0:	e7b1      	b.n	800b256 <_svfprintf_r+0x1246>
 800b2f2:	3508      	adds	r5, #8
 800b2f4:	e7b7      	b.n	800b266 <_svfprintf_r+0x1256>
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	f7ff ba6d 	b.w	800a7d6 <_svfprintf_r+0x7c6>
 800b2fc:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800b300:	1a9d      	subs	r5, r3, r2
 800b302:	2d00      	cmp	r5, #0
 800b304:	f77f aa6b 	ble.w	800a7de <_svfprintf_r+0x7ce>
 800b308:	4e37      	ldr	r6, [pc, #220]	; (800b3e8 <_svfprintf_r+0x13d8>)
 800b30a:	2710      	movs	r7, #16
 800b30c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800b310:	2d10      	cmp	r5, #16
 800b312:	f103 0301 	add.w	r3, r3, #1
 800b316:	6026      	str	r6, [r4, #0]
 800b318:	dc18      	bgt.n	800b34c <_svfprintf_r+0x133c>
 800b31a:	6065      	str	r5, [r4, #4]
 800b31c:	2b07      	cmp	r3, #7
 800b31e:	4415      	add	r5, r2
 800b320:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800b324:	f77f aa5b 	ble.w	800a7de <_svfprintf_r+0x7ce>
 800b328:	aa22      	add	r2, sp, #136	; 0x88
 800b32a:	4649      	mov	r1, r9
 800b32c:	4650      	mov	r0, sl
 800b32e:	f001 f8eb 	bl	800c508 <__ssprint_r>
 800b332:	2800      	cmp	r0, #0
 800b334:	f43f aa53 	beq.w	800a7de <_svfprintf_r+0x7ce>
 800b338:	9b04      	ldr	r3, [sp, #16]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f43f a874 	beq.w	800a428 <_svfprintf_r+0x418>
 800b340:	4619      	mov	r1, r3
 800b342:	4650      	mov	r0, sl
 800b344:	f7fe f810 	bl	8009368 <_free_r>
 800b348:	f7ff b86e 	b.w	800a428 <_svfprintf_r+0x418>
 800b34c:	3210      	adds	r2, #16
 800b34e:	2b07      	cmp	r3, #7
 800b350:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b354:	6067      	str	r7, [r4, #4]
 800b356:	dc02      	bgt.n	800b35e <_svfprintf_r+0x134e>
 800b358:	3408      	adds	r4, #8
 800b35a:	3d10      	subs	r5, #16
 800b35c:	e7d6      	b.n	800b30c <_svfprintf_r+0x12fc>
 800b35e:	aa22      	add	r2, sp, #136	; 0x88
 800b360:	4649      	mov	r1, r9
 800b362:	4650      	mov	r0, sl
 800b364:	f001 f8d0 	bl	800c508 <__ssprint_r>
 800b368:	2800      	cmp	r0, #0
 800b36a:	d1e5      	bne.n	800b338 <_svfprintf_r+0x1328>
 800b36c:	ac25      	add	r4, sp, #148	; 0x94
 800b36e:	e7f4      	b.n	800b35a <_svfprintf_r+0x134a>
 800b370:	9904      	ldr	r1, [sp, #16]
 800b372:	4650      	mov	r0, sl
 800b374:	f7fd fff8 	bl	8009368 <_free_r>
 800b378:	f7ff ba49 	b.w	800a80e <_svfprintf_r+0x7fe>
 800b37c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f43f a852 	beq.w	800a428 <_svfprintf_r+0x418>
 800b384:	aa22      	add	r2, sp, #136	; 0x88
 800b386:	4649      	mov	r1, r9
 800b388:	4650      	mov	r0, sl
 800b38a:	f001 f8bd 	bl	800c508 <__ssprint_r>
 800b38e:	f7ff b84b 	b.w	800a428 <_svfprintf_r+0x418>
 800b392:	ea55 0206 	orrs.w	r2, r5, r6
 800b396:	f8cd b010 	str.w	fp, [sp, #16]
 800b39a:	f43f ab5e 	beq.w	800aa5a <_svfprintf_r+0xa4a>
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	f43f abff 	beq.w	800aba2 <_svfprintf_r+0xb92>
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	ab4e      	add	r3, sp, #312	; 0x138
 800b3a8:	9303      	str	r3, [sp, #12]
 800b3aa:	f43f ac4d 	beq.w	800ac48 <_svfprintf_r+0xc38>
 800b3ae:	9a03      	ldr	r2, [sp, #12]
 800b3b0:	f005 0307 	and.w	r3, r5, #7
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	3330      	adds	r3, #48	; 0x30
 800b3b8:	f801 3d01 	strb.w	r3, [r1, #-1]!
 800b3bc:	08ed      	lsrs	r5, r5, #3
 800b3be:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 800b3c2:	08f6      	lsrs	r6, r6, #3
 800b3c4:	9103      	str	r1, [sp, #12]
 800b3c6:	ea55 0106 	orrs.w	r1, r5, r6
 800b3ca:	d1f0      	bne.n	800b3ae <_svfprintf_r+0x139e>
 800b3cc:	9904      	ldr	r1, [sp, #16]
 800b3ce:	07c9      	lsls	r1, r1, #31
 800b3d0:	f57f ac2a 	bpl.w	800ac28 <_svfprintf_r+0xc18>
 800b3d4:	2b30      	cmp	r3, #48	; 0x30
 800b3d6:	f43f ac27 	beq.w	800ac28 <_svfprintf_r+0xc18>
 800b3da:	9903      	ldr	r1, [sp, #12]
 800b3dc:	2330      	movs	r3, #48	; 0x30
 800b3de:	f801 3c01 	strb.w	r3, [r1, #-1]
 800b3e2:	1e93      	subs	r3, r2, #2
 800b3e4:	9303      	str	r3, [sp, #12]
 800b3e6:	e41f      	b.n	800ac28 <_svfprintf_r+0xc18>
 800b3e8:	0800eb78 	.word	0x0800eb78

0800b3ec <_fclose_r>:
 800b3ec:	b570      	push	{r4, r5, r6, lr}
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	b911      	cbnz	r1, 800b3fa <_fclose_r+0xe>
 800b3f4:	2500      	movs	r5, #0
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	bd70      	pop	{r4, r5, r6, pc}
 800b3fa:	b118      	cbz	r0, 800b404 <_fclose_r+0x18>
 800b3fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b3fe:	b90b      	cbnz	r3, 800b404 <_fclose_r+0x18>
 800b400:	f7fd fe24 	bl	800904c <__sinit>
 800b404:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b406:	07d8      	lsls	r0, r3, #31
 800b408:	d405      	bmi.n	800b416 <_fclose_r+0x2a>
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	0599      	lsls	r1, r3, #22
 800b40e:	d402      	bmi.n	800b416 <_fclose_r+0x2a>
 800b410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b412:	f7fd ff35 	bl	8009280 <__retarget_lock_acquire_recursive>
 800b416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b41a:	b93b      	cbnz	r3, 800b42c <_fclose_r+0x40>
 800b41c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b41e:	f015 0501 	ands.w	r5, r5, #1
 800b422:	d1e7      	bne.n	800b3f4 <_fclose_r+0x8>
 800b424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b426:	f7fd ff2c 	bl	8009282 <__retarget_lock_release_recursive>
 800b42a:	e7e4      	b.n	800b3f6 <_fclose_r+0xa>
 800b42c:	4621      	mov	r1, r4
 800b42e:	4630      	mov	r0, r6
 800b430:	f000 f834 	bl	800b49c <__sflush_r>
 800b434:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b436:	4605      	mov	r5, r0
 800b438:	b133      	cbz	r3, 800b448 <_fclose_r+0x5c>
 800b43a:	69e1      	ldr	r1, [r4, #28]
 800b43c:	4630      	mov	r0, r6
 800b43e:	4798      	blx	r3
 800b440:	2800      	cmp	r0, #0
 800b442:	bfb8      	it	lt
 800b444:	f04f 35ff 	movlt.w	r5, #4294967295
 800b448:	89a3      	ldrh	r3, [r4, #12]
 800b44a:	061a      	lsls	r2, r3, #24
 800b44c:	d503      	bpl.n	800b456 <_fclose_r+0x6a>
 800b44e:	6921      	ldr	r1, [r4, #16]
 800b450:	4630      	mov	r0, r6
 800b452:	f7fd ff89 	bl	8009368 <_free_r>
 800b456:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b458:	b141      	cbz	r1, 800b46c <_fclose_r+0x80>
 800b45a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b45e:	4299      	cmp	r1, r3
 800b460:	d002      	beq.n	800b468 <_fclose_r+0x7c>
 800b462:	4630      	mov	r0, r6
 800b464:	f7fd ff80 	bl	8009368 <_free_r>
 800b468:	2300      	movs	r3, #0
 800b46a:	6323      	str	r3, [r4, #48]	; 0x30
 800b46c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b46e:	b121      	cbz	r1, 800b47a <_fclose_r+0x8e>
 800b470:	4630      	mov	r0, r6
 800b472:	f7fd ff79 	bl	8009368 <_free_r>
 800b476:	2300      	movs	r3, #0
 800b478:	6463      	str	r3, [r4, #68]	; 0x44
 800b47a:	f7fd fddb 	bl	8009034 <__sfp_lock_acquire>
 800b47e:	2300      	movs	r3, #0
 800b480:	81a3      	strh	r3, [r4, #12]
 800b482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b484:	07db      	lsls	r3, r3, #31
 800b486:	d402      	bmi.n	800b48e <_fclose_r+0xa2>
 800b488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b48a:	f7fd fefa 	bl	8009282 <__retarget_lock_release_recursive>
 800b48e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b490:	f7fd fef5 	bl	800927e <__retarget_lock_close_recursive>
 800b494:	f7fd fdd4 	bl	8009040 <__sfp_lock_release>
 800b498:	e7ad      	b.n	800b3f6 <_fclose_r+0xa>
	...

0800b49c <__sflush_r>:
 800b49c:	898b      	ldrh	r3, [r1, #12]
 800b49e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a6:	4605      	mov	r5, r0
 800b4a8:	0718      	lsls	r0, r3, #28
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	d45f      	bmi.n	800b56e <__sflush_r+0xd2>
 800b4ae:	684b      	ldr	r3, [r1, #4]
 800b4b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	818a      	strh	r2, [r1, #12]
 800b4b8:	dc05      	bgt.n	800b4c6 <__sflush_r+0x2a>
 800b4ba:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	dc02      	bgt.n	800b4c6 <__sflush_r+0x2a>
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4c8:	2e00      	cmp	r6, #0
 800b4ca:	d0f9      	beq.n	800b4c0 <__sflush_r+0x24>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4d2:	682f      	ldr	r7, [r5, #0]
 800b4d4:	69e1      	ldr	r1, [r4, #28]
 800b4d6:	602b      	str	r3, [r5, #0]
 800b4d8:	d036      	beq.n	800b548 <__sflush_r+0xac>
 800b4da:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	075a      	lsls	r2, r3, #29
 800b4e0:	d505      	bpl.n	800b4ee <__sflush_r+0x52>
 800b4e2:	6863      	ldr	r3, [r4, #4]
 800b4e4:	1ac0      	subs	r0, r0, r3
 800b4e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b4e8:	b10b      	cbz	r3, 800b4ee <__sflush_r+0x52>
 800b4ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b4ec:	1ac0      	subs	r0, r0, r3
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4f4:	69e1      	ldr	r1, [r4, #28]
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	47b0      	blx	r6
 800b4fa:	1c43      	adds	r3, r0, #1
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	d106      	bne.n	800b50e <__sflush_r+0x72>
 800b500:	6829      	ldr	r1, [r5, #0]
 800b502:	291d      	cmp	r1, #29
 800b504:	d82f      	bhi.n	800b566 <__sflush_r+0xca>
 800b506:	4a2b      	ldr	r2, [pc, #172]	; (800b5b4 <__sflush_r+0x118>)
 800b508:	410a      	asrs	r2, r1
 800b50a:	07d6      	lsls	r6, r2, #31
 800b50c:	d42b      	bmi.n	800b566 <__sflush_r+0xca>
 800b50e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b512:	b21b      	sxth	r3, r3
 800b514:	2200      	movs	r2, #0
 800b516:	6062      	str	r2, [r4, #4]
 800b518:	04d9      	lsls	r1, r3, #19
 800b51a:	6922      	ldr	r2, [r4, #16]
 800b51c:	81a3      	strh	r3, [r4, #12]
 800b51e:	6022      	str	r2, [r4, #0]
 800b520:	d504      	bpl.n	800b52c <__sflush_r+0x90>
 800b522:	1c42      	adds	r2, r0, #1
 800b524:	d101      	bne.n	800b52a <__sflush_r+0x8e>
 800b526:	682b      	ldr	r3, [r5, #0]
 800b528:	b903      	cbnz	r3, 800b52c <__sflush_r+0x90>
 800b52a:	6520      	str	r0, [r4, #80]	; 0x50
 800b52c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b52e:	602f      	str	r7, [r5, #0]
 800b530:	2900      	cmp	r1, #0
 800b532:	d0c5      	beq.n	800b4c0 <__sflush_r+0x24>
 800b534:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b538:	4299      	cmp	r1, r3
 800b53a:	d002      	beq.n	800b542 <__sflush_r+0xa6>
 800b53c:	4628      	mov	r0, r5
 800b53e:	f7fd ff13 	bl	8009368 <_free_r>
 800b542:	2000      	movs	r0, #0
 800b544:	6320      	str	r0, [r4, #48]	; 0x30
 800b546:	e7bc      	b.n	800b4c2 <__sflush_r+0x26>
 800b548:	2301      	movs	r3, #1
 800b54a:	4628      	mov	r0, r5
 800b54c:	47b0      	blx	r6
 800b54e:	1c41      	adds	r1, r0, #1
 800b550:	d1c4      	bne.n	800b4dc <__sflush_r+0x40>
 800b552:	682b      	ldr	r3, [r5, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d0c1      	beq.n	800b4dc <__sflush_r+0x40>
 800b558:	2b1d      	cmp	r3, #29
 800b55a:	d001      	beq.n	800b560 <__sflush_r+0xc4>
 800b55c:	2b16      	cmp	r3, #22
 800b55e:	d101      	bne.n	800b564 <__sflush_r+0xc8>
 800b560:	602f      	str	r7, [r5, #0]
 800b562:	e7ad      	b.n	800b4c0 <__sflush_r+0x24>
 800b564:	89a3      	ldrh	r3, [r4, #12]
 800b566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b56a:	81a3      	strh	r3, [r4, #12]
 800b56c:	e7a9      	b.n	800b4c2 <__sflush_r+0x26>
 800b56e:	690f      	ldr	r7, [r1, #16]
 800b570:	2f00      	cmp	r7, #0
 800b572:	d0a5      	beq.n	800b4c0 <__sflush_r+0x24>
 800b574:	079b      	lsls	r3, r3, #30
 800b576:	680e      	ldr	r6, [r1, #0]
 800b578:	bf08      	it	eq
 800b57a:	694b      	ldreq	r3, [r1, #20]
 800b57c:	600f      	str	r7, [r1, #0]
 800b57e:	bf18      	it	ne
 800b580:	2300      	movne	r3, #0
 800b582:	eba6 0807 	sub.w	r8, r6, r7
 800b586:	608b      	str	r3, [r1, #8]
 800b588:	f1b8 0f00 	cmp.w	r8, #0
 800b58c:	dd98      	ble.n	800b4c0 <__sflush_r+0x24>
 800b58e:	69e1      	ldr	r1, [r4, #28]
 800b590:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b592:	4643      	mov	r3, r8
 800b594:	463a      	mov	r2, r7
 800b596:	4628      	mov	r0, r5
 800b598:	47b0      	blx	r6
 800b59a:	2800      	cmp	r0, #0
 800b59c:	dc06      	bgt.n	800b5ac <__sflush_r+0x110>
 800b59e:	89a3      	ldrh	r3, [r4, #12]
 800b5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5a4:	81a3      	strh	r3, [r4, #12]
 800b5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5aa:	e78a      	b.n	800b4c2 <__sflush_r+0x26>
 800b5ac:	4407      	add	r7, r0
 800b5ae:	eba8 0800 	sub.w	r8, r8, r0
 800b5b2:	e7e9      	b.n	800b588 <__sflush_r+0xec>
 800b5b4:	dfbffffe 	.word	0xdfbffffe

0800b5b8 <_fflush_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	4605      	mov	r5, r0
 800b5be:	b118      	cbz	r0, 800b5c8 <_fflush_r+0x10>
 800b5c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b5c2:	b90b      	cbnz	r3, 800b5c8 <_fflush_r+0x10>
 800b5c4:	f7fd fd42 	bl	800904c <__sinit>
 800b5c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5cc:	b1bb      	cbz	r3, 800b5fe <_fflush_r+0x46>
 800b5ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5d0:	07d0      	lsls	r0, r2, #31
 800b5d2:	d404      	bmi.n	800b5de <_fflush_r+0x26>
 800b5d4:	0599      	lsls	r1, r3, #22
 800b5d6:	d402      	bmi.n	800b5de <_fflush_r+0x26>
 800b5d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5da:	f7fd fe51 	bl	8009280 <__retarget_lock_acquire_recursive>
 800b5de:	4628      	mov	r0, r5
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	f7ff ff5b 	bl	800b49c <__sflush_r>
 800b5e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5e8:	07da      	lsls	r2, r3, #31
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	d405      	bmi.n	800b5fa <_fflush_r+0x42>
 800b5ee:	89a3      	ldrh	r3, [r4, #12]
 800b5f0:	059b      	lsls	r3, r3, #22
 800b5f2:	d402      	bmi.n	800b5fa <_fflush_r+0x42>
 800b5f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5f6:	f7fd fe44 	bl	8009282 <__retarget_lock_release_recursive>
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	bd38      	pop	{r3, r4, r5, pc}
 800b5fe:	461d      	mov	r5, r3
 800b600:	e7fb      	b.n	800b5fa <_fflush_r+0x42>

0800b602 <strncpy>:
 800b602:	b510      	push	{r4, lr}
 800b604:	3901      	subs	r1, #1
 800b606:	4603      	mov	r3, r0
 800b608:	b132      	cbz	r2, 800b618 <strncpy+0x16>
 800b60a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b60e:	f803 4b01 	strb.w	r4, [r3], #1
 800b612:	3a01      	subs	r2, #1
 800b614:	2c00      	cmp	r4, #0
 800b616:	d1f7      	bne.n	800b608 <strncpy+0x6>
 800b618:	441a      	add	r2, r3
 800b61a:	2100      	movs	r1, #0
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d100      	bne.n	800b622 <strncpy+0x20>
 800b620:	bd10      	pop	{r4, pc}
 800b622:	f803 1b01 	strb.w	r1, [r3], #1
 800b626:	e7f9      	b.n	800b61c <strncpy+0x1a>

0800b628 <_localeconv_r>:
 800b628:	4800      	ldr	r0, [pc, #0]	; (800b62c <_localeconv_r+0x4>)
 800b62a:	4770      	bx	lr
 800b62c:	20000298 	.word	0x20000298

0800b630 <_sbrk_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4d06      	ldr	r5, [pc, #24]	; (800b64c <_sbrk_r+0x1c>)
 800b634:	2300      	movs	r3, #0
 800b636:	4604      	mov	r4, r0
 800b638:	4608      	mov	r0, r1
 800b63a:	602b      	str	r3, [r5, #0]
 800b63c:	f002 fa1e 	bl	800da7c <_sbrk>
 800b640:	1c43      	adds	r3, r0, #1
 800b642:	d102      	bne.n	800b64a <_sbrk_r+0x1a>
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	b103      	cbz	r3, 800b64a <_sbrk_r+0x1a>
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	bd38      	pop	{r3, r4, r5, pc}
 800b64c:	200081ac 	.word	0x200081ac

0800b650 <__libc_fini_array>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4d07      	ldr	r5, [pc, #28]	; (800b670 <__libc_fini_array+0x20>)
 800b654:	4c07      	ldr	r4, [pc, #28]	; (800b674 <__libc_fini_array+0x24>)
 800b656:	1b64      	subs	r4, r4, r5
 800b658:	10a4      	asrs	r4, r4, #2
 800b65a:	b91c      	cbnz	r4, 800b664 <__libc_fini_array+0x14>
 800b65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b660:	f002 ba2a 	b.w	800dab8 <_fini>
 800b664:	3c01      	subs	r4, #1
 800b666:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800b66a:	4798      	blx	r3
 800b66c:	e7f5      	b.n	800b65a <__libc_fini_array+0xa>
 800b66e:	bf00      	nop
 800b670:	0800ec6c 	.word	0x0800ec6c
 800b674:	0800ec70 	.word	0x0800ec70

0800b678 <sysconf>:
 800b678:	2808      	cmp	r0, #8
 800b67a:	b508      	push	{r3, lr}
 800b67c:	d006      	beq.n	800b68c <sysconf+0x14>
 800b67e:	f7fd fdd3 	bl	8009228 <__errno>
 800b682:	2316      	movs	r3, #22
 800b684:	6003      	str	r3, [r0, #0]
 800b686:	f04f 30ff 	mov.w	r0, #4294967295
 800b68a:	bd08      	pop	{r3, pc}
 800b68c:	2080      	movs	r0, #128	; 0x80
 800b68e:	e7fc      	b.n	800b68a <sysconf+0x12>

0800b690 <frexp>:
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	2100      	movs	r1, #0
 800b694:	ec55 4b10 	vmov	r4, r5, d0
 800b698:	6001      	str	r1, [r0, #0]
 800b69a:	4916      	ldr	r1, [pc, #88]	; (800b6f4 <frexp+0x64>)
 800b69c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800b6a0:	428a      	cmp	r2, r1
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	462b      	mov	r3, r5
 800b6a6:	dc22      	bgt.n	800b6ee <frexp+0x5e>
 800b6a8:	ee10 1a10 	vmov	r1, s0
 800b6ac:	4311      	orrs	r1, r2
 800b6ae:	d01e      	beq.n	800b6ee <frexp+0x5e>
 800b6b0:	4911      	ldr	r1, [pc, #68]	; (800b6f8 <frexp+0x68>)
 800b6b2:	4029      	ands	r1, r5
 800b6b4:	b969      	cbnz	r1, 800b6d2 <frexp+0x42>
 800b6b6:	4b11      	ldr	r3, [pc, #68]	; (800b6fc <frexp+0x6c>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	ee10 0a10 	vmov	r0, s0
 800b6be:	4629      	mov	r1, r5
 800b6c0:	f7f4 ffa2 	bl	8000608 <__aeabi_dmul>
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b6ca:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	6031      	str	r1, [r6, #0]
 800b6d2:	6831      	ldr	r1, [r6, #0]
 800b6d4:	1512      	asrs	r2, r2, #20
 800b6d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b6da:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800b6de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b6e2:	4411      	add	r1, r2
 800b6e4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800b6e8:	6031      	str	r1, [r6, #0]
 800b6ea:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800b6ee:	ec45 4b10 	vmov	d0, r4, r5
 800b6f2:	bd70      	pop	{r4, r5, r6, pc}
 800b6f4:	7fefffff 	.word	0x7fefffff
 800b6f8:	7ff00000 	.word	0x7ff00000
 800b6fc:	43500000 	.word	0x43500000

0800b700 <__register_exitproc>:
 800b700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b704:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b77c <__register_exitproc+0x7c>
 800b708:	4606      	mov	r6, r0
 800b70a:	f8da 0000 	ldr.w	r0, [sl]
 800b70e:	4698      	mov	r8, r3
 800b710:	460f      	mov	r7, r1
 800b712:	4691      	mov	r9, r2
 800b714:	f7fd fdb4 	bl	8009280 <__retarget_lock_acquire_recursive>
 800b718:	4b16      	ldr	r3, [pc, #88]	; (800b774 <__register_exitproc+0x74>)
 800b71a:	681c      	ldr	r4, [r3, #0]
 800b71c:	b90c      	cbnz	r4, 800b722 <__register_exitproc+0x22>
 800b71e:	4c16      	ldr	r4, [pc, #88]	; (800b778 <__register_exitproc+0x78>)
 800b720:	601c      	str	r4, [r3, #0]
 800b722:	6865      	ldr	r5, [r4, #4]
 800b724:	f8da 0000 	ldr.w	r0, [sl]
 800b728:	2d1f      	cmp	r5, #31
 800b72a:	dd05      	ble.n	800b738 <__register_exitproc+0x38>
 800b72c:	f7fd fda9 	bl	8009282 <__retarget_lock_release_recursive>
 800b730:	f04f 30ff 	mov.w	r0, #4294967295
 800b734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b738:	b19e      	cbz	r6, 800b762 <__register_exitproc+0x62>
 800b73a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800b73e:	2201      	movs	r2, #1
 800b740:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800b744:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800b748:	40aa      	lsls	r2, r5
 800b74a:	4313      	orrs	r3, r2
 800b74c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800b750:	2e02      	cmp	r6, #2
 800b752:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800b756:	bf02      	ittt	eq
 800b758:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800b75c:	4313      	orreq	r3, r2
 800b75e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800b762:	1c6b      	adds	r3, r5, #1
 800b764:	3502      	adds	r5, #2
 800b766:	6063      	str	r3, [r4, #4]
 800b768:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800b76c:	f7fd fd89 	bl	8009282 <__retarget_lock_release_recursive>
 800b770:	2000      	movs	r0, #0
 800b772:	e7df      	b.n	800b734 <__register_exitproc+0x34>
 800b774:	200081b4 	.word	0x200081b4
 800b778:	200081ec 	.word	0x200081ec
 800b77c:	2000043c 	.word	0x2000043c

0800b780 <__assert_func>:
 800b780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b782:	4614      	mov	r4, r2
 800b784:	461a      	mov	r2, r3
 800b786:	4b09      	ldr	r3, [pc, #36]	; (800b7ac <__assert_func+0x2c>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4605      	mov	r5, r0
 800b78c:	68d8      	ldr	r0, [r3, #12]
 800b78e:	b14c      	cbz	r4, 800b7a4 <__assert_func+0x24>
 800b790:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <__assert_func+0x30>)
 800b792:	9100      	str	r1, [sp, #0]
 800b794:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b798:	4906      	ldr	r1, [pc, #24]	; (800b7b4 <__assert_func+0x34>)
 800b79a:	462b      	mov	r3, r5
 800b79c:	f000 fea2 	bl	800c4e4 <fiprintf>
 800b7a0:	f001 fe5b 	bl	800d45a <abort>
 800b7a4:	4b04      	ldr	r3, [pc, #16]	; (800b7b8 <__assert_func+0x38>)
 800b7a6:	461c      	mov	r4, r3
 800b7a8:	e7f3      	b.n	800b792 <__assert_func+0x12>
 800b7aa:	bf00      	nop
 800b7ac:	20000438 	.word	0x20000438
 800b7b0:	0800eb98 	.word	0x0800eb98
 800b7b4:	0800eba5 	.word	0x0800eba5
 800b7b8:	0800ebd3 	.word	0x0800ebd3

0800b7bc <_calloc_r>:
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	fba1 1502 	umull	r1, r5, r1, r2
 800b7c2:	b92d      	cbnz	r5, 800b7d0 <_calloc_r+0x14>
 800b7c4:	f7fd fe90 	bl	80094e8 <_malloc_r>
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	b938      	cbnz	r0, 800b7dc <_calloc_r+0x20>
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	bd38      	pop	{r3, r4, r5, pc}
 800b7d0:	f7fd fd2a 	bl	8009228 <__errno>
 800b7d4:	230c      	movs	r3, #12
 800b7d6:	6003      	str	r3, [r0, #0]
 800b7d8:	2400      	movs	r4, #0
 800b7da:	e7f7      	b.n	800b7cc <_calloc_r+0x10>
 800b7dc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b7e0:	f022 0203 	bic.w	r2, r2, #3
 800b7e4:	3a04      	subs	r2, #4
 800b7e6:	2a24      	cmp	r2, #36	; 0x24
 800b7e8:	d819      	bhi.n	800b81e <_calloc_r+0x62>
 800b7ea:	2a13      	cmp	r2, #19
 800b7ec:	d915      	bls.n	800b81a <_calloc_r+0x5e>
 800b7ee:	2a1b      	cmp	r2, #27
 800b7f0:	e9c0 5500 	strd	r5, r5, [r0]
 800b7f4:	d806      	bhi.n	800b804 <_calloc_r+0x48>
 800b7f6:	f100 0308 	add.w	r3, r0, #8
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	e9c3 2200 	strd	r2, r2, [r3]
 800b800:	609a      	str	r2, [r3, #8]
 800b802:	e7e3      	b.n	800b7cc <_calloc_r+0x10>
 800b804:	2a24      	cmp	r2, #36	; 0x24
 800b806:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800b80a:	bf11      	iteee	ne
 800b80c:	f100 0310 	addne.w	r3, r0, #16
 800b810:	6105      	streq	r5, [r0, #16]
 800b812:	f100 0318 	addeq.w	r3, r0, #24
 800b816:	6145      	streq	r5, [r0, #20]
 800b818:	e7ef      	b.n	800b7fa <_calloc_r+0x3e>
 800b81a:	4603      	mov	r3, r0
 800b81c:	e7ed      	b.n	800b7fa <_calloc_r+0x3e>
 800b81e:	4629      	mov	r1, r5
 800b820:	f7fd fcad 	bl	800917e <memset>
 800b824:	e7d2      	b.n	800b7cc <_calloc_r+0x10>

0800b826 <quorem>:
 800b826:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82a:	6903      	ldr	r3, [r0, #16]
 800b82c:	690c      	ldr	r4, [r1, #16]
 800b82e:	42a3      	cmp	r3, r4
 800b830:	4607      	mov	r7, r0
 800b832:	db7e      	blt.n	800b932 <quorem+0x10c>
 800b834:	3c01      	subs	r4, #1
 800b836:	f101 0814 	add.w	r8, r1, #20
 800b83a:	f100 0514 	add.w	r5, r0, #20
 800b83e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b842:	9301      	str	r3, [sp, #4]
 800b844:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b848:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b84c:	3301      	adds	r3, #1
 800b84e:	429a      	cmp	r2, r3
 800b850:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b854:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b858:	fbb2 f6f3 	udiv	r6, r2, r3
 800b85c:	d331      	bcc.n	800b8c2 <quorem+0x9c>
 800b85e:	f04f 0e00 	mov.w	lr, #0
 800b862:	4640      	mov	r0, r8
 800b864:	46ac      	mov	ip, r5
 800b866:	46f2      	mov	sl, lr
 800b868:	f850 2b04 	ldr.w	r2, [r0], #4
 800b86c:	b293      	uxth	r3, r2
 800b86e:	fb06 e303 	mla	r3, r6, r3, lr
 800b872:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b876:	0c1a      	lsrs	r2, r3, #16
 800b878:	b29b      	uxth	r3, r3
 800b87a:	ebaa 0303 	sub.w	r3, sl, r3
 800b87e:	f8dc a000 	ldr.w	sl, [ip]
 800b882:	fa13 f38a 	uxtah	r3, r3, sl
 800b886:	fb06 220e 	mla	r2, r6, lr, r2
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	9b00      	ldr	r3, [sp, #0]
 800b88e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b892:	b292      	uxth	r2, r2
 800b894:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b898:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b89c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b8a0:	4581      	cmp	r9, r0
 800b8a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8a6:	f84c 3b04 	str.w	r3, [ip], #4
 800b8aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b8ae:	d2db      	bcs.n	800b868 <quorem+0x42>
 800b8b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b8b4:	b92b      	cbnz	r3, 800b8c2 <quorem+0x9c>
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	3b04      	subs	r3, #4
 800b8ba:	429d      	cmp	r5, r3
 800b8bc:	461a      	mov	r2, r3
 800b8be:	d32c      	bcc.n	800b91a <quorem+0xf4>
 800b8c0:	613c      	str	r4, [r7, #16]
 800b8c2:	4638      	mov	r0, r7
 800b8c4:	f7fe fa96 	bl	8009df4 <__mcmp>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	db22      	blt.n	800b912 <quorem+0xec>
 800b8cc:	3601      	adds	r6, #1
 800b8ce:	4629      	mov	r1, r5
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8d6:	f8d1 c000 	ldr.w	ip, [r1]
 800b8da:	b293      	uxth	r3, r2
 800b8dc:	1ac3      	subs	r3, r0, r3
 800b8de:	0c12      	lsrs	r2, r2, #16
 800b8e0:	fa13 f38c 	uxtah	r3, r3, ip
 800b8e4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b8e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8f2:	45c1      	cmp	r9, r8
 800b8f4:	f841 3b04 	str.w	r3, [r1], #4
 800b8f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b8fc:	d2e9      	bcs.n	800b8d2 <quorem+0xac>
 800b8fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b902:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b906:	b922      	cbnz	r2, 800b912 <quorem+0xec>
 800b908:	3b04      	subs	r3, #4
 800b90a:	429d      	cmp	r5, r3
 800b90c:	461a      	mov	r2, r3
 800b90e:	d30a      	bcc.n	800b926 <quorem+0x100>
 800b910:	613c      	str	r4, [r7, #16]
 800b912:	4630      	mov	r0, r6
 800b914:	b003      	add	sp, #12
 800b916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b91a:	6812      	ldr	r2, [r2, #0]
 800b91c:	3b04      	subs	r3, #4
 800b91e:	2a00      	cmp	r2, #0
 800b920:	d1ce      	bne.n	800b8c0 <quorem+0x9a>
 800b922:	3c01      	subs	r4, #1
 800b924:	e7c9      	b.n	800b8ba <quorem+0x94>
 800b926:	6812      	ldr	r2, [r2, #0]
 800b928:	3b04      	subs	r3, #4
 800b92a:	2a00      	cmp	r2, #0
 800b92c:	d1f0      	bne.n	800b910 <quorem+0xea>
 800b92e:	3c01      	subs	r4, #1
 800b930:	e7eb      	b.n	800b90a <quorem+0xe4>
 800b932:	2000      	movs	r0, #0
 800b934:	e7ee      	b.n	800b914 <quorem+0xee>
	...

0800b938 <_dtoa_r>:
 800b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93c:	ed2d 8b04 	vpush	{d8-d9}
 800b940:	b093      	sub	sp, #76	; 0x4c
 800b942:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b946:	9107      	str	r1, [sp, #28]
 800b948:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800b94a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800b94c:	920a      	str	r2, [sp, #40]	; 0x28
 800b94e:	ec57 6b10 	vmov	r6, r7, d0
 800b952:	4604      	mov	r4, r0
 800b954:	930d      	str	r3, [sp, #52]	; 0x34
 800b956:	b141      	cbz	r1, 800b96a <_dtoa_r+0x32>
 800b958:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b95a:	604a      	str	r2, [r1, #4]
 800b95c:	2301      	movs	r3, #1
 800b95e:	4093      	lsls	r3, r2
 800b960:	608b      	str	r3, [r1, #8]
 800b962:	f7fe f83e 	bl	80099e2 <_Bfree>
 800b966:	2300      	movs	r3, #0
 800b968:	63a3      	str	r3, [r4, #56]	; 0x38
 800b96a:	1e3b      	subs	r3, r7, #0
 800b96c:	bfb9      	ittee	lt
 800b96e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b972:	9303      	strlt	r3, [sp, #12]
 800b974:	2300      	movge	r3, #0
 800b976:	602b      	strge	r3, [r5, #0]
 800b978:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b97c:	4ba2      	ldr	r3, [pc, #648]	; (800bc08 <_dtoa_r+0x2d0>)
 800b97e:	bfbc      	itt	lt
 800b980:	2201      	movlt	r2, #1
 800b982:	602a      	strlt	r2, [r5, #0]
 800b984:	ea33 0308 	bics.w	r3, r3, r8
 800b988:	d11b      	bne.n	800b9c2 <_dtoa_r+0x8a>
 800b98a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b98c:	f242 730f 	movw	r3, #9999	; 0x270f
 800b990:	6013      	str	r3, [r2, #0]
 800b992:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b996:	4333      	orrs	r3, r6
 800b998:	f000 858f 	beq.w	800c4ba <_dtoa_r+0xb82>
 800b99c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b99e:	b90b      	cbnz	r3, 800b9a4 <_dtoa_r+0x6c>
 800b9a0:	4b9a      	ldr	r3, [pc, #616]	; (800bc0c <_dtoa_r+0x2d4>)
 800b9a2:	e027      	b.n	800b9f4 <_dtoa_r+0xbc>
 800b9a4:	4b99      	ldr	r3, [pc, #612]	; (800bc0c <_dtoa_r+0x2d4>)
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	3303      	adds	r3, #3
 800b9aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9ac:	6013      	str	r3, [r2, #0]
 800b9ae:	9800      	ldr	r0, [sp, #0]
 800b9b0:	b013      	add	sp, #76	; 0x4c
 800b9b2:	ecbd 8b04 	vpop	{d8-d9}
 800b9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ba:	4b95      	ldr	r3, [pc, #596]	; (800bc10 <_dtoa_r+0x2d8>)
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	3308      	adds	r3, #8
 800b9c0:	e7f3      	b.n	800b9aa <_dtoa_r+0x72>
 800b9c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	ec51 0b17 	vmov	r0, r1, d7
 800b9cc:	eeb0 8a47 	vmov.f32	s16, s14
 800b9d0:	eef0 8a67 	vmov.f32	s17, s15
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f7f5 f87f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9da:	4681      	mov	r9, r0
 800b9dc:	b160      	cbz	r0, 800b9f8 <_dtoa_r+0xc0>
 800b9de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	6013      	str	r3, [r2, #0]
 800b9e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 8564 	beq.w	800c4b4 <_dtoa_r+0xb7c>
 800b9ec:	4b89      	ldr	r3, [pc, #548]	; (800bc14 <_dtoa_r+0x2dc>)
 800b9ee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9f0:	6013      	str	r3, [r2, #0]
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	e7da      	b.n	800b9ae <_dtoa_r+0x76>
 800b9f8:	aa10      	add	r2, sp, #64	; 0x40
 800b9fa:	a911      	add	r1, sp, #68	; 0x44
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	eeb0 0a48 	vmov.f32	s0, s16
 800ba02:	eef0 0a68 	vmov.f32	s1, s17
 800ba06:	f7fe fa9b 	bl	8009f40 <__d2b>
 800ba0a:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ba0e:	4682      	mov	sl, r0
 800ba10:	2d00      	cmp	r5, #0
 800ba12:	d07e      	beq.n	800bb12 <_dtoa_r+0x1da>
 800ba14:	ee18 3a90 	vmov	r3, s17
 800ba18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba1c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ba20:	ec51 0b18 	vmov	r0, r1, d8
 800ba24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ba28:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba2c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ba30:	4619      	mov	r1, r3
 800ba32:	2200      	movs	r2, #0
 800ba34:	4b78      	ldr	r3, [pc, #480]	; (800bc18 <_dtoa_r+0x2e0>)
 800ba36:	f7f4 fc2f 	bl	8000298 <__aeabi_dsub>
 800ba3a:	a36d      	add	r3, pc, #436	; (adr r3, 800bbf0 <_dtoa_r+0x2b8>)
 800ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba40:	f7f4 fde2 	bl	8000608 <__aeabi_dmul>
 800ba44:	a36c      	add	r3, pc, #432	; (adr r3, 800bbf8 <_dtoa_r+0x2c0>)
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	f7f4 fc27 	bl	800029c <__adddf3>
 800ba4e:	4606      	mov	r6, r0
 800ba50:	4628      	mov	r0, r5
 800ba52:	460f      	mov	r7, r1
 800ba54:	f7f4 fd6e 	bl	8000534 <__aeabi_i2d>
 800ba58:	a369      	add	r3, pc, #420	; (adr r3, 800bc00 <_dtoa_r+0x2c8>)
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	f7f4 fdd3 	bl	8000608 <__aeabi_dmul>
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	4630      	mov	r0, r6
 800ba68:	4639      	mov	r1, r7
 800ba6a:	f7f4 fc17 	bl	800029c <__adddf3>
 800ba6e:	4606      	mov	r6, r0
 800ba70:	460f      	mov	r7, r1
 800ba72:	f7f5 f879 	bl	8000b68 <__aeabi_d2iz>
 800ba76:	2200      	movs	r2, #0
 800ba78:	4683      	mov	fp, r0
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	4639      	mov	r1, r7
 800ba80:	f7f5 f834 	bl	8000aec <__aeabi_dcmplt>
 800ba84:	b148      	cbz	r0, 800ba9a <_dtoa_r+0x162>
 800ba86:	4658      	mov	r0, fp
 800ba88:	f7f4 fd54 	bl	8000534 <__aeabi_i2d>
 800ba8c:	4632      	mov	r2, r6
 800ba8e:	463b      	mov	r3, r7
 800ba90:	f7f5 f822 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba94:	b908      	cbnz	r0, 800ba9a <_dtoa_r+0x162>
 800ba96:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba9a:	f1bb 0f16 	cmp.w	fp, #22
 800ba9e:	d856      	bhi.n	800bb4e <_dtoa_r+0x216>
 800baa0:	4b5e      	ldr	r3, [pc, #376]	; (800bc1c <_dtoa_r+0x2e4>)
 800baa2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800baa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baaa:	ec51 0b18 	vmov	r0, r1, d8
 800baae:	f7f5 f81d 	bl	8000aec <__aeabi_dcmplt>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d04d      	beq.n	800bb52 <_dtoa_r+0x21a>
 800bab6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800baba:	2300      	movs	r3, #0
 800babc:	930c      	str	r3, [sp, #48]	; 0x30
 800babe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bac0:	1b5b      	subs	r3, r3, r5
 800bac2:	1e5a      	subs	r2, r3, #1
 800bac4:	bf45      	ittet	mi
 800bac6:	f1c3 0301 	rsbmi	r3, r3, #1
 800baca:	9305      	strmi	r3, [sp, #20]
 800bacc:	2300      	movpl	r3, #0
 800bace:	2300      	movmi	r3, #0
 800bad0:	9206      	str	r2, [sp, #24]
 800bad2:	bf54      	ite	pl
 800bad4:	9305      	strpl	r3, [sp, #20]
 800bad6:	9306      	strmi	r3, [sp, #24]
 800bad8:	f1bb 0f00 	cmp.w	fp, #0
 800badc:	db3b      	blt.n	800bb56 <_dtoa_r+0x21e>
 800bade:	9b06      	ldr	r3, [sp, #24]
 800bae0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bae4:	445b      	add	r3, fp
 800bae6:	9306      	str	r3, [sp, #24]
 800bae8:	2300      	movs	r3, #0
 800baea:	9308      	str	r3, [sp, #32]
 800baec:	9b07      	ldr	r3, [sp, #28]
 800baee:	2b09      	cmp	r3, #9
 800baf0:	d868      	bhi.n	800bbc4 <_dtoa_r+0x28c>
 800baf2:	2b05      	cmp	r3, #5
 800baf4:	bfc4      	itt	gt
 800baf6:	3b04      	subgt	r3, #4
 800baf8:	9307      	strgt	r3, [sp, #28]
 800bafa:	9b07      	ldr	r3, [sp, #28]
 800bafc:	f1a3 0302 	sub.w	r3, r3, #2
 800bb00:	bfcc      	ite	gt
 800bb02:	2500      	movgt	r5, #0
 800bb04:	2501      	movle	r5, #1
 800bb06:	2b03      	cmp	r3, #3
 800bb08:	d867      	bhi.n	800bbda <_dtoa_r+0x2a2>
 800bb0a:	e8df f003 	tbb	[pc, r3]
 800bb0e:	3b2e      	.short	0x3b2e
 800bb10:	5939      	.short	0x5939
 800bb12:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bb16:	441d      	add	r5, r3
 800bb18:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb1c:	2b20      	cmp	r3, #32
 800bb1e:	bfc1      	itttt	gt
 800bb20:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb24:	fa08 f803 	lslgt.w	r8, r8, r3
 800bb28:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bb2c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bb30:	bfd6      	itet	le
 800bb32:	f1c3 0320 	rsble	r3, r3, #32
 800bb36:	ea48 0003 	orrgt.w	r0, r8, r3
 800bb3a:	fa06 f003 	lslle.w	r0, r6, r3
 800bb3e:	f7f4 fce9 	bl	8000514 <__aeabi_ui2d>
 800bb42:	2201      	movs	r2, #1
 800bb44:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bb48:	3d01      	subs	r5, #1
 800bb4a:	920e      	str	r2, [sp, #56]	; 0x38
 800bb4c:	e770      	b.n	800ba30 <_dtoa_r+0xf8>
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e7b4      	b.n	800babc <_dtoa_r+0x184>
 800bb52:	900c      	str	r0, [sp, #48]	; 0x30
 800bb54:	e7b3      	b.n	800babe <_dtoa_r+0x186>
 800bb56:	9b05      	ldr	r3, [sp, #20]
 800bb58:	eba3 030b 	sub.w	r3, r3, fp
 800bb5c:	9305      	str	r3, [sp, #20]
 800bb5e:	f1cb 0300 	rsb	r3, fp, #0
 800bb62:	9308      	str	r3, [sp, #32]
 800bb64:	2300      	movs	r3, #0
 800bb66:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb68:	e7c0      	b.n	800baec <_dtoa_r+0x1b4>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	dc35      	bgt.n	800bbe0 <_dtoa_r+0x2a8>
 800bb74:	2301      	movs	r3, #1
 800bb76:	9301      	str	r3, [sp, #4]
 800bb78:	9304      	str	r3, [sp, #16]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	920a      	str	r2, [sp, #40]	; 0x28
 800bb7e:	e00b      	b.n	800bb98 <_dtoa_r+0x260>
 800bb80:	2301      	movs	r3, #1
 800bb82:	e7f3      	b.n	800bb6c <_dtoa_r+0x234>
 800bb84:	2300      	movs	r3, #0
 800bb86:	9309      	str	r3, [sp, #36]	; 0x24
 800bb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb8a:	445b      	add	r3, fp
 800bb8c:	9301      	str	r3, [sp, #4]
 800bb8e:	3301      	adds	r3, #1
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	9304      	str	r3, [sp, #16]
 800bb94:	bfb8      	it	lt
 800bb96:	2301      	movlt	r3, #1
 800bb98:	2100      	movs	r1, #0
 800bb9a:	2204      	movs	r2, #4
 800bb9c:	f102 0014 	add.w	r0, r2, #20
 800bba0:	4298      	cmp	r0, r3
 800bba2:	d921      	bls.n	800bbe8 <_dtoa_r+0x2b0>
 800bba4:	63e1      	str	r1, [r4, #60]	; 0x3c
 800bba6:	4620      	mov	r0, r4
 800bba8:	f7fd fef6 	bl	8009998 <_Balloc>
 800bbac:	9000      	str	r0, [sp, #0]
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d13a      	bne.n	800bc28 <_dtoa_r+0x2f0>
 800bbb2:	4b1b      	ldr	r3, [pc, #108]	; (800bc20 <_dtoa_r+0x2e8>)
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	f240 11af 	movw	r1, #431	; 0x1af
 800bbba:	481a      	ldr	r0, [pc, #104]	; (800bc24 <_dtoa_r+0x2ec>)
 800bbbc:	f7ff fde0 	bl	800b780 <__assert_func>
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e7e0      	b.n	800bb86 <_dtoa_r+0x24e>
 800bbc4:	2501      	movs	r5, #1
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	9307      	str	r3, [sp, #28]
 800bbca:	9509      	str	r5, [sp, #36]	; 0x24
 800bbcc:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd0:	9301      	str	r3, [sp, #4]
 800bbd2:	9304      	str	r3, [sp, #16]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	2312      	movs	r3, #18
 800bbd8:	e7d0      	b.n	800bb7c <_dtoa_r+0x244>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	9309      	str	r3, [sp, #36]	; 0x24
 800bbde:	e7f5      	b.n	800bbcc <_dtoa_r+0x294>
 800bbe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe2:	9301      	str	r3, [sp, #4]
 800bbe4:	9304      	str	r3, [sp, #16]
 800bbe6:	e7d7      	b.n	800bb98 <_dtoa_r+0x260>
 800bbe8:	3101      	adds	r1, #1
 800bbea:	0052      	lsls	r2, r2, #1
 800bbec:	e7d6      	b.n	800bb9c <_dtoa_r+0x264>
 800bbee:	bf00      	nop
 800bbf0:	636f4361 	.word	0x636f4361
 800bbf4:	3fd287a7 	.word	0x3fd287a7
 800bbf8:	8b60c8b3 	.word	0x8b60c8b3
 800bbfc:	3fc68a28 	.word	0x3fc68a28
 800bc00:	509f79fb 	.word	0x509f79fb
 800bc04:	3fd34413 	.word	0x3fd34413
 800bc08:	7ff00000 	.word	0x7ff00000
 800bc0c:	0800ebdd 	.word	0x0800ebdd
 800bc10:	0800ebd4 	.word	0x0800ebd4
 800bc14:	0800eb77 	.word	0x0800eb77
 800bc18:	3ff80000 	.word	0x3ff80000
 800bc1c:	0800ea70 	.word	0x0800ea70
 800bc20:	0800e9dd 	.word	0x0800e9dd
 800bc24:	0800ebe1 	.word	0x0800ebe1
 800bc28:	9b00      	ldr	r3, [sp, #0]
 800bc2a:	63a3      	str	r3, [r4, #56]	; 0x38
 800bc2c:	9b04      	ldr	r3, [sp, #16]
 800bc2e:	2b0e      	cmp	r3, #14
 800bc30:	f200 80a8 	bhi.w	800bd84 <_dtoa_r+0x44c>
 800bc34:	2d00      	cmp	r5, #0
 800bc36:	f000 80a5 	beq.w	800bd84 <_dtoa_r+0x44c>
 800bc3a:	f1bb 0f00 	cmp.w	fp, #0
 800bc3e:	dd38      	ble.n	800bcb2 <_dtoa_r+0x37a>
 800bc40:	4bbf      	ldr	r3, [pc, #764]	; (800bf40 <_dtoa_r+0x608>)
 800bc42:	f00b 020f 	and.w	r2, fp, #15
 800bc46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc4a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bc4e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bc52:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bc56:	d019      	beq.n	800bc8c <_dtoa_r+0x354>
 800bc58:	4bba      	ldr	r3, [pc, #744]	; (800bf44 <_dtoa_r+0x60c>)
 800bc5a:	ec51 0b18 	vmov	r0, r1, d8
 800bc5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc62:	f7f4 fdfb 	bl	800085c <__aeabi_ddiv>
 800bc66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc6a:	f008 080f 	and.w	r8, r8, #15
 800bc6e:	2503      	movs	r5, #3
 800bc70:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800bf44 <_dtoa_r+0x60c>
 800bc74:	f1b8 0f00 	cmp.w	r8, #0
 800bc78:	d10a      	bne.n	800bc90 <_dtoa_r+0x358>
 800bc7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc7e:	4632      	mov	r2, r6
 800bc80:	463b      	mov	r3, r7
 800bc82:	f7f4 fdeb 	bl	800085c <__aeabi_ddiv>
 800bc86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc8a:	e02b      	b.n	800bce4 <_dtoa_r+0x3ac>
 800bc8c:	2502      	movs	r5, #2
 800bc8e:	e7ef      	b.n	800bc70 <_dtoa_r+0x338>
 800bc90:	f018 0f01 	tst.w	r8, #1
 800bc94:	d008      	beq.n	800bca8 <_dtoa_r+0x370>
 800bc96:	4630      	mov	r0, r6
 800bc98:	4639      	mov	r1, r7
 800bc9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bc9e:	f7f4 fcb3 	bl	8000608 <__aeabi_dmul>
 800bca2:	3501      	adds	r5, #1
 800bca4:	4606      	mov	r6, r0
 800bca6:	460f      	mov	r7, r1
 800bca8:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bcac:	f109 0908 	add.w	r9, r9, #8
 800bcb0:	e7e0      	b.n	800bc74 <_dtoa_r+0x33c>
 800bcb2:	f000 809f 	beq.w	800bdf4 <_dtoa_r+0x4bc>
 800bcb6:	f1cb 0600 	rsb	r6, fp, #0
 800bcba:	4ba1      	ldr	r3, [pc, #644]	; (800bf40 <_dtoa_r+0x608>)
 800bcbc:	4fa1      	ldr	r7, [pc, #644]	; (800bf44 <_dtoa_r+0x60c>)
 800bcbe:	f006 020f 	and.w	r2, r6, #15
 800bcc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcca:	ec51 0b18 	vmov	r0, r1, d8
 800bcce:	f7f4 fc9b 	bl	8000608 <__aeabi_dmul>
 800bcd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcd6:	1136      	asrs	r6, r6, #4
 800bcd8:	2300      	movs	r3, #0
 800bcda:	2502      	movs	r5, #2
 800bcdc:	2e00      	cmp	r6, #0
 800bcde:	d17e      	bne.n	800bdde <_dtoa_r+0x4a6>
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1d0      	bne.n	800bc86 <_dtoa_r+0x34e>
 800bce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bce6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f000 8084 	beq.w	800bdf8 <_dtoa_r+0x4c0>
 800bcf0:	4b95      	ldr	r3, [pc, #596]	; (800bf48 <_dtoa_r+0x610>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	4640      	mov	r0, r8
 800bcf6:	4649      	mov	r1, r9
 800bcf8:	f7f4 fef8 	bl	8000aec <__aeabi_dcmplt>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d07b      	beq.n	800bdf8 <_dtoa_r+0x4c0>
 800bd00:	9b04      	ldr	r3, [sp, #16]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d078      	beq.n	800bdf8 <_dtoa_r+0x4c0>
 800bd06:	9b01      	ldr	r3, [sp, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	dd39      	ble.n	800bd80 <_dtoa_r+0x448>
 800bd0c:	4b8f      	ldr	r3, [pc, #572]	; (800bf4c <_dtoa_r+0x614>)
 800bd0e:	2200      	movs	r2, #0
 800bd10:	4640      	mov	r0, r8
 800bd12:	4649      	mov	r1, r9
 800bd14:	f7f4 fc78 	bl	8000608 <__aeabi_dmul>
 800bd18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd1c:	9e01      	ldr	r6, [sp, #4]
 800bd1e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bd22:	3501      	adds	r5, #1
 800bd24:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd28:	4628      	mov	r0, r5
 800bd2a:	f7f4 fc03 	bl	8000534 <__aeabi_i2d>
 800bd2e:	4642      	mov	r2, r8
 800bd30:	464b      	mov	r3, r9
 800bd32:	f7f4 fc69 	bl	8000608 <__aeabi_dmul>
 800bd36:	4b86      	ldr	r3, [pc, #536]	; (800bf50 <_dtoa_r+0x618>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f7f4 faaf 	bl	800029c <__adddf3>
 800bd3e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bd42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd46:	9303      	str	r3, [sp, #12]
 800bd48:	2e00      	cmp	r6, #0
 800bd4a:	d158      	bne.n	800bdfe <_dtoa_r+0x4c6>
 800bd4c:	4b81      	ldr	r3, [pc, #516]	; (800bf54 <_dtoa_r+0x61c>)
 800bd4e:	2200      	movs	r2, #0
 800bd50:	4640      	mov	r0, r8
 800bd52:	4649      	mov	r1, r9
 800bd54:	f7f4 faa0 	bl	8000298 <__aeabi_dsub>
 800bd58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd5c:	4680      	mov	r8, r0
 800bd5e:	4689      	mov	r9, r1
 800bd60:	f7f4 fee2 	bl	8000b28 <__aeabi_dcmpgt>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	f040 8295 	bne.w	800c294 <_dtoa_r+0x95c>
 800bd6a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bd6e:	4640      	mov	r0, r8
 800bd70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd74:	4649      	mov	r1, r9
 800bd76:	f7f4 feb9 	bl	8000aec <__aeabi_dcmplt>
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	f040 8288 	bne.w	800c290 <_dtoa_r+0x958>
 800bd80:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bd84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f2c0 814d 	blt.w	800c026 <_dtoa_r+0x6ee>
 800bd8c:	f1bb 0f0e 	cmp.w	fp, #14
 800bd90:	f300 8149 	bgt.w	800c026 <_dtoa_r+0x6ee>
 800bd94:	4b6a      	ldr	r3, [pc, #424]	; (800bf40 <_dtoa_r+0x608>)
 800bd96:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f280 80db 	bge.w	800bf5c <_dtoa_r+0x624>
 800bda6:	9b04      	ldr	r3, [sp, #16]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f300 80d7 	bgt.w	800bf5c <_dtoa_r+0x624>
 800bdae:	f040 826e 	bne.w	800c28e <_dtoa_r+0x956>
 800bdb2:	4b68      	ldr	r3, [pc, #416]	; (800bf54 <_dtoa_r+0x61c>)
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	4640      	mov	r0, r8
 800bdb8:	4649      	mov	r1, r9
 800bdba:	f7f4 fc25 	bl	8000608 <__aeabi_dmul>
 800bdbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdc2:	f7f4 fea7 	bl	8000b14 <__aeabi_dcmpge>
 800bdc6:	9e04      	ldr	r6, [sp, #16]
 800bdc8:	4637      	mov	r7, r6
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	f040 8244 	bne.w	800c258 <_dtoa_r+0x920>
 800bdd0:	9d00      	ldr	r5, [sp, #0]
 800bdd2:	2331      	movs	r3, #49	; 0x31
 800bdd4:	f805 3b01 	strb.w	r3, [r5], #1
 800bdd8:	f10b 0b01 	add.w	fp, fp, #1
 800bddc:	e240      	b.n	800c260 <_dtoa_r+0x928>
 800bdde:	07f2      	lsls	r2, r6, #31
 800bde0:	d505      	bpl.n	800bdee <_dtoa_r+0x4b6>
 800bde2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bde6:	f7f4 fc0f 	bl	8000608 <__aeabi_dmul>
 800bdea:	3501      	adds	r5, #1
 800bdec:	2301      	movs	r3, #1
 800bdee:	1076      	asrs	r6, r6, #1
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	e773      	b.n	800bcdc <_dtoa_r+0x3a4>
 800bdf4:	2502      	movs	r5, #2
 800bdf6:	e775      	b.n	800bce4 <_dtoa_r+0x3ac>
 800bdf8:	9e04      	ldr	r6, [sp, #16]
 800bdfa:	465f      	mov	r7, fp
 800bdfc:	e792      	b.n	800bd24 <_dtoa_r+0x3ec>
 800bdfe:	9900      	ldr	r1, [sp, #0]
 800be00:	4b4f      	ldr	r3, [pc, #316]	; (800bf40 <_dtoa_r+0x608>)
 800be02:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be06:	4431      	add	r1, r6
 800be08:	9102      	str	r1, [sp, #8]
 800be0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be0c:	eeb0 9a47 	vmov.f32	s18, s14
 800be10:	eef0 9a67 	vmov.f32	s19, s15
 800be14:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be1c:	2900      	cmp	r1, #0
 800be1e:	d044      	beq.n	800beaa <_dtoa_r+0x572>
 800be20:	494d      	ldr	r1, [pc, #308]	; (800bf58 <_dtoa_r+0x620>)
 800be22:	2000      	movs	r0, #0
 800be24:	f7f4 fd1a 	bl	800085c <__aeabi_ddiv>
 800be28:	ec53 2b19 	vmov	r2, r3, d9
 800be2c:	f7f4 fa34 	bl	8000298 <__aeabi_dsub>
 800be30:	9d00      	ldr	r5, [sp, #0]
 800be32:	ec41 0b19 	vmov	d9, r0, r1
 800be36:	4649      	mov	r1, r9
 800be38:	4640      	mov	r0, r8
 800be3a:	f7f4 fe95 	bl	8000b68 <__aeabi_d2iz>
 800be3e:	4606      	mov	r6, r0
 800be40:	f7f4 fb78 	bl	8000534 <__aeabi_i2d>
 800be44:	4602      	mov	r2, r0
 800be46:	460b      	mov	r3, r1
 800be48:	4640      	mov	r0, r8
 800be4a:	4649      	mov	r1, r9
 800be4c:	f7f4 fa24 	bl	8000298 <__aeabi_dsub>
 800be50:	3630      	adds	r6, #48	; 0x30
 800be52:	f805 6b01 	strb.w	r6, [r5], #1
 800be56:	ec53 2b19 	vmov	r2, r3, d9
 800be5a:	4680      	mov	r8, r0
 800be5c:	4689      	mov	r9, r1
 800be5e:	f7f4 fe45 	bl	8000aec <__aeabi_dcmplt>
 800be62:	2800      	cmp	r0, #0
 800be64:	d164      	bne.n	800bf30 <_dtoa_r+0x5f8>
 800be66:	4642      	mov	r2, r8
 800be68:	464b      	mov	r3, r9
 800be6a:	4937      	ldr	r1, [pc, #220]	; (800bf48 <_dtoa_r+0x610>)
 800be6c:	2000      	movs	r0, #0
 800be6e:	f7f4 fa13 	bl	8000298 <__aeabi_dsub>
 800be72:	ec53 2b19 	vmov	r2, r3, d9
 800be76:	f7f4 fe39 	bl	8000aec <__aeabi_dcmplt>
 800be7a:	2800      	cmp	r0, #0
 800be7c:	f040 80b5 	bne.w	800bfea <_dtoa_r+0x6b2>
 800be80:	9b02      	ldr	r3, [sp, #8]
 800be82:	429d      	cmp	r5, r3
 800be84:	f43f af7c 	beq.w	800bd80 <_dtoa_r+0x448>
 800be88:	4b30      	ldr	r3, [pc, #192]	; (800bf4c <_dtoa_r+0x614>)
 800be8a:	ec51 0b19 	vmov	r0, r1, d9
 800be8e:	2200      	movs	r2, #0
 800be90:	f7f4 fbba 	bl	8000608 <__aeabi_dmul>
 800be94:	4b2d      	ldr	r3, [pc, #180]	; (800bf4c <_dtoa_r+0x614>)
 800be96:	ec41 0b19 	vmov	d9, r0, r1
 800be9a:	2200      	movs	r2, #0
 800be9c:	4640      	mov	r0, r8
 800be9e:	4649      	mov	r1, r9
 800bea0:	f7f4 fbb2 	bl	8000608 <__aeabi_dmul>
 800bea4:	4680      	mov	r8, r0
 800bea6:	4689      	mov	r9, r1
 800bea8:	e7c5      	b.n	800be36 <_dtoa_r+0x4fe>
 800beaa:	ec51 0b17 	vmov	r0, r1, d7
 800beae:	f7f4 fbab 	bl	8000608 <__aeabi_dmul>
 800beb2:	9b02      	ldr	r3, [sp, #8]
 800beb4:	9d00      	ldr	r5, [sp, #0]
 800beb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800beb8:	ec41 0b19 	vmov	d9, r0, r1
 800bebc:	4649      	mov	r1, r9
 800bebe:	4640      	mov	r0, r8
 800bec0:	f7f4 fe52 	bl	8000b68 <__aeabi_d2iz>
 800bec4:	4606      	mov	r6, r0
 800bec6:	f7f4 fb35 	bl	8000534 <__aeabi_i2d>
 800beca:	3630      	adds	r6, #48	; 0x30
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	4640      	mov	r0, r8
 800bed2:	4649      	mov	r1, r9
 800bed4:	f7f4 f9e0 	bl	8000298 <__aeabi_dsub>
 800bed8:	f805 6b01 	strb.w	r6, [r5], #1
 800bedc:	9b02      	ldr	r3, [sp, #8]
 800bede:	429d      	cmp	r5, r3
 800bee0:	4680      	mov	r8, r0
 800bee2:	4689      	mov	r9, r1
 800bee4:	f04f 0200 	mov.w	r2, #0
 800bee8:	d124      	bne.n	800bf34 <_dtoa_r+0x5fc>
 800beea:	4b1b      	ldr	r3, [pc, #108]	; (800bf58 <_dtoa_r+0x620>)
 800beec:	ec51 0b19 	vmov	r0, r1, d9
 800bef0:	f7f4 f9d4 	bl	800029c <__adddf3>
 800bef4:	4602      	mov	r2, r0
 800bef6:	460b      	mov	r3, r1
 800bef8:	4640      	mov	r0, r8
 800befa:	4649      	mov	r1, r9
 800befc:	f7f4 fe14 	bl	8000b28 <__aeabi_dcmpgt>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	d172      	bne.n	800bfea <_dtoa_r+0x6b2>
 800bf04:	ec53 2b19 	vmov	r2, r3, d9
 800bf08:	4913      	ldr	r1, [pc, #76]	; (800bf58 <_dtoa_r+0x620>)
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	f7f4 f9c4 	bl	8000298 <__aeabi_dsub>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4640      	mov	r0, r8
 800bf16:	4649      	mov	r1, r9
 800bf18:	f7f4 fde8 	bl	8000aec <__aeabi_dcmplt>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	f43f af2f 	beq.w	800bd80 <_dtoa_r+0x448>
 800bf22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf24:	1e6b      	subs	r3, r5, #1
 800bf26:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf2c:	2b30      	cmp	r3, #48	; 0x30
 800bf2e:	d0f8      	beq.n	800bf22 <_dtoa_r+0x5ea>
 800bf30:	46bb      	mov	fp, r7
 800bf32:	e049      	b.n	800bfc8 <_dtoa_r+0x690>
 800bf34:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <_dtoa_r+0x614>)
 800bf36:	f7f4 fb67 	bl	8000608 <__aeabi_dmul>
 800bf3a:	4680      	mov	r8, r0
 800bf3c:	4689      	mov	r9, r1
 800bf3e:	e7bd      	b.n	800bebc <_dtoa_r+0x584>
 800bf40:	0800ea70 	.word	0x0800ea70
 800bf44:	0800ea48 	.word	0x0800ea48
 800bf48:	3ff00000 	.word	0x3ff00000
 800bf4c:	40240000 	.word	0x40240000
 800bf50:	401c0000 	.word	0x401c0000
 800bf54:	40140000 	.word	0x40140000
 800bf58:	3fe00000 	.word	0x3fe00000
 800bf5c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bf60:	9d00      	ldr	r5, [sp, #0]
 800bf62:	4642      	mov	r2, r8
 800bf64:	464b      	mov	r3, r9
 800bf66:	4630      	mov	r0, r6
 800bf68:	4639      	mov	r1, r7
 800bf6a:	f7f4 fc77 	bl	800085c <__aeabi_ddiv>
 800bf6e:	f7f4 fdfb 	bl	8000b68 <__aeabi_d2iz>
 800bf72:	9001      	str	r0, [sp, #4]
 800bf74:	f7f4 fade 	bl	8000534 <__aeabi_i2d>
 800bf78:	4642      	mov	r2, r8
 800bf7a:	464b      	mov	r3, r9
 800bf7c:	f7f4 fb44 	bl	8000608 <__aeabi_dmul>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	4630      	mov	r0, r6
 800bf86:	4639      	mov	r1, r7
 800bf88:	f7f4 f986 	bl	8000298 <__aeabi_dsub>
 800bf8c:	9e01      	ldr	r6, [sp, #4]
 800bf8e:	9f04      	ldr	r7, [sp, #16]
 800bf90:	3630      	adds	r6, #48	; 0x30
 800bf92:	f805 6b01 	strb.w	r6, [r5], #1
 800bf96:	9e00      	ldr	r6, [sp, #0]
 800bf98:	1bae      	subs	r6, r5, r6
 800bf9a:	42b7      	cmp	r7, r6
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	d134      	bne.n	800c00c <_dtoa_r+0x6d4>
 800bfa2:	f7f4 f97b 	bl	800029c <__adddf3>
 800bfa6:	4642      	mov	r2, r8
 800bfa8:	464b      	mov	r3, r9
 800bfaa:	4606      	mov	r6, r0
 800bfac:	460f      	mov	r7, r1
 800bfae:	f7f4 fdbb 	bl	8000b28 <__aeabi_dcmpgt>
 800bfb2:	b9c8      	cbnz	r0, 800bfe8 <_dtoa_r+0x6b0>
 800bfb4:	4642      	mov	r2, r8
 800bfb6:	464b      	mov	r3, r9
 800bfb8:	4630      	mov	r0, r6
 800bfba:	4639      	mov	r1, r7
 800bfbc:	f7f4 fd8c 	bl	8000ad8 <__aeabi_dcmpeq>
 800bfc0:	b110      	cbz	r0, 800bfc8 <_dtoa_r+0x690>
 800bfc2:	9b01      	ldr	r3, [sp, #4]
 800bfc4:	07db      	lsls	r3, r3, #31
 800bfc6:	d40f      	bmi.n	800bfe8 <_dtoa_r+0x6b0>
 800bfc8:	4651      	mov	r1, sl
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f7fd fd09 	bl	80099e2 <_Bfree>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfd4:	702b      	strb	r3, [r5, #0]
 800bfd6:	f10b 0301 	add.w	r3, fp, #1
 800bfda:	6013      	str	r3, [r2, #0]
 800bfdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f43f ace5 	beq.w	800b9ae <_dtoa_r+0x76>
 800bfe4:	601d      	str	r5, [r3, #0]
 800bfe6:	e4e2      	b.n	800b9ae <_dtoa_r+0x76>
 800bfe8:	465f      	mov	r7, fp
 800bfea:	462b      	mov	r3, r5
 800bfec:	461d      	mov	r5, r3
 800bfee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bff2:	2a39      	cmp	r2, #57	; 0x39
 800bff4:	d106      	bne.n	800c004 <_dtoa_r+0x6cc>
 800bff6:	9a00      	ldr	r2, [sp, #0]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d1f7      	bne.n	800bfec <_dtoa_r+0x6b4>
 800bffc:	9900      	ldr	r1, [sp, #0]
 800bffe:	2230      	movs	r2, #48	; 0x30
 800c000:	3701      	adds	r7, #1
 800c002:	700a      	strb	r2, [r1, #0]
 800c004:	781a      	ldrb	r2, [r3, #0]
 800c006:	3201      	adds	r2, #1
 800c008:	701a      	strb	r2, [r3, #0]
 800c00a:	e791      	b.n	800bf30 <_dtoa_r+0x5f8>
 800c00c:	4ba3      	ldr	r3, [pc, #652]	; (800c29c <_dtoa_r+0x964>)
 800c00e:	2200      	movs	r2, #0
 800c010:	f7f4 fafa 	bl	8000608 <__aeabi_dmul>
 800c014:	2200      	movs	r2, #0
 800c016:	2300      	movs	r3, #0
 800c018:	4606      	mov	r6, r0
 800c01a:	460f      	mov	r7, r1
 800c01c:	f7f4 fd5c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c020:	2800      	cmp	r0, #0
 800c022:	d09e      	beq.n	800bf62 <_dtoa_r+0x62a>
 800c024:	e7d0      	b.n	800bfc8 <_dtoa_r+0x690>
 800c026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c028:	2a00      	cmp	r2, #0
 800c02a:	f000 80ca 	beq.w	800c1c2 <_dtoa_r+0x88a>
 800c02e:	9a07      	ldr	r2, [sp, #28]
 800c030:	2a01      	cmp	r2, #1
 800c032:	f300 80ad 	bgt.w	800c190 <_dtoa_r+0x858>
 800c036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c038:	2a00      	cmp	r2, #0
 800c03a:	f000 80a5 	beq.w	800c188 <_dtoa_r+0x850>
 800c03e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c042:	9e08      	ldr	r6, [sp, #32]
 800c044:	9d05      	ldr	r5, [sp, #20]
 800c046:	9a05      	ldr	r2, [sp, #20]
 800c048:	441a      	add	r2, r3
 800c04a:	9205      	str	r2, [sp, #20]
 800c04c:	9a06      	ldr	r2, [sp, #24]
 800c04e:	2101      	movs	r1, #1
 800c050:	441a      	add	r2, r3
 800c052:	4620      	mov	r0, r4
 800c054:	9206      	str	r2, [sp, #24]
 800c056:	f7fd fd61 	bl	8009b1c <__i2b>
 800c05a:	4607      	mov	r7, r0
 800c05c:	b165      	cbz	r5, 800c078 <_dtoa_r+0x740>
 800c05e:	9b06      	ldr	r3, [sp, #24]
 800c060:	2b00      	cmp	r3, #0
 800c062:	dd09      	ble.n	800c078 <_dtoa_r+0x740>
 800c064:	42ab      	cmp	r3, r5
 800c066:	9a05      	ldr	r2, [sp, #20]
 800c068:	bfa8      	it	ge
 800c06a:	462b      	movge	r3, r5
 800c06c:	1ad2      	subs	r2, r2, r3
 800c06e:	9205      	str	r2, [sp, #20]
 800c070:	9a06      	ldr	r2, [sp, #24]
 800c072:	1aed      	subs	r5, r5, r3
 800c074:	1ad3      	subs	r3, r2, r3
 800c076:	9306      	str	r3, [sp, #24]
 800c078:	9b08      	ldr	r3, [sp, #32]
 800c07a:	b1f3      	cbz	r3, 800c0ba <_dtoa_r+0x782>
 800c07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 80a3 	beq.w	800c1ca <_dtoa_r+0x892>
 800c084:	2e00      	cmp	r6, #0
 800c086:	dd10      	ble.n	800c0aa <_dtoa_r+0x772>
 800c088:	4639      	mov	r1, r7
 800c08a:	4632      	mov	r2, r6
 800c08c:	4620      	mov	r0, r4
 800c08e:	f7fd fe05 	bl	8009c9c <__pow5mult>
 800c092:	4652      	mov	r2, sl
 800c094:	4601      	mov	r1, r0
 800c096:	4607      	mov	r7, r0
 800c098:	4620      	mov	r0, r4
 800c09a:	f7fd fd55 	bl	8009b48 <__multiply>
 800c09e:	4651      	mov	r1, sl
 800c0a0:	4680      	mov	r8, r0
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f7fd fc9d 	bl	80099e2 <_Bfree>
 800c0a8:	46c2      	mov	sl, r8
 800c0aa:	9b08      	ldr	r3, [sp, #32]
 800c0ac:	1b9a      	subs	r2, r3, r6
 800c0ae:	d004      	beq.n	800c0ba <_dtoa_r+0x782>
 800c0b0:	4651      	mov	r1, sl
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f7fd fdf2 	bl	8009c9c <__pow5mult>
 800c0b8:	4682      	mov	sl, r0
 800c0ba:	2101      	movs	r1, #1
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f7fd fd2d 	bl	8009b1c <__i2b>
 800c0c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	f340 8081 	ble.w	800c1ce <_dtoa_r+0x896>
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	4601      	mov	r1, r0
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f7fd fde3 	bl	8009c9c <__pow5mult>
 800c0d6:	9b07      	ldr	r3, [sp, #28]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	4606      	mov	r6, r0
 800c0dc:	dd7a      	ble.n	800c1d4 <_dtoa_r+0x89c>
 800c0de:	f04f 0800 	mov.w	r8, #0
 800c0e2:	6933      	ldr	r3, [r6, #16]
 800c0e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c0e8:	6918      	ldr	r0, [r3, #16]
 800c0ea:	f7fd fcc9 	bl	8009a80 <__hi0bits>
 800c0ee:	f1c0 0020 	rsb	r0, r0, #32
 800c0f2:	9b06      	ldr	r3, [sp, #24]
 800c0f4:	4418      	add	r0, r3
 800c0f6:	f010 001f 	ands.w	r0, r0, #31
 800c0fa:	f000 8094 	beq.w	800c226 <_dtoa_r+0x8ee>
 800c0fe:	f1c0 0320 	rsb	r3, r0, #32
 800c102:	2b04      	cmp	r3, #4
 800c104:	f340 8085 	ble.w	800c212 <_dtoa_r+0x8da>
 800c108:	9b05      	ldr	r3, [sp, #20]
 800c10a:	f1c0 001c 	rsb	r0, r0, #28
 800c10e:	4403      	add	r3, r0
 800c110:	9305      	str	r3, [sp, #20]
 800c112:	9b06      	ldr	r3, [sp, #24]
 800c114:	4403      	add	r3, r0
 800c116:	4405      	add	r5, r0
 800c118:	9306      	str	r3, [sp, #24]
 800c11a:	9b05      	ldr	r3, [sp, #20]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	dd05      	ble.n	800c12c <_dtoa_r+0x7f4>
 800c120:	4651      	mov	r1, sl
 800c122:	461a      	mov	r2, r3
 800c124:	4620      	mov	r0, r4
 800c126:	f7fd fdf9 	bl	8009d1c <__lshift>
 800c12a:	4682      	mov	sl, r0
 800c12c:	9b06      	ldr	r3, [sp, #24]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	dd05      	ble.n	800c13e <_dtoa_r+0x806>
 800c132:	4631      	mov	r1, r6
 800c134:	461a      	mov	r2, r3
 800c136:	4620      	mov	r0, r4
 800c138:	f7fd fdf0 	bl	8009d1c <__lshift>
 800c13c:	4606      	mov	r6, r0
 800c13e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c140:	2b00      	cmp	r3, #0
 800c142:	d072      	beq.n	800c22a <_dtoa_r+0x8f2>
 800c144:	4631      	mov	r1, r6
 800c146:	4650      	mov	r0, sl
 800c148:	f7fd fe54 	bl	8009df4 <__mcmp>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	da6c      	bge.n	800c22a <_dtoa_r+0x8f2>
 800c150:	2300      	movs	r3, #0
 800c152:	4651      	mov	r1, sl
 800c154:	220a      	movs	r2, #10
 800c156:	4620      	mov	r0, r4
 800c158:	f7fd fc4c 	bl	80099f4 <__multadd>
 800c15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c15e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c162:	4682      	mov	sl, r0
 800c164:	2b00      	cmp	r3, #0
 800c166:	f000 81af 	beq.w	800c4c8 <_dtoa_r+0xb90>
 800c16a:	2300      	movs	r3, #0
 800c16c:	4639      	mov	r1, r7
 800c16e:	220a      	movs	r2, #10
 800c170:	4620      	mov	r0, r4
 800c172:	f7fd fc3f 	bl	80099f4 <__multadd>
 800c176:	9b01      	ldr	r3, [sp, #4]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	4607      	mov	r7, r0
 800c17c:	f300 8096 	bgt.w	800c2ac <_dtoa_r+0x974>
 800c180:	9b07      	ldr	r3, [sp, #28]
 800c182:	2b02      	cmp	r3, #2
 800c184:	dc59      	bgt.n	800c23a <_dtoa_r+0x902>
 800c186:	e091      	b.n	800c2ac <_dtoa_r+0x974>
 800c188:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c18a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c18e:	e758      	b.n	800c042 <_dtoa_r+0x70a>
 800c190:	9b04      	ldr	r3, [sp, #16]
 800c192:	1e5e      	subs	r6, r3, #1
 800c194:	9b08      	ldr	r3, [sp, #32]
 800c196:	42b3      	cmp	r3, r6
 800c198:	bfbf      	itttt	lt
 800c19a:	9b08      	ldrlt	r3, [sp, #32]
 800c19c:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c19e:	9608      	strlt	r6, [sp, #32]
 800c1a0:	1af3      	sublt	r3, r6, r3
 800c1a2:	bfb4      	ite	lt
 800c1a4:	18d2      	addlt	r2, r2, r3
 800c1a6:	1b9e      	subge	r6, r3, r6
 800c1a8:	9b04      	ldr	r3, [sp, #16]
 800c1aa:	bfbc      	itt	lt
 800c1ac:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c1ae:	2600      	movlt	r6, #0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	bfb7      	itett	lt
 800c1b4:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c1b8:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c1bc:	1a9d      	sublt	r5, r3, r2
 800c1be:	2300      	movlt	r3, #0
 800c1c0:	e741      	b.n	800c046 <_dtoa_r+0x70e>
 800c1c2:	9e08      	ldr	r6, [sp, #32]
 800c1c4:	9d05      	ldr	r5, [sp, #20]
 800c1c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c1c8:	e748      	b.n	800c05c <_dtoa_r+0x724>
 800c1ca:	9a08      	ldr	r2, [sp, #32]
 800c1cc:	e770      	b.n	800c0b0 <_dtoa_r+0x778>
 800c1ce:	9b07      	ldr	r3, [sp, #28]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	dc19      	bgt.n	800c208 <_dtoa_r+0x8d0>
 800c1d4:	9b02      	ldr	r3, [sp, #8]
 800c1d6:	b9bb      	cbnz	r3, 800c208 <_dtoa_r+0x8d0>
 800c1d8:	9b03      	ldr	r3, [sp, #12]
 800c1da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1de:	b99b      	cbnz	r3, 800c208 <_dtoa_r+0x8d0>
 800c1e0:	9b03      	ldr	r3, [sp, #12]
 800c1e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1e6:	0d1b      	lsrs	r3, r3, #20
 800c1e8:	051b      	lsls	r3, r3, #20
 800c1ea:	b183      	cbz	r3, 800c20e <_dtoa_r+0x8d6>
 800c1ec:	9b05      	ldr	r3, [sp, #20]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	9305      	str	r3, [sp, #20]
 800c1f2:	9b06      	ldr	r3, [sp, #24]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	9306      	str	r3, [sp, #24]
 800c1f8:	f04f 0801 	mov.w	r8, #1
 800c1fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f47f af6f 	bne.w	800c0e2 <_dtoa_r+0x7aa>
 800c204:	2001      	movs	r0, #1
 800c206:	e774      	b.n	800c0f2 <_dtoa_r+0x7ba>
 800c208:	f04f 0800 	mov.w	r8, #0
 800c20c:	e7f6      	b.n	800c1fc <_dtoa_r+0x8c4>
 800c20e:	4698      	mov	r8, r3
 800c210:	e7f4      	b.n	800c1fc <_dtoa_r+0x8c4>
 800c212:	d082      	beq.n	800c11a <_dtoa_r+0x7e2>
 800c214:	9a05      	ldr	r2, [sp, #20]
 800c216:	331c      	adds	r3, #28
 800c218:	441a      	add	r2, r3
 800c21a:	9205      	str	r2, [sp, #20]
 800c21c:	9a06      	ldr	r2, [sp, #24]
 800c21e:	441a      	add	r2, r3
 800c220:	441d      	add	r5, r3
 800c222:	9206      	str	r2, [sp, #24]
 800c224:	e779      	b.n	800c11a <_dtoa_r+0x7e2>
 800c226:	4603      	mov	r3, r0
 800c228:	e7f4      	b.n	800c214 <_dtoa_r+0x8dc>
 800c22a:	9b04      	ldr	r3, [sp, #16]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	dc37      	bgt.n	800c2a0 <_dtoa_r+0x968>
 800c230:	9b07      	ldr	r3, [sp, #28]
 800c232:	2b02      	cmp	r3, #2
 800c234:	dd34      	ble.n	800c2a0 <_dtoa_r+0x968>
 800c236:	9b04      	ldr	r3, [sp, #16]
 800c238:	9301      	str	r3, [sp, #4]
 800c23a:	9b01      	ldr	r3, [sp, #4]
 800c23c:	b963      	cbnz	r3, 800c258 <_dtoa_r+0x920>
 800c23e:	4631      	mov	r1, r6
 800c240:	2205      	movs	r2, #5
 800c242:	4620      	mov	r0, r4
 800c244:	f7fd fbd6 	bl	80099f4 <__multadd>
 800c248:	4601      	mov	r1, r0
 800c24a:	4606      	mov	r6, r0
 800c24c:	4650      	mov	r0, sl
 800c24e:	f7fd fdd1 	bl	8009df4 <__mcmp>
 800c252:	2800      	cmp	r0, #0
 800c254:	f73f adbc 	bgt.w	800bdd0 <_dtoa_r+0x498>
 800c258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c25a:	9d00      	ldr	r5, [sp, #0]
 800c25c:	ea6f 0b03 	mvn.w	fp, r3
 800c260:	f04f 0800 	mov.w	r8, #0
 800c264:	4631      	mov	r1, r6
 800c266:	4620      	mov	r0, r4
 800c268:	f7fd fbbb 	bl	80099e2 <_Bfree>
 800c26c:	2f00      	cmp	r7, #0
 800c26e:	f43f aeab 	beq.w	800bfc8 <_dtoa_r+0x690>
 800c272:	f1b8 0f00 	cmp.w	r8, #0
 800c276:	d005      	beq.n	800c284 <_dtoa_r+0x94c>
 800c278:	45b8      	cmp	r8, r7
 800c27a:	d003      	beq.n	800c284 <_dtoa_r+0x94c>
 800c27c:	4641      	mov	r1, r8
 800c27e:	4620      	mov	r0, r4
 800c280:	f7fd fbaf 	bl	80099e2 <_Bfree>
 800c284:	4639      	mov	r1, r7
 800c286:	4620      	mov	r0, r4
 800c288:	f7fd fbab 	bl	80099e2 <_Bfree>
 800c28c:	e69c      	b.n	800bfc8 <_dtoa_r+0x690>
 800c28e:	2600      	movs	r6, #0
 800c290:	4637      	mov	r7, r6
 800c292:	e7e1      	b.n	800c258 <_dtoa_r+0x920>
 800c294:	46bb      	mov	fp, r7
 800c296:	4637      	mov	r7, r6
 800c298:	e59a      	b.n	800bdd0 <_dtoa_r+0x498>
 800c29a:	bf00      	nop
 800c29c:	40240000 	.word	0x40240000
 800c2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f000 80c7 	beq.w	800c436 <_dtoa_r+0xafe>
 800c2a8:	9b04      	ldr	r3, [sp, #16]
 800c2aa:	9301      	str	r3, [sp, #4]
 800c2ac:	2d00      	cmp	r5, #0
 800c2ae:	dd05      	ble.n	800c2bc <_dtoa_r+0x984>
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	462a      	mov	r2, r5
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	f7fd fd31 	bl	8009d1c <__lshift>
 800c2ba:	4607      	mov	r7, r0
 800c2bc:	f1b8 0f00 	cmp.w	r8, #0
 800c2c0:	d05a      	beq.n	800c378 <_dtoa_r+0xa40>
 800c2c2:	6879      	ldr	r1, [r7, #4]
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	f7fd fb67 	bl	8009998 <_Balloc>
 800c2ca:	4605      	mov	r5, r0
 800c2cc:	b920      	cbnz	r0, 800c2d8 <_dtoa_r+0x9a0>
 800c2ce:	4b82      	ldr	r3, [pc, #520]	; (800c4d8 <_dtoa_r+0xba0>)
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c2d6:	e470      	b.n	800bbba <_dtoa_r+0x282>
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	3202      	adds	r2, #2
 800c2dc:	0092      	lsls	r2, r2, #2
 800c2de:	f107 010c 	add.w	r1, r7, #12
 800c2e2:	300c      	adds	r0, #12
 800c2e4:	f7fc ffce 	bl	8009284 <memcpy>
 800c2e8:	2201      	movs	r2, #1
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f7fd fd15 	bl	8009d1c <__lshift>
 800c2f2:	9b00      	ldr	r3, [sp, #0]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	9304      	str	r3, [sp, #16]
 800c2f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	9308      	str	r3, [sp, #32]
 800c300:	9b02      	ldr	r3, [sp, #8]
 800c302:	f003 0301 	and.w	r3, r3, #1
 800c306:	46b8      	mov	r8, r7
 800c308:	9306      	str	r3, [sp, #24]
 800c30a:	4607      	mov	r7, r0
 800c30c:	9b04      	ldr	r3, [sp, #16]
 800c30e:	4631      	mov	r1, r6
 800c310:	3b01      	subs	r3, #1
 800c312:	4650      	mov	r0, sl
 800c314:	9301      	str	r3, [sp, #4]
 800c316:	f7ff fa86 	bl	800b826 <quorem>
 800c31a:	4641      	mov	r1, r8
 800c31c:	9002      	str	r0, [sp, #8]
 800c31e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c322:	4650      	mov	r0, sl
 800c324:	f7fd fd66 	bl	8009df4 <__mcmp>
 800c328:	463a      	mov	r2, r7
 800c32a:	9005      	str	r0, [sp, #20]
 800c32c:	4631      	mov	r1, r6
 800c32e:	4620      	mov	r0, r4
 800c330:	f7fd fd7c 	bl	8009e2c <__mdiff>
 800c334:	68c2      	ldr	r2, [r0, #12]
 800c336:	4605      	mov	r5, r0
 800c338:	bb02      	cbnz	r2, 800c37c <_dtoa_r+0xa44>
 800c33a:	4601      	mov	r1, r0
 800c33c:	4650      	mov	r0, sl
 800c33e:	f7fd fd59 	bl	8009df4 <__mcmp>
 800c342:	4602      	mov	r2, r0
 800c344:	4629      	mov	r1, r5
 800c346:	4620      	mov	r0, r4
 800c348:	9209      	str	r2, [sp, #36]	; 0x24
 800c34a:	f7fd fb4a 	bl	80099e2 <_Bfree>
 800c34e:	9b07      	ldr	r3, [sp, #28]
 800c350:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c352:	9d04      	ldr	r5, [sp, #16]
 800c354:	ea43 0102 	orr.w	r1, r3, r2
 800c358:	9b06      	ldr	r3, [sp, #24]
 800c35a:	4319      	orrs	r1, r3
 800c35c:	d110      	bne.n	800c380 <_dtoa_r+0xa48>
 800c35e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c362:	d029      	beq.n	800c3b8 <_dtoa_r+0xa80>
 800c364:	9b05      	ldr	r3, [sp, #20]
 800c366:	2b00      	cmp	r3, #0
 800c368:	dd02      	ble.n	800c370 <_dtoa_r+0xa38>
 800c36a:	9b02      	ldr	r3, [sp, #8]
 800c36c:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c370:	9b01      	ldr	r3, [sp, #4]
 800c372:	f883 9000 	strb.w	r9, [r3]
 800c376:	e775      	b.n	800c264 <_dtoa_r+0x92c>
 800c378:	4638      	mov	r0, r7
 800c37a:	e7ba      	b.n	800c2f2 <_dtoa_r+0x9ba>
 800c37c:	2201      	movs	r2, #1
 800c37e:	e7e1      	b.n	800c344 <_dtoa_r+0xa0c>
 800c380:	9b05      	ldr	r3, [sp, #20]
 800c382:	2b00      	cmp	r3, #0
 800c384:	db04      	blt.n	800c390 <_dtoa_r+0xa58>
 800c386:	9907      	ldr	r1, [sp, #28]
 800c388:	430b      	orrs	r3, r1
 800c38a:	9906      	ldr	r1, [sp, #24]
 800c38c:	430b      	orrs	r3, r1
 800c38e:	d120      	bne.n	800c3d2 <_dtoa_r+0xa9a>
 800c390:	2a00      	cmp	r2, #0
 800c392:	dded      	ble.n	800c370 <_dtoa_r+0xa38>
 800c394:	4651      	mov	r1, sl
 800c396:	2201      	movs	r2, #1
 800c398:	4620      	mov	r0, r4
 800c39a:	f7fd fcbf 	bl	8009d1c <__lshift>
 800c39e:	4631      	mov	r1, r6
 800c3a0:	4682      	mov	sl, r0
 800c3a2:	f7fd fd27 	bl	8009df4 <__mcmp>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	dc03      	bgt.n	800c3b2 <_dtoa_r+0xa7a>
 800c3aa:	d1e1      	bne.n	800c370 <_dtoa_r+0xa38>
 800c3ac:	f019 0f01 	tst.w	r9, #1
 800c3b0:	d0de      	beq.n	800c370 <_dtoa_r+0xa38>
 800c3b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c3b6:	d1d8      	bne.n	800c36a <_dtoa_r+0xa32>
 800c3b8:	9a01      	ldr	r2, [sp, #4]
 800c3ba:	2339      	movs	r3, #57	; 0x39
 800c3bc:	7013      	strb	r3, [r2, #0]
 800c3be:	462b      	mov	r3, r5
 800c3c0:	461d      	mov	r5, r3
 800c3c2:	3b01      	subs	r3, #1
 800c3c4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c3c8:	2a39      	cmp	r2, #57	; 0x39
 800c3ca:	d06c      	beq.n	800c4a6 <_dtoa_r+0xb6e>
 800c3cc:	3201      	adds	r2, #1
 800c3ce:	701a      	strb	r2, [r3, #0]
 800c3d0:	e748      	b.n	800c264 <_dtoa_r+0x92c>
 800c3d2:	2a00      	cmp	r2, #0
 800c3d4:	dd07      	ble.n	800c3e6 <_dtoa_r+0xaae>
 800c3d6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c3da:	d0ed      	beq.n	800c3b8 <_dtoa_r+0xa80>
 800c3dc:	9a01      	ldr	r2, [sp, #4]
 800c3de:	f109 0301 	add.w	r3, r9, #1
 800c3e2:	7013      	strb	r3, [r2, #0]
 800c3e4:	e73e      	b.n	800c264 <_dtoa_r+0x92c>
 800c3e6:	9b04      	ldr	r3, [sp, #16]
 800c3e8:	9a08      	ldr	r2, [sp, #32]
 800c3ea:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d043      	beq.n	800c47a <_dtoa_r+0xb42>
 800c3f2:	4651      	mov	r1, sl
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	220a      	movs	r2, #10
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f7fd fafb 	bl	80099f4 <__multadd>
 800c3fe:	45b8      	cmp	r8, r7
 800c400:	4682      	mov	sl, r0
 800c402:	f04f 0300 	mov.w	r3, #0
 800c406:	f04f 020a 	mov.w	r2, #10
 800c40a:	4641      	mov	r1, r8
 800c40c:	4620      	mov	r0, r4
 800c40e:	d107      	bne.n	800c420 <_dtoa_r+0xae8>
 800c410:	f7fd faf0 	bl	80099f4 <__multadd>
 800c414:	4680      	mov	r8, r0
 800c416:	4607      	mov	r7, r0
 800c418:	9b04      	ldr	r3, [sp, #16]
 800c41a:	3301      	adds	r3, #1
 800c41c:	9304      	str	r3, [sp, #16]
 800c41e:	e775      	b.n	800c30c <_dtoa_r+0x9d4>
 800c420:	f7fd fae8 	bl	80099f4 <__multadd>
 800c424:	4639      	mov	r1, r7
 800c426:	4680      	mov	r8, r0
 800c428:	2300      	movs	r3, #0
 800c42a:	220a      	movs	r2, #10
 800c42c:	4620      	mov	r0, r4
 800c42e:	f7fd fae1 	bl	80099f4 <__multadd>
 800c432:	4607      	mov	r7, r0
 800c434:	e7f0      	b.n	800c418 <_dtoa_r+0xae0>
 800c436:	9b04      	ldr	r3, [sp, #16]
 800c438:	9301      	str	r3, [sp, #4]
 800c43a:	9d00      	ldr	r5, [sp, #0]
 800c43c:	4631      	mov	r1, r6
 800c43e:	4650      	mov	r0, sl
 800c440:	f7ff f9f1 	bl	800b826 <quorem>
 800c444:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c448:	9b00      	ldr	r3, [sp, #0]
 800c44a:	f805 9b01 	strb.w	r9, [r5], #1
 800c44e:	1aea      	subs	r2, r5, r3
 800c450:	9b01      	ldr	r3, [sp, #4]
 800c452:	4293      	cmp	r3, r2
 800c454:	dd07      	ble.n	800c466 <_dtoa_r+0xb2e>
 800c456:	4651      	mov	r1, sl
 800c458:	2300      	movs	r3, #0
 800c45a:	220a      	movs	r2, #10
 800c45c:	4620      	mov	r0, r4
 800c45e:	f7fd fac9 	bl	80099f4 <__multadd>
 800c462:	4682      	mov	sl, r0
 800c464:	e7ea      	b.n	800c43c <_dtoa_r+0xb04>
 800c466:	9b01      	ldr	r3, [sp, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	bfc8      	it	gt
 800c46c:	461d      	movgt	r5, r3
 800c46e:	9b00      	ldr	r3, [sp, #0]
 800c470:	bfd8      	it	le
 800c472:	2501      	movle	r5, #1
 800c474:	441d      	add	r5, r3
 800c476:	f04f 0800 	mov.w	r8, #0
 800c47a:	4651      	mov	r1, sl
 800c47c:	2201      	movs	r2, #1
 800c47e:	4620      	mov	r0, r4
 800c480:	f7fd fc4c 	bl	8009d1c <__lshift>
 800c484:	4631      	mov	r1, r6
 800c486:	4682      	mov	sl, r0
 800c488:	f7fd fcb4 	bl	8009df4 <__mcmp>
 800c48c:	2800      	cmp	r0, #0
 800c48e:	dc96      	bgt.n	800c3be <_dtoa_r+0xa86>
 800c490:	d102      	bne.n	800c498 <_dtoa_r+0xb60>
 800c492:	f019 0f01 	tst.w	r9, #1
 800c496:	d192      	bne.n	800c3be <_dtoa_r+0xa86>
 800c498:	462b      	mov	r3, r5
 800c49a:	461d      	mov	r5, r3
 800c49c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4a0:	2a30      	cmp	r2, #48	; 0x30
 800c4a2:	d0fa      	beq.n	800c49a <_dtoa_r+0xb62>
 800c4a4:	e6de      	b.n	800c264 <_dtoa_r+0x92c>
 800c4a6:	9a00      	ldr	r2, [sp, #0]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d189      	bne.n	800c3c0 <_dtoa_r+0xa88>
 800c4ac:	f10b 0b01 	add.w	fp, fp, #1
 800c4b0:	2331      	movs	r3, #49	; 0x31
 800c4b2:	e796      	b.n	800c3e2 <_dtoa_r+0xaaa>
 800c4b4:	4b09      	ldr	r3, [pc, #36]	; (800c4dc <_dtoa_r+0xba4>)
 800c4b6:	f7ff ba9d 	b.w	800b9f4 <_dtoa_r+0xbc>
 800c4ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f47f aa7c 	bne.w	800b9ba <_dtoa_r+0x82>
 800c4c2:	4b07      	ldr	r3, [pc, #28]	; (800c4e0 <_dtoa_r+0xba8>)
 800c4c4:	f7ff ba96 	b.w	800b9f4 <_dtoa_r+0xbc>
 800c4c8:	9b01      	ldr	r3, [sp, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	dcb5      	bgt.n	800c43a <_dtoa_r+0xb02>
 800c4ce:	9b07      	ldr	r3, [sp, #28]
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	f73f aeb2 	bgt.w	800c23a <_dtoa_r+0x902>
 800c4d6:	e7b0      	b.n	800c43a <_dtoa_r+0xb02>
 800c4d8:	0800e9dd 	.word	0x0800e9dd
 800c4dc:	0800eb76 	.word	0x0800eb76
 800c4e0:	0800ebd4 	.word	0x0800ebd4

0800c4e4 <fiprintf>:
 800c4e4:	b40e      	push	{r1, r2, r3}
 800c4e6:	b503      	push	{r0, r1, lr}
 800c4e8:	4601      	mov	r1, r0
 800c4ea:	ab03      	add	r3, sp, #12
 800c4ec:	4805      	ldr	r0, [pc, #20]	; (800c504 <fiprintf+0x20>)
 800c4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4f2:	6800      	ldr	r0, [r0, #0]
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	f000 f8b7 	bl	800c668 <_vfiprintf_r>
 800c4fa:	b002      	add	sp, #8
 800c4fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c500:	b003      	add	sp, #12
 800c502:	4770      	bx	lr
 800c504:	20000438 	.word	0x20000438

0800c508 <__ssprint_r>:
 800c508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	6813      	ldr	r3, [r2, #0]
 800c50e:	9301      	str	r3, [sp, #4]
 800c510:	6893      	ldr	r3, [r2, #8]
 800c512:	4680      	mov	r8, r0
 800c514:	460c      	mov	r4, r1
 800c516:	4617      	mov	r7, r2
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d157      	bne.n	800c5cc <__ssprint_r+0xc4>
 800c51c:	2000      	movs	r0, #0
 800c51e:	2300      	movs	r3, #0
 800c520:	607b      	str	r3, [r7, #4]
 800c522:	b003      	add	sp, #12
 800c524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c528:	9b01      	ldr	r3, [sp, #4]
 800c52a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800c52e:	3308      	adds	r3, #8
 800c530:	9301      	str	r3, [sp, #4]
 800c532:	68a6      	ldr	r6, [r4, #8]
 800c534:	6820      	ldr	r0, [r4, #0]
 800c536:	f1bb 0f00 	cmp.w	fp, #0
 800c53a:	d0f5      	beq.n	800c528 <__ssprint_r+0x20>
 800c53c:	45b3      	cmp	fp, r6
 800c53e:	d32d      	bcc.n	800c59c <__ssprint_r+0x94>
 800c540:	89a2      	ldrh	r2, [r4, #12]
 800c542:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c546:	d029      	beq.n	800c59c <__ssprint_r+0x94>
 800c548:	6921      	ldr	r1, [r4, #16]
 800c54a:	6965      	ldr	r5, [r4, #20]
 800c54c:	eba0 0901 	sub.w	r9, r0, r1
 800c550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c558:	f109 0001 	add.w	r0, r9, #1
 800c55c:	106d      	asrs	r5, r5, #1
 800c55e:	4458      	add	r0, fp
 800c560:	4285      	cmp	r5, r0
 800c562:	bf38      	it	cc
 800c564:	4605      	movcc	r5, r0
 800c566:	0553      	lsls	r3, r2, #21
 800c568:	d534      	bpl.n	800c5d4 <__ssprint_r+0xcc>
 800c56a:	4629      	mov	r1, r5
 800c56c:	4640      	mov	r0, r8
 800c56e:	f7fc ffbb 	bl	80094e8 <_malloc_r>
 800c572:	4606      	mov	r6, r0
 800c574:	2800      	cmp	r0, #0
 800c576:	d038      	beq.n	800c5ea <__ssprint_r+0xe2>
 800c578:	464a      	mov	r2, r9
 800c57a:	6921      	ldr	r1, [r4, #16]
 800c57c:	f7fc fe82 	bl	8009284 <memcpy>
 800c580:	89a2      	ldrh	r2, [r4, #12]
 800c582:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c586:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c58a:	81a2      	strh	r2, [r4, #12]
 800c58c:	6126      	str	r6, [r4, #16]
 800c58e:	6165      	str	r5, [r4, #20]
 800c590:	444e      	add	r6, r9
 800c592:	eba5 0509 	sub.w	r5, r5, r9
 800c596:	6026      	str	r6, [r4, #0]
 800c598:	60a5      	str	r5, [r4, #8]
 800c59a:	465e      	mov	r6, fp
 800c59c:	455e      	cmp	r6, fp
 800c59e:	bf28      	it	cs
 800c5a0:	465e      	movcs	r6, fp
 800c5a2:	4632      	mov	r2, r6
 800c5a4:	4651      	mov	r1, sl
 800c5a6:	6820      	ldr	r0, [r4, #0]
 800c5a8:	f000 ff3d 	bl	800d426 <memmove>
 800c5ac:	68a2      	ldr	r2, [r4, #8]
 800c5ae:	1b92      	subs	r2, r2, r6
 800c5b0:	60a2      	str	r2, [r4, #8]
 800c5b2:	6822      	ldr	r2, [r4, #0]
 800c5b4:	4432      	add	r2, r6
 800c5b6:	6022      	str	r2, [r4, #0]
 800c5b8:	68ba      	ldr	r2, [r7, #8]
 800c5ba:	eba2 030b 	sub.w	r3, r2, fp
 800c5be:	44da      	add	sl, fp
 800c5c0:	60bb      	str	r3, [r7, #8]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d0aa      	beq.n	800c51c <__ssprint_r+0x14>
 800c5c6:	f04f 0b00 	mov.w	fp, #0
 800c5ca:	e7b2      	b.n	800c532 <__ssprint_r+0x2a>
 800c5cc:	f04f 0a00 	mov.w	sl, #0
 800c5d0:	46d3      	mov	fp, sl
 800c5d2:	e7ae      	b.n	800c532 <__ssprint_r+0x2a>
 800c5d4:	462a      	mov	r2, r5
 800c5d6:	4640      	mov	r0, r8
 800c5d8:	f000 ff46 	bl	800d468 <_realloc_r>
 800c5dc:	4606      	mov	r6, r0
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	d1d4      	bne.n	800c58c <__ssprint_r+0x84>
 800c5e2:	6921      	ldr	r1, [r4, #16]
 800c5e4:	4640      	mov	r0, r8
 800c5e6:	f7fc febf 	bl	8009368 <_free_r>
 800c5ea:	230c      	movs	r3, #12
 800c5ec:	f8c8 3000 	str.w	r3, [r8]
 800c5f0:	89a3      	ldrh	r3, [r4, #12]
 800c5f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5f6:	81a3      	strh	r3, [r4, #12]
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	60bb      	str	r3, [r7, #8]
 800c5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c600:	e78d      	b.n	800c51e <__ssprint_r+0x16>

0800c602 <__sprint_r>:
 800c602:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c606:	6893      	ldr	r3, [r2, #8]
 800c608:	4680      	mov	r8, r0
 800c60a:	460f      	mov	r7, r1
 800c60c:	4614      	mov	r4, r2
 800c60e:	b343      	cbz	r3, 800c662 <__sprint_r+0x60>
 800c610:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800c612:	049d      	lsls	r5, r3, #18
 800c614:	d522      	bpl.n	800c65c <__sprint_r+0x5a>
 800c616:	6815      	ldr	r5, [r2, #0]
 800c618:	3508      	adds	r5, #8
 800c61a:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800c61e:	f04f 0900 	mov.w	r9, #0
 800c622:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800c626:	45ca      	cmp	sl, r9
 800c628:	dc0d      	bgt.n	800c646 <__sprint_r+0x44>
 800c62a:	68a3      	ldr	r3, [r4, #8]
 800c62c:	f026 0603 	bic.w	r6, r6, #3
 800c630:	1b98      	subs	r0, r3, r6
 800c632:	60a0      	str	r0, [r4, #8]
 800c634:	3508      	adds	r5, #8
 800c636:	2800      	cmp	r0, #0
 800c638:	d1ef      	bne.n	800c61a <__sprint_r+0x18>
 800c63a:	2300      	movs	r3, #0
 800c63c:	60a3      	str	r3, [r4, #8]
 800c63e:	2300      	movs	r3, #0
 800c640:	6063      	str	r3, [r4, #4]
 800c642:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c646:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800c64a:	463a      	mov	r2, r7
 800c64c:	4640      	mov	r0, r8
 800c64e:	f000 fec0 	bl	800d3d2 <_fputwc_r>
 800c652:	1c43      	adds	r3, r0, #1
 800c654:	d0f1      	beq.n	800c63a <__sprint_r+0x38>
 800c656:	f109 0901 	add.w	r9, r9, #1
 800c65a:	e7e4      	b.n	800c626 <__sprint_r+0x24>
 800c65c:	f000 fcd6 	bl	800d00c <__sfvwrite_r>
 800c660:	e7eb      	b.n	800c63a <__sprint_r+0x38>
 800c662:	4618      	mov	r0, r3
 800c664:	e7eb      	b.n	800c63e <__sprint_r+0x3c>
	...

0800c668 <_vfiprintf_r>:
 800c668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66c:	ed2d 8b02 	vpush	{d8}
 800c670:	b0bb      	sub	sp, #236	; 0xec
 800c672:	460f      	mov	r7, r1
 800c674:	9201      	str	r2, [sp, #4]
 800c676:	461d      	mov	r5, r3
 800c678:	461c      	mov	r4, r3
 800c67a:	4681      	mov	r9, r0
 800c67c:	b118      	cbz	r0, 800c686 <_vfiprintf_r+0x1e>
 800c67e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c680:	b90b      	cbnz	r3, 800c686 <_vfiprintf_r+0x1e>
 800c682:	f7fc fce3 	bl	800904c <__sinit>
 800c686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c688:	07d8      	lsls	r0, r3, #31
 800c68a:	d405      	bmi.n	800c698 <_vfiprintf_r+0x30>
 800c68c:	89bb      	ldrh	r3, [r7, #12]
 800c68e:	0599      	lsls	r1, r3, #22
 800c690:	d402      	bmi.n	800c698 <_vfiprintf_r+0x30>
 800c692:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c694:	f7fc fdf4 	bl	8009280 <__retarget_lock_acquire_recursive>
 800c698:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c69c:	049a      	lsls	r2, r3, #18
 800c69e:	d406      	bmi.n	800c6ae <_vfiprintf_r+0x46>
 800c6a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c6a4:	81bb      	strh	r3, [r7, #12]
 800c6a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c6ac:	667b      	str	r3, [r7, #100]	; 0x64
 800c6ae:	89bb      	ldrh	r3, [r7, #12]
 800c6b0:	071e      	lsls	r6, r3, #28
 800c6b2:	d501      	bpl.n	800c6b8 <_vfiprintf_r+0x50>
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	b9bb      	cbnz	r3, 800c6e8 <_vfiprintf_r+0x80>
 800c6b8:	4639      	mov	r1, r7
 800c6ba:	4648      	mov	r0, r9
 800c6bc:	f000 fdf0 	bl	800d2a0 <__swsetup_r>
 800c6c0:	b190      	cbz	r0, 800c6e8 <_vfiprintf_r+0x80>
 800c6c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6c4:	07d8      	lsls	r0, r3, #31
 800c6c6:	d508      	bpl.n	800c6da <_vfiprintf_r+0x72>
 800c6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6cc:	9302      	str	r3, [sp, #8]
 800c6ce:	9802      	ldr	r0, [sp, #8]
 800c6d0:	b03b      	add	sp, #236	; 0xec
 800c6d2:	ecbd 8b02 	vpop	{d8}
 800c6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6da:	89bb      	ldrh	r3, [r7, #12]
 800c6dc:	0599      	lsls	r1, r3, #22
 800c6de:	d4f3      	bmi.n	800c6c8 <_vfiprintf_r+0x60>
 800c6e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c6e2:	f7fc fdce 	bl	8009282 <__retarget_lock_release_recursive>
 800c6e6:	e7ef      	b.n	800c6c8 <_vfiprintf_r+0x60>
 800c6e8:	89bb      	ldrh	r3, [r7, #12]
 800c6ea:	f003 021a 	and.w	r2, r3, #26
 800c6ee:	2a0a      	cmp	r2, #10
 800c6f0:	d116      	bne.n	800c720 <_vfiprintf_r+0xb8>
 800c6f2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c6f6:	2a00      	cmp	r2, #0
 800c6f8:	db12      	blt.n	800c720 <_vfiprintf_r+0xb8>
 800c6fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c6fc:	07d2      	lsls	r2, r2, #31
 800c6fe:	d404      	bmi.n	800c70a <_vfiprintf_r+0xa2>
 800c700:	059e      	lsls	r6, r3, #22
 800c702:	d402      	bmi.n	800c70a <_vfiprintf_r+0xa2>
 800c704:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c706:	f7fc fdbc 	bl	8009282 <__retarget_lock_release_recursive>
 800c70a:	9a01      	ldr	r2, [sp, #4]
 800c70c:	462b      	mov	r3, r5
 800c70e:	4639      	mov	r1, r7
 800c710:	4648      	mov	r0, r9
 800c712:	b03b      	add	sp, #236	; 0xec
 800c714:	ecbd 8b02 	vpop	{d8}
 800c718:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71c:	f000 bc36 	b.w	800cf8c <__sbprintf>
 800c720:	2300      	movs	r3, #0
 800c722:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800c726:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c72a:	ae11      	add	r6, sp, #68	; 0x44
 800c72c:	ee08 3a10 	vmov	s16, r3
 800c730:	960e      	str	r6, [sp, #56]	; 0x38
 800c732:	9307      	str	r3, [sp, #28]
 800c734:	9302      	str	r3, [sp, #8]
 800c736:	9b01      	ldr	r3, [sp, #4]
 800c738:	461d      	mov	r5, r3
 800c73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c73e:	b10a      	cbz	r2, 800c744 <_vfiprintf_r+0xdc>
 800c740:	2a25      	cmp	r2, #37	; 0x25
 800c742:	d1f9      	bne.n	800c738 <_vfiprintf_r+0xd0>
 800c744:	9b01      	ldr	r3, [sp, #4]
 800c746:	ebb5 0803 	subs.w	r8, r5, r3
 800c74a:	d00d      	beq.n	800c768 <_vfiprintf_r+0x100>
 800c74c:	e9c6 3800 	strd	r3, r8, [r6]
 800c750:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c752:	4443      	add	r3, r8
 800c754:	9310      	str	r3, [sp, #64]	; 0x40
 800c756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c758:	3301      	adds	r3, #1
 800c75a:	2b07      	cmp	r3, #7
 800c75c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c75e:	dc76      	bgt.n	800c84e <_vfiprintf_r+0x1e6>
 800c760:	3608      	adds	r6, #8
 800c762:	9b02      	ldr	r3, [sp, #8]
 800c764:	4443      	add	r3, r8
 800c766:	9302      	str	r3, [sp, #8]
 800c768:	782b      	ldrb	r3, [r5, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f000 83d0 	beq.w	800cf10 <_vfiprintf_r+0x8a8>
 800c770:	2300      	movs	r3, #0
 800c772:	f04f 32ff 	mov.w	r2, #4294967295
 800c776:	3501      	adds	r5, #1
 800c778:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800c77c:	9200      	str	r2, [sp, #0]
 800c77e:	9303      	str	r3, [sp, #12]
 800c780:	469a      	mov	sl, r3
 800c782:	462a      	mov	r2, r5
 800c784:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c788:	9201      	str	r2, [sp, #4]
 800c78a:	f1a3 0220 	sub.w	r2, r3, #32
 800c78e:	2a5a      	cmp	r2, #90	; 0x5a
 800c790:	f200 831c 	bhi.w	800cdcc <_vfiprintf_r+0x764>
 800c794:	e8df f012 	tbh	[pc, r2, lsl #1]
 800c798:	031a007e 	.word	0x031a007e
 800c79c:	0086031a 	.word	0x0086031a
 800c7a0:	031a031a 	.word	0x031a031a
 800c7a4:	0065031a 	.word	0x0065031a
 800c7a8:	031a031a 	.word	0x031a031a
 800c7ac:	00930089 	.word	0x00930089
 800c7b0:	0090031a 	.word	0x0090031a
 800c7b4:	031a0095 	.word	0x031a0095
 800c7b8:	00b300b0 	.word	0x00b300b0
 800c7bc:	00b300b3 	.word	0x00b300b3
 800c7c0:	00b300b3 	.word	0x00b300b3
 800c7c4:	00b300b3 	.word	0x00b300b3
 800c7c8:	00b300b3 	.word	0x00b300b3
 800c7cc:	031a031a 	.word	0x031a031a
 800c7d0:	031a031a 	.word	0x031a031a
 800c7d4:	031a031a 	.word	0x031a031a
 800c7d8:	031a031a 	.word	0x031a031a
 800c7dc:	00dd031a 	.word	0x00dd031a
 800c7e0:	031a00eb 	.word	0x031a00eb
 800c7e4:	031a031a 	.word	0x031a031a
 800c7e8:	031a031a 	.word	0x031a031a
 800c7ec:	031a031a 	.word	0x031a031a
 800c7f0:	031a031a 	.word	0x031a031a
 800c7f4:	013b031a 	.word	0x013b031a
 800c7f8:	031a031a 	.word	0x031a031a
 800c7fc:	0180031a 	.word	0x0180031a
 800c800:	025e031a 	.word	0x025e031a
 800c804:	031a031a 	.word	0x031a031a
 800c808:	031a027e 	.word	0x031a027e
 800c80c:	031a031a 	.word	0x031a031a
 800c810:	031a031a 	.word	0x031a031a
 800c814:	031a031a 	.word	0x031a031a
 800c818:	031a031a 	.word	0x031a031a
 800c81c:	00dd031a 	.word	0x00dd031a
 800c820:	031a00ed 	.word	0x031a00ed
 800c824:	031a031a 	.word	0x031a031a
 800c828:	00ed00c3 	.word	0x00ed00c3
 800c82c:	031a00d7 	.word	0x031a00d7
 800c830:	031a00d0 	.word	0x031a00d0
 800c834:	013d0119 	.word	0x013d0119
 800c838:	00d70172 	.word	0x00d70172
 800c83c:	0180031a 	.word	0x0180031a
 800c840:	0260007c 	.word	0x0260007c
 800c844:	031a031a 	.word	0x031a031a
 800c848:	031a029a 	.word	0x031a029a
 800c84c:	007c      	.short	0x007c
 800c84e:	aa0e      	add	r2, sp, #56	; 0x38
 800c850:	4639      	mov	r1, r7
 800c852:	4648      	mov	r0, r9
 800c854:	f7ff fed5 	bl	800c602 <__sprint_r>
 800c858:	2800      	cmp	r0, #0
 800c85a:	f040 8338 	bne.w	800cece <_vfiprintf_r+0x866>
 800c85e:	ae11      	add	r6, sp, #68	; 0x44
 800c860:	e77f      	b.n	800c762 <_vfiprintf_r+0xfa>
 800c862:	4648      	mov	r0, r9
 800c864:	f7fe fee0 	bl	800b628 <_localeconv_r>
 800c868:	6843      	ldr	r3, [r0, #4]
 800c86a:	4618      	mov	r0, r3
 800c86c:	ee08 3a10 	vmov	s16, r3
 800c870:	f7f3 fcb6 	bl	80001e0 <strlen>
 800c874:	9007      	str	r0, [sp, #28]
 800c876:	4648      	mov	r0, r9
 800c878:	f7fe fed6 	bl	800b628 <_localeconv_r>
 800c87c:	6883      	ldr	r3, [r0, #8]
 800c87e:	9306      	str	r3, [sp, #24]
 800c880:	9b07      	ldr	r3, [sp, #28]
 800c882:	b12b      	cbz	r3, 800c890 <_vfiprintf_r+0x228>
 800c884:	9b06      	ldr	r3, [sp, #24]
 800c886:	b11b      	cbz	r3, 800c890 <_vfiprintf_r+0x228>
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	b10b      	cbz	r3, 800c890 <_vfiprintf_r+0x228>
 800c88c:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800c890:	9d01      	ldr	r5, [sp, #4]
 800c892:	e776      	b.n	800c782 <_vfiprintf_r+0x11a>
 800c894:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1f9      	bne.n	800c890 <_vfiprintf_r+0x228>
 800c89c:	2320      	movs	r3, #32
 800c89e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800c8a2:	e7f5      	b.n	800c890 <_vfiprintf_r+0x228>
 800c8a4:	f04a 0a01 	orr.w	sl, sl, #1
 800c8a8:	e7f2      	b.n	800c890 <_vfiprintf_r+0x228>
 800c8aa:	f854 3b04 	ldr.w	r3, [r4], #4
 800c8ae:	9303      	str	r3, [sp, #12]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	daed      	bge.n	800c890 <_vfiprintf_r+0x228>
 800c8b4:	425b      	negs	r3, r3
 800c8b6:	9303      	str	r3, [sp, #12]
 800c8b8:	f04a 0a04 	orr.w	sl, sl, #4
 800c8bc:	e7e8      	b.n	800c890 <_vfiprintf_r+0x228>
 800c8be:	232b      	movs	r3, #43	; 0x2b
 800c8c0:	e7ed      	b.n	800c89e <_vfiprintf_r+0x236>
 800c8c2:	9a01      	ldr	r2, [sp, #4]
 800c8c4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c8c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ca:	d112      	bne.n	800c8f2 <_vfiprintf_r+0x28a>
 800c8cc:	f854 3b04 	ldr.w	r3, [r4], #4
 800c8d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c8d4:	e9cd 3200 	strd	r3, r2, [sp]
 800c8d8:	e7da      	b.n	800c890 <_vfiprintf_r+0x228>
 800c8da:	9b00      	ldr	r3, [sp, #0]
 800c8dc:	200a      	movs	r0, #10
 800c8de:	fb00 1303 	mla	r3, r0, r3, r1
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c8e8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c8ec:	2909      	cmp	r1, #9
 800c8ee:	d9f4      	bls.n	800c8da <_vfiprintf_r+0x272>
 800c8f0:	e74a      	b.n	800c788 <_vfiprintf_r+0x120>
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	9100      	str	r1, [sp, #0]
 800c8f6:	e7f7      	b.n	800c8e8 <_vfiprintf_r+0x280>
 800c8f8:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800c8fc:	e7c8      	b.n	800c890 <_vfiprintf_r+0x228>
 800c8fe:	2100      	movs	r1, #0
 800c900:	9a01      	ldr	r2, [sp, #4]
 800c902:	9103      	str	r1, [sp, #12]
 800c904:	9903      	ldr	r1, [sp, #12]
 800c906:	3b30      	subs	r3, #48	; 0x30
 800c908:	200a      	movs	r0, #10
 800c90a:	fb00 3301 	mla	r3, r0, r1, r3
 800c90e:	9303      	str	r3, [sp, #12]
 800c910:	f812 3b01 	ldrb.w	r3, [r2], #1
 800c914:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c918:	2909      	cmp	r1, #9
 800c91a:	d9f3      	bls.n	800c904 <_vfiprintf_r+0x29c>
 800c91c:	e734      	b.n	800c788 <_vfiprintf_r+0x120>
 800c91e:	9b01      	ldr	r3, [sp, #4]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	2b68      	cmp	r3, #104	; 0x68
 800c924:	bf01      	itttt	eq
 800c926:	9b01      	ldreq	r3, [sp, #4]
 800c928:	3301      	addeq	r3, #1
 800c92a:	9301      	streq	r3, [sp, #4]
 800c92c:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800c930:	bf18      	it	ne
 800c932:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800c936:	e7ab      	b.n	800c890 <_vfiprintf_r+0x228>
 800c938:	9b01      	ldr	r3, [sp, #4]
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	2b6c      	cmp	r3, #108	; 0x6c
 800c93e:	d105      	bne.n	800c94c <_vfiprintf_r+0x2e4>
 800c940:	9b01      	ldr	r3, [sp, #4]
 800c942:	3301      	adds	r3, #1
 800c944:	9301      	str	r3, [sp, #4]
 800c946:	f04a 0a20 	orr.w	sl, sl, #32
 800c94a:	e7a1      	b.n	800c890 <_vfiprintf_r+0x228>
 800c94c:	f04a 0a10 	orr.w	sl, sl, #16
 800c950:	e79e      	b.n	800c890 <_vfiprintf_r+0x228>
 800c952:	46a0      	mov	r8, r4
 800c954:	f858 3b04 	ldr.w	r3, [r8], #4
 800c958:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800c95c:	2300      	movs	r3, #0
 800c95e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800c962:	2201      	movs	r2, #1
 800c964:	9200      	str	r2, [sp, #0]
 800c966:	461d      	mov	r5, r3
 800c968:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 800c96c:	e0a9      	b.n	800cac2 <_vfiprintf_r+0x45a>
 800c96e:	f04a 0a10 	orr.w	sl, sl, #16
 800c972:	f01a 0f20 	tst.w	sl, #32
 800c976:	d011      	beq.n	800c99c <_vfiprintf_r+0x334>
 800c978:	3407      	adds	r4, #7
 800c97a:	f024 0307 	bic.w	r3, r4, #7
 800c97e:	4698      	mov	r8, r3
 800c980:	685d      	ldr	r5, [r3, #4]
 800c982:	f858 4b08 	ldr.w	r4, [r8], #8
 800c986:	2d00      	cmp	r5, #0
 800c988:	da06      	bge.n	800c998 <_vfiprintf_r+0x330>
 800c98a:	4264      	negs	r4, r4
 800c98c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800c990:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800c994:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800c998:	2301      	movs	r3, #1
 800c99a:	e04a      	b.n	800ca32 <_vfiprintf_r+0x3ca>
 800c99c:	46a0      	mov	r8, r4
 800c99e:	f01a 0f10 	tst.w	sl, #16
 800c9a2:	f858 5b04 	ldr.w	r5, [r8], #4
 800c9a6:	d002      	beq.n	800c9ae <_vfiprintf_r+0x346>
 800c9a8:	462c      	mov	r4, r5
 800c9aa:	17ed      	asrs	r5, r5, #31
 800c9ac:	e7eb      	b.n	800c986 <_vfiprintf_r+0x31e>
 800c9ae:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c9b2:	d003      	beq.n	800c9bc <_vfiprintf_r+0x354>
 800c9b4:	b22c      	sxth	r4, r5
 800c9b6:	f345 35c0 	sbfx	r5, r5, #15, #1
 800c9ba:	e7e4      	b.n	800c986 <_vfiprintf_r+0x31e>
 800c9bc:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c9c0:	d0f2      	beq.n	800c9a8 <_vfiprintf_r+0x340>
 800c9c2:	b26c      	sxtb	r4, r5
 800c9c4:	f345 15c0 	sbfx	r5, r5, #7, #1
 800c9c8:	e7dd      	b.n	800c986 <_vfiprintf_r+0x31e>
 800c9ca:	f01a 0f20 	tst.w	sl, #32
 800c9ce:	f104 0804 	add.w	r8, r4, #4
 800c9d2:	d007      	beq.n	800c9e4 <_vfiprintf_r+0x37c>
 800c9d4:	9a02      	ldr	r2, [sp, #8]
 800c9d6:	6823      	ldr	r3, [r4, #0]
 800c9d8:	9902      	ldr	r1, [sp, #8]
 800c9da:	17d2      	asrs	r2, r2, #31
 800c9dc:	e9c3 1200 	strd	r1, r2, [r3]
 800c9e0:	4644      	mov	r4, r8
 800c9e2:	e6a8      	b.n	800c736 <_vfiprintf_r+0xce>
 800c9e4:	f01a 0f10 	tst.w	sl, #16
 800c9e8:	d003      	beq.n	800c9f2 <_vfiprintf_r+0x38a>
 800c9ea:	6823      	ldr	r3, [r4, #0]
 800c9ec:	9a02      	ldr	r2, [sp, #8]
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	e7f6      	b.n	800c9e0 <_vfiprintf_r+0x378>
 800c9f2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c9f6:	d003      	beq.n	800ca00 <_vfiprintf_r+0x398>
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	9a02      	ldr	r2, [sp, #8]
 800c9fc:	801a      	strh	r2, [r3, #0]
 800c9fe:	e7ef      	b.n	800c9e0 <_vfiprintf_r+0x378>
 800ca00:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800ca04:	d0f1      	beq.n	800c9ea <_vfiprintf_r+0x382>
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	9a02      	ldr	r2, [sp, #8]
 800ca0a:	701a      	strb	r2, [r3, #0]
 800ca0c:	e7e8      	b.n	800c9e0 <_vfiprintf_r+0x378>
 800ca0e:	f04a 0a10 	orr.w	sl, sl, #16
 800ca12:	f01a 0320 	ands.w	r3, sl, #32
 800ca16:	d01f      	beq.n	800ca58 <_vfiprintf_r+0x3f0>
 800ca18:	3407      	adds	r4, #7
 800ca1a:	f024 0307 	bic.w	r3, r4, #7
 800ca1e:	4698      	mov	r8, r3
 800ca20:	685d      	ldr	r5, [r3, #4]
 800ca22:	f858 4b08 	ldr.w	r4, [r8], #8
 800ca26:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800ca32:	9a00      	ldr	r2, [sp, #0]
 800ca34:	3201      	adds	r2, #1
 800ca36:	f000 8278 	beq.w	800cf2a <_vfiprintf_r+0x8c2>
 800ca3a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800ca3e:	9204      	str	r2, [sp, #16]
 800ca40:	ea54 0205 	orrs.w	r2, r4, r5
 800ca44:	f040 8277 	bne.w	800cf36 <_vfiprintf_r+0x8ce>
 800ca48:	9a00      	ldr	r2, [sp, #0]
 800ca4a:	2a00      	cmp	r2, #0
 800ca4c:	f000 81b3 	beq.w	800cdb6 <_vfiprintf_r+0x74e>
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	f040 8273 	bne.w	800cf3c <_vfiprintf_r+0x8d4>
 800ca56:	e151      	b.n	800ccfc <_vfiprintf_r+0x694>
 800ca58:	46a0      	mov	r8, r4
 800ca5a:	f01a 0510 	ands.w	r5, sl, #16
 800ca5e:	f858 4b04 	ldr.w	r4, [r8], #4
 800ca62:	d001      	beq.n	800ca68 <_vfiprintf_r+0x400>
 800ca64:	461d      	mov	r5, r3
 800ca66:	e7de      	b.n	800ca26 <_vfiprintf_r+0x3be>
 800ca68:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800ca6c:	d001      	beq.n	800ca72 <_vfiprintf_r+0x40a>
 800ca6e:	b2a4      	uxth	r4, r4
 800ca70:	e7d9      	b.n	800ca26 <_vfiprintf_r+0x3be>
 800ca72:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800ca76:	d0d6      	beq.n	800ca26 <_vfiprintf_r+0x3be>
 800ca78:	b2e4      	uxtb	r4, r4
 800ca7a:	e7f3      	b.n	800ca64 <_vfiprintf_r+0x3fc>
 800ca7c:	46a0      	mov	r8, r4
 800ca7e:	f647 0330 	movw	r3, #30768	; 0x7830
 800ca82:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800ca86:	f858 4b04 	ldr.w	r4, [r8], #4
 800ca8a:	4b9f      	ldr	r3, [pc, #636]	; (800cd08 <_vfiprintf_r+0x6a0>)
 800ca8c:	9305      	str	r3, [sp, #20]
 800ca8e:	2500      	movs	r5, #0
 800ca90:	f04a 0a02 	orr.w	sl, sl, #2
 800ca94:	2302      	movs	r3, #2
 800ca96:	e7c9      	b.n	800ca2c <_vfiprintf_r+0x3c4>
 800ca98:	9b00      	ldr	r3, [sp, #0]
 800ca9a:	46a0      	mov	r8, r4
 800ca9c:	2500      	movs	r5, #0
 800ca9e:	1c5c      	adds	r4, r3, #1
 800caa0:	f858 bb04 	ldr.w	fp, [r8], #4
 800caa4:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800caa8:	f000 80cf 	beq.w	800cc4a <_vfiprintf_r+0x5e2>
 800caac:	461a      	mov	r2, r3
 800caae:	4629      	mov	r1, r5
 800cab0:	4658      	mov	r0, fp
 800cab2:	f7f3 fb9d 	bl	80001f0 <memchr>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	f000 8192 	beq.w	800cde0 <_vfiprintf_r+0x778>
 800cabc:	eba0 030b 	sub.w	r3, r0, fp
 800cac0:	9300      	str	r3, [sp, #0]
 800cac2:	9b00      	ldr	r3, [sp, #0]
 800cac4:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800cac8:	42ab      	cmp	r3, r5
 800caca:	bfb8      	it	lt
 800cacc:	462b      	movlt	r3, r5
 800cace:	9304      	str	r3, [sp, #16]
 800cad0:	b10a      	cbz	r2, 800cad6 <_vfiprintf_r+0x46e>
 800cad2:	3301      	adds	r3, #1
 800cad4:	9304      	str	r3, [sp, #16]
 800cad6:	f01a 0302 	ands.w	r3, sl, #2
 800cada:	9308      	str	r3, [sp, #32]
 800cadc:	bf1e      	ittt	ne
 800cade:	9b04      	ldrne	r3, [sp, #16]
 800cae0:	3302      	addne	r3, #2
 800cae2:	9304      	strne	r3, [sp, #16]
 800cae4:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800cae8:	9309      	str	r3, [sp, #36]	; 0x24
 800caea:	d11f      	bne.n	800cb2c <_vfiprintf_r+0x4c4>
 800caec:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800caf0:	1a9c      	subs	r4, r3, r2
 800caf2:	2c00      	cmp	r4, #0
 800caf4:	dd1a      	ble.n	800cb2c <_vfiprintf_r+0x4c4>
 800caf6:	4b85      	ldr	r3, [pc, #532]	; (800cd0c <_vfiprintf_r+0x6a4>)
 800caf8:	6033      	str	r3, [r6, #0]
 800cafa:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800cafe:	2c10      	cmp	r4, #16
 800cb00:	f102 0201 	add.w	r2, r2, #1
 800cb04:	f106 0008 	add.w	r0, r6, #8
 800cb08:	f300 816c 	bgt.w	800cde4 <_vfiprintf_r+0x77c>
 800cb0c:	6074      	str	r4, [r6, #4]
 800cb0e:	2a07      	cmp	r2, #7
 800cb10:	4464      	add	r4, ip
 800cb12:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800cb16:	f340 8178 	ble.w	800ce0a <_vfiprintf_r+0x7a2>
 800cb1a:	aa0e      	add	r2, sp, #56	; 0x38
 800cb1c:	4639      	mov	r1, r7
 800cb1e:	4648      	mov	r0, r9
 800cb20:	f7ff fd6f 	bl	800c602 <__sprint_r>
 800cb24:	2800      	cmp	r0, #0
 800cb26:	f040 81d2 	bne.w	800cece <_vfiprintf_r+0x866>
 800cb2a:	ae11      	add	r6, sp, #68	; 0x44
 800cb2c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800cb30:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800cb34:	b160      	cbz	r0, 800cb50 <_vfiprintf_r+0x4e8>
 800cb36:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 800cb3a:	3201      	adds	r2, #1
 800cb3c:	6030      	str	r0, [r6, #0]
 800cb3e:	2001      	movs	r0, #1
 800cb40:	4401      	add	r1, r0
 800cb42:	2a07      	cmp	r2, #7
 800cb44:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800cb48:	6070      	str	r0, [r6, #4]
 800cb4a:	f300 8160 	bgt.w	800ce0e <_vfiprintf_r+0x7a6>
 800cb4e:	3608      	adds	r6, #8
 800cb50:	9b08      	ldr	r3, [sp, #32]
 800cb52:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800cb56:	b15b      	cbz	r3, 800cb70 <_vfiprintf_r+0x508>
 800cb58:	a80d      	add	r0, sp, #52	; 0x34
 800cb5a:	3201      	adds	r2, #1
 800cb5c:	6030      	str	r0, [r6, #0]
 800cb5e:	2002      	movs	r0, #2
 800cb60:	4401      	add	r1, r0
 800cb62:	2a07      	cmp	r2, #7
 800cb64:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800cb68:	6070      	str	r0, [r6, #4]
 800cb6a:	f300 8159 	bgt.w	800ce20 <_vfiprintf_r+0x7b8>
 800cb6e:	3608      	adds	r6, #8
 800cb70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb72:	2b80      	cmp	r3, #128	; 0x80
 800cb74:	d11f      	bne.n	800cbb6 <_vfiprintf_r+0x54e>
 800cb76:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800cb7a:	1a9c      	subs	r4, r3, r2
 800cb7c:	2c00      	cmp	r4, #0
 800cb7e:	dd1a      	ble.n	800cbb6 <_vfiprintf_r+0x54e>
 800cb80:	4b63      	ldr	r3, [pc, #396]	; (800cd10 <_vfiprintf_r+0x6a8>)
 800cb82:	6033      	str	r3, [r6, #0]
 800cb84:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800cb88:	2c10      	cmp	r4, #16
 800cb8a:	f102 0201 	add.w	r2, r2, #1
 800cb8e:	f106 0008 	add.w	r0, r6, #8
 800cb92:	f300 814e 	bgt.w	800ce32 <_vfiprintf_r+0x7ca>
 800cb96:	6074      	str	r4, [r6, #4]
 800cb98:	2a07      	cmp	r2, #7
 800cb9a:	4464      	add	r4, ip
 800cb9c:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800cba0:	f340 815a 	ble.w	800ce58 <_vfiprintf_r+0x7f0>
 800cba4:	aa0e      	add	r2, sp, #56	; 0x38
 800cba6:	4639      	mov	r1, r7
 800cba8:	4648      	mov	r0, r9
 800cbaa:	f7ff fd2a 	bl	800c602 <__sprint_r>
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	f040 818d 	bne.w	800cece <_vfiprintf_r+0x866>
 800cbb4:	ae11      	add	r6, sp, #68	; 0x44
 800cbb6:	9b00      	ldr	r3, [sp, #0]
 800cbb8:	1aec      	subs	r4, r5, r3
 800cbba:	2c00      	cmp	r4, #0
 800cbbc:	dd1b      	ble.n	800cbf6 <_vfiprintf_r+0x58e>
 800cbbe:	4d54      	ldr	r5, [pc, #336]	; (800cd10 <_vfiprintf_r+0x6a8>)
 800cbc0:	2310      	movs	r3, #16
 800cbc2:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800cbc6:	2c10      	cmp	r4, #16
 800cbc8:	f102 0201 	add.w	r2, r2, #1
 800cbcc:	f106 0008 	add.w	r0, r6, #8
 800cbd0:	6035      	str	r5, [r6, #0]
 800cbd2:	f300 8143 	bgt.w	800ce5c <_vfiprintf_r+0x7f4>
 800cbd6:	6074      	str	r4, [r6, #4]
 800cbd8:	2a07      	cmp	r2, #7
 800cbda:	440c      	add	r4, r1
 800cbdc:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800cbe0:	f340 814d 	ble.w	800ce7e <_vfiprintf_r+0x816>
 800cbe4:	aa0e      	add	r2, sp, #56	; 0x38
 800cbe6:	4639      	mov	r1, r7
 800cbe8:	4648      	mov	r0, r9
 800cbea:	f7ff fd0a 	bl	800c602 <__sprint_r>
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	f040 816d 	bne.w	800cece <_vfiprintf_r+0x866>
 800cbf4:	ae11      	add	r6, sp, #68	; 0x44
 800cbf6:	9b00      	ldr	r3, [sp, #0]
 800cbf8:	9a00      	ldr	r2, [sp, #0]
 800cbfa:	6073      	str	r3, [r6, #4]
 800cbfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cbfe:	f8c6 b000 	str.w	fp, [r6]
 800cc02:	4413      	add	r3, r2
 800cc04:	9310      	str	r3, [sp, #64]	; 0x40
 800cc06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc08:	3301      	adds	r3, #1
 800cc0a:	2b07      	cmp	r3, #7
 800cc0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc0e:	f300 8138 	bgt.w	800ce82 <_vfiprintf_r+0x81a>
 800cc12:	f106 0308 	add.w	r3, r6, #8
 800cc16:	f01a 0f04 	tst.w	sl, #4
 800cc1a:	f040 813a 	bne.w	800ce92 <_vfiprintf_r+0x82a>
 800cc1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cc22:	9904      	ldr	r1, [sp, #16]
 800cc24:	428a      	cmp	r2, r1
 800cc26:	bfac      	ite	ge
 800cc28:	189b      	addge	r3, r3, r2
 800cc2a:	185b      	addlt	r3, r3, r1
 800cc2c:	9302      	str	r3, [sp, #8]
 800cc2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc30:	b13b      	cbz	r3, 800cc42 <_vfiprintf_r+0x5da>
 800cc32:	aa0e      	add	r2, sp, #56	; 0x38
 800cc34:	4639      	mov	r1, r7
 800cc36:	4648      	mov	r0, r9
 800cc38:	f7ff fce3 	bl	800c602 <__sprint_r>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	f040 8146 	bne.w	800cece <_vfiprintf_r+0x866>
 800cc42:	2300      	movs	r3, #0
 800cc44:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc46:	ae11      	add	r6, sp, #68	; 0x44
 800cc48:	e6ca      	b.n	800c9e0 <_vfiprintf_r+0x378>
 800cc4a:	4658      	mov	r0, fp
 800cc4c:	f7f3 fac8 	bl	80001e0 <strlen>
 800cc50:	9000      	str	r0, [sp, #0]
 800cc52:	e736      	b.n	800cac2 <_vfiprintf_r+0x45a>
 800cc54:	f04a 0a10 	orr.w	sl, sl, #16
 800cc58:	f01a 0320 	ands.w	r3, sl, #32
 800cc5c:	d008      	beq.n	800cc70 <_vfiprintf_r+0x608>
 800cc5e:	3407      	adds	r4, #7
 800cc60:	f024 0307 	bic.w	r3, r4, #7
 800cc64:	4698      	mov	r8, r3
 800cc66:	685d      	ldr	r5, [r3, #4]
 800cc68:	f858 4b08 	ldr.w	r4, [r8], #8
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e6dd      	b.n	800ca2c <_vfiprintf_r+0x3c4>
 800cc70:	46a0      	mov	r8, r4
 800cc72:	f01a 0510 	ands.w	r5, sl, #16
 800cc76:	f858 4b04 	ldr.w	r4, [r8], #4
 800cc7a:	d001      	beq.n	800cc80 <_vfiprintf_r+0x618>
 800cc7c:	461d      	mov	r5, r3
 800cc7e:	e7f5      	b.n	800cc6c <_vfiprintf_r+0x604>
 800cc80:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800cc84:	d001      	beq.n	800cc8a <_vfiprintf_r+0x622>
 800cc86:	b2a4      	uxth	r4, r4
 800cc88:	e7f0      	b.n	800cc6c <_vfiprintf_r+0x604>
 800cc8a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800cc8e:	d0ed      	beq.n	800cc6c <_vfiprintf_r+0x604>
 800cc90:	b2e4      	uxtb	r4, r4
 800cc92:	e7f3      	b.n	800cc7c <_vfiprintf_r+0x614>
 800cc94:	4a1f      	ldr	r2, [pc, #124]	; (800cd14 <_vfiprintf_r+0x6ac>)
 800cc96:	9205      	str	r2, [sp, #20]
 800cc98:	f01a 0220 	ands.w	r2, sl, #32
 800cc9c:	d018      	beq.n	800ccd0 <_vfiprintf_r+0x668>
 800cc9e:	3407      	adds	r4, #7
 800cca0:	f024 0207 	bic.w	r2, r4, #7
 800cca4:	4690      	mov	r8, r2
 800cca6:	6855      	ldr	r5, [r2, #4]
 800cca8:	f858 4b08 	ldr.w	r4, [r8], #8
 800ccac:	f01a 0f01 	tst.w	sl, #1
 800ccb0:	d009      	beq.n	800ccc6 <_vfiprintf_r+0x65e>
 800ccb2:	ea54 0205 	orrs.w	r2, r4, r5
 800ccb6:	bf1f      	itttt	ne
 800ccb8:	2230      	movne	r2, #48	; 0x30
 800ccba:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800ccbe:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800ccc2:	f04a 0a02 	orrne.w	sl, sl, #2
 800ccc6:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800ccca:	e6e3      	b.n	800ca94 <_vfiprintf_r+0x42c>
 800cccc:	4a0e      	ldr	r2, [pc, #56]	; (800cd08 <_vfiprintf_r+0x6a0>)
 800ccce:	e7e2      	b.n	800cc96 <_vfiprintf_r+0x62e>
 800ccd0:	46a0      	mov	r8, r4
 800ccd2:	f01a 0510 	ands.w	r5, sl, #16
 800ccd6:	f858 4b04 	ldr.w	r4, [r8], #4
 800ccda:	d001      	beq.n	800cce0 <_vfiprintf_r+0x678>
 800ccdc:	4615      	mov	r5, r2
 800ccde:	e7e5      	b.n	800ccac <_vfiprintf_r+0x644>
 800cce0:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800cce4:	d001      	beq.n	800ccea <_vfiprintf_r+0x682>
 800cce6:	b2a4      	uxth	r4, r4
 800cce8:	e7e0      	b.n	800ccac <_vfiprintf_r+0x644>
 800ccea:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800ccee:	d0dd      	beq.n	800ccac <_vfiprintf_r+0x644>
 800ccf0:	b2e4      	uxtb	r4, r4
 800ccf2:	e7f3      	b.n	800ccdc <_vfiprintf_r+0x674>
 800ccf4:	2c0a      	cmp	r4, #10
 800ccf6:	f175 0300 	sbcs.w	r3, r5, #0
 800ccfa:	d20d      	bcs.n	800cd18 <_vfiprintf_r+0x6b0>
 800ccfc:	3430      	adds	r4, #48	; 0x30
 800ccfe:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800cd02:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 800cd06:	e135      	b.n	800cf74 <_vfiprintf_r+0x90c>
 800cd08:	0800eb54 	.word	0x0800eb54
 800cd0c:	0800ec39 	.word	0x0800ec39
 800cd10:	0800ec49 	.word	0x0800ec49
 800cd14:	0800eb65 	.word	0x0800eb65
 800cd18:	ab3a      	add	r3, sp, #232	; 0xe8
 800cd1a:	9308      	str	r3, [sp, #32]
 800cd1c:	9b04      	ldr	r3, [sp, #16]
 800cd1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd22:	f04f 0a00 	mov.w	sl, #0
 800cd26:	9309      	str	r3, [sp, #36]	; 0x24
 800cd28:	220a      	movs	r2, #10
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	4629      	mov	r1, r5
 800cd30:	f7f3 ff92 	bl	8000c58 <__aeabi_uldivmod>
 800cd34:	9b08      	ldr	r3, [sp, #32]
 800cd36:	3230      	adds	r2, #48	; 0x30
 800cd38:	f103 3bff 	add.w	fp, r3, #4294967295
 800cd3c:	f803 2c01 	strb.w	r2, [r3, #-1]
 800cd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cd46:	f10a 0a01 	add.w	sl, sl, #1
 800cd4a:	b1d3      	cbz	r3, 800cd82 <_vfiprintf_r+0x71a>
 800cd4c:	9b06      	ldr	r3, [sp, #24]
 800cd4e:	781a      	ldrb	r2, [r3, #0]
 800cd50:	4552      	cmp	r2, sl
 800cd52:	d116      	bne.n	800cd82 <_vfiprintf_r+0x71a>
 800cd54:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800cd58:	d013      	beq.n	800cd82 <_vfiprintf_r+0x71a>
 800cd5a:	2c0a      	cmp	r4, #10
 800cd5c:	f175 0200 	sbcs.w	r2, r5, #0
 800cd60:	d30f      	bcc.n	800cd82 <_vfiprintf_r+0x71a>
 800cd62:	9b07      	ldr	r3, [sp, #28]
 800cd64:	ebab 0b03 	sub.w	fp, fp, r3
 800cd68:	461a      	mov	r2, r3
 800cd6a:	ee18 1a10 	vmov	r1, s16
 800cd6e:	4658      	mov	r0, fp
 800cd70:	f7fe fc47 	bl	800b602 <strncpy>
 800cd74:	9b06      	ldr	r3, [sp, #24]
 800cd76:	785a      	ldrb	r2, [r3, #1]
 800cd78:	b16a      	cbz	r2, 800cd96 <_vfiprintf_r+0x72e>
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	9306      	str	r3, [sp, #24]
 800cd7e:	f04f 0a00 	mov.w	sl, #0
 800cd82:	2c0a      	cmp	r4, #10
 800cd84:	f175 0500 	sbcs.w	r5, r5, #0
 800cd88:	f0c0 80f4 	bcc.w	800cf74 <_vfiprintf_r+0x90c>
 800cd8c:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 800cd90:	f8cd b020 	str.w	fp, [sp, #32]
 800cd94:	e7c8      	b.n	800cd28 <_vfiprintf_r+0x6c0>
 800cd96:	4692      	mov	sl, r2
 800cd98:	e7f3      	b.n	800cd82 <_vfiprintf_r+0x71a>
 800cd9a:	f004 020f 	and.w	r2, r4, #15
 800cd9e:	9b05      	ldr	r3, [sp, #20]
 800cda0:	0924      	lsrs	r4, r4, #4
 800cda2:	5c9a      	ldrb	r2, [r3, r2]
 800cda4:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800cda8:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800cdac:	092d      	lsrs	r5, r5, #4
 800cdae:	ea54 0205 	orrs.w	r2, r4, r5
 800cdb2:	d1f2      	bne.n	800cd9a <_vfiprintf_r+0x732>
 800cdb4:	e0de      	b.n	800cf74 <_vfiprintf_r+0x90c>
 800cdb6:	b933      	cbnz	r3, 800cdc6 <_vfiprintf_r+0x75e>
 800cdb8:	f01a 0f01 	tst.w	sl, #1
 800cdbc:	d003      	beq.n	800cdc6 <_vfiprintf_r+0x75e>
 800cdbe:	2330      	movs	r3, #48	; 0x30
 800cdc0:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800cdc4:	e79d      	b.n	800cd02 <_vfiprintf_r+0x69a>
 800cdc6:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800cdca:	e0d3      	b.n	800cf74 <_vfiprintf_r+0x90c>
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f000 809f 	beq.w	800cf10 <_vfiprintf_r+0x8a8>
 800cdd2:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800cddc:	46a0      	mov	r8, r4
 800cdde:	e5c0      	b.n	800c962 <_vfiprintf_r+0x2fa>
 800cde0:	4605      	mov	r5, r0
 800cde2:	e66e      	b.n	800cac2 <_vfiprintf_r+0x45a>
 800cde4:	2110      	movs	r1, #16
 800cde6:	6071      	str	r1, [r6, #4]
 800cde8:	2a07      	cmp	r2, #7
 800cdea:	4461      	add	r1, ip
 800cdec:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800cdf0:	dd08      	ble.n	800ce04 <_vfiprintf_r+0x79c>
 800cdf2:	aa0e      	add	r2, sp, #56	; 0x38
 800cdf4:	4639      	mov	r1, r7
 800cdf6:	4648      	mov	r0, r9
 800cdf8:	f7ff fc03 	bl	800c602 <__sprint_r>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d166      	bne.n	800cece <_vfiprintf_r+0x866>
 800ce00:	4b60      	ldr	r3, [pc, #384]	; (800cf84 <_vfiprintf_r+0x91c>)
 800ce02:	a811      	add	r0, sp, #68	; 0x44
 800ce04:	3c10      	subs	r4, #16
 800ce06:	4606      	mov	r6, r0
 800ce08:	e676      	b.n	800caf8 <_vfiprintf_r+0x490>
 800ce0a:	4606      	mov	r6, r0
 800ce0c:	e68e      	b.n	800cb2c <_vfiprintf_r+0x4c4>
 800ce0e:	aa0e      	add	r2, sp, #56	; 0x38
 800ce10:	4639      	mov	r1, r7
 800ce12:	4648      	mov	r0, r9
 800ce14:	f7ff fbf5 	bl	800c602 <__sprint_r>
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	d158      	bne.n	800cece <_vfiprintf_r+0x866>
 800ce1c:	ae11      	add	r6, sp, #68	; 0x44
 800ce1e:	e697      	b.n	800cb50 <_vfiprintf_r+0x4e8>
 800ce20:	aa0e      	add	r2, sp, #56	; 0x38
 800ce22:	4639      	mov	r1, r7
 800ce24:	4648      	mov	r0, r9
 800ce26:	f7ff fbec 	bl	800c602 <__sprint_r>
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	d14f      	bne.n	800cece <_vfiprintf_r+0x866>
 800ce2e:	ae11      	add	r6, sp, #68	; 0x44
 800ce30:	e69e      	b.n	800cb70 <_vfiprintf_r+0x508>
 800ce32:	2110      	movs	r1, #16
 800ce34:	6071      	str	r1, [r6, #4]
 800ce36:	2a07      	cmp	r2, #7
 800ce38:	4461      	add	r1, ip
 800ce3a:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800ce3e:	dd08      	ble.n	800ce52 <_vfiprintf_r+0x7ea>
 800ce40:	aa0e      	add	r2, sp, #56	; 0x38
 800ce42:	4639      	mov	r1, r7
 800ce44:	4648      	mov	r0, r9
 800ce46:	f7ff fbdc 	bl	800c602 <__sprint_r>
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	d13f      	bne.n	800cece <_vfiprintf_r+0x866>
 800ce4e:	4b4e      	ldr	r3, [pc, #312]	; (800cf88 <_vfiprintf_r+0x920>)
 800ce50:	a811      	add	r0, sp, #68	; 0x44
 800ce52:	3c10      	subs	r4, #16
 800ce54:	4606      	mov	r6, r0
 800ce56:	e694      	b.n	800cb82 <_vfiprintf_r+0x51a>
 800ce58:	4606      	mov	r6, r0
 800ce5a:	e6ac      	b.n	800cbb6 <_vfiprintf_r+0x54e>
 800ce5c:	3110      	adds	r1, #16
 800ce5e:	2a07      	cmp	r2, #7
 800ce60:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800ce64:	6073      	str	r3, [r6, #4]
 800ce66:	dd07      	ble.n	800ce78 <_vfiprintf_r+0x810>
 800ce68:	aa0e      	add	r2, sp, #56	; 0x38
 800ce6a:	4639      	mov	r1, r7
 800ce6c:	4648      	mov	r0, r9
 800ce6e:	f7ff fbc8 	bl	800c602 <__sprint_r>
 800ce72:	bb60      	cbnz	r0, 800cece <_vfiprintf_r+0x866>
 800ce74:	a811      	add	r0, sp, #68	; 0x44
 800ce76:	2310      	movs	r3, #16
 800ce78:	3c10      	subs	r4, #16
 800ce7a:	4606      	mov	r6, r0
 800ce7c:	e6a1      	b.n	800cbc2 <_vfiprintf_r+0x55a>
 800ce7e:	4606      	mov	r6, r0
 800ce80:	e6b9      	b.n	800cbf6 <_vfiprintf_r+0x58e>
 800ce82:	aa0e      	add	r2, sp, #56	; 0x38
 800ce84:	4639      	mov	r1, r7
 800ce86:	4648      	mov	r0, r9
 800ce88:	f7ff fbbb 	bl	800c602 <__sprint_r>
 800ce8c:	b9f8      	cbnz	r0, 800cece <_vfiprintf_r+0x866>
 800ce8e:	ab11      	add	r3, sp, #68	; 0x44
 800ce90:	e6c1      	b.n	800cc16 <_vfiprintf_r+0x5ae>
 800ce92:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800ce96:	1a54      	subs	r4, r2, r1
 800ce98:	2c00      	cmp	r4, #0
 800ce9a:	f77f aec0 	ble.w	800cc1e <_vfiprintf_r+0x5b6>
 800ce9e:	4d39      	ldr	r5, [pc, #228]	; (800cf84 <_vfiprintf_r+0x91c>)
 800cea0:	2610      	movs	r6, #16
 800cea2:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800cea6:	2c10      	cmp	r4, #16
 800cea8:	f102 0201 	add.w	r2, r2, #1
 800ceac:	601d      	str	r5, [r3, #0]
 800ceae:	dc1d      	bgt.n	800ceec <_vfiprintf_r+0x884>
 800ceb0:	605c      	str	r4, [r3, #4]
 800ceb2:	2a07      	cmp	r2, #7
 800ceb4:	440c      	add	r4, r1
 800ceb6:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800ceba:	f77f aeb0 	ble.w	800cc1e <_vfiprintf_r+0x5b6>
 800cebe:	aa0e      	add	r2, sp, #56	; 0x38
 800cec0:	4639      	mov	r1, r7
 800cec2:	4648      	mov	r0, r9
 800cec4:	f7ff fb9d 	bl	800c602 <__sprint_r>
 800cec8:	2800      	cmp	r0, #0
 800ceca:	f43f aea8 	beq.w	800cc1e <_vfiprintf_r+0x5b6>
 800cece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ced0:	07d9      	lsls	r1, r3, #31
 800ced2:	d405      	bmi.n	800cee0 <_vfiprintf_r+0x878>
 800ced4:	89bb      	ldrh	r3, [r7, #12]
 800ced6:	059a      	lsls	r2, r3, #22
 800ced8:	d402      	bmi.n	800cee0 <_vfiprintf_r+0x878>
 800ceda:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cedc:	f7fc f9d1 	bl	8009282 <__retarget_lock_release_recursive>
 800cee0:	89bb      	ldrh	r3, [r7, #12]
 800cee2:	065b      	lsls	r3, r3, #25
 800cee4:	f57f abf3 	bpl.w	800c6ce <_vfiprintf_r+0x66>
 800cee8:	f7ff bbee 	b.w	800c6c8 <_vfiprintf_r+0x60>
 800ceec:	3110      	adds	r1, #16
 800ceee:	2a07      	cmp	r2, #7
 800cef0:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800cef4:	605e      	str	r6, [r3, #4]
 800cef6:	dc02      	bgt.n	800cefe <_vfiprintf_r+0x896>
 800cef8:	3308      	adds	r3, #8
 800cefa:	3c10      	subs	r4, #16
 800cefc:	e7d1      	b.n	800cea2 <_vfiprintf_r+0x83a>
 800cefe:	aa0e      	add	r2, sp, #56	; 0x38
 800cf00:	4639      	mov	r1, r7
 800cf02:	4648      	mov	r0, r9
 800cf04:	f7ff fb7d 	bl	800c602 <__sprint_r>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d1e0      	bne.n	800cece <_vfiprintf_r+0x866>
 800cf0c:	ab11      	add	r3, sp, #68	; 0x44
 800cf0e:	e7f4      	b.n	800cefa <_vfiprintf_r+0x892>
 800cf10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf12:	b913      	cbnz	r3, 800cf1a <_vfiprintf_r+0x8b2>
 800cf14:	2300      	movs	r3, #0
 800cf16:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf18:	e7d9      	b.n	800cece <_vfiprintf_r+0x866>
 800cf1a:	aa0e      	add	r2, sp, #56	; 0x38
 800cf1c:	4639      	mov	r1, r7
 800cf1e:	4648      	mov	r0, r9
 800cf20:	f7ff fb6f 	bl	800c602 <__sprint_r>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	d0f5      	beq.n	800cf14 <_vfiprintf_r+0x8ac>
 800cf28:	e7d1      	b.n	800cece <_vfiprintf_r+0x866>
 800cf2a:	ea54 0205 	orrs.w	r2, r4, r5
 800cf2e:	f8cd a010 	str.w	sl, [sp, #16]
 800cf32:	f43f ad8d 	beq.w	800ca50 <_vfiprintf_r+0x3e8>
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	f43f aedc 	beq.w	800ccf4 <_vfiprintf_r+0x68c>
 800cf3c:	2b02      	cmp	r3, #2
 800cf3e:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800cf42:	f43f af2a 	beq.w	800cd9a <_vfiprintf_r+0x732>
 800cf46:	f004 0207 	and.w	r2, r4, #7
 800cf4a:	08e4      	lsrs	r4, r4, #3
 800cf4c:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800cf50:	08ed      	lsrs	r5, r5, #3
 800cf52:	3230      	adds	r2, #48	; 0x30
 800cf54:	ea54 0005 	orrs.w	r0, r4, r5
 800cf58:	4659      	mov	r1, fp
 800cf5a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800cf5e:	d1f2      	bne.n	800cf46 <_vfiprintf_r+0x8de>
 800cf60:	9b04      	ldr	r3, [sp, #16]
 800cf62:	07d8      	lsls	r0, r3, #31
 800cf64:	d506      	bpl.n	800cf74 <_vfiprintf_r+0x90c>
 800cf66:	2a30      	cmp	r2, #48	; 0x30
 800cf68:	d004      	beq.n	800cf74 <_vfiprintf_r+0x90c>
 800cf6a:	2230      	movs	r2, #48	; 0x30
 800cf6c:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800cf70:	f1a1 0b02 	sub.w	fp, r1, #2
 800cf74:	ab3a      	add	r3, sp, #232	; 0xe8
 800cf76:	eba3 030b 	sub.w	r3, r3, fp
 800cf7a:	9d00      	ldr	r5, [sp, #0]
 800cf7c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	e59e      	b.n	800cac2 <_vfiprintf_r+0x45a>
 800cf84:	0800ec39 	.word	0x0800ec39
 800cf88:	0800ec49 	.word	0x0800ec49

0800cf8c <__sbprintf>:
 800cf8c:	b570      	push	{r4, r5, r6, lr}
 800cf8e:	460c      	mov	r4, r1
 800cf90:	8989      	ldrh	r1, [r1, #12]
 800cf92:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800cf96:	f021 0102 	bic.w	r1, r1, #2
 800cf9a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800cf9e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800cfa0:	911b      	str	r1, [sp, #108]	; 0x6c
 800cfa2:	89e1      	ldrh	r1, [r4, #14]
 800cfa4:	f8ad 1016 	strh.w	r1, [sp, #22]
 800cfa8:	69e1      	ldr	r1, [r4, #28]
 800cfaa:	9109      	str	r1, [sp, #36]	; 0x24
 800cfac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cfae:	910b      	str	r1, [sp, #44]	; 0x2c
 800cfb0:	a91c      	add	r1, sp, #112	; 0x70
 800cfb2:	9102      	str	r1, [sp, #8]
 800cfb4:	9106      	str	r1, [sp, #24]
 800cfb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cfba:	4606      	mov	r6, r0
 800cfbc:	9104      	str	r1, [sp, #16]
 800cfbe:	9107      	str	r1, [sp, #28]
 800cfc0:	a818      	add	r0, sp, #96	; 0x60
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	e9cd 3200 	strd	r3, r2, [sp]
 800cfc8:	9108      	str	r1, [sp, #32]
 800cfca:	f7fc f957 	bl	800927c <__retarget_lock_init_recursive>
 800cfce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cfd2:	a902      	add	r1, sp, #8
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	f7ff fb47 	bl	800c668 <_vfiprintf_r>
 800cfda:	1e05      	subs	r5, r0, #0
 800cfdc:	db07      	blt.n	800cfee <__sbprintf+0x62>
 800cfde:	a902      	add	r1, sp, #8
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	f7fe fae9 	bl	800b5b8 <_fflush_r>
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	bf18      	it	ne
 800cfea:	f04f 35ff 	movne.w	r5, #4294967295
 800cfee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800cff2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800cff4:	065b      	lsls	r3, r3, #25
 800cff6:	bf42      	ittt	mi
 800cff8:	89a3      	ldrhmi	r3, [r4, #12]
 800cffa:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800cffe:	81a3      	strhmi	r3, [r4, #12]
 800d000:	f7fc f93d 	bl	800927e <__retarget_lock_close_recursive>
 800d004:	4628      	mov	r0, r5
 800d006:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800d00a:	bd70      	pop	{r4, r5, r6, pc}

0800d00c <__sfvwrite_r>:
 800d00c:	6893      	ldr	r3, [r2, #8]
 800d00e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d012:	4606      	mov	r6, r0
 800d014:	460c      	mov	r4, r1
 800d016:	4691      	mov	r9, r2
 800d018:	b91b      	cbnz	r3, 800d022 <__sfvwrite_r+0x16>
 800d01a:	2000      	movs	r0, #0
 800d01c:	b003      	add	sp, #12
 800d01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d022:	898b      	ldrh	r3, [r1, #12]
 800d024:	0718      	lsls	r0, r3, #28
 800d026:	d54f      	bpl.n	800d0c8 <__sfvwrite_r+0xbc>
 800d028:	690b      	ldr	r3, [r1, #16]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d04c      	beq.n	800d0c8 <__sfvwrite_r+0xbc>
 800d02e:	89a3      	ldrh	r3, [r4, #12]
 800d030:	f8d9 8000 	ldr.w	r8, [r9]
 800d034:	f013 0702 	ands.w	r7, r3, #2
 800d038:	d16b      	bne.n	800d112 <__sfvwrite_r+0x106>
 800d03a:	f013 0301 	ands.w	r3, r3, #1
 800d03e:	f000 809b 	beq.w	800d178 <__sfvwrite_r+0x16c>
 800d042:	4638      	mov	r0, r7
 800d044:	46ba      	mov	sl, r7
 800d046:	46bb      	mov	fp, r7
 800d048:	f1bb 0f00 	cmp.w	fp, #0
 800d04c:	f000 8102 	beq.w	800d254 <__sfvwrite_r+0x248>
 800d050:	b950      	cbnz	r0, 800d068 <__sfvwrite_r+0x5c>
 800d052:	465a      	mov	r2, fp
 800d054:	210a      	movs	r1, #10
 800d056:	4650      	mov	r0, sl
 800d058:	f7f3 f8ca 	bl	80001f0 <memchr>
 800d05c:	2800      	cmp	r0, #0
 800d05e:	f000 80ff 	beq.w	800d260 <__sfvwrite_r+0x254>
 800d062:	3001      	adds	r0, #1
 800d064:	eba0 070a 	sub.w	r7, r0, sl
 800d068:	6820      	ldr	r0, [r4, #0]
 800d06a:	6921      	ldr	r1, [r4, #16]
 800d06c:	68a5      	ldr	r5, [r4, #8]
 800d06e:	6963      	ldr	r3, [r4, #20]
 800d070:	455f      	cmp	r7, fp
 800d072:	463a      	mov	r2, r7
 800d074:	bf28      	it	cs
 800d076:	465a      	movcs	r2, fp
 800d078:	4288      	cmp	r0, r1
 800d07a:	f240 80f4 	bls.w	800d266 <__sfvwrite_r+0x25a>
 800d07e:	441d      	add	r5, r3
 800d080:	42aa      	cmp	r2, r5
 800d082:	f340 80f0 	ble.w	800d266 <__sfvwrite_r+0x25a>
 800d086:	4651      	mov	r1, sl
 800d088:	462a      	mov	r2, r5
 800d08a:	f000 f9cc 	bl	800d426 <memmove>
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	442b      	add	r3, r5
 800d092:	6023      	str	r3, [r4, #0]
 800d094:	4621      	mov	r1, r4
 800d096:	4630      	mov	r0, r6
 800d098:	f7fe fa8e 	bl	800b5b8 <_fflush_r>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d166      	bne.n	800d16e <__sfvwrite_r+0x162>
 800d0a0:	1b7f      	subs	r7, r7, r5
 800d0a2:	f040 80f8 	bne.w	800d296 <__sfvwrite_r+0x28a>
 800d0a6:	4621      	mov	r1, r4
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f7fe fa85 	bl	800b5b8 <_fflush_r>
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	d15d      	bne.n	800d16e <__sfvwrite_r+0x162>
 800d0b2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d0b6:	1b5b      	subs	r3, r3, r5
 800d0b8:	44aa      	add	sl, r5
 800d0ba:	ebab 0b05 	sub.w	fp, fp, r5
 800d0be:	f8c9 3008 	str.w	r3, [r9, #8]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1c0      	bne.n	800d048 <__sfvwrite_r+0x3c>
 800d0c6:	e7a8      	b.n	800d01a <__sfvwrite_r+0xe>
 800d0c8:	4621      	mov	r1, r4
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	f000 f8e8 	bl	800d2a0 <__swsetup_r>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d0ac      	beq.n	800d02e <__sfvwrite_r+0x22>
 800d0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d8:	e7a0      	b.n	800d01c <__sfvwrite_r+0x10>
 800d0da:	e9d8 a500 	ldrd	sl, r5, [r8]
 800d0de:	f108 0808 	add.w	r8, r8, #8
 800d0e2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800d0e6:	69e1      	ldr	r1, [r4, #28]
 800d0e8:	2d00      	cmp	r5, #0
 800d0ea:	d0f6      	beq.n	800d0da <__sfvwrite_r+0xce>
 800d0ec:	42bd      	cmp	r5, r7
 800d0ee:	462b      	mov	r3, r5
 800d0f0:	4652      	mov	r2, sl
 800d0f2:	bf28      	it	cs
 800d0f4:	463b      	movcs	r3, r7
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	47d8      	blx	fp
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	dd37      	ble.n	800d16e <__sfvwrite_r+0x162>
 800d0fe:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d102:	1a1b      	subs	r3, r3, r0
 800d104:	4482      	add	sl, r0
 800d106:	1a2d      	subs	r5, r5, r0
 800d108:	f8c9 3008 	str.w	r3, [r9, #8]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d1e8      	bne.n	800d0e2 <__sfvwrite_r+0xd6>
 800d110:	e783      	b.n	800d01a <__sfvwrite_r+0xe>
 800d112:	f04f 0a00 	mov.w	sl, #0
 800d116:	4f61      	ldr	r7, [pc, #388]	; (800d29c <__sfvwrite_r+0x290>)
 800d118:	4655      	mov	r5, sl
 800d11a:	e7e2      	b.n	800d0e2 <__sfvwrite_r+0xd6>
 800d11c:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800d120:	f108 0808 	add.w	r8, r8, #8
 800d124:	6820      	ldr	r0, [r4, #0]
 800d126:	68a2      	ldr	r2, [r4, #8]
 800d128:	f1ba 0f00 	cmp.w	sl, #0
 800d12c:	d0f6      	beq.n	800d11c <__sfvwrite_r+0x110>
 800d12e:	89a3      	ldrh	r3, [r4, #12]
 800d130:	0599      	lsls	r1, r3, #22
 800d132:	d563      	bpl.n	800d1fc <__sfvwrite_r+0x1f0>
 800d134:	4552      	cmp	r2, sl
 800d136:	d836      	bhi.n	800d1a6 <__sfvwrite_r+0x19a>
 800d138:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800d13c:	d033      	beq.n	800d1a6 <__sfvwrite_r+0x19a>
 800d13e:	6921      	ldr	r1, [r4, #16]
 800d140:	6965      	ldr	r5, [r4, #20]
 800d142:	eba0 0b01 	sub.w	fp, r0, r1
 800d146:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d14a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d14e:	f10b 0201 	add.w	r2, fp, #1
 800d152:	106d      	asrs	r5, r5, #1
 800d154:	4452      	add	r2, sl
 800d156:	4295      	cmp	r5, r2
 800d158:	bf38      	it	cc
 800d15a:	4615      	movcc	r5, r2
 800d15c:	055b      	lsls	r3, r3, #21
 800d15e:	d53d      	bpl.n	800d1dc <__sfvwrite_r+0x1d0>
 800d160:	4629      	mov	r1, r5
 800d162:	4630      	mov	r0, r6
 800d164:	f7fc f9c0 	bl	80094e8 <_malloc_r>
 800d168:	b948      	cbnz	r0, 800d17e <__sfvwrite_r+0x172>
 800d16a:	230c      	movs	r3, #12
 800d16c:	6033      	str	r3, [r6, #0]
 800d16e:	89a3      	ldrh	r3, [r4, #12]
 800d170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d174:	81a3      	strh	r3, [r4, #12]
 800d176:	e7ad      	b.n	800d0d4 <__sfvwrite_r+0xc8>
 800d178:	461f      	mov	r7, r3
 800d17a:	469a      	mov	sl, r3
 800d17c:	e7d2      	b.n	800d124 <__sfvwrite_r+0x118>
 800d17e:	465a      	mov	r2, fp
 800d180:	6921      	ldr	r1, [r4, #16]
 800d182:	9001      	str	r0, [sp, #4]
 800d184:	f7fc f87e 	bl	8009284 <memcpy>
 800d188:	89a2      	ldrh	r2, [r4, #12]
 800d18a:	9b01      	ldr	r3, [sp, #4]
 800d18c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800d190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d194:	81a2      	strh	r2, [r4, #12]
 800d196:	6123      	str	r3, [r4, #16]
 800d198:	6165      	str	r5, [r4, #20]
 800d19a:	445b      	add	r3, fp
 800d19c:	eba5 050b 	sub.w	r5, r5, fp
 800d1a0:	6023      	str	r3, [r4, #0]
 800d1a2:	4652      	mov	r2, sl
 800d1a4:	60a5      	str	r5, [r4, #8]
 800d1a6:	4552      	cmp	r2, sl
 800d1a8:	bf28      	it	cs
 800d1aa:	4652      	movcs	r2, sl
 800d1ac:	6820      	ldr	r0, [r4, #0]
 800d1ae:	9201      	str	r2, [sp, #4]
 800d1b0:	4639      	mov	r1, r7
 800d1b2:	f000 f938 	bl	800d426 <memmove>
 800d1b6:	68a3      	ldr	r3, [r4, #8]
 800d1b8:	9a01      	ldr	r2, [sp, #4]
 800d1ba:	1a9b      	subs	r3, r3, r2
 800d1bc:	60a3      	str	r3, [r4, #8]
 800d1be:	6823      	ldr	r3, [r4, #0]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	4655      	mov	r5, sl
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d1ca:	1b5b      	subs	r3, r3, r5
 800d1cc:	442f      	add	r7, r5
 800d1ce:	ebaa 0a05 	sub.w	sl, sl, r5
 800d1d2:	f8c9 3008 	str.w	r3, [r9, #8]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d1a4      	bne.n	800d124 <__sfvwrite_r+0x118>
 800d1da:	e71e      	b.n	800d01a <__sfvwrite_r+0xe>
 800d1dc:	462a      	mov	r2, r5
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f000 f942 	bl	800d468 <_realloc_r>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	d1d5      	bne.n	800d196 <__sfvwrite_r+0x18a>
 800d1ea:	6921      	ldr	r1, [r4, #16]
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	f7fc f8bb 	bl	8009368 <_free_r>
 800d1f2:	89a3      	ldrh	r3, [r4, #12]
 800d1f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1f8:	81a3      	strh	r3, [r4, #12]
 800d1fa:	e7b6      	b.n	800d16a <__sfvwrite_r+0x15e>
 800d1fc:	6923      	ldr	r3, [r4, #16]
 800d1fe:	4283      	cmp	r3, r0
 800d200:	d302      	bcc.n	800d208 <__sfvwrite_r+0x1fc>
 800d202:	6961      	ldr	r1, [r4, #20]
 800d204:	4551      	cmp	r1, sl
 800d206:	d915      	bls.n	800d234 <__sfvwrite_r+0x228>
 800d208:	4552      	cmp	r2, sl
 800d20a:	bf28      	it	cs
 800d20c:	4652      	movcs	r2, sl
 800d20e:	4639      	mov	r1, r7
 800d210:	4615      	mov	r5, r2
 800d212:	f000 f908 	bl	800d426 <memmove>
 800d216:	68a3      	ldr	r3, [r4, #8]
 800d218:	6822      	ldr	r2, [r4, #0]
 800d21a:	1b5b      	subs	r3, r3, r5
 800d21c:	442a      	add	r2, r5
 800d21e:	60a3      	str	r3, [r4, #8]
 800d220:	6022      	str	r2, [r4, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d1cf      	bne.n	800d1c6 <__sfvwrite_r+0x1ba>
 800d226:	4621      	mov	r1, r4
 800d228:	4630      	mov	r0, r6
 800d22a:	f7fe f9c5 	bl	800b5b8 <_fflush_r>
 800d22e:	2800      	cmp	r0, #0
 800d230:	d0c9      	beq.n	800d1c6 <__sfvwrite_r+0x1ba>
 800d232:	e79c      	b.n	800d16e <__sfvwrite_r+0x162>
 800d234:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d238:	459a      	cmp	sl, r3
 800d23a:	bf38      	it	cc
 800d23c:	4653      	movcc	r3, sl
 800d23e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d240:	fb93 f3f1 	sdiv	r3, r3, r1
 800d244:	463a      	mov	r2, r7
 800d246:	434b      	muls	r3, r1
 800d248:	4630      	mov	r0, r6
 800d24a:	69e1      	ldr	r1, [r4, #28]
 800d24c:	47a8      	blx	r5
 800d24e:	1e05      	subs	r5, r0, #0
 800d250:	dcb9      	bgt.n	800d1c6 <__sfvwrite_r+0x1ba>
 800d252:	e78c      	b.n	800d16e <__sfvwrite_r+0x162>
 800d254:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800d258:	2000      	movs	r0, #0
 800d25a:	f108 0808 	add.w	r8, r8, #8
 800d25e:	e6f3      	b.n	800d048 <__sfvwrite_r+0x3c>
 800d260:	f10b 0701 	add.w	r7, fp, #1
 800d264:	e700      	b.n	800d068 <__sfvwrite_r+0x5c>
 800d266:	4293      	cmp	r3, r2
 800d268:	dc08      	bgt.n	800d27c <__sfvwrite_r+0x270>
 800d26a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d26c:	69e1      	ldr	r1, [r4, #28]
 800d26e:	4652      	mov	r2, sl
 800d270:	4630      	mov	r0, r6
 800d272:	47a8      	blx	r5
 800d274:	1e05      	subs	r5, r0, #0
 800d276:	f73f af13 	bgt.w	800d0a0 <__sfvwrite_r+0x94>
 800d27a:	e778      	b.n	800d16e <__sfvwrite_r+0x162>
 800d27c:	4651      	mov	r1, sl
 800d27e:	9201      	str	r2, [sp, #4]
 800d280:	f000 f8d1 	bl	800d426 <memmove>
 800d284:	9a01      	ldr	r2, [sp, #4]
 800d286:	68a3      	ldr	r3, [r4, #8]
 800d288:	1a9b      	subs	r3, r3, r2
 800d28a:	60a3      	str	r3, [r4, #8]
 800d28c:	6823      	ldr	r3, [r4, #0]
 800d28e:	4413      	add	r3, r2
 800d290:	6023      	str	r3, [r4, #0]
 800d292:	4615      	mov	r5, r2
 800d294:	e704      	b.n	800d0a0 <__sfvwrite_r+0x94>
 800d296:	2001      	movs	r0, #1
 800d298:	e70b      	b.n	800d0b2 <__sfvwrite_r+0xa6>
 800d29a:	bf00      	nop
 800d29c:	7ffffc00 	.word	0x7ffffc00

0800d2a0 <__swsetup_r>:
 800d2a0:	b538      	push	{r3, r4, r5, lr}
 800d2a2:	4b2a      	ldr	r3, [pc, #168]	; (800d34c <__swsetup_r+0xac>)
 800d2a4:	4605      	mov	r5, r0
 800d2a6:	6818      	ldr	r0, [r3, #0]
 800d2a8:	460c      	mov	r4, r1
 800d2aa:	b118      	cbz	r0, 800d2b4 <__swsetup_r+0x14>
 800d2ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d2ae:	b90b      	cbnz	r3, 800d2b4 <__swsetup_r+0x14>
 800d2b0:	f7fb fecc 	bl	800904c <__sinit>
 800d2b4:	89a3      	ldrh	r3, [r4, #12]
 800d2b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2ba:	0718      	lsls	r0, r3, #28
 800d2bc:	d422      	bmi.n	800d304 <__swsetup_r+0x64>
 800d2be:	06d9      	lsls	r1, r3, #27
 800d2c0:	d407      	bmi.n	800d2d2 <__swsetup_r+0x32>
 800d2c2:	2309      	movs	r3, #9
 800d2c4:	602b      	str	r3, [r5, #0]
 800d2c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2ca:	81a3      	strh	r3, [r4, #12]
 800d2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2d0:	e034      	b.n	800d33c <__swsetup_r+0x9c>
 800d2d2:	0758      	lsls	r0, r3, #29
 800d2d4:	d512      	bpl.n	800d2fc <__swsetup_r+0x5c>
 800d2d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d2d8:	b141      	cbz	r1, 800d2ec <__swsetup_r+0x4c>
 800d2da:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d2de:	4299      	cmp	r1, r3
 800d2e0:	d002      	beq.n	800d2e8 <__swsetup_r+0x48>
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	f7fc f840 	bl	8009368 <_free_r>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	6323      	str	r3, [r4, #48]	; 0x30
 800d2ec:	89a3      	ldrh	r3, [r4, #12]
 800d2ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d2f2:	81a3      	strh	r3, [r4, #12]
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	6063      	str	r3, [r4, #4]
 800d2f8:	6923      	ldr	r3, [r4, #16]
 800d2fa:	6023      	str	r3, [r4, #0]
 800d2fc:	89a3      	ldrh	r3, [r4, #12]
 800d2fe:	f043 0308 	orr.w	r3, r3, #8
 800d302:	81a3      	strh	r3, [r4, #12]
 800d304:	6923      	ldr	r3, [r4, #16]
 800d306:	b94b      	cbnz	r3, 800d31c <__swsetup_r+0x7c>
 800d308:	89a3      	ldrh	r3, [r4, #12]
 800d30a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d30e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d312:	d003      	beq.n	800d31c <__swsetup_r+0x7c>
 800d314:	4621      	mov	r1, r4
 800d316:	4628      	mov	r0, r5
 800d318:	f000 fa8c 	bl	800d834 <__smakebuf_r>
 800d31c:	89a0      	ldrh	r0, [r4, #12]
 800d31e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d322:	f010 0301 	ands.w	r3, r0, #1
 800d326:	d00a      	beq.n	800d33e <__swsetup_r+0x9e>
 800d328:	2300      	movs	r3, #0
 800d32a:	60a3      	str	r3, [r4, #8]
 800d32c:	6963      	ldr	r3, [r4, #20]
 800d32e:	425b      	negs	r3, r3
 800d330:	61a3      	str	r3, [r4, #24]
 800d332:	6923      	ldr	r3, [r4, #16]
 800d334:	b943      	cbnz	r3, 800d348 <__swsetup_r+0xa8>
 800d336:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d33a:	d1c4      	bne.n	800d2c6 <__swsetup_r+0x26>
 800d33c:	bd38      	pop	{r3, r4, r5, pc}
 800d33e:	0781      	lsls	r1, r0, #30
 800d340:	bf58      	it	pl
 800d342:	6963      	ldrpl	r3, [r4, #20]
 800d344:	60a3      	str	r3, [r4, #8]
 800d346:	e7f4      	b.n	800d332 <__swsetup_r+0x92>
 800d348:	2000      	movs	r0, #0
 800d34a:	e7f7      	b.n	800d33c <__swsetup_r+0x9c>
 800d34c:	20000438 	.word	0x20000438

0800d350 <__fputwc>:
 800d350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d354:	4680      	mov	r8, r0
 800d356:	460e      	mov	r6, r1
 800d358:	4615      	mov	r5, r2
 800d35a:	f7fb ff19 	bl	8009190 <__locale_mb_cur_max>
 800d35e:	2801      	cmp	r0, #1
 800d360:	d11c      	bne.n	800d39c <__fputwc+0x4c>
 800d362:	1e73      	subs	r3, r6, #1
 800d364:	2bfe      	cmp	r3, #254	; 0xfe
 800d366:	d819      	bhi.n	800d39c <__fputwc+0x4c>
 800d368:	f88d 6004 	strb.w	r6, [sp, #4]
 800d36c:	4604      	mov	r4, r0
 800d36e:	2700      	movs	r7, #0
 800d370:	f10d 0904 	add.w	r9, sp, #4
 800d374:	42a7      	cmp	r7, r4
 800d376:	d020      	beq.n	800d3ba <__fputwc+0x6a>
 800d378:	68ab      	ldr	r3, [r5, #8]
 800d37a:	f817 1009 	ldrb.w	r1, [r7, r9]
 800d37e:	3b01      	subs	r3, #1
 800d380:	2b00      	cmp	r3, #0
 800d382:	60ab      	str	r3, [r5, #8]
 800d384:	da04      	bge.n	800d390 <__fputwc+0x40>
 800d386:	69aa      	ldr	r2, [r5, #24]
 800d388:	4293      	cmp	r3, r2
 800d38a:	db1a      	blt.n	800d3c2 <__fputwc+0x72>
 800d38c:	290a      	cmp	r1, #10
 800d38e:	d018      	beq.n	800d3c2 <__fputwc+0x72>
 800d390:	682b      	ldr	r3, [r5, #0]
 800d392:	1c5a      	adds	r2, r3, #1
 800d394:	602a      	str	r2, [r5, #0]
 800d396:	7019      	strb	r1, [r3, #0]
 800d398:	3701      	adds	r7, #1
 800d39a:	e7eb      	b.n	800d374 <__fputwc+0x24>
 800d39c:	a901      	add	r1, sp, #4
 800d39e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800d3a2:	4632      	mov	r2, r6
 800d3a4:	4640      	mov	r0, r8
 800d3a6:	f000 fa07 	bl	800d7b8 <_wcrtomb_r>
 800d3aa:	1c41      	adds	r1, r0, #1
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	d1de      	bne.n	800d36e <__fputwc+0x1e>
 800d3b0:	89ab      	ldrh	r3, [r5, #12]
 800d3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3b6:	81ab      	strh	r3, [r5, #12]
 800d3b8:	4606      	mov	r6, r0
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	b003      	add	sp, #12
 800d3be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3c2:	462a      	mov	r2, r5
 800d3c4:	4640      	mov	r0, r8
 800d3c6:	f000 fa71 	bl	800d8ac <__swbuf_r>
 800d3ca:	1c42      	adds	r2, r0, #1
 800d3cc:	d1e4      	bne.n	800d398 <__fputwc+0x48>
 800d3ce:	4606      	mov	r6, r0
 800d3d0:	e7f3      	b.n	800d3ba <__fputwc+0x6a>

0800d3d2 <_fputwc_r>:
 800d3d2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800d3d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3d6:	4614      	mov	r4, r2
 800d3d8:	07da      	lsls	r2, r3, #31
 800d3da:	4605      	mov	r5, r0
 800d3dc:	d407      	bmi.n	800d3ee <_fputwc_r+0x1c>
 800d3de:	89a3      	ldrh	r3, [r4, #12]
 800d3e0:	059b      	lsls	r3, r3, #22
 800d3e2:	d404      	bmi.n	800d3ee <_fputwc_r+0x1c>
 800d3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3e6:	9101      	str	r1, [sp, #4]
 800d3e8:	f7fb ff4a 	bl	8009280 <__retarget_lock_acquire_recursive>
 800d3ec:	9901      	ldr	r1, [sp, #4]
 800d3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3f2:	0498      	lsls	r0, r3, #18
 800d3f4:	d406      	bmi.n	800d404 <_fputwc_r+0x32>
 800d3f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d3fa:	81a3      	strh	r3, [r4, #12]
 800d3fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d402:	6663      	str	r3, [r4, #100]	; 0x64
 800d404:	4622      	mov	r2, r4
 800d406:	4628      	mov	r0, r5
 800d408:	f7ff ffa2 	bl	800d350 <__fputwc>
 800d40c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d40e:	07da      	lsls	r2, r3, #31
 800d410:	4605      	mov	r5, r0
 800d412:	d405      	bmi.n	800d420 <_fputwc_r+0x4e>
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	059b      	lsls	r3, r3, #22
 800d418:	d402      	bmi.n	800d420 <_fputwc_r+0x4e>
 800d41a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d41c:	f7fb ff31 	bl	8009282 <__retarget_lock_release_recursive>
 800d420:	4628      	mov	r0, r5
 800d422:	b003      	add	sp, #12
 800d424:	bd30      	pop	{r4, r5, pc}

0800d426 <memmove>:
 800d426:	4288      	cmp	r0, r1
 800d428:	b510      	push	{r4, lr}
 800d42a:	eb01 0402 	add.w	r4, r1, r2
 800d42e:	d902      	bls.n	800d436 <memmove+0x10>
 800d430:	4284      	cmp	r4, r0
 800d432:	4623      	mov	r3, r4
 800d434:	d807      	bhi.n	800d446 <memmove+0x20>
 800d436:	1e43      	subs	r3, r0, #1
 800d438:	42a1      	cmp	r1, r4
 800d43a:	d008      	beq.n	800d44e <memmove+0x28>
 800d43c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d440:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d444:	e7f8      	b.n	800d438 <memmove+0x12>
 800d446:	4402      	add	r2, r0
 800d448:	4601      	mov	r1, r0
 800d44a:	428a      	cmp	r2, r1
 800d44c:	d100      	bne.n	800d450 <memmove+0x2a>
 800d44e:	bd10      	pop	{r4, pc}
 800d450:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d454:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d458:	e7f7      	b.n	800d44a <memmove+0x24>

0800d45a <abort>:
 800d45a:	b508      	push	{r3, lr}
 800d45c:	2006      	movs	r0, #6
 800d45e:	f000 fa97 	bl	800d990 <raise>
 800d462:	2001      	movs	r0, #1
 800d464:	f000 fb20 	bl	800daa8 <_exit>

0800d468 <_realloc_r>:
 800d468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46c:	4682      	mov	sl, r0
 800d46e:	460c      	mov	r4, r1
 800d470:	b929      	cbnz	r1, 800d47e <_realloc_r+0x16>
 800d472:	4611      	mov	r1, r2
 800d474:	b003      	add	sp, #12
 800d476:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47a:	f7fc b835 	b.w	80094e8 <_malloc_r>
 800d47e:	9201      	str	r2, [sp, #4]
 800d480:	f7fc fa7e 	bl	8009980 <__malloc_lock>
 800d484:	9a01      	ldr	r2, [sp, #4]
 800d486:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800d48a:	f102 080b 	add.w	r8, r2, #11
 800d48e:	f1b8 0f16 	cmp.w	r8, #22
 800d492:	d90b      	bls.n	800d4ac <_realloc_r+0x44>
 800d494:	f038 0807 	bics.w	r8, r8, #7
 800d498:	d50a      	bpl.n	800d4b0 <_realloc_r+0x48>
 800d49a:	230c      	movs	r3, #12
 800d49c:	f8ca 3000 	str.w	r3, [sl]
 800d4a0:	f04f 0b00 	mov.w	fp, #0
 800d4a4:	4658      	mov	r0, fp
 800d4a6:	b003      	add	sp, #12
 800d4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ac:	f04f 0810 	mov.w	r8, #16
 800d4b0:	4590      	cmp	r8, r2
 800d4b2:	d3f2      	bcc.n	800d49a <_realloc_r+0x32>
 800d4b4:	f025 0603 	bic.w	r6, r5, #3
 800d4b8:	45b0      	cmp	r8, r6
 800d4ba:	f1a4 0908 	sub.w	r9, r4, #8
 800d4be:	f340 8170 	ble.w	800d7a2 <_realloc_r+0x33a>
 800d4c2:	499c      	ldr	r1, [pc, #624]	; (800d734 <_realloc_r+0x2cc>)
 800d4c4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800d4c8:	eb09 0306 	add.w	r3, r9, r6
 800d4cc:	459c      	cmp	ip, r3
 800d4ce:	6859      	ldr	r1, [r3, #4]
 800d4d0:	d005      	beq.n	800d4de <_realloc_r+0x76>
 800d4d2:	f021 0001 	bic.w	r0, r1, #1
 800d4d6:	4418      	add	r0, r3
 800d4d8:	6840      	ldr	r0, [r0, #4]
 800d4da:	07c7      	lsls	r7, r0, #31
 800d4dc:	d447      	bmi.n	800d56e <_realloc_r+0x106>
 800d4de:	f021 0103 	bic.w	r1, r1, #3
 800d4e2:	459c      	cmp	ip, r3
 800d4e4:	eb06 0701 	add.w	r7, r6, r1
 800d4e8:	d119      	bne.n	800d51e <_realloc_r+0xb6>
 800d4ea:	f108 0010 	add.w	r0, r8, #16
 800d4ee:	42b8      	cmp	r0, r7
 800d4f0:	dc3f      	bgt.n	800d572 <_realloc_r+0x10a>
 800d4f2:	eb09 0308 	add.w	r3, r9, r8
 800d4f6:	4a8f      	ldr	r2, [pc, #572]	; (800d734 <_realloc_r+0x2cc>)
 800d4f8:	eba7 0708 	sub.w	r7, r7, r8
 800d4fc:	f047 0701 	orr.w	r7, r7, #1
 800d500:	6093      	str	r3, [r2, #8]
 800d502:	605f      	str	r7, [r3, #4]
 800d504:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d508:	f003 0301 	and.w	r3, r3, #1
 800d50c:	ea43 0308 	orr.w	r3, r3, r8
 800d510:	f844 3c04 	str.w	r3, [r4, #-4]
 800d514:	4650      	mov	r0, sl
 800d516:	f7fc fa39 	bl	800998c <__malloc_unlock>
 800d51a:	46a3      	mov	fp, r4
 800d51c:	e7c2      	b.n	800d4a4 <_realloc_r+0x3c>
 800d51e:	45b8      	cmp	r8, r7
 800d520:	dc27      	bgt.n	800d572 <_realloc_r+0x10a>
 800d522:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800d526:	60da      	str	r2, [r3, #12]
 800d528:	6093      	str	r3, [r2, #8]
 800d52a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d52e:	eba7 0008 	sub.w	r0, r7, r8
 800d532:	280f      	cmp	r0, #15
 800d534:	f003 0301 	and.w	r3, r3, #1
 800d538:	eb09 0207 	add.w	r2, r9, r7
 800d53c:	f240 8133 	bls.w	800d7a6 <_realloc_r+0x33e>
 800d540:	eb09 0108 	add.w	r1, r9, r8
 800d544:	ea48 0303 	orr.w	r3, r8, r3
 800d548:	f040 0001 	orr.w	r0, r0, #1
 800d54c:	f8c9 3004 	str.w	r3, [r9, #4]
 800d550:	6048      	str	r0, [r1, #4]
 800d552:	6853      	ldr	r3, [r2, #4]
 800d554:	f043 0301 	orr.w	r3, r3, #1
 800d558:	6053      	str	r3, [r2, #4]
 800d55a:	3108      	adds	r1, #8
 800d55c:	4650      	mov	r0, sl
 800d55e:	f7fb ff03 	bl	8009368 <_free_r>
 800d562:	4650      	mov	r0, sl
 800d564:	f7fc fa12 	bl	800998c <__malloc_unlock>
 800d568:	f109 0b08 	add.w	fp, r9, #8
 800d56c:	e79a      	b.n	800d4a4 <_realloc_r+0x3c>
 800d56e:	2100      	movs	r1, #0
 800d570:	460b      	mov	r3, r1
 800d572:	07e8      	lsls	r0, r5, #31
 800d574:	f100 80c6 	bmi.w	800d704 <_realloc_r+0x29c>
 800d578:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800d57c:	eba9 0505 	sub.w	r5, r9, r5
 800d580:	6868      	ldr	r0, [r5, #4]
 800d582:	f020 0003 	bic.w	r0, r0, #3
 800d586:	eb00 0b06 	add.w	fp, r0, r6
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f000 8086 	beq.w	800d69c <_realloc_r+0x234>
 800d590:	459c      	cmp	ip, r3
 800d592:	eb01 070b 	add.w	r7, r1, fp
 800d596:	d149      	bne.n	800d62c <_realloc_r+0x1c4>
 800d598:	f108 0310 	add.w	r3, r8, #16
 800d59c:	42bb      	cmp	r3, r7
 800d59e:	dc7d      	bgt.n	800d69c <_realloc_r+0x234>
 800d5a0:	46ab      	mov	fp, r5
 800d5a2:	68eb      	ldr	r3, [r5, #12]
 800d5a4:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800d5a8:	60d3      	str	r3, [r2, #12]
 800d5aa:	609a      	str	r2, [r3, #8]
 800d5ac:	1f32      	subs	r2, r6, #4
 800d5ae:	2a24      	cmp	r2, #36	; 0x24
 800d5b0:	d837      	bhi.n	800d622 <_realloc_r+0x1ba>
 800d5b2:	2a13      	cmp	r2, #19
 800d5b4:	d933      	bls.n	800d61e <_realloc_r+0x1b6>
 800d5b6:	6823      	ldr	r3, [r4, #0]
 800d5b8:	60ab      	str	r3, [r5, #8]
 800d5ba:	6863      	ldr	r3, [r4, #4]
 800d5bc:	60eb      	str	r3, [r5, #12]
 800d5be:	2a1b      	cmp	r2, #27
 800d5c0:	d81b      	bhi.n	800d5fa <_realloc_r+0x192>
 800d5c2:	3408      	adds	r4, #8
 800d5c4:	f105 0310 	add.w	r3, r5, #16
 800d5c8:	6822      	ldr	r2, [r4, #0]
 800d5ca:	601a      	str	r2, [r3, #0]
 800d5cc:	6862      	ldr	r2, [r4, #4]
 800d5ce:	605a      	str	r2, [r3, #4]
 800d5d0:	68a2      	ldr	r2, [r4, #8]
 800d5d2:	609a      	str	r2, [r3, #8]
 800d5d4:	eb05 0308 	add.w	r3, r5, r8
 800d5d8:	4a56      	ldr	r2, [pc, #344]	; (800d734 <_realloc_r+0x2cc>)
 800d5da:	eba7 0708 	sub.w	r7, r7, r8
 800d5de:	f047 0701 	orr.w	r7, r7, #1
 800d5e2:	6093      	str	r3, [r2, #8]
 800d5e4:	605f      	str	r7, [r3, #4]
 800d5e6:	686b      	ldr	r3, [r5, #4]
 800d5e8:	f003 0301 	and.w	r3, r3, #1
 800d5ec:	ea43 0308 	orr.w	r3, r3, r8
 800d5f0:	606b      	str	r3, [r5, #4]
 800d5f2:	4650      	mov	r0, sl
 800d5f4:	f7fc f9ca 	bl	800998c <__malloc_unlock>
 800d5f8:	e754      	b.n	800d4a4 <_realloc_r+0x3c>
 800d5fa:	68a3      	ldr	r3, [r4, #8]
 800d5fc:	612b      	str	r3, [r5, #16]
 800d5fe:	68e3      	ldr	r3, [r4, #12]
 800d600:	616b      	str	r3, [r5, #20]
 800d602:	2a24      	cmp	r2, #36	; 0x24
 800d604:	bf01      	itttt	eq
 800d606:	6923      	ldreq	r3, [r4, #16]
 800d608:	61ab      	streq	r3, [r5, #24]
 800d60a:	6962      	ldreq	r2, [r4, #20]
 800d60c:	61ea      	streq	r2, [r5, #28]
 800d60e:	bf19      	ittee	ne
 800d610:	3410      	addne	r4, #16
 800d612:	f105 0318 	addne.w	r3, r5, #24
 800d616:	f105 0320 	addeq.w	r3, r5, #32
 800d61a:	3418      	addeq	r4, #24
 800d61c:	e7d4      	b.n	800d5c8 <_realloc_r+0x160>
 800d61e:	465b      	mov	r3, fp
 800d620:	e7d2      	b.n	800d5c8 <_realloc_r+0x160>
 800d622:	4621      	mov	r1, r4
 800d624:	4658      	mov	r0, fp
 800d626:	f7ff fefe 	bl	800d426 <memmove>
 800d62a:	e7d3      	b.n	800d5d4 <_realloc_r+0x16c>
 800d62c:	45b8      	cmp	r8, r7
 800d62e:	dc35      	bgt.n	800d69c <_realloc_r+0x234>
 800d630:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800d634:	4628      	mov	r0, r5
 800d636:	60da      	str	r2, [r3, #12]
 800d638:	6093      	str	r3, [r2, #8]
 800d63a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800d63e:	68eb      	ldr	r3, [r5, #12]
 800d640:	60d3      	str	r3, [r2, #12]
 800d642:	609a      	str	r2, [r3, #8]
 800d644:	1f32      	subs	r2, r6, #4
 800d646:	2a24      	cmp	r2, #36	; 0x24
 800d648:	d824      	bhi.n	800d694 <_realloc_r+0x22c>
 800d64a:	2a13      	cmp	r2, #19
 800d64c:	d908      	bls.n	800d660 <_realloc_r+0x1f8>
 800d64e:	6823      	ldr	r3, [r4, #0]
 800d650:	60ab      	str	r3, [r5, #8]
 800d652:	6863      	ldr	r3, [r4, #4]
 800d654:	60eb      	str	r3, [r5, #12]
 800d656:	2a1b      	cmp	r2, #27
 800d658:	d80a      	bhi.n	800d670 <_realloc_r+0x208>
 800d65a:	3408      	adds	r4, #8
 800d65c:	f105 0010 	add.w	r0, r5, #16
 800d660:	6823      	ldr	r3, [r4, #0]
 800d662:	6003      	str	r3, [r0, #0]
 800d664:	6863      	ldr	r3, [r4, #4]
 800d666:	6043      	str	r3, [r0, #4]
 800d668:	68a3      	ldr	r3, [r4, #8]
 800d66a:	6083      	str	r3, [r0, #8]
 800d66c:	46a9      	mov	r9, r5
 800d66e:	e75c      	b.n	800d52a <_realloc_r+0xc2>
 800d670:	68a3      	ldr	r3, [r4, #8]
 800d672:	612b      	str	r3, [r5, #16]
 800d674:	68e3      	ldr	r3, [r4, #12]
 800d676:	616b      	str	r3, [r5, #20]
 800d678:	2a24      	cmp	r2, #36	; 0x24
 800d67a:	bf01      	itttt	eq
 800d67c:	6923      	ldreq	r3, [r4, #16]
 800d67e:	61ab      	streq	r3, [r5, #24]
 800d680:	6963      	ldreq	r3, [r4, #20]
 800d682:	61eb      	streq	r3, [r5, #28]
 800d684:	bf19      	ittee	ne
 800d686:	3410      	addne	r4, #16
 800d688:	f105 0018 	addne.w	r0, r5, #24
 800d68c:	f105 0020 	addeq.w	r0, r5, #32
 800d690:	3418      	addeq	r4, #24
 800d692:	e7e5      	b.n	800d660 <_realloc_r+0x1f8>
 800d694:	4621      	mov	r1, r4
 800d696:	f7ff fec6 	bl	800d426 <memmove>
 800d69a:	e7e7      	b.n	800d66c <_realloc_r+0x204>
 800d69c:	45d8      	cmp	r8, fp
 800d69e:	dc31      	bgt.n	800d704 <_realloc_r+0x29c>
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	68eb      	ldr	r3, [r5, #12]
 800d6a4:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800d6a8:	60d3      	str	r3, [r2, #12]
 800d6aa:	609a      	str	r2, [r3, #8]
 800d6ac:	1f32      	subs	r2, r6, #4
 800d6ae:	2a24      	cmp	r2, #36	; 0x24
 800d6b0:	d824      	bhi.n	800d6fc <_realloc_r+0x294>
 800d6b2:	2a13      	cmp	r2, #19
 800d6b4:	d908      	bls.n	800d6c8 <_realloc_r+0x260>
 800d6b6:	6823      	ldr	r3, [r4, #0]
 800d6b8:	60ab      	str	r3, [r5, #8]
 800d6ba:	6863      	ldr	r3, [r4, #4]
 800d6bc:	60eb      	str	r3, [r5, #12]
 800d6be:	2a1b      	cmp	r2, #27
 800d6c0:	d80a      	bhi.n	800d6d8 <_realloc_r+0x270>
 800d6c2:	3408      	adds	r4, #8
 800d6c4:	f105 0010 	add.w	r0, r5, #16
 800d6c8:	6823      	ldr	r3, [r4, #0]
 800d6ca:	6003      	str	r3, [r0, #0]
 800d6cc:	6863      	ldr	r3, [r4, #4]
 800d6ce:	6043      	str	r3, [r0, #4]
 800d6d0:	68a3      	ldr	r3, [r4, #8]
 800d6d2:	6083      	str	r3, [r0, #8]
 800d6d4:	465f      	mov	r7, fp
 800d6d6:	e7c9      	b.n	800d66c <_realloc_r+0x204>
 800d6d8:	68a3      	ldr	r3, [r4, #8]
 800d6da:	612b      	str	r3, [r5, #16]
 800d6dc:	68e3      	ldr	r3, [r4, #12]
 800d6de:	616b      	str	r3, [r5, #20]
 800d6e0:	2a24      	cmp	r2, #36	; 0x24
 800d6e2:	bf01      	itttt	eq
 800d6e4:	6923      	ldreq	r3, [r4, #16]
 800d6e6:	61ab      	streq	r3, [r5, #24]
 800d6e8:	6963      	ldreq	r3, [r4, #20]
 800d6ea:	61eb      	streq	r3, [r5, #28]
 800d6ec:	bf19      	ittee	ne
 800d6ee:	3410      	addne	r4, #16
 800d6f0:	f105 0018 	addne.w	r0, r5, #24
 800d6f4:	f105 0020 	addeq.w	r0, r5, #32
 800d6f8:	3418      	addeq	r4, #24
 800d6fa:	e7e5      	b.n	800d6c8 <_realloc_r+0x260>
 800d6fc:	4621      	mov	r1, r4
 800d6fe:	f7ff fe92 	bl	800d426 <memmove>
 800d702:	e7e7      	b.n	800d6d4 <_realloc_r+0x26c>
 800d704:	4611      	mov	r1, r2
 800d706:	4650      	mov	r0, sl
 800d708:	f7fb feee 	bl	80094e8 <_malloc_r>
 800d70c:	4683      	mov	fp, r0
 800d70e:	2800      	cmp	r0, #0
 800d710:	f43f af6f 	beq.w	800d5f2 <_realloc_r+0x18a>
 800d714:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d718:	f023 0301 	bic.w	r3, r3, #1
 800d71c:	444b      	add	r3, r9
 800d71e:	f1a0 0208 	sub.w	r2, r0, #8
 800d722:	4293      	cmp	r3, r2
 800d724:	d108      	bne.n	800d738 <_realloc_r+0x2d0>
 800d726:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800d72a:	f027 0703 	bic.w	r7, r7, #3
 800d72e:	4437      	add	r7, r6
 800d730:	e6fb      	b.n	800d52a <_realloc_r+0xc2>
 800d732:	bf00      	nop
 800d734:	20000440 	.word	0x20000440
 800d738:	1f32      	subs	r2, r6, #4
 800d73a:	2a24      	cmp	r2, #36	; 0x24
 800d73c:	d82d      	bhi.n	800d79a <_realloc_r+0x332>
 800d73e:	2a13      	cmp	r2, #19
 800d740:	d928      	bls.n	800d794 <_realloc_r+0x32c>
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	6003      	str	r3, [r0, #0]
 800d746:	6863      	ldr	r3, [r4, #4]
 800d748:	6043      	str	r3, [r0, #4]
 800d74a:	2a1b      	cmp	r2, #27
 800d74c:	d80e      	bhi.n	800d76c <_realloc_r+0x304>
 800d74e:	f104 0208 	add.w	r2, r4, #8
 800d752:	f100 0308 	add.w	r3, r0, #8
 800d756:	6811      	ldr	r1, [r2, #0]
 800d758:	6019      	str	r1, [r3, #0]
 800d75a:	6851      	ldr	r1, [r2, #4]
 800d75c:	6059      	str	r1, [r3, #4]
 800d75e:	6892      	ldr	r2, [r2, #8]
 800d760:	609a      	str	r2, [r3, #8]
 800d762:	4621      	mov	r1, r4
 800d764:	4650      	mov	r0, sl
 800d766:	f7fb fdff 	bl	8009368 <_free_r>
 800d76a:	e742      	b.n	800d5f2 <_realloc_r+0x18a>
 800d76c:	68a3      	ldr	r3, [r4, #8]
 800d76e:	6083      	str	r3, [r0, #8]
 800d770:	68e3      	ldr	r3, [r4, #12]
 800d772:	60c3      	str	r3, [r0, #12]
 800d774:	2a24      	cmp	r2, #36	; 0x24
 800d776:	bf01      	itttt	eq
 800d778:	6923      	ldreq	r3, [r4, #16]
 800d77a:	6103      	streq	r3, [r0, #16]
 800d77c:	6961      	ldreq	r1, [r4, #20]
 800d77e:	6141      	streq	r1, [r0, #20]
 800d780:	bf19      	ittee	ne
 800d782:	f104 0210 	addne.w	r2, r4, #16
 800d786:	f100 0310 	addne.w	r3, r0, #16
 800d78a:	f104 0218 	addeq.w	r2, r4, #24
 800d78e:	f100 0318 	addeq.w	r3, r0, #24
 800d792:	e7e0      	b.n	800d756 <_realloc_r+0x2ee>
 800d794:	4603      	mov	r3, r0
 800d796:	4622      	mov	r2, r4
 800d798:	e7dd      	b.n	800d756 <_realloc_r+0x2ee>
 800d79a:	4621      	mov	r1, r4
 800d79c:	f7ff fe43 	bl	800d426 <memmove>
 800d7a0:	e7df      	b.n	800d762 <_realloc_r+0x2fa>
 800d7a2:	4637      	mov	r7, r6
 800d7a4:	e6c1      	b.n	800d52a <_realloc_r+0xc2>
 800d7a6:	431f      	orrs	r7, r3
 800d7a8:	f8c9 7004 	str.w	r7, [r9, #4]
 800d7ac:	6853      	ldr	r3, [r2, #4]
 800d7ae:	f043 0301 	orr.w	r3, r3, #1
 800d7b2:	6053      	str	r3, [r2, #4]
 800d7b4:	e6d5      	b.n	800d562 <_realloc_r+0xfa>
 800d7b6:	bf00      	nop

0800d7b8 <_wcrtomb_r>:
 800d7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ba:	4c09      	ldr	r4, [pc, #36]	; (800d7e0 <_wcrtomb_r+0x28>)
 800d7bc:	b085      	sub	sp, #20
 800d7be:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800d7c2:	4605      	mov	r5, r0
 800d7c4:	461e      	mov	r6, r3
 800d7c6:	b909      	cbnz	r1, 800d7cc <_wcrtomb_r+0x14>
 800d7c8:	460a      	mov	r2, r1
 800d7ca:	a901      	add	r1, sp, #4
 800d7cc:	47b8      	blx	r7
 800d7ce:	1c43      	adds	r3, r0, #1
 800d7d0:	bf01      	itttt	eq
 800d7d2:	2300      	moveq	r3, #0
 800d7d4:	6033      	streq	r3, [r6, #0]
 800d7d6:	238a      	moveq	r3, #138	; 0x8a
 800d7d8:	602b      	streq	r3, [r5, #0]
 800d7da:	b005      	add	sp, #20
 800d7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	200001a8 	.word	0x200001a8

0800d7e4 <__swhatbuf_r>:
 800d7e4:	b570      	push	{r4, r5, r6, lr}
 800d7e6:	460c      	mov	r4, r1
 800d7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7ec:	2900      	cmp	r1, #0
 800d7ee:	b096      	sub	sp, #88	; 0x58
 800d7f0:	4615      	mov	r5, r2
 800d7f2:	461e      	mov	r6, r3
 800d7f4:	da07      	bge.n	800d806 <__swhatbuf_r+0x22>
 800d7f6:	89a1      	ldrh	r1, [r4, #12]
 800d7f8:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800d7fc:	d017      	beq.n	800d82e <__swhatbuf_r+0x4a>
 800d7fe:	2100      	movs	r1, #0
 800d800:	2340      	movs	r3, #64	; 0x40
 800d802:	4608      	mov	r0, r1
 800d804:	e00f      	b.n	800d826 <__swhatbuf_r+0x42>
 800d806:	466a      	mov	r2, sp
 800d808:	f000 f8ca 	bl	800d9a0 <_fstat_r>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	dbf2      	blt.n	800d7f6 <__swhatbuf_r+0x12>
 800d810:	9901      	ldr	r1, [sp, #4]
 800d812:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d816:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d81a:	4259      	negs	r1, r3
 800d81c:	4159      	adcs	r1, r3
 800d81e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d826:	6031      	str	r1, [r6, #0]
 800d828:	602b      	str	r3, [r5, #0]
 800d82a:	b016      	add	sp, #88	; 0x58
 800d82c:	bd70      	pop	{r4, r5, r6, pc}
 800d82e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d832:	e7e6      	b.n	800d802 <__swhatbuf_r+0x1e>

0800d834 <__smakebuf_r>:
 800d834:	898b      	ldrh	r3, [r1, #12]
 800d836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d838:	079d      	lsls	r5, r3, #30
 800d83a:	4606      	mov	r6, r0
 800d83c:	460c      	mov	r4, r1
 800d83e:	d507      	bpl.n	800d850 <__smakebuf_r+0x1c>
 800d840:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800d844:	6023      	str	r3, [r4, #0]
 800d846:	6123      	str	r3, [r4, #16]
 800d848:	2301      	movs	r3, #1
 800d84a:	6163      	str	r3, [r4, #20]
 800d84c:	b002      	add	sp, #8
 800d84e:	bd70      	pop	{r4, r5, r6, pc}
 800d850:	ab01      	add	r3, sp, #4
 800d852:	466a      	mov	r2, sp
 800d854:	f7ff ffc6 	bl	800d7e4 <__swhatbuf_r>
 800d858:	9900      	ldr	r1, [sp, #0]
 800d85a:	4605      	mov	r5, r0
 800d85c:	4630      	mov	r0, r6
 800d85e:	f7fb fe43 	bl	80094e8 <_malloc_r>
 800d862:	b948      	cbnz	r0, 800d878 <__smakebuf_r+0x44>
 800d864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d868:	059a      	lsls	r2, r3, #22
 800d86a:	d4ef      	bmi.n	800d84c <__smakebuf_r+0x18>
 800d86c:	f023 0303 	bic.w	r3, r3, #3
 800d870:	f043 0302 	orr.w	r3, r3, #2
 800d874:	81a3      	strh	r3, [r4, #12]
 800d876:	e7e3      	b.n	800d840 <__smakebuf_r+0xc>
 800d878:	89a3      	ldrh	r3, [r4, #12]
 800d87a:	6020      	str	r0, [r4, #0]
 800d87c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d880:	81a3      	strh	r3, [r4, #12]
 800d882:	9b00      	ldr	r3, [sp, #0]
 800d884:	6163      	str	r3, [r4, #20]
 800d886:	9b01      	ldr	r3, [sp, #4]
 800d888:	6120      	str	r0, [r4, #16]
 800d88a:	b15b      	cbz	r3, 800d8a4 <__smakebuf_r+0x70>
 800d88c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d890:	4630      	mov	r0, r6
 800d892:	f000 f897 	bl	800d9c4 <_isatty_r>
 800d896:	b128      	cbz	r0, 800d8a4 <__smakebuf_r+0x70>
 800d898:	89a3      	ldrh	r3, [r4, #12]
 800d89a:	f023 0303 	bic.w	r3, r3, #3
 800d89e:	f043 0301 	orr.w	r3, r3, #1
 800d8a2:	81a3      	strh	r3, [r4, #12]
 800d8a4:	89a3      	ldrh	r3, [r4, #12]
 800d8a6:	431d      	orrs	r5, r3
 800d8a8:	81a5      	strh	r5, [r4, #12]
 800d8aa:	e7cf      	b.n	800d84c <__smakebuf_r+0x18>

0800d8ac <__swbuf_r>:
 800d8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ae:	460e      	mov	r6, r1
 800d8b0:	4614      	mov	r4, r2
 800d8b2:	4605      	mov	r5, r0
 800d8b4:	b118      	cbz	r0, 800d8be <__swbuf_r+0x12>
 800d8b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d8b8:	b90b      	cbnz	r3, 800d8be <__swbuf_r+0x12>
 800d8ba:	f7fb fbc7 	bl	800904c <__sinit>
 800d8be:	69a3      	ldr	r3, [r4, #24]
 800d8c0:	60a3      	str	r3, [r4, #8]
 800d8c2:	89a3      	ldrh	r3, [r4, #12]
 800d8c4:	0719      	lsls	r1, r3, #28
 800d8c6:	d529      	bpl.n	800d91c <__swbuf_r+0x70>
 800d8c8:	6923      	ldr	r3, [r4, #16]
 800d8ca:	b33b      	cbz	r3, 800d91c <__swbuf_r+0x70>
 800d8cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8d0:	b2f6      	uxtb	r6, r6
 800d8d2:	049a      	lsls	r2, r3, #18
 800d8d4:	4637      	mov	r7, r6
 800d8d6:	d52a      	bpl.n	800d92e <__swbuf_r+0x82>
 800d8d8:	6823      	ldr	r3, [r4, #0]
 800d8da:	6922      	ldr	r2, [r4, #16]
 800d8dc:	1a98      	subs	r0, r3, r2
 800d8de:	6963      	ldr	r3, [r4, #20]
 800d8e0:	4283      	cmp	r3, r0
 800d8e2:	dc04      	bgt.n	800d8ee <__swbuf_r+0x42>
 800d8e4:	4621      	mov	r1, r4
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	f7fd fe66 	bl	800b5b8 <_fflush_r>
 800d8ec:	b9e0      	cbnz	r0, 800d928 <__swbuf_r+0x7c>
 800d8ee:	68a3      	ldr	r3, [r4, #8]
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	60a3      	str	r3, [r4, #8]
 800d8f4:	6823      	ldr	r3, [r4, #0]
 800d8f6:	1c5a      	adds	r2, r3, #1
 800d8f8:	6022      	str	r2, [r4, #0]
 800d8fa:	701e      	strb	r6, [r3, #0]
 800d8fc:	6962      	ldr	r2, [r4, #20]
 800d8fe:	1c43      	adds	r3, r0, #1
 800d900:	429a      	cmp	r2, r3
 800d902:	d004      	beq.n	800d90e <__swbuf_r+0x62>
 800d904:	89a3      	ldrh	r3, [r4, #12]
 800d906:	07db      	lsls	r3, r3, #31
 800d908:	d506      	bpl.n	800d918 <__swbuf_r+0x6c>
 800d90a:	2e0a      	cmp	r6, #10
 800d90c:	d104      	bne.n	800d918 <__swbuf_r+0x6c>
 800d90e:	4621      	mov	r1, r4
 800d910:	4628      	mov	r0, r5
 800d912:	f7fd fe51 	bl	800b5b8 <_fflush_r>
 800d916:	b938      	cbnz	r0, 800d928 <__swbuf_r+0x7c>
 800d918:	4638      	mov	r0, r7
 800d91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d91c:	4621      	mov	r1, r4
 800d91e:	4628      	mov	r0, r5
 800d920:	f7ff fcbe 	bl	800d2a0 <__swsetup_r>
 800d924:	2800      	cmp	r0, #0
 800d926:	d0d1      	beq.n	800d8cc <__swbuf_r+0x20>
 800d928:	f04f 37ff 	mov.w	r7, #4294967295
 800d92c:	e7f4      	b.n	800d918 <__swbuf_r+0x6c>
 800d92e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d932:	81a3      	strh	r3, [r4, #12]
 800d934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d936:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d93a:	6663      	str	r3, [r4, #100]	; 0x64
 800d93c:	e7cc      	b.n	800d8d8 <__swbuf_r+0x2c>

0800d93e <_raise_r>:
 800d93e:	291f      	cmp	r1, #31
 800d940:	b538      	push	{r3, r4, r5, lr}
 800d942:	4604      	mov	r4, r0
 800d944:	460d      	mov	r5, r1
 800d946:	d904      	bls.n	800d952 <_raise_r+0x14>
 800d948:	2316      	movs	r3, #22
 800d94a:	6003      	str	r3, [r0, #0]
 800d94c:	f04f 30ff 	mov.w	r0, #4294967295
 800d950:	bd38      	pop	{r3, r4, r5, pc}
 800d952:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 800d956:	b112      	cbz	r2, 800d95e <_raise_r+0x20>
 800d958:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d95c:	b94b      	cbnz	r3, 800d972 <_raise_r+0x34>
 800d95e:	4620      	mov	r0, r4
 800d960:	f000 f852 	bl	800da08 <_getpid_r>
 800d964:	462a      	mov	r2, r5
 800d966:	4601      	mov	r1, r0
 800d968:	4620      	mov	r0, r4
 800d96a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d96e:	f000 b839 	b.w	800d9e4 <_kill_r>
 800d972:	2b01      	cmp	r3, #1
 800d974:	d00a      	beq.n	800d98c <_raise_r+0x4e>
 800d976:	1c59      	adds	r1, r3, #1
 800d978:	d103      	bne.n	800d982 <_raise_r+0x44>
 800d97a:	2316      	movs	r3, #22
 800d97c:	6003      	str	r3, [r0, #0]
 800d97e:	2001      	movs	r0, #1
 800d980:	e7e6      	b.n	800d950 <_raise_r+0x12>
 800d982:	2400      	movs	r4, #0
 800d984:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d988:	4628      	mov	r0, r5
 800d98a:	4798      	blx	r3
 800d98c:	2000      	movs	r0, #0
 800d98e:	e7df      	b.n	800d950 <_raise_r+0x12>

0800d990 <raise>:
 800d990:	4b02      	ldr	r3, [pc, #8]	; (800d99c <raise+0xc>)
 800d992:	4601      	mov	r1, r0
 800d994:	6818      	ldr	r0, [r3, #0]
 800d996:	f7ff bfd2 	b.w	800d93e <_raise_r>
 800d99a:	bf00      	nop
 800d99c:	20000438 	.word	0x20000438

0800d9a0 <_fstat_r>:
 800d9a0:	b538      	push	{r3, r4, r5, lr}
 800d9a2:	4d07      	ldr	r5, [pc, #28]	; (800d9c0 <_fstat_r+0x20>)
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	4608      	mov	r0, r1
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	602b      	str	r3, [r5, #0]
 800d9ae:	f000 f835 	bl	800da1c <_fstat>
 800d9b2:	1c43      	adds	r3, r0, #1
 800d9b4:	d102      	bne.n	800d9bc <_fstat_r+0x1c>
 800d9b6:	682b      	ldr	r3, [r5, #0]
 800d9b8:	b103      	cbz	r3, 800d9bc <_fstat_r+0x1c>
 800d9ba:	6023      	str	r3, [r4, #0]
 800d9bc:	bd38      	pop	{r3, r4, r5, pc}
 800d9be:	bf00      	nop
 800d9c0:	200081ac 	.word	0x200081ac

0800d9c4 <_isatty_r>:
 800d9c4:	b538      	push	{r3, r4, r5, lr}
 800d9c6:	4d06      	ldr	r5, [pc, #24]	; (800d9e0 <_isatty_r+0x1c>)
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	4608      	mov	r0, r1
 800d9ce:	602b      	str	r3, [r5, #0]
 800d9d0:	f000 f834 	bl	800da3c <_isatty>
 800d9d4:	1c43      	adds	r3, r0, #1
 800d9d6:	d102      	bne.n	800d9de <_isatty_r+0x1a>
 800d9d8:	682b      	ldr	r3, [r5, #0]
 800d9da:	b103      	cbz	r3, 800d9de <_isatty_r+0x1a>
 800d9dc:	6023      	str	r3, [r4, #0]
 800d9de:	bd38      	pop	{r3, r4, r5, pc}
 800d9e0:	200081ac 	.word	0x200081ac

0800d9e4 <_kill_r>:
 800d9e4:	b538      	push	{r3, r4, r5, lr}
 800d9e6:	4d07      	ldr	r5, [pc, #28]	; (800da04 <_kill_r+0x20>)
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	4608      	mov	r0, r1
 800d9ee:	4611      	mov	r1, r2
 800d9f0:	602b      	str	r3, [r5, #0]
 800d9f2:	f000 f82b 	bl	800da4c <_kill>
 800d9f6:	1c43      	adds	r3, r0, #1
 800d9f8:	d102      	bne.n	800da00 <_kill_r+0x1c>
 800d9fa:	682b      	ldr	r3, [r5, #0]
 800d9fc:	b103      	cbz	r3, 800da00 <_kill_r+0x1c>
 800d9fe:	6023      	str	r3, [r4, #0]
 800da00:	bd38      	pop	{r3, r4, r5, pc}
 800da02:	bf00      	nop
 800da04:	200081ac 	.word	0x200081ac

0800da08 <_getpid_r>:
 800da08:	f000 b810 	b.w	800da2c <_getpid>

0800da0c <_close>:
 800da0c:	4b02      	ldr	r3, [pc, #8]	; (800da18 <_close+0xc>)
 800da0e:	2258      	movs	r2, #88	; 0x58
 800da10:	601a      	str	r2, [r3, #0]
 800da12:	f04f 30ff 	mov.w	r0, #4294967295
 800da16:	4770      	bx	lr
 800da18:	200081ac 	.word	0x200081ac

0800da1c <_fstat>:
 800da1c:	4b02      	ldr	r3, [pc, #8]	; (800da28 <_fstat+0xc>)
 800da1e:	2258      	movs	r2, #88	; 0x58
 800da20:	601a      	str	r2, [r3, #0]
 800da22:	f04f 30ff 	mov.w	r0, #4294967295
 800da26:	4770      	bx	lr
 800da28:	200081ac 	.word	0x200081ac

0800da2c <_getpid>:
 800da2c:	4b02      	ldr	r3, [pc, #8]	; (800da38 <_getpid+0xc>)
 800da2e:	2258      	movs	r2, #88	; 0x58
 800da30:	601a      	str	r2, [r3, #0]
 800da32:	f04f 30ff 	mov.w	r0, #4294967295
 800da36:	4770      	bx	lr
 800da38:	200081ac 	.word	0x200081ac

0800da3c <_isatty>:
 800da3c:	4b02      	ldr	r3, [pc, #8]	; (800da48 <_isatty+0xc>)
 800da3e:	2258      	movs	r2, #88	; 0x58
 800da40:	601a      	str	r2, [r3, #0]
 800da42:	2000      	movs	r0, #0
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	200081ac 	.word	0x200081ac

0800da4c <_kill>:
 800da4c:	4b02      	ldr	r3, [pc, #8]	; (800da58 <_kill+0xc>)
 800da4e:	2258      	movs	r2, #88	; 0x58
 800da50:	601a      	str	r2, [r3, #0]
 800da52:	f04f 30ff 	mov.w	r0, #4294967295
 800da56:	4770      	bx	lr
 800da58:	200081ac 	.word	0x200081ac

0800da5c <_lseek>:
 800da5c:	4b02      	ldr	r3, [pc, #8]	; (800da68 <_lseek+0xc>)
 800da5e:	2258      	movs	r2, #88	; 0x58
 800da60:	601a      	str	r2, [r3, #0]
 800da62:	f04f 30ff 	mov.w	r0, #4294967295
 800da66:	4770      	bx	lr
 800da68:	200081ac 	.word	0x200081ac

0800da6c <_read>:
 800da6c:	4b02      	ldr	r3, [pc, #8]	; (800da78 <_read+0xc>)
 800da6e:	2258      	movs	r2, #88	; 0x58
 800da70:	601a      	str	r2, [r3, #0]
 800da72:	f04f 30ff 	mov.w	r0, #4294967295
 800da76:	4770      	bx	lr
 800da78:	200081ac 	.word	0x200081ac

0800da7c <_sbrk>:
 800da7c:	4a04      	ldr	r2, [pc, #16]	; (800da90 <_sbrk+0x14>)
 800da7e:	6811      	ldr	r1, [r2, #0]
 800da80:	4603      	mov	r3, r0
 800da82:	b909      	cbnz	r1, 800da88 <_sbrk+0xc>
 800da84:	4903      	ldr	r1, [pc, #12]	; (800da94 <_sbrk+0x18>)
 800da86:	6011      	str	r1, [r2, #0]
 800da88:	6810      	ldr	r0, [r2, #0]
 800da8a:	4403      	add	r3, r0
 800da8c:	6013      	str	r3, [r2, #0]
 800da8e:	4770      	bx	lr
 800da90:	2000837c 	.word	0x2000837c
 800da94:	20008380 	.word	0x20008380

0800da98 <_write>:
 800da98:	4b02      	ldr	r3, [pc, #8]	; (800daa4 <_write+0xc>)
 800da9a:	2258      	movs	r2, #88	; 0x58
 800da9c:	601a      	str	r2, [r3, #0]
 800da9e:	f04f 30ff 	mov.w	r0, #4294967295
 800daa2:	4770      	bx	lr
 800daa4:	200081ac 	.word	0x200081ac

0800daa8 <_exit>:
 800daa8:	e7fe      	b.n	800daa8 <_exit>
	...

0800daac <_init>:
 800daac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daae:	bf00      	nop
 800dab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dab2:	bc08      	pop	{r3}
 800dab4:	469e      	mov	lr, r3
 800dab6:	4770      	bx	lr

0800dab8 <_fini>:
 800dab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daba:	bf00      	nop
 800dabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dabe:	bc08      	pop	{r3}
 800dac0:	469e      	mov	lr, r3
 800dac2:	4770      	bx	lr

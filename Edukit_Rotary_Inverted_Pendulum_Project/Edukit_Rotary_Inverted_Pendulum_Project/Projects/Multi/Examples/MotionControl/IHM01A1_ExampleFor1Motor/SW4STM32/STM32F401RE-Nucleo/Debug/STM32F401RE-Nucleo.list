
STM32F401RE-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b34  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08007cc8  08007cc8  00017cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007cec  08007cec  00017cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08007cf4  08007cf4  00017cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007cfc  08007cfc  00017cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001a0  20000000  08007d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000454c  200001a0  08007ea0  000201a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200046ec  08007ea0  000246ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013823  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000029b4  00000000  00000000  00033a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000013d8  00000000  00000000  000363f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000f68  00000000  00000000  000377c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000471a  00000000  00000000  00038730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012f98  00000000  00000000  0003ce4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00094ba4  00000000  00000000  0004fde2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005570  00000000  00000000  000e4988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000dc  00000000  00000000  000e9ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001a0 	.word	0x200001a0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007cb0 	.word	0x08007cb0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001a4 	.word	0x200001a4
 80001d0:	08007cb0 	.word	0x08007cb0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <L6474_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6474_AttachErrorHandler(void (*callback)(uint16_t))
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  errorHandlerCallback = (void (*)(uint16_t))callback;
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <L6474_AttachErrorHandler+0x1c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6013      	str	r3, [r2, #0]
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	200001c0 	.word	0x200001c0

080004f0 <L6474_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6474_AttachFlagInterrupt(void (*callback)(void))
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  flagInterruptCallback = (void (*)())callback;
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <L6474_AttachFlagInterrupt+0x1c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	200001bc 	.word	0x200001bc

08000510 <L6474_CmdDisable>:
 * @brief  Issue the Disable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdDisable(uint8_t deviceId)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_DISABLE);
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	21a8      	movs	r1, #168	; 0xa8
 800051e:	4618      	mov	r0, r3
 8000520:	f001 fb16 	bl	8001b50 <L6474_SendCommand>
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <L6474_CmdEnable>:
 * @brief  Issues the Enable command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdEnable(uint8_t deviceId)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_ENABLE);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	21b8      	movs	r1, #184	; 0xb8
 800053a:	4618      	mov	r0, r3
 800053c:	f001 fb08 	bl	8001b50 <L6474_SendCommand>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <L6474_CmdGetParam>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Register adress (L6474_ABS_POS, L6474_MARK,...)
 * @retval Register value
 **********************************************************/
uint32_t L6474_CmdGetParam(uint8_t deviceId, uint32_t param)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	6039      	str	r1, [r7, #0]
 8000552:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint32_t spiRxData;
  uint8_t maxArgumentNbBytes = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8000558:	4b71      	ldr	r3, [pc, #452]	; (8000720 <L6474_CmdGetParam+0x1d8>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	b2da      	uxtb	r2, r3
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	b2db      	uxtb	r3, r3
 8000564:	3b01      	subs	r3, #1
 8000566:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 8000568:	2300      	movs	r3, #0
 800056a:	74bb      	strb	r3, [r7, #18]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 800056c:	4b6d      	ldr	r3, [pc, #436]	; (8000724 <L6474_CmdGetParam+0x1dc>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000572:	7cbb      	ldrb	r3, [r7, #18]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d003      	beq.n	8000580 <L6474_CmdGetParam+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8000578:	f002 fa0e 	bl	8002998 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 800057c:	2300      	movs	r3, #0
 800057e:	74bb      	strb	r3, [r7, #18]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	e02b      	b.n	80005de <L6474_CmdGetParam+0x96>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8000586:	4a68      	ldr	r2, [pc, #416]	; (8000728 <L6474_CmdGetParam+0x1e0>)
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	4413      	add	r3, r2
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 8000590:	4a65      	ldr	r2, [pc, #404]	; (8000728 <L6474_CmdGetParam+0x1e0>)
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	4413      	add	r3, r2
 8000596:	3303      	adds	r3, #3
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 800059c:	4a62      	ldr	r2, [pc, #392]	; (8000728 <L6474_CmdGetParam+0x1e0>)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	4413      	add	r3, r2
 80005a2:	3306      	adds	r3, #6
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80005a8:	4a5f      	ldr	r2, [pc, #380]	; (8000728 <L6474_CmdGetParam+0x1e0>)
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	4413      	add	r3, r2
 80005ae:	3309      	adds	r3, #9
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
      spiRxBursts[1][i] = 0;
 80005b4:	4a5d      	ldr	r2, [pc, #372]	; (800072c <L6474_CmdGetParam+0x1e4>)
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	4413      	add	r3, r2
 80005ba:	3303      	adds	r3, #3
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
      spiRxBursts[2][i] = 0;
 80005c0:	4a5a      	ldr	r2, [pc, #360]	; (800072c <L6474_CmdGetParam+0x1e4>)
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	4413      	add	r3, r2
 80005c6:	3306      	adds	r3, #6
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
      spiRxBursts[3][i] = 0;    
 80005cc:	4a57      	ldr	r2, [pc, #348]	; (800072c <L6474_CmdGetParam+0x1e4>)
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	4413      	add	r3, r2
 80005d2:	3309      	adds	r3, #9
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	3301      	adds	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	4b50      	ldr	r3, [pc, #320]	; (8000720 <L6474_CmdGetParam+0x1d8>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	461a      	mov	r2, r3
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d3cc      	bcc.n	8000586 <L6474_CmdGetParam+0x3e>
    }
    switch (param)
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	2b18      	cmp	r3, #24
 80005f2:	d84d      	bhi.n	8000690 <L6474_CmdGetParam+0x148>
 80005f4:	a201      	add	r2, pc, #4	; (adr r2, 80005fc <L6474_CmdGetParam+0xb4>)
 80005f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fa:	bf00      	nop
 80005fc:	08000661 	.word	0x08000661
 8000600:	08000677 	.word	0x08000677
 8000604:	08000661 	.word	0x08000661
 8000608:	08000691 	.word	0x08000691
 800060c:	08000691 	.word	0x08000691
 8000610:	08000691 	.word	0x08000691
 8000614:	08000691 	.word	0x08000691
 8000618:	08000691 	.word	0x08000691
 800061c:	08000691 	.word	0x08000691
 8000620:	08000691 	.word	0x08000691
 8000624:	08000691 	.word	0x08000691
 8000628:	08000691 	.word	0x08000691
 800062c:	08000691 	.word	0x08000691
 8000630:	08000691 	.word	0x08000691
 8000634:	08000691 	.word	0x08000691
 8000638:	08000691 	.word	0x08000691
 800063c:	08000691 	.word	0x08000691
 8000640:	08000691 	.word	0x08000691
 8000644:	08000691 	.word	0x08000691
 8000648:	08000691 	.word	0x08000691
 800064c:	08000691 	.word	0x08000691
 8000650:	08000691 	.word	0x08000691
 8000654:	08000691 	.word	0x08000691
 8000658:	08000677 	.word	0x08000677
 800065c:	08000677 	.word	0x08000677
    {
      case L6474_ABS_POS: ;
      case L6474_MARK:
        spiTxBursts[0][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	7c7b      	ldrb	r3, [r7, #17]
 8000666:	f042 0220 	orr.w	r2, r2, #32
 800066a:	b2d1      	uxtb	r1, r2
 800066c:	4a2e      	ldr	r2, [pc, #184]	; (8000728 <L6474_CmdGetParam+0x1e0>)
 800066e:	54d1      	strb	r1, [r2, r3]
        maxArgumentNbBytes = 3;
 8000670:	2303      	movs	r3, #3
 8000672:	74fb      	strb	r3, [r7, #19]
        break;
 8000674:	e018      	b.n	80006a8 <L6474_CmdGetParam+0x160>
      case L6474_EL_POS: ;
      case L6474_CONFIG: ;
      case L6474_STATUS:
        spiTxBursts[1][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	7c7b      	ldrb	r3, [r7, #17]
 800067c:	f042 0220 	orr.w	r2, r2, #32
 8000680:	b2d1      	uxtb	r1, r2
 8000682:	4a29      	ldr	r2, [pc, #164]	; (8000728 <L6474_CmdGetParam+0x1e0>)
 8000684:	4413      	add	r3, r2
 8000686:	460a      	mov	r2, r1
 8000688:	70da      	strb	r2, [r3, #3]
        maxArgumentNbBytes = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	74fb      	strb	r3, [r7, #19]
        break;
 800068e:	e00b      	b.n	80006a8 <L6474_CmdGetParam+0x160>
      default:
        spiTxBursts[2][spiIndex] = ((uint8_t)L6474_GET_PARAM )| (param);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	7c7b      	ldrb	r3, [r7, #17]
 8000696:	f042 0220 	orr.w	r2, r2, #32
 800069a:	b2d1      	uxtb	r1, r2
 800069c:	4a22      	ldr	r2, [pc, #136]	; (8000728 <L6474_CmdGetParam+0x1e0>)
 800069e:	4413      	add	r3, r2
 80006a0:	460a      	mov	r2, r1
 80006a2:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80006a8:	f002 f96d 	bl	8002986 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <L6474_CmdGetParam+0x1dc>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	f47f af58 	bne.w	800056c <L6474_CmdGetParam+0x24>
    
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80006bc:	7cfb      	ldrb	r3, [r7, #19]
 80006be:	f1c3 0303 	rsb	r3, r3, #3
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	e011      	b.n	80006ea <L6474_CmdGetParam+0x1a2>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],
 80006c6:	697a      	ldr	r2, [r7, #20]
 80006c8:	4613      	mov	r3, r2
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	4413      	add	r3, r2
 80006ce:	4a16      	ldr	r2, [pc, #88]	; (8000728 <L6474_CmdGetParam+0x1e0>)
 80006d0:	1898      	adds	r0, r3, r2
 80006d2:	697a      	ldr	r2, [r7, #20]
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	4a14      	ldr	r2, [pc, #80]	; (800072c <L6474_CmdGetParam+0x1e4>)
 80006dc:	4413      	add	r3, r2
 80006de:	4619      	mov	r1, r3
 80006e0:	f002 f920 	bl	8002924 <L6474_WriteBytes>
       i++)
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	3301      	adds	r3, #1
 80006e8:	617b      	str	r3, [r7, #20]
       i < L6474_CMD_ARG_MAX_NB_BYTES;
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	2b03      	cmp	r3, #3
 80006ee:	d9ea      	bls.n	80006c6 <L6474_CmdGetParam+0x17e>
                          &spiRxBursts[i][0]);
  }
  
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 80006f0:	7c7b      	ldrb	r3, [r7, #17]
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <L6474_CmdGetParam+0x1e4>)
 80006f4:	4413      	add	r3, r2
 80006f6:	78db      	ldrb	r3, [r3, #3]
 80006f8:	041b      	lsls	r3, r3, #16
              (spiRxBursts[2][spiIndex] << 8) |
 80006fa:	7c7a      	ldrb	r2, [r7, #17]
 80006fc:	490b      	ldr	r1, [pc, #44]	; (800072c <L6474_CmdGetParam+0x1e4>)
 80006fe:	440a      	add	r2, r1
 8000700:	7992      	ldrb	r2, [r2, #6]
 8000702:	0212      	lsls	r2, r2, #8
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 8000704:	4313      	orrs	r3, r2
              (spiRxBursts[3][spiIndex]);
 8000706:	7c7a      	ldrb	r2, [r7, #17]
 8000708:	4908      	ldr	r1, [pc, #32]	; (800072c <L6474_CmdGetParam+0x1e4>)
 800070a:	440a      	add	r2, r1
 800070c:	7a52      	ldrb	r2, [r2, #9]
  spiRxData = ((uint32_t)spiRxBursts[1][spiIndex] << 16)|
 800070e:	4313      	orrs	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8000712:	f002 f941 	bl	8002998 <L6474_Board_EnableIrq>
    
  return (spiRxData);
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200001c4 	.word	0x200001c4
 8000724:	200001e0 	.word	0x200001e0
 8000728:	200001c8 	.word	0x200001c8
 800072c:	200001d4 	.word	0x200001d4

08000730 <L6474_CmdGetStatus>:
 * @note Once the GetStatus command is performed, the flags of the status register
 * are reset. This is not the case when the status register is read with the
 * GetParam command (via the functions L6474ReadStatusRegister or L6474CmdGetParam).
 **********************************************************/
uint16_t L6474_CmdGetStatus(uint8_t deviceId)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
  uint32_t i;
  uint16_t status;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800073a:	4b3c      	ldr	r3, [pc, #240]	; (800082c <L6474_CmdGetStatus+0xfc>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	b2db      	uxtb	r3, r3
 8000746:	3b01      	subs	r3, #1
 8000748:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 800074a:	2300      	movs	r3, #0
 800074c:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 800074e:	4b38      	ldr	r3, [pc, #224]	; (8000830 <L6474_CmdGetStatus+0x100>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000754:	7afb      	ldrb	r3, [r7, #11]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d003      	beq.n	8000762 <L6474_CmdGetStatus+0x32>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 800075a:	f002 f91d 	bl	8002998 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 800075e:	2300      	movs	r3, #0
 8000760:	72fb      	strb	r3, [r7, #11]
    }

    for (i = 0; i < numberOfDevices; i++)
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	e01f      	b.n	80007a8 <L6474_CmdGetStatus+0x78>
    {
       spiTxBursts[0][i] = L6474_NOP;
 8000768:	4a32      	ldr	r2, [pc, #200]	; (8000834 <L6474_CmdGetStatus+0x104>)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4413      	add	r3, r2
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
       spiTxBursts[1][i] = L6474_NOP;
 8000772:	4a30      	ldr	r2, [pc, #192]	; (8000834 <L6474_CmdGetStatus+0x104>)
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	3303      	adds	r3, #3
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
       spiTxBursts[2][i] = L6474_NOP;
 800077e:	4a2d      	ldr	r2, [pc, #180]	; (8000834 <L6474_CmdGetStatus+0x104>)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	4413      	add	r3, r2
 8000784:	3306      	adds	r3, #6
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
       spiRxBursts[1][i] = 0;
 800078a:	4a2b      	ldr	r2, [pc, #172]	; (8000838 <L6474_CmdGetStatus+0x108>)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	4413      	add	r3, r2
 8000790:	3303      	adds	r3, #3
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
       spiRxBursts[2][i] = 0;
 8000796:	4a28      	ldr	r2, [pc, #160]	; (8000838 <L6474_CmdGetStatus+0x108>)
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	4413      	add	r3, r2
 800079c:	3306      	adds	r3, #6
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	3301      	adds	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	4b20      	ldr	r3, [pc, #128]	; (800082c <L6474_CmdGetStatus+0xfc>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d3d8      	bcc.n	8000768 <L6474_CmdGetStatus+0x38>
    }
    spiTxBursts[0][spiIndex] = L6474_GET_STATUS;
 80007b6:	7abb      	ldrb	r3, [r7, #10]
 80007b8:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <L6474_CmdGetStatus+0x104>)
 80007ba:	21d0      	movs	r1, #208	; 0xd0
 80007bc:	54d1      	strb	r1, [r2, r3]

    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80007be:	f002 f8e2 	bl	8002986 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80007c2:	2301      	movs	r3, #1
 80007c4:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <L6474_CmdGetStatus+0x100>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1be      	bne.n	800074e <L6474_CmdGetStatus+0x1e>

  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	e011      	b.n	80007fa <L6474_CmdGetStatus+0xca>
  {
     L6474_WriteBytes(&spiTxBursts[i][0], &spiRxBursts[i][0]);
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	4613      	mov	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <L6474_CmdGetStatus+0x104>)
 80007e0:	1898      	adds	r0, r3, r2
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	4613      	mov	r3, r2
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	4413      	add	r3, r2
 80007ea:	4a13      	ldr	r2, [pc, #76]	; (8000838 <L6474_CmdGetStatus+0x108>)
 80007ec:	4413      	add	r3, r2
 80007ee:	4619      	mov	r1, r3
 80007f0:	f002 f898 	bl	8002924 <L6474_WriteBytes>
  for (i = 0; i < L6474_CMD_ARG_NB_BYTES_GET_STATUS + L6474_RSP_NB_BYTES_GET_STATUS; i++)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3301      	adds	r3, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d9ea      	bls.n	80007d6 <L6474_CmdGetStatus+0xa6>
  }
  status = (spiRxBursts[1][spiIndex] << 8) | (spiRxBursts[2][spiIndex]);
 8000800:	7abb      	ldrb	r3, [r7, #10]
 8000802:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <L6474_CmdGetStatus+0x108>)
 8000804:	4413      	add	r3, r2
 8000806:	78db      	ldrb	r3, [r3, #3]
 8000808:	021b      	lsls	r3, r3, #8
 800080a:	b21a      	sxth	r2, r3
 800080c:	7abb      	ldrb	r3, [r7, #10]
 800080e:	490a      	ldr	r1, [pc, #40]	; (8000838 <L6474_CmdGetStatus+0x108>)
 8000810:	440b      	add	r3, r1
 8000812:	799b      	ldrb	r3, [r3, #6]
 8000814:	b21b      	sxth	r3, r3
 8000816:	4313      	orrs	r3, r2
 8000818:	b21b      	sxth	r3, r3
 800081a:	813b      	strh	r3, [r7, #8]
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 800081c:	f002 f8bc 	bl	8002998 <L6474_Board_EnableIrq>
  
  return (status);
 8000820:	893b      	ldrh	r3, [r7, #8]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200001c4 	.word	0x200001c4
 8000830:	200001e0 	.word	0x200001e0
 8000834:	200001c8 	.word	0x200001c8
 8000838:	200001d4 	.word	0x200001d4

0800083c <L6474_CmdNop>:
 * @brief  Issues the Nop command to the L6474 of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_CmdNop(uint8_t deviceId)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
  L6474_SendCommand(deviceId, L6474_NOP);
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f001 f980 	bl	8001b50 <L6474_SendCommand>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <L6474_CmdSetParam>:
 * @retval None
 **********************************************************/
void L6474_CmdSetParam(uint8_t deviceId,
                       uint32_t param,
                       uint32_t value)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	73fb      	strb	r3, [r7, #15]
  uint32_t i;
  uint8_t maxArgumentNbBytes = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	74fb      	strb	r3, [r7, #19]
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 800086a:	4b69      	ldr	r3, [pc, #420]	; (8000a10 <L6474_CmdSetParam+0x1b8>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2da      	uxtb	r2, r3
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	b2db      	uxtb	r3, r3
 8000876:	3b01      	subs	r3, #1
 8000878:	747b      	strb	r3, [r7, #17]
  bool itDisable = FALSE;  
 800087a:	2300      	movs	r3, #0
 800087c:	74bb      	strb	r3, [r7, #18]
  do
  {
    spiPreemtionByIsr = FALSE;
 800087e:	4b65      	ldr	r3, [pc, #404]	; (8000a14 <L6474_CmdSetParam+0x1bc>)
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8000884:	7cbb      	ldrb	r3, [r7, #18]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d003      	beq.n	8000892 <L6474_CmdSetParam+0x3a>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 800088a:	f002 f885 	bl	8002998 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 800088e:	2300      	movs	r3, #0
 8000890:	74bb      	strb	r3, [r7, #18]
    }
    for (i = 0; i < numberOfDevices; i++)
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	e019      	b.n	80008cc <L6474_CmdSetParam+0x74>
    {
      spiTxBursts[0][i] = L6474_NOP;
 8000898:	4a5f      	ldr	r2, [pc, #380]	; (8000a18 <L6474_CmdSetParam+0x1c0>)
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	4413      	add	r3, r2
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
      spiTxBursts[1][i] = L6474_NOP;
 80008a2:	4a5d      	ldr	r2, [pc, #372]	; (8000a18 <L6474_CmdSetParam+0x1c0>)
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	4413      	add	r3, r2
 80008a8:	3303      	adds	r3, #3
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
      spiTxBursts[2][i] = L6474_NOP;
 80008ae:	4a5a      	ldr	r2, [pc, #360]	; (8000a18 <L6474_CmdSetParam+0x1c0>)
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	4413      	add	r3, r2
 80008b4:	3306      	adds	r3, #6
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
      spiTxBursts[3][i] = L6474_NOP;
 80008ba:	4a57      	ldr	r2, [pc, #348]	; (8000a18 <L6474_CmdSetParam+0x1c0>)
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	4413      	add	r3, r2
 80008c0:	3309      	adds	r3, #9
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3301      	adds	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	4b50      	ldr	r3, [pc, #320]	; (8000a10 <L6474_CmdSetParam+0x1b8>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	461a      	mov	r2, r3
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d3de      	bcc.n	8000898 <L6474_CmdSetParam+0x40>
    }
    switch (param)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	3b01      	subs	r3, #1
 80008de:	2b17      	cmp	r3, #23
 80008e0:	d85c      	bhi.n	800099c <L6474_CmdSetParam+0x144>
 80008e2:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <L6474_CmdSetParam+0x90>)
 80008e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e8:	08000949 	.word	0x08000949
 80008ec:	08000979 	.word	0x08000979
 80008f0:	08000949 	.word	0x08000949
 80008f4:	0800099d 	.word	0x0800099d
 80008f8:	0800099d 	.word	0x0800099d
 80008fc:	0800099d 	.word	0x0800099d
 8000900:	0800099d 	.word	0x0800099d
 8000904:	0800099d 	.word	0x0800099d
 8000908:	0800099d 	.word	0x0800099d
 800090c:	0800099d 	.word	0x0800099d
 8000910:	0800099d 	.word	0x0800099d
 8000914:	0800099d 	.word	0x0800099d
 8000918:	0800099d 	.word	0x0800099d
 800091c:	0800099d 	.word	0x0800099d
 8000920:	0800099d 	.word	0x0800099d
 8000924:	0800099d 	.word	0x0800099d
 8000928:	0800099d 	.word	0x0800099d
 800092c:	0800099d 	.word	0x0800099d
 8000930:	0800099d 	.word	0x0800099d
 8000934:	0800099d 	.word	0x0800099d
 8000938:	0800099d 	.word	0x0800099d
 800093c:	0800099d 	.word	0x0800099d
 8000940:	0800099d 	.word	0x0800099d
 8000944:	08000979 	.word	0x08000979
  {
    case L6474_ABS_POS: ;
    case L6474_MARK:
        spiTxBursts[0][spiIndex] = param;
 8000948:	7c7b      	ldrb	r3, [r7, #17]
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	b2d1      	uxtb	r1, r2
 800094e:	4a32      	ldr	r2, [pc, #200]	; (8000a18 <L6474_CmdSetParam+0x1c0>)
 8000950:	54d1      	strb	r1, [r2, r3]
        spiTxBursts[1][spiIndex] = (uint8_t)(value >> 16);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	0c1a      	lsrs	r2, r3, #16
 8000956:	7c7b      	ldrb	r3, [r7, #17]
 8000958:	b2d1      	uxtb	r1, r2
 800095a:	4a2f      	ldr	r2, [pc, #188]	; (8000a18 <L6474_CmdSetParam+0x1c0>)
 800095c:	4413      	add	r3, r2
 800095e:	460a      	mov	r2, r1
 8000960:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	0a1a      	lsrs	r2, r3, #8
 8000966:	7c7b      	ldrb	r3, [r7, #17]
 8000968:	b2d1      	uxtb	r1, r2
 800096a:	4a2b      	ldr	r2, [pc, #172]	; (8000a18 <L6474_CmdSetParam+0x1c0>)
 800096c:	4413      	add	r3, r2
 800096e:	460a      	mov	r2, r1
 8000970:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 3;
 8000972:	2303      	movs	r3, #3
 8000974:	74fb      	strb	r3, [r7, #19]
        break;
 8000976:	e01a      	b.n	80009ae <L6474_CmdSetParam+0x156>
    case L6474_EL_POS: ;
    case L6474_CONFIG:
        spiTxBursts[1][spiIndex] = param;
 8000978:	7c7b      	ldrb	r3, [r7, #17]
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	b2d1      	uxtb	r1, r2
 800097e:	4a26      	ldr	r2, [pc, #152]	; (8000a18 <L6474_CmdSetParam+0x1c0>)
 8000980:	4413      	add	r3, r2
 8000982:	460a      	mov	r2, r1
 8000984:	70da      	strb	r2, [r3, #3]
        spiTxBursts[2][spiIndex] = (uint8_t)(value >> 8);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	0a1a      	lsrs	r2, r3, #8
 800098a:	7c7b      	ldrb	r3, [r7, #17]
 800098c:	b2d1      	uxtb	r1, r2
 800098e:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <L6474_CmdSetParam+0x1c0>)
 8000990:	4413      	add	r3, r2
 8000992:	460a      	mov	r2, r1
 8000994:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	74fb      	strb	r3, [r7, #19]
        break;
 800099a:	e008      	b.n	80009ae <L6474_CmdSetParam+0x156>
    default:
        spiTxBursts[2][spiIndex] = param;
 800099c:	7c7b      	ldrb	r3, [r7, #17]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	b2d1      	uxtb	r1, r2
 80009a2:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <L6474_CmdSetParam+0x1c0>)
 80009a4:	4413      	add	r3, r2
 80009a6:	460a      	mov	r2, r1
 80009a8:	719a      	strb	r2, [r3, #6]
        maxArgumentNbBytes = 1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	74fb      	strb	r3, [r7, #19]
    }
    spiTxBursts[3][spiIndex] = (uint8_t)(value);
 80009ae:	7c7b      	ldrb	r3, [r7, #17]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	b2d1      	uxtb	r1, r2
 80009b4:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <L6474_CmdSetParam+0x1c0>)
 80009b6:	4413      	add	r3, r2
 80009b8:	460a      	mov	r2, r1
 80009ba:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 80009bc:	f001 ffe3 	bl	8002986 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 80009c0:	2301      	movs	r3, #1
 80009c2:	74bb      	strb	r3, [r7, #18]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <L6474_CmdSetParam+0x1bc>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f47f af57 	bne.w	800087e <L6474_CmdSetParam+0x26>
 
  /* SPI transfer */
  for (i = L6474_CMD_ARG_MAX_NB_BYTES-1-maxArgumentNbBytes;
 80009d0:	7cfb      	ldrb	r3, [r7, #19]
 80009d2:	f1c3 0303 	rsb	r3, r3, #3
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	e011      	b.n	80009fe <L6474_CmdSetParam+0x1a6>
       i < L6474_CMD_ARG_MAX_NB_BYTES;
       i++)
  {
     L6474_WriteBytes(&spiTxBursts[i][0],&spiRxBursts[i][0]);
 80009da:	697a      	ldr	r2, [r7, #20]
 80009dc:	4613      	mov	r3, r2
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4413      	add	r3, r2
 80009e2:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <L6474_CmdSetParam+0x1c0>)
 80009e4:	1898      	adds	r0, r3, r2
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	4613      	mov	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <L6474_CmdSetParam+0x1c4>)
 80009f0:	4413      	add	r3, r2
 80009f2:	4619      	mov	r1, r3
 80009f4:	f001 ff96 	bl	8002924 <L6474_WriteBytes>
       i++)
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3301      	adds	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
       i < L6474_CMD_ARG_MAX_NB_BYTES;
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	d9ea      	bls.n	80009da <L6474_CmdSetParam+0x182>
  }
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8000a04:	f001 ffc8 	bl	8002998 <L6474_Board_EnableIrq>
}
 8000a08:	bf00      	nop
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200001c4 	.word	0x200001c4
 8000a14:	200001e0 	.word	0x200001e0
 8000a18:	200001c8 	.word	0x200001c8
 8000a1c:	200001d4 	.word	0x200001d4

08000a20 <L6474_Init>:
 * @brief Starts a new L6474 instance 
 * @param[in] pInit pointer to the initialization data
 * @retval None
 **********************************************************/
void L6474_Init(void* pInit)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Initialise the GPIOs */
  L6474_Board_GpioInit(l6474DriverInstance);
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <L6474_Init+0x94>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 ffbc 	bl	80029ac <L6474_Board_GpioInit>
  
  if(L6474_Board_SpiInit() != 0)
 8000a34:	f002 f9e0 	bl	8002df8 <L6474_Board_SpiInit>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <L6474_Init+0x26>
  {
    /* Initialization Error */
    L6474_ErrorHandler(L6474_ERROR_0);
 8000a3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a42:	f001 f859 	bl	8001af8 <L6474_ErrorHandler>
  } 

  /* Initialise the PWMs used for the Step clocks ----------------------------*/
  L6474_Board_PwmInit(l6474DriverInstance);
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <L6474_Init+0x94>)
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 f8fd 	bl	8002c4c <L6474_Board_PwmInit>
 
  /* Standby-reset deactivation */
  L6474_Board_ReleaseReset(l6474DriverInstance);
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <L6474_Init+0x94>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 f979 	bl	8002d50 <L6474_Board_ReleaseReset>
  
  /* Let a delay after reset */
  L6474_Board_Delay(1); 
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f001 ff86 	bl	8002970 <L6474_Board_Delay>
  
  /* Set all registers and context variables to the predefined values from l6474_target_config.h */
  if (pInit == 0)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d106      	bne.n	8000a78 <L6474_Init+0x58>
  {
    L6474_SetDeviceParamsToPredefinedValues(l6474DriverInstance);
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <L6474_Init+0x94>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 f963 	bl	8001d3c <L6474_SetDeviceParamsToPredefinedValues>
 8000a76:	e006      	b.n	8000a86 <L6474_Init+0x66>
  }
  else
  {
    L6474_SetDeviceParamsToGivenValues(l6474DriverInstance, pInit);
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <L6474_Init+0x94>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 f8b7 	bl	8001bf4 <L6474_SetDeviceParamsToGivenValues>
  }
  /* Disable L6474 powerstage */
  L6474_CmdDisable(l6474DriverInstance);
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <L6474_Init+0x94>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fd3f 	bl	8000510 <L6474_CmdDisable>

  /* Get Status to clear flags after start up */
  L6474_CmdGetStatus(l6474DriverInstance);
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <L6474_Init+0x94>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fe49 	bl	8000730 <L6474_CmdGetStatus>

  l6474DriverInstance++;
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <L6474_Init+0x94>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <L6474_Init+0x94>)
 8000aa8:	801a      	strh	r2, [r3, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200001e2 	.word	0x200001e2

08000ab8 <L6474_GetAcceleration>:
 * @brief Returns the acceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Acceleration in pps^2
 **********************************************************/
uint16_t L6474_GetAcceleration(uint8_t deviceId)
{                                                  
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].acceleration);
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <L6474_GetAcceleration+0x2c>)
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4413      	add	r3, r2
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	440b      	add	r3, r1
 8000ad0:	3318      	adds	r3, #24
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	b29b      	uxth	r3, r3
}            
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	200001e4 	.word	0x200001e4

08000ae8 <L6474_GetAnalogValue>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES-1 )
 * @param[in] param L6474 register address
 * @retval Register value - 1 to 3 bytes (depends on register)
 *********************************************************/
float L6474_GetAnalogValue(uint8_t deviceId, uint32_t param)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue = L6474_CmdGetParam(deviceId, param);
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	6839      	ldr	r1, [r7, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fd25 	bl	8000548 <L6474_CmdGetParam>
 8000afe:	60b8      	str	r0, [r7, #8]
  float value;
  switch (param)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	2b12      	cmp	r3, #18
 8000b06:	d84b      	bhi.n	8000ba0 <L6474_GetAnalogValue+0xb8>
 8000b08:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <L6474_GetAnalogValue+0x28>)
 8000b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0e:	bf00      	nop
 8000b10:	08000b5d 	.word	0x08000b5d
 8000b14:	08000ba1 	.word	0x08000ba1
 8000b18:	08000b5d 	.word	0x08000b5d
 8000b1c:	08000ba1 	.word	0x08000ba1
 8000b20:	08000ba1 	.word	0x08000ba1
 8000b24:	08000ba1 	.word	0x08000ba1
 8000b28:	08000ba1 	.word	0x08000ba1
 8000b2c:	08000ba1 	.word	0x08000ba1
 8000b30:	08000b71 	.word	0x08000b71
 8000b34:	08000ba1 	.word	0x08000ba1
 8000b38:	08000ba1 	.word	0x08000ba1
 8000b3c:	08000ba1 	.word	0x08000ba1
 8000b40:	08000ba1 	.word	0x08000ba1
 8000b44:	08000ba1 	.word	0x08000ba1
 8000b48:	08000b91 	.word	0x08000b91
 8000b4c:	08000b91 	.word	0x08000b91
 8000b50:	08000ba1 	.word	0x08000ba1
 8000b54:	08000ba1 	.word	0x08000ba1
 8000b58:	08000b81 	.word	0x08000b81
  {
    case L6474_ABS_POS:
    case L6474_MARK:
      value = (float) L6474_ConvertPosition(registerValue);
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f000 ffab 	bl	8001ab8 <L6474_ConvertPosition>
 8000b62:	ee07 0a90 	vmov	s15, r0
 8000b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b6a:	edc7 7a03 	vstr	s15, [r7, #12]
      break;
 8000b6e:	e01e      	b.n	8000bae <L6474_GetAnalogValue+0xc6>
    case L6474_TVAL:
      value = L6474_Tval_Par_to_Current(registerValue);    
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 fe89 	bl	800288c <L6474_Tval_Par_to_Current>
 8000b7a:	ed87 0a03 	vstr	s0, [r7, #12]
      break;
 8000b7e:	e016      	b.n	8000bae <L6474_GetAnalogValue+0xc6>
    case L6474_OCD_TH:
      value = L6474_Ocd_Par_to_Th(registerValue);    
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	4618      	mov	r0, r3
 8000b86:	f001 fe45 	bl	8002814 <L6474_Ocd_Par_to_Th>
 8000b8a:	ed87 0a03 	vstr	s0, [r7, #12]
      break;      
 8000b8e:	e00e      	b.n	8000bae <L6474_GetAnalogValue+0xc6>
    case L6474_TON_MIN:
    case L6474_TOFF_MIN:
      value = L6474_Tmin_Par_to_Time(registerValue);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 fe91 	bl	80028bc <L6474_Tmin_Par_to_Time>
 8000b9a:	ed87 0a03 	vstr	s0, [r7, #12]
      break;          
 8000b9e:	e006      	b.n	8000bae <L6474_GetAnalogValue+0xc6>
    default:
      value = (float) registerValue;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	ee07 3a90 	vmov	s15, r3
 8000ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000baa:	edc7 7a03 	vstr	s15, [r7, #12]
  }
  return value;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	ee07 3a90 	vmov	s15, r3
}
 8000bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop

08000bc0 <L6474_GetCurrentSpeed>:
 * @brief Returns the current speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Speed in pps
 **********************************************************/
uint16_t L6474_GetCurrentSpeed(uint8_t deviceId)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].speed;
 8000bca:	79fa      	ldrb	r2, [r7, #7]
 8000bcc:	4907      	ldr	r1, [pc, #28]	; (8000bec <L6474_GetCurrentSpeed+0x2c>)
 8000bce:	4613      	mov	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	440b      	add	r3, r1
 8000bd8:	3320      	adds	r3, #32
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	b29b      	uxth	r3, r3
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	200001e4 	.word	0x200001e4

08000bf0 <L6474_GetDeceleration>:
 * @brief Returns the deceleration of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Deceleration in pps^2
 **********************************************************/
uint16_t L6474_GetDeceleration(uint8_t deviceId)
{                                                  
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].deceleration);
 8000bfa:	79fa      	ldrb	r2, [r7, #7]
 8000bfc:	4907      	ldr	r1, [pc, #28]	; (8000c1c <L6474_GetDeceleration+0x2c>)
 8000bfe:	4613      	mov	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	4413      	add	r3, r2
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	440b      	add	r3, r1
 8000c08:	331a      	adds	r3, #26
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	b29b      	uxth	r3, r3
}          
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	200001e4 	.word	0x200001e4

08000c20 <L6474_GetDeviceState>:
 * @brief Returns the device state
 * @param[in] deviceId (from 0 to 2)
 * @retval State (ACCELERATING, DECELERATING, STEADY or INACTIVE)
 **********************************************************/
motorState_t L6474_GetDeviceState(uint8_t deviceId)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].motionState;
 8000c2a:	79fa      	ldrb	r2, [r7, #7]
 8000c2c:	4907      	ldr	r1, [pc, #28]	; (8000c4c <L6474_GetDeviceState+0x2c>)
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	440b      	add	r3, r1
 8000c38:	3324      	adds	r3, #36	; 0x24
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b2db      	uxtb	r3, r3
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	200001e4 	.word	0x200001e4

08000c50 <L6474_GetDirection>:
 * @brief Get the motor current direction
 * @param[in] deviceId Unused parameter
 * @retval direction
 **********************************************************/
motorDir_t L6474_GetDirection(uint8_t deviceId)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].direction;
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	4907      	ldr	r1, [pc, #28]	; (8000c7c <L6474_GetDirection+0x2c>)
 8000c5e:	4613      	mov	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	440b      	add	r3, r1
 8000c68:	3323      	adds	r3, #35	; 0x23
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	200001e4 	.word	0x200001e4

08000c80 <L6474_GetFwVersion>:
/******************************************************//**
 * @brief Returns the FW version of the library
 * @retval L6474_FW_VERSION
 **********************************************************/
uint32_t L6474_GetFwVersion(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return (L6474_FW_VERSION);
 8000c84:	f44f 3385 	mov.w	r3, #68096	; 0x10a00
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <L6474_GetMotorHandle>:
/******************************************************//**
 * @brief  Return motor handle (pointer to the L6474 motor driver structure)
 * @retval Pointer to the motorDrv_t structure
 **********************************************************/
motorDrv_t* L6474_GetMotorHandle(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return (&l6474Drv);
 8000c98:	4b02      	ldr	r3, [pc, #8]	; (8000ca4 <L6474_GetMotorHandle+0x10>)
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <L6474_GetMark>:
 * @brief  Returns the mark position  of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval Mark register value converted in a 32b signed integer 
 **********************************************************/
int32_t L6474_GetMark(uint8_t deviceId)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2103      	movs	r1, #3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fc46 	bl	8000548 <L6474_CmdGetParam>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fefa 	bl	8001ab8 <L6474_ConvertPosition>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <L6474_GetMaxSpeed>:
 * @brief  Returns the max speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval maxSpeed in pps
 **********************************************************/
uint16_t L6474_GetMaxSpeed(uint8_t deviceId)
{                                                  
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].maxSpeed);
 8000cda:	79fa      	ldrb	r2, [r7, #7]
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <L6474_GetMaxSpeed+0x2c>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	440b      	add	r3, r1
 8000ce8:	331c      	adds	r3, #28
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	b29b      	uxth	r3, r3
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200001e4 	.word	0x200001e4

08000d00 <L6474_GetMinSpeed>:
 * @brief  Returns the min speed of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval minSpeed in pps
 **********************************************************/
uint16_t L6474_GetMinSpeed(uint8_t deviceId)
{                                                  
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  return (devicePrm[deviceId].minSpeed);
 8000d0a:	79fa      	ldrb	r2, [r7, #7]
 8000d0c:	4907      	ldr	r1, [pc, #28]	; (8000d2c <L6474_GetMinSpeed+0x2c>)
 8000d0e:	4613      	mov	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	440b      	add	r3, r1
 8000d18:	331e      	adds	r3, #30
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	b29b      	uxth	r3, r3
}                                                     
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200001e4 	.word	0x200001e4

08000d30 <L6474_GetNbDevices>:
/******************************************************//**
 * @brief  Returns the number of devices
 * @retval number of devices
 **********************************************************/
uint8_t L6474_GetNbDevices(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return (numberOfDevices);
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <L6474_GetNbDevices+0x14>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	200001c4 	.word	0x200001c4

08000d48 <L6474_GetPosition>:
 * @brief  Returns the ABS_POSITION of the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t L6474_GetPosition(uint8_t deviceId)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  return L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	2101      	movs	r1, #1
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fbf6 	bl	8000548 <L6474_CmdGetParam>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 feaa 	bl	8001ab8 <L6474_ConvertPosition>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <L6474_GetStepMode>:
 * @brief Get the motor step mode
 * @param[in] deviceId Unused parameter
 * @retval step mode
 **********************************************************/
motorStepMode_t L6474_GetStepMode(uint8_t deviceId)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  motorStepMode_t stepMode;
  uint8_t stepSelValue;
  
  /* Get STEP_SEL field of step mode register  */
  stepSelValue = (uint8_t)((0x07 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE))|0x08) ;
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2116      	movs	r1, #22
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fbe2 	bl	8000548 <L6474_CmdGetParam>
 8000d84:	4603      	mov	r3, r0
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	f043 0308 	orr.w	r3, r3, #8
 8000d92:	73bb      	strb	r3, [r7, #14]
  
   switch (stepSelValue)
 8000d94:	7bbb      	ldrb	r3, [r7, #14]
 8000d96:	3b08      	subs	r3, #8
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d81c      	bhi.n	8000dd6 <L6474_GetStepMode+0x66>
 8000d9c:	a201      	add	r2, pc, #4	; (adr r2, 8000da4 <L6474_GetStepMode+0x34>)
 8000d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da2:	bf00      	nop
 8000da4:	08000db9 	.word	0x08000db9
 8000da8:	08000dbf 	.word	0x08000dbf
 8000dac:	08000dc5 	.word	0x08000dc5
 8000db0:	08000dcb 	.word	0x08000dcb
 8000db4:	08000dd1 	.word	0x08000dd1
  {
    case L6474_STEP_SEL_1:
      stepMode = STEP_MODE_FULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]
      break;
 8000dbc:	e00e      	b.n	8000ddc <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_2:
      stepMode = STEP_MODE_HALF;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	73fb      	strb	r3, [r7, #15]
      break;    
 8000dc2:	e00b      	b.n	8000ddc <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_4:
      stepMode = STEP_MODE_1_4;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	73fb      	strb	r3, [r7, #15]
      break;        
 8000dc8:	e008      	b.n	8000ddc <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_8:
      stepMode = STEP_MODE_1_8;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	73fb      	strb	r3, [r7, #15]
      break;       
 8000dce:	e005      	b.n	8000ddc <L6474_GetStepMode+0x6c>
    case L6474_STEP_SEL_1_16:
      stepMode = STEP_MODE_1_16;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8000dd4:	e002      	b.n	8000ddc <L6474_GetStepMode+0x6c>
    default:
      stepMode = STEP_MODE_UNKNOW;
 8000dd6:	23fe      	movs	r3, #254	; 0xfe
 8000dd8:	73fb      	strb	r3, [r7, #15]
      break;       
 8000dda:	bf00      	nop
  }
  
  return stepMode;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop

08000de8 <L6474_GetStopMode>:
 * @brief Get the selected stop mode
 * @param[in] deviceId Unused parameter
 * @retval the selected stop mode
 **********************************************************/
motorStopMode_t L6474_GetStopMode(uint8_t deviceId)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  return devicePrm[deviceId].stopMode;
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	4907      	ldr	r1, [pc, #28]	; (8000e14 <L6474_GetStopMode+0x2c>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
 8000e00:	3325      	adds	r3, #37	; 0x25
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b2db      	uxtb	r3, r3
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200001e4 	.word	0x200001e4

08000e18 <L6474_GoHome>:
 * @brief  Requests the motor to move to the home position (ABS_POSITION = 0)
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoHome(uint8_t deviceId)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  L6474_GoTo(deviceId, 0);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f81e 	bl	8000e68 <L6474_GoTo>
} 
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <L6474_GoMark>:
 * @brief  Requests the motor to move to the mark position 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_GoMark(uint8_t deviceId)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  uint32_t mark;

  mark = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_MARK));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2103      	movs	r1, #3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fb80 	bl	8000548 <L6474_CmdGetParam>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 fe34 	bl	8001ab8 <L6474_ConvertPosition>
 8000e50:	4603      	mov	r3, r0
 8000e52:	60fb      	str	r3, [r7, #12]
  L6474_GoTo(deviceId,mark);  
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f804 	bl	8000e68 <L6474_GoTo>
}
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <L6474_GoTo>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void L6474_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  motorDir_t direction;
  int32_t steps;
  
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8000e74:	79fa      	ldrb	r2, [r7, #7]
 8000e76:	493a      	ldr	r1, [pc, #232]	; (8000f60 <L6474_GoTo+0xf8>)
 8000e78:	4613      	mov	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	440b      	add	r3, r1
 8000e82:	3324      	adds	r3, #36	; 0x24
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	d003      	beq.n	8000e94 <L6474_GoTo+0x2c>
  {
    L6474_HardStop(deviceId);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f868 	bl	8000f64 <L6474_HardStop>
  }

  /* Get current position */
  devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2101      	movs	r1, #1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fb55 	bl	8000548 <L6474_CmdGetParam>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	79fc      	ldrb	r4, [r7, #7]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fe08 	bl	8001ab8 <L6474_ConvertPosition>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	492d      	ldr	r1, [pc, #180]	; (8000f60 <L6474_GoTo+0xf8>)
 8000eac:	4623      	mov	r3, r4
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4423      	add	r3, r4
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	440b      	add	r3, r1
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	601a      	str	r2, [r3, #0]
  
  /* Compute the number of steps to perform */
  steps = targetPosition - devicePrm[deviceId].currentPosition;
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	4928      	ldr	r1, [pc, #160]	; (8000f60 <L6474_GoTo+0xf8>)
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3304      	adds	r3, #4
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	60bb      	str	r3, [r7, #8]
  //steps *= 2; // account for PWM clock divider
  
  if (steps >= 0) 
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0c      	blt.n	8000ef2 <L6474_GoTo+0x8a>
  {
    devicePrm[deviceId].stepsToTake = steps;
 8000ed8:	79fa      	ldrb	r2, [r7, #7]
 8000eda:	68b9      	ldr	r1, [r7, #8]
 8000edc:	4820      	ldr	r0, [pc, #128]	; (8000f60 <L6474_GoTo+0xf8>)
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4403      	add	r3, r0
 8000ee8:	3314      	adds	r3, #20
 8000eea:	6019      	str	r1, [r3, #0]
    direction = FORWARD;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	e00d      	b.n	8000f0e <L6474_GoTo+0xa6>
    
  } 
  else 
  {
    devicePrm[deviceId].stepsToTake = -steps;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	425b      	negs	r3, r3
 8000ef6:	79fa      	ldrb	r2, [r7, #7]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	4919      	ldr	r1, [pc, #100]	; (8000f60 <L6474_GoTo+0xf8>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3314      	adds	r3, #20
 8000f08:	6018      	str	r0, [r3, #0]
    direction = BACKWARD;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]
  }
  
  if (steps != 0) 
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d021      	beq.n	8000f58 <L6474_GoTo+0xf0>
  {
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 8000f14:	79fa      	ldrb	r2, [r7, #7]
 8000f16:	4912      	ldr	r1, [pc, #72]	; (8000f60 <L6474_GoTo+0xf8>)
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	440b      	add	r3, r1
 8000f22:	3322      	adds	r3, #34	; 0x22
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
        
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 8000f28:	7bfa      	ldrb	r2, [r7, #15]
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fb48 	bl	80015c4 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, devicePrm[deviceId].stepsToTake);
 8000f34:	79fa      	ldrb	r2, [r7, #7]
 8000f36:	490a      	ldr	r1, [pc, #40]	; (8000f60 <L6474_GoTo+0xf8>)
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	440b      	add	r3, r1
 8000f42:	3314      	adds	r3, #20
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fcf6 	bl	800193c <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 f908 	bl	8002168 <L6474_StartMovement>
  }  
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	200001e4 	.word	0x200001e4

08000f64 <L6474_HardStop>:
 * @brief  Immediatly stops the motor 
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HardStop(uint8_t deviceId) 
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if (devicePrm[deviceId].stopMode == HOLD_MODE)
 8000f6e:	79fa      	ldrb	r2, [r7, #7]
 8000f70:	4920      	ldr	r1, [pc, #128]	; (8000ff4 <L6474_HardStop+0x90>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3325      	adds	r3, #37	; 0x25
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d12d      	bne.n	8000fe2 <L6474_HardStop+0x7e>
  {
    /* Disable corresponding PWM */
    L6474_Board_PwmStop(deviceId);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 feb7 	bl	8002cfc <L6474_Board_PwmStop>

    /* Set inactive state */
    devicePrm[deviceId].motionState = INACTIVE;
 8000f8e:	79fa      	ldrb	r2, [r7, #7]
 8000f90:	4918      	ldr	r1, [pc, #96]	; (8000ff4 <L6474_HardStop+0x90>)
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	440b      	add	r3, r1
 8000f9c:	3324      	adds	r3, #36	; 0x24
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].commandExecuted = NO_CMD;
 8000fa2:	79fa      	ldrb	r2, [r7, #7]
 8000fa4:	4913      	ldr	r1, [pc, #76]	; (8000ff4 <L6474_HardStop+0x90>)
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	440b      	add	r3, r1
 8000fb0:	3322      	adds	r3, #34	; 0x22
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	701a      	strb	r2, [r3, #0]
    devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 8000fb6:	79fa      	ldrb	r2, [r7, #7]
 8000fb8:	490e      	ldr	r1, [pc, #56]	; (8000ff4 <L6474_HardStop+0x90>)
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3314      	adds	r3, #20
 8000fc6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000fca:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].speed = 0;
 8000fcc:	79fa      	ldrb	r2, [r7, #7]
 8000fce:	4909      	ldr	r1, [pc, #36]	; (8000ff4 <L6474_HardStop+0x90>)
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	3320      	adds	r3, #32
 8000fdc:	2200      	movs	r2, #0
 8000fde:	801a      	strh	r2, [r3, #0]
  else
  {
    //same handling for HIZ_MODE and STANDBY_MODE
    L6474_HizStop(deviceId);
  }
}
 8000fe0:	e003      	b.n	8000fea <L6474_HardStop+0x86>
    L6474_HizStop(deviceId);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f807 	bl	8000ff8 <L6474_HizStop>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001e4 	.word	0x200001e4

08000ff8 <L6474_HizStop>:
 * @brief  Immediatly stops the motor and disable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_HizStop(uint8_t deviceId) 
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  /* Disable corresponding PWM */
  L6474_Board_PwmStop(deviceId);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f001 fe79 	bl	8002cfc <L6474_Board_PwmStop>

  /* Disable power stage */
  L6474_CmdDisable(deviceId);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fa7f 	bl	8000510 <L6474_CmdDisable>

  /* Set inactive state */
  devicePrm[deviceId].motionState = INACTIVE;
 8001012:	79fa      	ldrb	r2, [r7, #7]
 8001014:	4915      	ldr	r1, [pc, #84]	; (800106c <L6474_HizStop+0x74>)
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	440b      	add	r3, r1
 8001020:	3324      	adds	r3, #36	; 0x24
 8001022:	2208      	movs	r2, #8
 8001024:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	4910      	ldr	r1, [pc, #64]	; (800106c <L6474_HizStop+0x74>)
 800102a:	4613      	mov	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	440b      	add	r3, r1
 8001034:	3322      	adds	r3, #34	; 0x22
 8001036:	2203      	movs	r2, #3
 8001038:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = MAX_STEPS;  
 800103a:	79fa      	ldrb	r2, [r7, #7]
 800103c:	490b      	ldr	r1, [pc, #44]	; (800106c <L6474_HizStop+0x74>)
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	3314      	adds	r3, #20
 800104a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800104e:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8001050:	79fa      	ldrb	r2, [r7, #7]
 8001052:	4906      	ldr	r1, [pc, #24]	; (800106c <L6474_HizStop+0x74>)
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	3320      	adds	r3, #32
 8001060:	2200      	movs	r2, #0
 8001062:	801a      	strh	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200001e4 	.word	0x200001e4

08001070 <L6474_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void L6474_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	603a      	str	r2, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	460b      	mov	r3, r1
 800107e:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 8001080:	79fa      	ldrb	r2, [r7, #7]
 8001082:	4926      	ldr	r1, [pc, #152]	; (800111c <L6474_Move+0xac>)
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	440b      	add	r3, r1
 800108e:	3324      	adds	r3, #36	; 0x24
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b08      	cmp	r3, #8
 8001096:	d003      	beq.n	80010a0 <L6474_Move+0x30>
  {
    L6474_HardStop(deviceId);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff62 	bl	8000f64 <L6474_HardStop>
  }
  
  if (stepCount != 0) 
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d035      	beq.n	8001112 <L6474_Move+0xa2>
  {
    //stepCount *= 2; // account for PWM clock divider

    devicePrm[deviceId].stepsToTake = stepCount;
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	491c      	ldr	r1, [pc, #112]	; (800111c <L6474_Move+0xac>)
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	440b      	add	r3, r1
 80010b4:	3314      	adds	r3, #20
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	601a      	str	r2, [r3, #0]
    
    devicePrm[deviceId].commandExecuted = MOVE_CMD;
 80010ba:	79fa      	ldrb	r2, [r7, #7]
 80010bc:	4917      	ldr	r1, [pc, #92]	; (800111c <L6474_Move+0xac>)
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	440b      	add	r3, r1
 80010c8:	3322      	adds	r3, #34	; 0x22
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
    
    devicePrm[deviceId].currentPosition = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS));
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2101      	movs	r1, #1
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fa38 	bl	8000548 <L6474_CmdGetParam>
 80010d8:	4603      	mov	r3, r0
 80010da:	79fc      	ldrb	r4, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fceb 	bl	8001ab8 <L6474_ConvertPosition>
 80010e2:	4602      	mov	r2, r0
 80010e4:	490d      	ldr	r1, [pc, #52]	; (800111c <L6474_Move+0xac>)
 80010e6:	4623      	mov	r3, r4
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4423      	add	r3, r4
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	440b      	add	r3, r1
 80010f0:	3304      	adds	r3, #4
 80010f2:	601a      	str	r2, [r3, #0]
    
    /* Direction setup */
    L6474_SetDirection(deviceId,direction);
 80010f4:	79ba      	ldrb	r2, [r7, #6]
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fa62 	bl	80015c4 <L6474_SetDirection>

    L6474_ComputeSpeedProfile(deviceId, stepCount);
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fc19 	bl	800193c <L6474_ComputeSpeedProfile>
    
    /* Motor activation */
    L6474_StartMovement(deviceId);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4618      	mov	r0, r3
 800110e:	f001 f82b 	bl	8002168 <L6474_StartMovement>
  }  
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	bd90      	pop	{r4, r7, pc}
 800111a:	bf00      	nop
 800111c:	200001e4 	.word	0x200001e4

08001120 <L6474_ReadId>:
/******************************************************//**
 * @brief Read id
 * @retval Id of the l6474 Driver Instance
 **********************************************************/
uint16_t L6474_ReadId(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return(l6474DriverInstance);
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <L6474_ReadId+0x14>)
 8001126:	881b      	ldrh	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200001e2 	.word	0x200001e2

08001138 <L6474_ReadStatusRegister>:
 * @retval Status register valued
 * @note The status register flags are not cleared 
 * at the difference with L6474CmdGetStatus()
 **********************************************************/
uint16_t L6474_ReadStatusRegister(uint8_t deviceId)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  return (L6474_CmdGetParam(deviceId,L6474_STATUS));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2119      	movs	r1, #25
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9fe 	bl	8000548 <L6474_CmdGetParam>
 800114c:	4603      	mov	r3, r0
 800114e:	b29b      	uxth	r3, r3
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <L6474_ReleaseReset>:
/******************************************************//**
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @retval None
 **********************************************************/
void L6474_ReleaseReset(uint8_t deviceId)
{ 
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  L6474_Board_ReleaseReset(deviceId); 
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f001 fdf3 	bl	8002d50 <L6474_Board_ReleaseReset>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <L6474_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Reset(uint8_t deviceId)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	71fb      	strb	r3, [r7, #7]
  L6474_Board_Reset(deviceId); 
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fdf8 	bl	8002d74 <L6474_Board_Reset>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <L6474_ResetAllDevices>:
/******************************************************//**
 * @brief Resets all L6474 devices
 * @retval None
 **********************************************************/
void L6474_ResetAllDevices(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 	uint8_t loop;
 	
 	for (loop = 0; loop < numberOfDevices; loop++)
 8001192:	2300      	movs	r3, #0
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	e014      	b.n	80011c2 <L6474_ResetAllDevices+0x36>
 	{
   	/* Stop movement and disable power stage*/
  	L6474_HizStop(loop);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff2c 	bl	8000ff8 <L6474_HizStop>
    L6474_Reset(loop);
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ffe5 	bl	8001172 <L6474_Reset>
    L6474_Board_Delay(1); // Reset pin must be forced low for at least 10us
 80011a8:	2001      	movs	r0, #1
 80011aa:	f001 fbe1 	bl	8002970 <L6474_Board_Delay>
    L6474_Board_ReleaseReset(loop);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f001 fdcd 	bl	8002d50 <L6474_Board_ReleaseReset>
    L6474_Board_Delay(1); 
 80011b6:	2001      	movs	r0, #1
 80011b8:	f001 fbda 	bl	8002970 <L6474_Board_Delay>
 	for (loop = 0; loop < numberOfDevices; loop++)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	3301      	adds	r3, #1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <L6474_ResetAllDevices+0x4c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	79fa      	ldrb	r2, [r7, #7]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d3e4      	bcc.n	8001198 <L6474_ResetAllDevices+0xc>
  }
}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200001c4 	.word	0x200001c4

080011dc <L6474_Run>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] direction FORWARD or BACKWARD
 * @retval None
 **********************************************************/
void L6474_Run(uint8_t deviceId, motorDir_t direction)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
  /* If required deactivate motor */
  if (devicePrm[deviceId].motionState != INACTIVE) 
 80011ec:	79fa      	ldrb	r2, [r7, #7]
 80011ee:	4913      	ldr	r1, [pc, #76]	; (800123c <L6474_Run+0x60>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	440b      	add	r3, r1
 80011fa:	3324      	adds	r3, #36	; 0x24
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b08      	cmp	r3, #8
 8001202:	d003      	beq.n	800120c <L6474_Run+0x30>
  {
    L6474_HardStop(deviceId);
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff feac 	bl	8000f64 <L6474_HardStop>
  }
  
	/* Direction setup */
	L6474_SetDirection(deviceId,direction);
 800120c:	79ba      	ldrb	r2, [r7, #6]
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f9d6 	bl	80015c4 <L6474_SetDirection>

	devicePrm[deviceId].commandExecuted = RUN_CMD;
 8001218:	79fa      	ldrb	r2, [r7, #7]
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <L6474_Run+0x60>)
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	3322      	adds	r3, #34	; 0x22
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]

	/* Motor activation */
	L6474_StartMovement(deviceId); 
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 ff9a 	bl	8002168 <L6474_StartMovement>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001e4 	.word	0x200001e4

08001240 <L6474_SelectStepMode>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] stepMod from full step to 1/16 microstep as specified in enum motorStepMode_t
 * @retval None
 **********************************************************/
bool L6474_SelectStepMode(uint8_t deviceId, motorStepMode_t stepMod)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	460a      	mov	r2, r1
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	4613      	mov	r3, r2
 800124e:	71bb      	strb	r3, [r7, #6]
  uint8_t stepModeRegister;
  L6474_STEP_SEL_t l6474StepMod;
  
  switch (stepMod)
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	2b03      	cmp	r3, #3
 8001254:	d816      	bhi.n	8001284 <L6474_SelectStepMode+0x44>
 8001256:	a201      	add	r2, pc, #4	; (adr r2, 800125c <L6474_SelectStepMode+0x1c>)
 8001258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125c:	0800126d 	.word	0x0800126d
 8001260:	08001273 	.word	0x08001273
 8001264:	08001279 	.word	0x08001279
 8001268:	0800127f 	.word	0x0800127f
  {
    case STEP_MODE_FULL:
      l6474StepMod = L6474_STEP_SEL_1;
 800126c:	2308      	movs	r3, #8
 800126e:	73fb      	strb	r3, [r7, #15]
      break;
 8001270:	e00b      	b.n	800128a <L6474_SelectStepMode+0x4a>
    case STEP_MODE_HALF:
      l6474StepMod = L6474_STEP_SEL_1_2;
 8001272:	2309      	movs	r3, #9
 8001274:	73fb      	strb	r3, [r7, #15]
      break;    
 8001276:	e008      	b.n	800128a <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_4:
      l6474StepMod = L6474_STEP_SEL_1_4;
 8001278:	230a      	movs	r3, #10
 800127a:	73fb      	strb	r3, [r7, #15]
      break;        
 800127c:	e005      	b.n	800128a <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_8:
      l6474StepMod = L6474_STEP_SEL_1_8;
 800127e:	230b      	movs	r3, #11
 8001280:	73fb      	strb	r3, [r7, #15]
      break;       
 8001282:	e002      	b.n	800128a <L6474_SelectStepMode+0x4a>
    case STEP_MODE_1_16:
    default:
      l6474StepMod = L6474_STEP_SEL_1_16;
 8001284:	230c      	movs	r3, #12
 8001286:	73fb      	strb	r3, [r7, #15]
      break;       
 8001288:	bf00      	nop
  }

  /* Deactivate motor*/
  L6474_HizStop(deviceId);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff feb3 	bl	8000ff8 <L6474_HizStop>
  
  /* Read Step mode register and clear STEP_SEL field */
  stepModeRegister = (uint8_t)(0xF8 & L6474_CmdGetParam(deviceId,L6474_STEP_MODE)) ;
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2116      	movs	r1, #22
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f956 	bl	8000548 <L6474_CmdGetParam>
 800129c:	4603      	mov	r3, r0
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	f023 0307 	bic.w	r3, r3, #7
 80012a4:	73bb      	strb	r3, [r7, #14]
  
  /* Apply new step mode */
  L6474_CmdSetParam(deviceId, L6474_STEP_MODE, stepModeRegister | (uint8_t)l6474StepMod);
 80012a6:	7bba      	ldrb	r2, [r7, #14]
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2116      	movs	r1, #22
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff facf 	bl	8000858 <L6474_CmdSetParam>

  /* Reset abs pos register */
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, 0);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2200      	movs	r2, #0
 80012be:	2101      	movs	r1, #1
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fac9 	bl	8000858 <L6474_CmdSetParam>
  
  return (1);
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <L6474_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	460a      	mov	r2, r1
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	4613      	mov	r3, r2
 80012de:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
  if ((newAcc != 0)&&
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d023      	beq.n	8001332 <L6474_SetAcceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80012ea:	79fa      	ldrb	r2, [r7, #7]
 80012ec:	4914      	ldr	r1, [pc, #80]	; (8001340 <L6474_SetAcceleration+0x70>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	3324      	adds	r3, #36	; 0x24
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
  if ((newAcc != 0)&&
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d00b      	beq.n	800131a <L6474_SetAcceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001302:	79fa      	ldrb	r2, [r7, #7]
 8001304:	490e      	ldr	r1, [pc, #56]	; (8001340 <L6474_SetAcceleration+0x70>)
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	3322      	adds	r3, #34	; 0x22
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10b      	bne.n	8001332 <L6474_SetAcceleration+0x62>
  {
    devicePrm[deviceId].acceleration = newAcc;
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	4908      	ldr	r1, [pc, #32]	; (8001340 <L6474_SetAcceleration+0x70>)
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	440b      	add	r3, r1
 8001328:	3318      	adds	r3, #24
 800132a:	88ba      	ldrh	r2, [r7, #4]
 800132c:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
  }    
  return cmdExecuted;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
}            
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	200001e4 	.word	0x200001e4

08001344 <L6474_SetAnalogValue>:
 * L6474_TVAL, L6474_TON_MIN, L6474_TOFF_MIN, L6474_OCD_TH)
 * @param[in] value Analog value to convert and set into the register
 * @retval TRUE if param and param is valid, FALSE otherwise
 *********************************************************/
bool L6474_SetAnalogValue(uint8_t deviceId, uint32_t param, float value)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t registerValue;
  bool result = TRUE;
 8001354:	2301      	movs	r3, #1
 8001356:	74fb      	strb	r3, [r7, #19]
  if ((value < 0)&&(param != L6474_ABS_POS)&&(param != L6474_MARK)) 
 8001358:	edd7 7a01 	vldr	s15, [r7, #4]
 800135c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001364:	d508      	bpl.n	8001378 <L6474_SetAnalogValue+0x34>
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d005      	beq.n	8001378 <L6474_SetAnalogValue+0x34>
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d002      	beq.n	8001378 <L6474_SetAnalogValue+0x34>
  {
    result = FALSE;
 8001372:	2300      	movs	r3, #0
 8001374:	74fb      	strb	r3, [r7, #19]
 8001376:	e0d9      	b.n	800152c <L6474_SetAnalogValue+0x1e8>
  }
  else
  {
    switch (param)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	3b01      	subs	r3, #1
 800137c:	2b12      	cmp	r3, #18
 800137e:	f200 80ca 	bhi.w	8001516 <L6474_SetAnalogValue+0x1d2>
 8001382:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <L6474_SetAnalogValue+0x44>)
 8001384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001388:	0800143b 	.word	0x0800143b
 800138c:	080013d5 	.word	0x080013d5
 8001390:	0800143b 	.word	0x0800143b
 8001394:	08001517 	.word	0x08001517
 8001398:	08001517 	.word	0x08001517
 800139c:	08001517 	.word	0x08001517
 80013a0:	08001517 	.word	0x08001517
 80013a4:	08001517 	.word	0x08001517
 80013a8:	080014a5 	.word	0x080014a5
 80013ac:	08001517 	.word	0x08001517
 80013b0:	08001517 	.word	0x08001517
 80013b4:	08001517 	.word	0x08001517
 80013b8:	08001517 	.word	0x08001517
 80013bc:	08001517 	.word	0x08001517
 80013c0:	080014f1 	.word	0x080014f1
 80013c4:	080014f1 	.word	0x080014f1
 80013c8:	08001517 	.word	0x08001517
 80013cc:	08001517 	.word	0x08001517
 80013d0:	080014cb 	.word	0x080014cb
    {
      case L6474_EL_POS:
        if  ((value !=0)&&
 80013d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	d021      	beq.n	8001426 <L6474_SetAnalogValue+0xe2>
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001538 <L6474_SetAnalogValue+0x1f4>
 80013ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f2:	dc15      	bgt.n	8001420 <L6474_SetAnalogValue+0xdc>
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
             (value < (1<<(7-(L6474_STEP_MODE_STEP_SEL & L6474_CmdGetParam(0,L6474_STEP_MODE)))))))
 80013f4:	2116      	movs	r1, #22
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff f8a6 	bl	8000548 <L6474_CmdGetParam>
 80013fc:	4603      	mov	r3, r0
 80013fe:	43db      	mvns	r3, r3
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	2201      	movs	r2, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ((value > (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK))||
 8001412:	ed97 7a01 	vldr	s14, [r7, #4]
 8001416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	d502      	bpl.n	8001426 <L6474_SetAnalogValue+0xe2>
        {
          result = FALSE;
 8001420:	2300      	movs	r3, #0
 8001422:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
        }
        break;
 8001424:	e079      	b.n	800151a <L6474_SetAnalogValue+0x1d6>
          registerValue = ((uint32_t) value)& (L6474_ELPOS_STEP_MASK | L6474_ELPOS_MICROSTEP_MASK);
 8001426:	edd7 7a01 	vldr	s15, [r7, #4]
 800142a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800142e:	ee17 3a90 	vmov	r3, s15
 8001432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001436:	617b      	str	r3, [r7, #20]
        break;
 8001438:	e06f      	b.n	800151a <L6474_SetAnalogValue+0x1d6>
      case L6474_ABS_POS:
      case L6474_MARK:
        if ((value >= L6474_MIN_POSITION) &&
 800143a:	edd7 7a01 	vldr	s15, [r7, #4]
 800143e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800153c <L6474_SetAnalogValue+0x1f8>
 8001442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144a:	db27      	blt.n	800149c <L6474_SetAnalogValue+0x158>
 800144c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001450:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001540 <L6474_SetAnalogValue+0x1fc>
 8001454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145c:	d81e      	bhi.n	800149c <L6474_SetAnalogValue+0x158>
            (value <= L6474_MAX_POSITION))
        {
          if (value >= 0)
 800145e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001462:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146a:	db09      	blt.n	8001480 <L6474_SetAnalogValue+0x13c>
          {
            registerValue = ((uint32_t) value)& L6474_ABS_POS_VALUE_MASK;
 800146c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001474:	ee17 3a90 	vmov	r3, s15
 8001478:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800147c:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 800147e:	e010      	b.n	80014a2 <L6474_SetAnalogValue+0x15e>
          }
          else
          {
            registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-value))& L6474_ABS_POS_VALUE_MASK) + 1;
 8001480:	edd7 7a01 	vldr	s15, [r7, #4]
 8001484:	eef1 7a67 	vneg.f32	s15, s15
 8001488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800148c:	ee17 3a90 	vmov	r3, s15
 8001490:	43db      	mvns	r3, r3
 8001492:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001496:	3301      	adds	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
          if (value >= 0)
 800149a:	e002      	b.n	80014a2 <L6474_SetAnalogValue+0x15e>
          }
        }
        else 
        {
          result = FALSE;
 800149c:	2300      	movs	r3, #0
 800149e:	74fb      	strb	r3, [r7, #19]
        }
        break;
 80014a0:	e03b      	b.n	800151a <L6474_SetAnalogValue+0x1d6>
 80014a2:	e03a      	b.n	800151a <L6474_SetAnalogValue+0x1d6>
      case L6474_TVAL:
        if (value > L6474_TVAL_MAX_VALUE)
 80014a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001544 <L6474_SetAnalogValue+0x200>
 80014ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	dd02      	ble.n	80014bc <L6474_SetAnalogValue+0x178>
        {
          result = FALSE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tval_Current_to_Par(value);
        }
        break;
 80014ba:	e02e      	b.n	800151a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tval_Current_to_Par(value);
 80014bc:	ed97 0a01 	vldr	s0, [r7, #4]
 80014c0:	f001 f9c0 	bl	8002844 <L6474_Tval_Current_to_Par>
 80014c4:	4603      	mov	r3, r0
 80014c6:	617b      	str	r3, [r7, #20]
        break;
 80014c8:	e027      	b.n	800151a <L6474_SetAnalogValue+0x1d6>
      case L6474_OCD_TH:
        if (value > L6474_OCD_TH_MAX_VALUE)
 80014ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ce:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001548 <L6474_SetAnalogValue+0x204>
 80014d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014da:	dd02      	ble.n	80014e2 <L6474_SetAnalogValue+0x19e>
        {
          result = FALSE;
 80014dc:	2300      	movs	r3, #0
 80014de:	74fb      	strb	r3, [r7, #19]
        }
        else 
        {
          registerValue = L6474_Ocd_Th_to_Par(value);
        }
        break;
 80014e0:	e01b      	b.n	800151a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Ocd_Th_to_Par(value);
 80014e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80014e6:	f001 f971 	bl	80027cc <L6474_Ocd_Th_to_Par>
 80014ea:	4603      	mov	r3, r0
 80014ec:	617b      	str	r3, [r7, #20]
        break;
 80014ee:	e014      	b.n	800151a <L6474_SetAnalogValue+0x1d6>
      case L6474_TON_MIN:
      case L6474_TOFF_MIN:
        if (value > L6474_TOFF_TON_MIN_MAX_VALUE)
 80014f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800154c <L6474_SetAnalogValue+0x208>
 80014f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	dd02      	ble.n	8001508 <L6474_SetAnalogValue+0x1c4>
        {
          result = FALSE;
 8001502:	2300      	movs	r3, #0
 8001504:	74fb      	strb	r3, [r7, #19]
        }
        else
        {
          registerValue = L6474_Tmin_Time_to_Par(value);
        }
        break;    
 8001506:	e008      	b.n	800151a <L6474_SetAnalogValue+0x1d6>
          registerValue = L6474_Tmin_Time_to_Par(value);
 8001508:	ed97 0a01 	vldr	s0, [r7, #4]
 800150c:	f001 f9ec 	bl	80028e8 <L6474_Tmin_Time_to_Par>
 8001510:	4603      	mov	r3, r0
 8001512:	617b      	str	r3, [r7, #20]
        break;    
 8001514:	e001      	b.n	800151a <L6474_SetAnalogValue+0x1d6>
      default:
        result = FALSE;
 8001516:	2300      	movs	r3, #0
 8001518:	74fb      	strb	r3, [r7, #19]
    }
    if (result != FALSE)
 800151a:	7cfb      	ldrb	r3, [r7, #19]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <L6474_SetAnalogValue+0x1e8>
    {
      L6474_CmdSetParam(deviceId, param, registerValue);
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f996 	bl	8000858 <L6474_CmdSetParam>
    }
  }
  return result;
 800152c:	7cfb      	ldrb	r3, [r7, #19]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	43ff8000 	.word	0x43ff8000
 800153c:	ca000000 	.word	0xca000000
 8001540:	49fffff8 	.word	0x49fffff8
 8001544:	457a0000 	.word	0x457a0000
 8001548:	45bb8000 	.word	0x45bb8000
 800154c:	42800000 	.word	0x42800000

08001550 <L6474_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool L6474_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	460a      	mov	r2, r1
 800155a:	71fb      	strb	r3, [r7, #7]
 800155c:	4613      	mov	r3, r2
 800155e:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]
  if ((newDec != 0)&& 
 8001564:	88bb      	ldrh	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d023      	beq.n	80015b2 <L6474_SetDeceleration+0x62>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800156a:	79fa      	ldrb	r2, [r7, #7]
 800156c:	4914      	ldr	r1, [pc, #80]	; (80015c0 <L6474_SetDeceleration+0x70>)
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	3324      	adds	r3, #36	; 0x24
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
  if ((newDec != 0)&& 
 800157e:	2b08      	cmp	r3, #8
 8001580:	d00b      	beq.n	800159a <L6474_SetDeceleration+0x4a>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 8001582:	79fa      	ldrb	r2, [r7, #7]
 8001584:	490e      	ldr	r1, [pc, #56]	; (80015c0 <L6474_SetDeceleration+0x70>)
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	3322      	adds	r3, #34	; 0x22
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10b      	bne.n	80015b2 <L6474_SetDeceleration+0x62>
  {
    devicePrm[deviceId].deceleration = newDec;
 800159a:	79fa      	ldrb	r2, [r7, #7]
 800159c:	4908      	ldr	r1, [pc, #32]	; (80015c0 <L6474_SetDeceleration+0x70>)
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	440b      	add	r3, r1
 80015a8:	331a      	adds	r3, #26
 80015aa:	88ba      	ldrh	r2, [r7, #4]
 80015ac:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
  }      
  return cmdExecuted;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}        
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	200001e4 	.word	0x200001e4

080015c4 <L6474_SetDirection>:
 * @note The direction change is only applied if the device 
 * is in INACTIVE state
 * @retval None
 **********************************************************/
void L6474_SetDirection(uint8_t deviceId, motorDir_t dir)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	460a      	mov	r2, r1
 80015ce:	71fb      	strb	r3, [r7, #7]
 80015d0:	4613      	mov	r3, r2
 80015d2:	71bb      	strb	r3, [r7, #6]
  if (devicePrm[deviceId].motionState == INACTIVE)
 80015d4:	79fa      	ldrb	r2, [r7, #7]
 80015d6:	490f      	ldr	r1, [pc, #60]	; (8001614 <L6474_SetDirection+0x50>)
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	440b      	add	r3, r1
 80015e2:	3324      	adds	r3, #36	; 0x24
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d10f      	bne.n	800160c <L6474_SetDirection+0x48>
  {
    devicePrm[deviceId].direction = dir;
 80015ec:	79fa      	ldrb	r2, [r7, #7]
 80015ee:	4909      	ldr	r1, [pc, #36]	; (8001614 <L6474_SetDirection+0x50>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	3323      	adds	r3, #35	; 0x23
 80015fc:	79ba      	ldrb	r2, [r7, #6]
 80015fe:	701a      	strb	r2, [r3, #0]
    L6474_Board_SetDirectionGpio(deviceId, dir);
 8001600:	79ba      	ldrb	r2, [r7, #6]
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f001 fbc6 	bl	8002d98 <L6474_Board_SetDirectionGpio>
  }
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200001e4 	.word	0x200001e4

08001618 <L6474_SetHome>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new home position
 * @retval None
 **********************************************************/
void L6474_SetHome(uint8_t deviceId, int32_t homePos)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  int32_t absHomePos = L6474_ConvertPosition(L6474_CmdGetParam(deviceId,L6474_ABS_POS)) - homePos;
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	2101      	movs	r1, #1
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff8d 	bl	8000548 <L6474_CmdGetParam>
 800162e:	4603      	mov	r3, r0
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fa41 	bl	8001ab8 <L6474_ConvertPosition>
 8001636:	4602      	mov	r2, r0
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	60bb      	str	r3, [r7, #8]
  uint32_t registerValue;
  
  if (absHomePos >= 0)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db04      	blt.n	800164e <L6474_SetHome+0x36>
  {
    registerValue = ((uint32_t) absHomePos)& L6474_ABS_POS_VALUE_MASK;
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	e005      	b.n	800165a <L6474_SetHome+0x42>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-absHomePos))& L6474_ABS_POS_VALUE_MASK) + 1;
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	3b01      	subs	r3, #1
 8001652:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001656:	3301      	adds	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
  }
 
  L6474_CmdSetParam(deviceId, L6474_ABS_POS, registerValue);
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	2101      	movs	r1, #1
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff f8f9 	bl	8000858 <L6474_CmdSetParam>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <L6474_SetNbDevices>:
 * @param[in] nbDevices (from 1 to MAX_NUMBER_OF_DEVICES)
 * @retval TRUE if successfull, FALSE if failure, attempt to set a number of 
 * devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool L6474_SetNbDevices(uint8_t nbDevices)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  if (nbDevices <= MAX_NUMBER_OF_DEVICES)
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	2b03      	cmp	r3, #3
 800167e:	d807      	bhi.n	8001690 <L6474_SetNbDevices+0x20>
  {
    l6474DriverInstance = 0;
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <L6474_SetNbDevices+0x30>)
 8001682:	2200      	movs	r2, #0
 8001684:	801a      	strh	r2, [r3, #0]
    numberOfDevices = nbDevices;
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <L6474_SetNbDevices+0x34>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	7013      	strb	r3, [r2, #0]
    return TRUE;
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <L6474_SetNbDevices+0x22>
  }
  else
  {
    return FALSE;
 8001690:	2300      	movs	r3, #0
  }
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	200001e2 	.word	0x200001e2
 80016a4:	200001c4 	.word	0x200001c4

080016a8 <L6474_SetMark>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] markPos new Mark position
 * @retval None
 **********************************************************/
void L6474_SetMark(uint8_t deviceId, int32_t markPos)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  uint32_t registerValue;
  if (markPos >= 0)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db04      	blt.n	80016c4 <L6474_SetMark+0x1c>
  {
    registerValue = ((uint32_t) markPos)& L6474_ABS_POS_VALUE_MASK;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	e005      	b.n	80016d0 <L6474_SetMark+0x28>
  }
  else
  {
    registerValue = L6474_ABS_POS_VALUE_MASK - (((uint32_t) (-markPos))& L6474_ABS_POS_VALUE_MASK) + 1;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80016cc:	3301      	adds	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
  }
  
  L6474_CmdSetParam(deviceId,L6474_MARK, registerValue);
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	2103      	movs	r1, #3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff f8be 	bl	8000858 <L6474_CmdSetParam>
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <L6474_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	460a      	mov	r2, r1
 80016ee:	71fb      	strb	r3, [r7, #7]
 80016f0:	4613      	mov	r3, r2
 80016f2:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]
  if ((newMaxSpeed >= L6474_MIN_PWM_FREQ)&&
 80016f8:	88bb      	ldrh	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d035      	beq.n	800176a <L6474_SetMaxSpeed+0x86>
 80016fe:	88bb      	ldrh	r3, [r7, #4]
 8001700:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001704:	4293      	cmp	r3, r2
 8001706:	d830      	bhi.n	800176a <L6474_SetMaxSpeed+0x86>
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001708:	79fa      	ldrb	r2, [r7, #7]
 800170a:	491b      	ldr	r1, [pc, #108]	; (8001778 <L6474_SetMaxSpeed+0x94>)
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	331e      	adds	r3, #30
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
      (newMaxSpeed <= L6474_MAX_PWM_FREQ) &&
 800171c:	88ba      	ldrh	r2, [r7, #4]
 800171e:	429a      	cmp	r2, r3
 8001720:	d323      	bcc.n	800176a <L6474_SetMaxSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 8001722:	79fa      	ldrb	r2, [r7, #7]
 8001724:	4914      	ldr	r1, [pc, #80]	; (8001778 <L6474_SetMaxSpeed+0x94>)
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	3324      	adds	r3, #36	; 0x24
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
      (devicePrm[deviceId].minSpeed <= newMaxSpeed) &&
 8001736:	2b08      	cmp	r3, #8
 8001738:	d00b      	beq.n	8001752 <L6474_SetMaxSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 800173a:	79fa      	ldrb	r2, [r7, #7]
 800173c:	490e      	ldr	r1, [pc, #56]	; (8001778 <L6474_SetMaxSpeed+0x94>)
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	3322      	adds	r3, #34	; 0x22
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10b      	bne.n	800176a <L6474_SetMaxSpeed+0x86>
  {
    devicePrm[deviceId].maxSpeed = newMaxSpeed;
 8001752:	79fa      	ldrb	r2, [r7, #7]
 8001754:	4908      	ldr	r1, [pc, #32]	; (8001778 <L6474_SetMaxSpeed+0x94>)
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	331c      	adds	r3, #28
 8001762:	88ba      	ldrh	r2, [r7, #4]
 8001764:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
  }
  return cmdExecuted;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	200001e4 	.word	0x200001e4

0800177c <L6474_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool L6474_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	460a      	mov	r2, r1
 8001786:	71fb      	strb	r3, [r7, #7]
 8001788:	4613      	mov	r3, r2
 800178a:	80bb      	strh	r3, [r7, #4]
  bool cmdExecuted = FALSE;
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]
  if ((newMinSpeed >= L6474_MIN_PWM_FREQ)&&
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d035      	beq.n	8001802 <L6474_SetMinSpeed+0x86>
 8001796:	88bb      	ldrh	r3, [r7, #4]
 8001798:	f649 4240 	movw	r2, #40000	; 0x9c40
 800179c:	4293      	cmp	r3, r2
 800179e:	d830      	bhi.n	8001802 <L6474_SetMinSpeed+0x86>
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 80017a0:	79fa      	ldrb	r2, [r7, #7]
 80017a2:	491b      	ldr	r1, [pc, #108]	; (8001810 <L6474_SetMinSpeed+0x94>)
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	331c      	adds	r3, #28
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	b29b      	uxth	r3, r3
      (newMinSpeed <= L6474_MAX_PWM_FREQ) &&
 80017b4:	88ba      	ldrh	r2, [r7, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d823      	bhi.n	8001802 <L6474_SetMinSpeed+0x86>
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80017ba:	79fa      	ldrb	r2, [r7, #7]
 80017bc:	4914      	ldr	r1, [pc, #80]	; (8001810 <L6474_SetMinSpeed+0x94>)
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	3324      	adds	r3, #36	; 0x24
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b2db      	uxtb	r3, r3
      (newMinSpeed <= devicePrm[deviceId].maxSpeed) && 
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d00b      	beq.n	80017ea <L6474_SetMinSpeed+0x6e>
       (devicePrm[deviceId].commandExecuted == RUN_CMD)))
 80017d2:	79fa      	ldrb	r2, [r7, #7]
 80017d4:	490e      	ldr	r1, [pc, #56]	; (8001810 <L6474_SetMinSpeed+0x94>)
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	440b      	add	r3, r1
 80017e0:	3322      	adds	r3, #34	; 0x22
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
      ((devicePrm[deviceId].motionState == INACTIVE)||
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10b      	bne.n	8001802 <L6474_SetMinSpeed+0x86>
  {
    devicePrm[deviceId].minSpeed = newMinSpeed;
 80017ea:	79fa      	ldrb	r2, [r7, #7]
 80017ec:	4908      	ldr	r1, [pc, #32]	; (8001810 <L6474_SetMinSpeed+0x94>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	331e      	adds	r3, #30
 80017fa:	88ba      	ldrh	r2, [r7, #4]
 80017fc:	801a      	strh	r2, [r3, #0]
    cmdExecuted = TRUE;
 80017fe:	2301      	movs	r3, #1
 8001800:	73fb      	strb	r3, [r7, #15]
  }  
  return cmdExecuted;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	200001e4 	.word	0x200001e4

08001814 <L6474_SetStopMode>:
 * @param[in] deviceId Unused parameter
 * @param[in] stopMode HOLD_MODE to let power bridge enabled
 * @retval None
 **********************************************************/
void L6474_SetStopMode(uint8_t deviceId, motorStopMode_t stopMode)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	460a      	mov	r2, r1
 800181e:	71fb      	strb	r3, [r7, #7]
 8001820:	4613      	mov	r3, r2
 8001822:	71bb      	strb	r3, [r7, #6]
  devicePrm[deviceId].stopMode = stopMode;
 8001824:	79fa      	ldrb	r2, [r7, #7]
 8001826:	4907      	ldr	r1, [pc, #28]	; (8001844 <L6474_SetStopMode+0x30>)
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	3325      	adds	r3, #37	; 0x25
 8001834:	79ba      	ldrb	r2, [r7, #6]
 8001836:	701a      	strb	r2, [r3, #0]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	200001e4 	.word	0x200001e4

08001848 <L6474_SoftStop>:
 * @param[in] deviceId (from 0 to 2)
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool L6474_SoftStop(uint8_t deviceId)
{	
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  bool cmdExecuted = FALSE;
 8001852:	2300      	movs	r3, #0
 8001854:	73fb      	strb	r3, [r7, #15]
  if (devicePrm[deviceId].motionState != INACTIVE)
 8001856:	79fa      	ldrb	r2, [r7, #7]
 8001858:	490e      	ldr	r1, [pc, #56]	; (8001894 <L6474_SoftStop+0x4c>)
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	3324      	adds	r3, #36	; 0x24
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b08      	cmp	r3, #8
 800186c:	d00b      	beq.n	8001886 <L6474_SoftStop+0x3e>
  {
    devicePrm[deviceId].commandExecuted = SOFT_STOP_CMD;
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	4908      	ldr	r1, [pc, #32]	; (8001894 <L6474_SoftStop+0x4c>)
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	3322      	adds	r3, #34	; 0x22
 800187e:	2202      	movs	r2, #2
 8001880:	701a      	strb	r2, [r3, #0]
    cmdExecuted = TRUE;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
  }
  return (cmdExecuted);
 8001886:	7bfb      	ldrb	r3, [r7, #15]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	200001e4 	.word	0x200001e4

08001898 <L6474_WaitWhileActive>:
 * @brief  Locks until the device state becomes Inactive
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_WaitWhileActive(uint8_t deviceId)
 {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
	/* Wait while motor is running */
	while (L6474_GetDeviceState(deviceId) != INACTIVE);
 80018a2:	bf00      	nop
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff f9ba 	bl	8000c20 <L6474_GetDeviceState>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d1f8      	bne.n	80018a4 <L6474_WaitWhileActive+0xc>
}
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <L6474_ApplySpeed>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] newSpeed in pps
 * @retval None
 **********************************************************/
void L6474_ApplySpeed(uint8_t deviceId, uint16_t newSpeed)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	460a      	mov	r2, r1
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	4613      	mov	r3, r2
 80018ca:	80bb      	strh	r3, [r7, #4]
  if (newSpeed < L6474_MIN_PWM_FREQ)
 80018cc:	88bb      	ldrh	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <L6474_ApplySpeed+0x1a>
  {
    newSpeed = L6474_MIN_PWM_FREQ;  
 80018d2:	2301      	movs	r3, #1
 80018d4:	80bb      	strh	r3, [r7, #4]
  }
  if (newSpeed > L6474_MAX_PWM_FREQ)
 80018d6:	88bb      	ldrh	r3, [r7, #4]
 80018d8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80018dc:	4293      	cmp	r3, r2
 80018de:	d902      	bls.n	80018e6 <L6474_ApplySpeed+0x2a>
  {
    newSpeed = L6474_MAX_PWM_FREQ;
 80018e0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80018e4:	80bb      	strh	r3, [r7, #4]
  }
  
  devicePrm[deviceId].speed = newSpeed;
 80018e6:	79fa      	ldrb	r2, [r7, #7]
 80018e8:	4913      	ldr	r1, [pc, #76]	; (8001938 <L6474_ApplySpeed+0x7c>)
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	3320      	adds	r3, #32
 80018f6:	88ba      	ldrh	r2, [r7, #4]
 80018f8:	801a      	strh	r2, [r3, #0]

  switch (deviceId)
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d010      	beq.n	8001922 <L6474_ApplySpeed+0x66>
 8001900:	2b02      	cmp	r3, #2
 8001902:	dc13      	bgt.n	800192c <L6474_ApplySpeed+0x70>
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <L6474_ApplySpeed+0x52>
 8001908:	2b01      	cmp	r3, #1
 800190a:	d005      	beq.n	8001918 <L6474_ApplySpeed+0x5c>
      break;
    case 2:
      L6474_Board_Pwm3SetFreq(newSpeed);
      break;
    default:
      break; //ignore error
 800190c:	e00e      	b.n	800192c <L6474_ApplySpeed+0x70>
      L6474_Board_Pwm1SetFreq(newSpeed);
 800190e:	88bb      	ldrh	r3, [r7, #4]
 8001910:	4618      	mov	r0, r3
 8001912:	f001 f925 	bl	8002b60 <L6474_Board_Pwm1SetFreq>
      break;
 8001916:	e00a      	b.n	800192e <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm2SetFreq(newSpeed);
 8001918:	88bb      	ldrh	r3, [r7, #4]
 800191a:	4618      	mov	r0, r3
 800191c:	f001 f946 	bl	8002bac <L6474_Board_Pwm2SetFreq>
      break;
 8001920:	e005      	b.n	800192e <L6474_ApplySpeed+0x72>
      L6474_Board_Pwm3SetFreq(newSpeed);
 8001922:	88bb      	ldrh	r3, [r7, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	f001 f969 	bl	8002bfc <L6474_Board_Pwm3SetFreq>
      break;
 800192a:	e000      	b.n	800192e <L6474_ApplySpeed+0x72>
      break; //ignore error
 800192c:	bf00      	nop
  }
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200001e4 	.word	0x200001e4

0800193c <L6474_ComputeSpeedProfile>:
 * speed.
 * Else, a triangular move is performed (no steady phase: the maximum speed is never
 * reached.
 **********************************************************/
void L6474_ComputeSpeedProfile(uint8_t deviceId, uint32_t nbSteps)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
  uint32_t reqAccSteps; 
	uint32_t reqDecSteps;
   
  /* compute the number of steps to get the targeted speed */
  uint16_t minSpeed = devicePrm[deviceId].minSpeed;
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	495a      	ldr	r1, [pc, #360]	; (8001ab4 <L6474_ComputeSpeedProfile+0x178>)
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	331e      	adds	r3, #30
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	837b      	strh	r3, [r7, #26]
  reqAccSteps = (devicePrm[deviceId].maxSpeed - minSpeed);
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	4955      	ldr	r1, [pc, #340]	; (8001ab4 <L6474_ComputeSpeedProfile+0x178>)
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	331c      	adds	r3, #28
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	8b7b      	ldrh	r3, [r7, #26]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	61fb      	str	r3, [r7, #28]
  reqAccSteps *= (devicePrm[deviceId].maxSpeed + minSpeed);
 8001978:	79fa      	ldrb	r2, [r7, #7]
 800197a:	494e      	ldr	r1, [pc, #312]	; (8001ab4 <L6474_ComputeSpeedProfile+0x178>)
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	331c      	adds	r3, #28
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	8b7b      	ldrh	r3, [r7, #26]
 8001990:	4413      	add	r3, r2
 8001992:	461a      	mov	r2, r3
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	61fb      	str	r3, [r7, #28]
  reqDecSteps = reqAccSteps;
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	617b      	str	r3, [r7, #20]
  reqAccSteps /= (uint32_t)devicePrm[deviceId].acceleration;
 80019a0:	79fa      	ldrb	r2, [r7, #7]
 80019a2:	4944      	ldr	r1, [pc, #272]	; (8001ab4 <L6474_ComputeSpeedProfile+0x178>)
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	3318      	adds	r3, #24
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80019bc:	61fb      	str	r3, [r7, #28]
  reqAccSteps /= 2;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	085b      	lsrs	r3, r3, #1
 80019c2:	61fb      	str	r3, [r7, #28]

  /* compute the number of steps to stop */
  reqDecSteps /= (uint32_t)devicePrm[deviceId].deceleration;
 80019c4:	79fa      	ldrb	r2, [r7, #7]
 80019c6:	493b      	ldr	r1, [pc, #236]	; (8001ab4 <L6474_ComputeSpeedProfile+0x178>)
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	440b      	add	r3, r1
 80019d2:	331a      	adds	r3, #26
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80019e0:	617b      	str	r3, [r7, #20]
  reqDecSteps /= 2;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	617b      	str	r3, [r7, #20]

	if(( reqAccSteps + reqDecSteps ) > nbSteps)
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	4413      	add	r3, r2
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d242      	bcs.n	8001a7a <L6474_ComputeSpeedProfile+0x13e>
	{	
    /* Triangular move  */
    /* reqDecSteps = (Pos * Dec) /(Dec+Acc) */
    uint32_t dec = devicePrm[deviceId].deceleration;
 80019f4:	79fa      	ldrb	r2, [r7, #7]
 80019f6:	492f      	ldr	r1, [pc, #188]	; (8001ab4 <L6474_ComputeSpeedProfile+0x178>)
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	331a      	adds	r3, #26
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	613b      	str	r3, [r7, #16]
    uint32_t acc = devicePrm[deviceId].acceleration;
 8001a0a:	79fa      	ldrb	r2, [r7, #7]
 8001a0c:	4929      	ldr	r1, [pc, #164]	; (8001ab4 <L6474_ComputeSpeedProfile+0x178>)
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	440b      	add	r3, r1
 8001a18:	3318      	adds	r3, #24
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	60fb      	str	r3, [r7, #12]
    
    reqDecSteps =  ((uint32_t) dec * nbSteps) / (acc + dec);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	fb03 f202 	mul.w	r2, r3, r2
 8001a28:	68f9      	ldr	r1, [r7, #12]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	440b      	add	r3, r1
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
    if (reqDecSteps > 1)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d908      	bls.n	8001a4c <L6474_ComputeSpeedProfile+0x110>
    {
      reqAccSteps = reqDecSteps - 1;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
      if(reqAccSteps == 0)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d104      	bne.n	8001a50 <L6474_ComputeSpeedProfile+0x114>
      {
        reqAccSteps = 1;
 8001a46:	2301      	movs	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	e001      	b.n	8001a50 <L6474_ComputeSpeedProfile+0x114>
      }      
    }
    else
    {
      reqAccSteps = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
    }
    devicePrm[deviceId].endAccPos = reqAccSteps;
 8001a50:	79fa      	ldrb	r2, [r7, #7]
 8001a52:	4918      	ldr	r1, [pc, #96]	; (8001ab4 <L6474_ComputeSpeedProfile+0x178>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3308      	adds	r3, #8
 8001a60:	69fa      	ldr	r2, [r7, #28]
 8001a62:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = reqDecSteps;
 8001a64:	79fa      	ldrb	r2, [r7, #7]
 8001a66:	4913      	ldr	r1, [pc, #76]	; (8001ab4 <L6474_ComputeSpeedProfile+0x178>)
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	3310      	adds	r3, #16
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]
    /* steady phase from  endAccPos to startDecPos */
    /* decelerating from startDecPos to stepsToTake*/
    devicePrm[deviceId].endAccPos = reqAccSteps;
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
	}
}
 8001a78:	e016      	b.n	8001aa8 <L6474_ComputeSpeedProfile+0x16c>
    devicePrm[deviceId].endAccPos = reqAccSteps;
 8001a7a:	79fa      	ldrb	r2, [r7, #7]
 8001a7c:	490d      	ldr	r1, [pc, #52]	; (8001ab4 <L6474_ComputeSpeedProfile+0x178>)
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	3308      	adds	r3, #8
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	601a      	str	r2, [r3, #0]
    devicePrm[deviceId].startDecPos = nbSteps - reqDecSteps - 1;
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	79fa      	ldrb	r2, [r7, #7]
 8001a96:	1e59      	subs	r1, r3, #1
 8001a98:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <L6474_ComputeSpeedProfile+0x178>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4403      	add	r3, r0
 8001aa4:	3310      	adds	r3, #16
 8001aa6:	6019      	str	r1, [r3, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	3724      	adds	r7, #36	; 0x24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	200001e4 	.word	0x200001e4

08001ab8 <L6474_ConvertPosition>:
 * @brief  Converts the ABS_POSITION register value to a 32b signed integer
 * @param[in] abs_position_reg value of the ABS_POSITION register
 * @retval operation_result 32b signed integer corresponding to the absolute position 
 **********************************************************/
int32_t L6474_ConvertPosition(uint32_t abs_position_reg)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  int32_t operation_result;

  if (abs_position_reg & L6474_ABS_POS_SIGN_BIT_MASK) 
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00d      	beq.n	8001ae6 <L6474_ConvertPosition+0x2e>
  {
    /* Negative register value */
    abs_position_reg = ~abs_position_reg;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	607b      	str	r3, [r7, #4]
    abs_position_reg += 1;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	607b      	str	r3, [r7, #4]

    operation_result = (int32_t) (abs_position_reg & L6474_ABS_POS_VALUE_MASK);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8001adc:	60fb      	str	r3, [r7, #12]
    operation_result = -operation_result;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	425b      	negs	r3, r3
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e001      	b.n	8001aea <L6474_ConvertPosition+0x32>
  } 
  else 
  {
    operation_result = (int32_t) abs_position_reg;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]
  }
  return operation_result;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <L6474_ErrorHandler>:
 * @brief Error handler which calls the user callback (if defined)
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6474_ErrorHandler(uint16_t error)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	80fb      	strh	r3, [r7, #6]
  if (errorHandlerCallback != 0)
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <L6474_ErrorHandler+0x28>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <L6474_ErrorHandler+0x1e>
  {
    (void) errorHandlerCallback(error);
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <L6474_ErrorHandler+0x28>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	88fa      	ldrh	r2, [r7, #6]
 8001b10:	4610      	mov	r0, r2
 8001b12:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop */
    }
  }
}
 8001b14:	e000      	b.n	8001b18 <L6474_ErrorHandler+0x20>
    while(1)
 8001b16:	e7fe      	b.n	8001b16 <L6474_ErrorHandler+0x1e>
}
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200001c0 	.word	0x200001c0

08001b24 <L6474_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6474_FlagInterruptHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  if (flagInterruptCallback != 0)
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <L6474_FlagInterruptHandler+0x24>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <L6474_FlagInterruptHandler+0x1e>
  {
    /* Set isr flag */
    isrFlag = TRUE;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <L6474_FlagInterruptHandler+0x28>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
    
    flagInterruptCallback();
 8001b36:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <L6474_FlagInterruptHandler+0x24>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4798      	blx	r3
    
    /* Reset isr flag */
    isrFlag = FALSE;   
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <L6474_FlagInterruptHandler+0x28>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
  }
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200001bc 	.word	0x200001bc
 8001b4c:	200001e1 	.word	0x200001e1

08001b50 <L6474_SendCommand>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] param Command to send 
 * @retval None
 **********************************************************/
void L6474_SendCommand(uint8_t deviceId, uint8_t param)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	460a      	mov	r2, r1
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	71bb      	strb	r3, [r7, #6]
  uint32_t i;
  uint8_t spiIndex = numberOfDevices - deviceId - 1;
 8001b60:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <L6474_SendCommand+0x90>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	72bb      	strb	r3, [r7, #10]
  bool itDisable = FALSE;  
 8001b70:	2300      	movs	r3, #0
 8001b72:	72fb      	strb	r3, [r7, #11]
  
  do
  {
    spiPreemtionByIsr = FALSE;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <L6474_SendCommand+0x94>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
    if (itDisable)
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <L6474_SendCommand+0x38>
    {
      /* re-enable L6474_Board_EnableIrq if disable in previous iteration */
      L6474_Board_EnableIrq();
 8001b80:	f000 ff0a 	bl	8002998 <L6474_Board_EnableIrq>
      itDisable = FALSE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	72fb      	strb	r3, [r7, #11]
    }
  
    for (i = 0; i < numberOfDevices; i++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	e008      	b.n	8001ba0 <L6474_SendCommand+0x50>
    {
      spiTxBursts[3][i] = L6474_NOP;     
 8001b8e:	4a16      	ldr	r2, [pc, #88]	; (8001be8 <L6474_SendCommand+0x98>)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	3309      	adds	r3, #9
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < numberOfDevices; i++)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <L6474_SendCommand+0x90>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d3ef      	bcc.n	8001b8e <L6474_SendCommand+0x3e>
    }
    spiTxBursts[3][spiIndex] = param;
 8001bae:	7abb      	ldrb	r3, [r7, #10]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <L6474_SendCommand+0x98>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	79ba      	ldrb	r2, [r7, #6]
 8001bb6:	725a      	strb	r2, [r3, #9]
    
    /* Disable interruption before checking */
    /* pre-emption by ISR and SPI transfers*/
    L6474_Board_DisableIrq();
 8001bb8:	f000 fee5 	bl	8002986 <L6474_Board_DisableIrq>
    itDisable = TRUE;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	72fb      	strb	r3, [r7, #11]
  } while (spiPreemtionByIsr); // check pre-emption by ISR
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <L6474_SendCommand+0x94>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1d4      	bne.n	8001b74 <L6474_SendCommand+0x24>

  L6474_WriteBytes(&spiTxBursts[3][0], &spiRxBursts[3][0]); 
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <L6474_SendCommand+0x9c>)
 8001bcc:	4808      	ldr	r0, [pc, #32]	; (8001bf0 <L6474_SendCommand+0xa0>)
 8001bce:	f000 fea9 	bl	8002924 <L6474_WriteBytes>
  
  /* re-enable L6474_Board_EnableIrq after SPI transfers*/
  L6474_Board_EnableIrq();
 8001bd2:	f000 fee1 	bl	8002998 <L6474_Board_EnableIrq>
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200001c4 	.word	0x200001c4
 8001be4:	200001e0 	.word	0x200001e0
 8001be8:	200001c8 	.word	0x200001c8
 8001bec:	200001dd 	.word	0x200001dd
 8001bf0:	200001d1 	.word	0x200001d1

08001bf4 <L6474_SetDeviceParamsToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = pInitPrm->acceleration_step_s2;
 8001c00:	79fa      	ldrb	r2, [r7, #7]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	8818      	ldrh	r0, [r3, #0]
 8001c06:	494c      	ldr	r1, [pc, #304]	; (8001d38 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	440b      	add	r3, r1
 8001c12:	3318      	adds	r3, #24
 8001c14:	4602      	mov	r2, r0
 8001c16:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = pInitPrm->deceleration_step_s2;
 8001c18:	79fa      	ldrb	r2, [r7, #7]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	8858      	ldrh	r0, [r3, #2]
 8001c1e:	4946      	ldr	r1, [pc, #280]	; (8001d38 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	440b      	add	r3, r1
 8001c2a:	331a      	adds	r3, #26
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = pInitPrm->maximum_speed_step_s;
 8001c30:	79fa      	ldrb	r2, [r7, #7]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	8898      	ldrh	r0, [r3, #4]
 8001c36:	4940      	ldr	r1, [pc, #256]	; (8001d38 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	331c      	adds	r3, #28
 8001c44:	4602      	mov	r2, r0
 8001c46:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = pInitPrm->minimum_speed_step_s;
 8001c48:	79fa      	ldrb	r2, [r7, #7]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	88d8      	ldrh	r0, [r3, #6]
 8001c4e:	493a      	ldr	r1, [pc, #232]	; (8001d38 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	331e      	adds	r3, #30
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 8001c60:	79fa      	ldrb	r2, [r7, #7]
 8001c62:	4935      	ldr	r1, [pc, #212]	; (8001d38 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 8001c72:	79fa      	ldrb	r2, [r7, #7]
 8001c74:	4930      	ldr	r1, [pc, #192]	; (8001d38 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	3304      	adds	r3, #4
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 8001c86:	79fa      	ldrb	r2, [r7, #7]
 8001c88:	492b      	ldr	r1, [pc, #172]	; (8001d38 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	440b      	add	r3, r1
 8001c94:	3308      	adds	r3, #8
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8001c9a:	79fa      	ldrb	r2, [r7, #7]
 8001c9c:	4926      	ldr	r1, [pc, #152]	; (8001d38 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	330c      	adds	r3, #12
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8001cae:	79fa      	ldrb	r2, [r7, #7]
 8001cb0:	4921      	ldr	r1, [pc, #132]	; (8001d38 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	3310      	adds	r3, #16
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8001cc2:	79fa      	ldrb	r2, [r7, #7]
 8001cc4:	491c      	ldr	r1, [pc, #112]	; (8001d38 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	440b      	add	r3, r1
 8001cd0:	3314      	adds	r3, #20
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8001cd6:	79fa      	ldrb	r2, [r7, #7]
 8001cd8:	4917      	ldr	r1, [pc, #92]	; (8001d38 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	440b      	add	r3, r1
 8001ce4:	3320      	adds	r3, #32
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001cea:	79fa      	ldrb	r2, [r7, #7]
 8001cec:	4912      	ldr	r1, [pc, #72]	; (8001d38 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3322      	adds	r3, #34	; 0x22
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8001cfe:	79fa      	ldrb	r2, [r7, #7]
 8001d00:	490d      	ldr	r1, [pc, #52]	; (8001d38 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3323      	adds	r3, #35	; 0x23
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;  
 8001d12:	79fa      	ldrb	r2, [r7, #7]
 8001d14:	4908      	ldr	r1, [pc, #32]	; (8001d38 <L6474_SetDeviceParamsToGivenValues+0x144>)
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	3324      	adds	r3, #36	; 0x24
 8001d22:	2208      	movs	r2, #8
 8001d24:	701a      	strb	r2, [r3, #0]
 
  L6474_SetRegisterToGivenValues(deviceId, pInitPrm);
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	6839      	ldr	r1, [r7, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f8a4 	bl	8001e78 <L6474_SetRegisterToGivenValues>
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200001e4 	.word	0x200001e4

08001d3c <L6474_SetDeviceParamsToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetDeviceParamsToPredefinedValues(uint8_t deviceId)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
  devicePrm[deviceId].acceleration = L6474_CONF_PARAM_ACC_DEVICE_0;
 8001d46:	79fa      	ldrb	r2, [r7, #7]
 8001d48:	494a      	ldr	r1, [pc, #296]	; (8001e74 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	3318      	adds	r3, #24
 8001d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d5a:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].deceleration = L6474_CONF_PARAM_DEC_DEVICE_0;
 8001d5c:	79fa      	ldrb	r2, [r7, #7]
 8001d5e:	4945      	ldr	r1, [pc, #276]	; (8001e74 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	331a      	adds	r3, #26
 8001d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d70:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].maxSpeed = L6474_CONF_PARAM_MAX_SPEED_DEVICE_0;
 8001d72:	79fa      	ldrb	r2, [r7, #7]
 8001d74:	493f      	ldr	r1, [pc, #252]	; (8001e74 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	331c      	adds	r3, #28
 8001d82:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d86:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].minSpeed = L6474_CONF_PARAM_MIN_SPEED_DEVICE_0;
 8001d88:	79fa      	ldrb	r2, [r7, #7]
 8001d8a:	493a      	ldr	r1, [pc, #232]	; (8001e74 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	331e      	adds	r3, #30
 8001d98:	2264      	movs	r2, #100	; 0x64
 8001d9a:	801a      	strh	r2, [r3, #0]
  
  devicePrm[deviceId].accu = 0;
 8001d9c:	79fa      	ldrb	r2, [r7, #7]
 8001d9e:	4935      	ldr	r1, [pc, #212]	; (8001e74 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].currentPosition = 0;
 8001dae:	79fa      	ldrb	r2, [r7, #7]
 8001db0:	4930      	ldr	r1, [pc, #192]	; (8001e74 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].endAccPos = 0;
 8001dc2:	79fa      	ldrb	r2, [r7, #7]
 8001dc4:	492b      	ldr	r1, [pc, #172]	; (8001e74 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	3308      	adds	r3, #8
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 8001dd6:	79fa      	ldrb	r2, [r7, #7]
 8001dd8:	4926      	ldr	r1, [pc, #152]	; (8001e74 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	330c      	adds	r3, #12
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].startDecPos = 0;
 8001dea:	79fa      	ldrb	r2, [r7, #7]
 8001dec:	4921      	ldr	r1, [pc, #132]	; (8001e74 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	3310      	adds	r3, #16
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].stepsToTake = 0;
 8001dfe:	79fa      	ldrb	r2, [r7, #7]
 8001e00:	491c      	ldr	r1, [pc, #112]	; (8001e74 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3314      	adds	r3, #20
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].speed = 0;
 8001e12:	79fa      	ldrb	r2, [r7, #7]
 8001e14:	4917      	ldr	r1, [pc, #92]	; (8001e74 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	440b      	add	r3, r1
 8001e20:	3320      	adds	r3, #32
 8001e22:	2200      	movs	r2, #0
 8001e24:	801a      	strh	r2, [r3, #0]
  devicePrm[deviceId].commandExecuted = NO_CMD;
 8001e26:	79fa      	ldrb	r2, [r7, #7]
 8001e28:	4912      	ldr	r1, [pc, #72]	; (8001e74 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	3322      	adds	r3, #34	; 0x22
 8001e36:	2203      	movs	r2, #3
 8001e38:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].direction = FORWARD;
 8001e3a:	79fa      	ldrb	r2, [r7, #7]
 8001e3c:	490d      	ldr	r1, [pc, #52]	; (8001e74 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	440b      	add	r3, r1
 8001e48:	3323      	adds	r3, #35	; 0x23
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
  devicePrm[deviceId].motionState = INACTIVE;
 8001e4e:	79fa      	ldrb	r2, [r7, #7]
 8001e50:	4908      	ldr	r1, [pc, #32]	; (8001e74 <L6474_SetDeviceParamsToPredefinedValues+0x138>)
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3324      	adds	r3, #36	; 0x24
 8001e5e:	2208      	movs	r2, #8
 8001e60:	701a      	strb	r2, [r3, #0]
  
  L6474_SetRegisterToPredefinedValues(deviceId);
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 f883 	bl	8001f70 <L6474_SetRegisterToPredefinedValues>

}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200001e4 	.word	0x200001e4

08001e78 <L6474_SetRegisterToGivenValues>:
 * @param[in] deviceId (from 0 to 2)
 * @param pInitPrm pointer to a structure containing the initial device parameters 
 * @retval None
 **********************************************************/
void L6474_SetRegisterToGivenValues(uint8_t deviceId, L6474_Init_t *pInitPrm)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	2200      	movs	r2, #0
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fce4 	bl	8000858 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	2200      	movs	r2, #0
 8001e94:	2102      	movs	r1, #2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fcde 	bl	8000858 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2103      	movs	r1, #3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fcd8 	bl	8000858 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  L6474_SetAnalogValue(deviceId,
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb4:	2109      	movs	r1, #9
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fa44 	bl	8001344 <L6474_SetAnalogValue>
                       L6474_TVAL,
                       pInitPrm->torque_regulation_current_mA);
  L6474_CmdSetParam(deviceId,
                    L6474_T_FAST,
                    (uint8_t) pInitPrm->maximum_fast_decay_time |
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	7d5a      	ldrb	r2, [r3, #21]
                    (uint8_t) pInitPrm->fall_time);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	7d1b      	ldrb	r3, [r3, #20]
  L6474_CmdSetParam(deviceId,
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	210e      	movs	r1, #14
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe fcc2 	bl	8000858 <L6474_CmdSetParam>
  L6474_SetAnalogValue(deviceId,
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee0:	210f      	movs	r1, #15
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fa2e 	bl	8001344 <L6474_SetAnalogValue>
                       L6474_TON_MIN,
                       pInitPrm->minimum_ON_time_us);
  L6474_SetAnalogValue(deviceId,
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	edd3 7a07 	vldr	s15, [r3, #28]
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef4:	2110      	movs	r1, #16
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fa24 	bl	8001344 <L6474_SetAnalogValue>
                       L6474_TOFF_MIN,
                       pInitPrm->minimum_OFF_time_us);
  L6474_SetAnalogValue(deviceId,
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	eeb0 0a67 	vmov.f32	s0, s15
 8001f08:	2113      	movs	r1, #19
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fa1a 	bl	8001344 <L6474_SetAnalogValue>
                       L6474_OCD_TH,
                       pInitPrm->overcurrent_threshold);
  L6474_CmdSetParam(deviceId,
                  L6474_STEP_MODE,
                  (uint8_t) pInitPrm->step_selection |
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	7c9a      	ldrb	r2, [r3, #18]
                  (uint8_t) pInitPrm->sync_selection);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	7cdb      	ldrb	r3, [r3, #19]
  L6474_CmdSetParam(deviceId,
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2116      	movs	r1, #22
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fc98 	bl	8000858 <L6474_CmdSetParam>
  L6474_CmdSetParam(deviceId,
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	2117      	movs	r1, #23
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fc91 	bl	8000858 <L6474_CmdSetParam>
                    L6474_ALARM_EN,
                    pInitPrm->alarm);
  L6474_CmdSetParam(deviceId,
                    L6474_CONFIG,
                    (uint16_t) pInitPrm->clock |
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
                    (uint16_t) pInitPrm->torque_regulation_method |
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	7c5b      	ldrb	r3, [r3, #17]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	b2da      	uxtb	r2, r3
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	7c1b      	ldrb	r3, [r3, #16]
                    (uint16_t) pInitPrm->torque_regulation_method |
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	461a      	mov	r2, r3
                    (uint16_t) pInitPrm->slew_rate |
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
                    (uint16_t) pInitPrm->overcurrent_shutwdown |
 8001f52:	4313      	orrs	r3, r2
                    (uint16_t) pInitPrm->target_swicthing_period);
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	8c12      	ldrh	r2, [r2, #32]
                    (uint16_t) pInitPrm->slew_rate |
 8001f58:	4313      	orrs	r3, r2
  L6474_CmdSetParam(deviceId,
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	2118      	movs	r1, #24
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fc79 	bl	8000858 <L6474_CmdSetParam>
  
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <L6474_SetRegisterToPredefinedValues>:
 * from l6474_target_config.h
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_SetRegisterToPredefinedValues(uint8_t deviceId)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  L6474_CmdSetParam(deviceId,
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2101      	movs	r1, #1
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fc69 	bl	8000858 <L6474_CmdSetParam>
                    L6474_ABS_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fc63 	bl	8000858 <L6474_CmdSetParam>
                    L6474_EL_POS,
                    0);
  L6474_CmdSetParam(deviceId,
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	2200      	movs	r2, #0
 8001f96:	2103      	movs	r1, #3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fc5d 	bl	8000858 <L6474_CmdSetParam>
                    L6474_MARK,
                    0);
  switch (deviceId)
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	f000 8094 	beq.w	80020ce <L6474_SetRegisterToPredefinedValues+0x15e>
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	f300 80d7 	bgt.w	800215a <L6474_SetRegisterToPredefinedValues+0x1ea>
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <L6474_SetRegisterToPredefinedValues+0x46>
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d046      	beq.n	8002042 <L6474_SetRegisterToPredefinedValues+0xd2>
#endif         
      break;
#endif      
    default: ;
  }
}
 8001fb4:	e0d1      	b.n	800215a <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_0));
 8001fb6:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002164 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8001fba:	f000 fc43 	bl	8002844 <L6474_Tval_Current_to_Par>
 8001fbe:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	2109      	movs	r1, #9
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fc46 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2235      	movs	r2, #53	; 0x35
 8001fd0:	210e      	movs	r1, #14
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fc40 	bl	8000858 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_0)
 8001fd8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001fdc:	f000 fc84 	bl	80028e8 <L6474_Tmin_Time_to_Par>
 8001fe0:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fc35 	bl	8000858 <L6474_CmdSetParam>
                              L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_0));
 8001fee:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 8001ff2:	f000 fc79 	bl	80028e8 <L6474_Tmin_Time_to_Par>
 8001ff6:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2110      	movs	r1, #16
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fc2a 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	2205      	movs	r2, #5
 8002008:	2113      	movs	r1, #19
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fc24 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	228c      	movs	r2, #140	; 0x8c
 8002014:	2116      	movs	r1, #22
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fc1e 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	22cf      	movs	r2, #207	; 0xcf
 8002020:	2117      	movs	r1, #23
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fc18 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 800202e:	2118      	movs	r1, #24
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fc11 	bl	8000858 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_0);
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fbea 	bl	8001814 <L6474_SetStopMode>
      break;
 8002040:	e08b      	b.n	800215a <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_1));
 8002042:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8002164 <L6474_SetRegisterToPredefinedValues+0x1f4>
 8002046:	f000 fbfd 	bl	8002844 <L6474_Tval_Current_to_Par>
 800204a:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800204c:	461a      	mov	r2, r3
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	2109      	movs	r1, #9
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fc00 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	2235      	movs	r2, #53	; 0x35
 800205c:	210e      	movs	r1, #14
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fbfa 	bl	8000858 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_1));
 8002064:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002068:	f000 fc3e 	bl	80028e8 <L6474_Tmin_Time_to_Par>
 800206c:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 800206e:	461a      	mov	r2, r3
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	210f      	movs	r1, #15
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fbef 	bl	8000858 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_1));
 800207a:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 800207e:	f000 fc33 	bl	80028e8 <L6474_Tmin_Time_to_Par>
 8002082:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002084:	461a      	mov	r2, r3
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	2110      	movs	r1, #16
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fbe4 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	2205      	movs	r2, #5
 8002094:	2113      	movs	r1, #19
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fbde 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	228c      	movs	r2, #140	; 0x8c
 80020a0:	2116      	movs	r1, #22
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fbd8 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	22cf      	movs	r2, #207	; 0xcf
 80020ac:	2117      	movs	r1, #23
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fbd2 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 80020ba:	2118      	movs	r1, #24
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fbcb 	bl	8000858 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_1);
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fba4 	bl	8001814 <L6474_SetStopMode>
      break;
 80020cc:	e045      	b.n	800215a <L6474_SetRegisterToPredefinedValues+0x1ea>
                        L6474_Tval_Current_to_Par(L6474_CONF_PARAM_TVAL_DEVICE_2));
 80020ce:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002164 <L6474_SetRegisterToPredefinedValues+0x1f4>
 80020d2:	f000 fbb7 	bl	8002844 <L6474_Tval_Current_to_Par>
 80020d6:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80020d8:	461a      	mov	r2, r3
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2109      	movs	r1, #9
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fbba 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2235      	movs	r2, #53	; 0x35
 80020e8:	210e      	movs	r1, #14
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fbb4 	bl	8000858 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TON_MIN_DEVICE_2));
 80020f0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80020f4:	f000 fbf8 	bl	80028e8 <L6474_Tmin_Time_to_Par>
 80020f8:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 80020fa:	461a      	mov	r2, r3
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	210f      	movs	r1, #15
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fba9 	bl	8000858 <L6474_CmdSetParam>
                        L6474_Tmin_Time_to_Par(L6474_CONF_PARAM_TOFF_MIN_DEVICE_2));
 8002106:	eeb3 0a05 	vmov.f32	s0, #53	; 0x41a80000  21.0
 800210a:	f000 fbed 	bl	80028e8 <L6474_Tmin_Time_to_Par>
 800210e:	4603      	mov	r3, r0
      L6474_CmdSetParam(deviceId,
 8002110:	461a      	mov	r2, r3
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	2110      	movs	r1, #16
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fb9e 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2205      	movs	r2, #5
 8002120:	2113      	movs	r1, #19
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fb98 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	228c      	movs	r2, #140	; 0x8c
 800212c:	2116      	movs	r1, #22
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fb92 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	22cf      	movs	r2, #207	; 0xcf
 8002138:	2117      	movs	r1, #23
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fb8c 	bl	8000858 <L6474_CmdSetParam>
      L6474_CmdSetParam(deviceId,
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	f44f 5232 	mov.w	r2, #11392	; 0x2c80
 8002146:	2118      	movs	r1, #24
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fb85 	bl	8000858 <L6474_CmdSetParam>
      L6474_SetStopMode(deviceId, L6474_CONF_PARAM_AUTO_HIZ_STOP_DEVICE_2);
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fb5e 	bl	8001814 <L6474_SetStopMode>
      break;
 8002158:	bf00      	nop
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	44480000 	.word	0x44480000

08002168 <L6474_StartMovement>:
 * and enable the power bridge
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_StartMovement(uint8_t deviceId)  
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  /* Enable L6474 powerstage */
  L6474_CmdEnable(deviceId);
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe f9d9 	bl	800052c <L6474_CmdEnable>
  if (devicePrm[deviceId].endAccPos != 0)
 800217a:	79fa      	ldrb	r2, [r7, #7]
 800217c:	4922      	ldr	r1, [pc, #136]	; (8002208 <L6474_StartMovement+0xa0>)
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	3308      	adds	r3, #8
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <L6474_StartMovement+0x3e>
  {
    devicePrm[deviceId].motionState = ACCELERATING;
 8002190:	79fa      	ldrb	r2, [r7, #7]
 8002192:	491d      	ldr	r1, [pc, #116]	; (8002208 <L6474_StartMovement+0xa0>)
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	3324      	adds	r3, #36	; 0x24
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e009      	b.n	80021ba <L6474_StartMovement+0x52>
  }
  else
  {
    devicePrm[deviceId].motionState = DECELERATING;    
 80021a6:	79fa      	ldrb	r2, [r7, #7]
 80021a8:	4917      	ldr	r1, [pc, #92]	; (8002208 <L6474_StartMovement+0xa0>)
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	440b      	add	r3, r1
 80021b4:	3324      	adds	r3, #36	; 0x24
 80021b6:	2202      	movs	r2, #2
 80021b8:	701a      	strb	r2, [r3, #0]
  }
  devicePrm[deviceId].accu = 0;
 80021ba:	79fa      	ldrb	r2, [r7, #7]
 80021bc:	4912      	ldr	r1, [pc, #72]	; (8002208 <L6474_StartMovement+0xa0>)
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
  devicePrm[deviceId].relativePos = 0;
 80021cc:	79fa      	ldrb	r2, [r7, #7]
 80021ce:	490e      	ldr	r1, [pc, #56]	; (8002208 <L6474_StartMovement+0xa0>)
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	330c      	adds	r3, #12
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
  L6474_ApplySpeed(deviceId, devicePrm[deviceId].minSpeed);
 80021e0:	79fa      	ldrb	r2, [r7, #7]
 80021e2:	4909      	ldr	r1, [pc, #36]	; (8002208 <L6474_StartMovement+0xa0>)
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	331e      	adds	r3, #30
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fb5f 	bl	80018bc <L6474_ApplySpeed>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200001e4 	.word	0x200001e4

0800220c <L6474_StepClockHandler>:
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void L6474_StepClockHandler(uint8_t deviceId)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	; 0x30
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  /* Set isr flag */
  isrFlag = TRUE;
 8002216:	4b96      	ldr	r3, [pc, #600]	; (8002470 <L6474_StepClockHandler+0x264>)
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
  
  /* Incrementation of the relative position */
  devicePrm[deviceId].relativePos++;
 800221c:	79fa      	ldrb	r2, [r7, #7]
 800221e:	4995      	ldr	r1, [pc, #596]	; (8002474 <L6474_StepClockHandler+0x268>)
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	330c      	adds	r3, #12
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	1c59      	adds	r1, r3, #1
 8002230:	4890      	ldr	r0, [pc, #576]	; (8002474 <L6474_StepClockHandler+0x268>)
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4403      	add	r3, r0
 800223c:	330c      	adds	r3, #12
 800223e:	6019      	str	r1, [r3, #0]

  switch (devicePrm[deviceId].motionState) 
 8002240:	79fa      	ldrb	r2, [r7, #7]
 8002242:	498c      	ldr	r1, [pc, #560]	; (8002474 <L6474_StepClockHandler+0x268>)
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	3324      	adds	r3, #36	; 0x24
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b03      	cmp	r3, #3
 8002256:	f000 810f 	beq.w	8002478 <L6474_StepClockHandler+0x26c>
 800225a:	2b03      	cmp	r3, #3
 800225c:	f300 82a4 	bgt.w	80027a8 <L6474_StepClockHandler+0x59c>
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <L6474_StepClockHandler+0x60>
 8002264:	2b02      	cmp	r3, #2
 8002266:	f000 819b 	beq.w	80025a0 <L6474_StepClockHandler+0x394>
      }
      break;
    }
    default: 
    {
      break;
 800226a:	e29d      	b.n	80027a8 <L6474_StepClockHandler+0x59c>
        uint32_t relPos = devicePrm[deviceId].relativePos;
 800226c:	79fa      	ldrb	r2, [r7, #7]
 800226e:	4981      	ldr	r1, [pc, #516]	; (8002474 <L6474_StepClockHandler+0x268>)
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	330c      	adds	r3, #12
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	617b      	str	r3, [r7, #20]
        uint32_t endAccPos = devicePrm[deviceId].endAccPos;
 8002280:	79fa      	ldrb	r2, [r7, #7]
 8002282:	497c      	ldr	r1, [pc, #496]	; (8002474 <L6474_StepClockHandler+0x268>)
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	440b      	add	r3, r1
 800228e:	3308      	adds	r3, #8
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	613b      	str	r3, [r7, #16]
        uint16_t speed = devicePrm[deviceId].speed;
 8002294:	79fa      	ldrb	r2, [r7, #7]
 8002296:	4977      	ldr	r1, [pc, #476]	; (8002474 <L6474_StepClockHandler+0x268>)
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	3320      	adds	r3, #32
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        uint32_t acc = ((uint32_t)devicePrm[deviceId].acceleration << 16);
 80022a8:	79fa      	ldrb	r2, [r7, #7]
 80022aa:	4972      	ldr	r1, [pc, #456]	; (8002474 <L6474_StepClockHandler+0x268>)
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	3318      	adds	r3, #24
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	041b      	lsls	r3, r3, #16
 80022be:	60fb      	str	r3, [r7, #12]
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 80022c0:	79fa      	ldrb	r2, [r7, #7]
 80022c2:	496c      	ldr	r1, [pc, #432]	; (8002474 <L6474_StepClockHandler+0x268>)
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	3322      	adds	r3, #34	; 0x22
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d017      	beq.n	8002308 <L6474_StepClockHandler+0xfc>
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 80022d8:	79fa      	ldrb	r2, [r7, #7]
 80022da:	4966      	ldr	r1, [pc, #408]	; (8002474 <L6474_StepClockHandler+0x268>)
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	3322      	adds	r3, #34	; 0x22
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	b2db      	uxtb	r3, r3
        if ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01f      	beq.n	8002330 <L6474_StepClockHandler+0x124>
             (relPos == devicePrm[deviceId].startDecPos)))
 80022f0:	79fa      	ldrb	r2, [r7, #7]
 80022f2:	4960      	ldr	r1, [pc, #384]	; (8002474 <L6474_StepClockHandler+0x268>)
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	3310      	adds	r3, #16
 8002300:	681b      	ldr	r3, [r3, #0]
            ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&  
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	429a      	cmp	r2, r3
 8002306:	d113      	bne.n	8002330 <L6474_StepClockHandler+0x124>
          devicePrm[deviceId].motionState = DECELERATING;
 8002308:	79fa      	ldrb	r2, [r7, #7]
 800230a:	495a      	ldr	r1, [pc, #360]	; (8002474 <L6474_StepClockHandler+0x268>)
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	440b      	add	r3, r1
 8002316:	3324      	adds	r3, #36	; 0x24
 8002318:	2202      	movs	r2, #2
 800231a:	701a      	strb	r2, [r3, #0]
          devicePrm[deviceId].accu = 0;
 800231c:	79fa      	ldrb	r2, [r7, #7]
 800231e:	4955      	ldr	r1, [pc, #340]	; (8002474 <L6474_StepClockHandler+0x268>)
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	e09e      	b.n	800246e <L6474_StepClockHandler+0x262>
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 8002330:	79fa      	ldrb	r2, [r7, #7]
 8002332:	4950      	ldr	r1, [pc, #320]	; (8002474 <L6474_StepClockHandler+0x268>)
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	331c      	adds	r3, #28
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002346:	429a      	cmp	r2, r3
 8002348:	d20f      	bcs.n	800236a <L6474_StepClockHandler+0x15e>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 800234a:	79fa      	ldrb	r2, [r7, #7]
 800234c:	4949      	ldr	r1, [pc, #292]	; (8002474 <L6474_StepClockHandler+0x268>)
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	3322      	adds	r3, #34	; 0x22
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b2db      	uxtb	r3, r3
        else if ((speed >= devicePrm[deviceId].maxSpeed)||
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00e      	beq.n	8002380 <L6474_StepClockHandler+0x174>
                 ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	429a      	cmp	r2, r3
 8002368:	d10a      	bne.n	8002380 <L6474_StepClockHandler+0x174>
          devicePrm[deviceId].motionState = STEADY;
 800236a:	79fa      	ldrb	r2, [r7, #7]
 800236c:	4941      	ldr	r1, [pc, #260]	; (8002474 <L6474_StepClockHandler+0x268>)
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	3324      	adds	r3, #36	; 0x24
 800237a:	2203      	movs	r2, #3
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	e076      	b.n	800246e <L6474_StepClockHandler+0x262>
          bool speedUpdated = FALSE;
 8002380:	2300      	movs	r3, #0
 8002382:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          if (speed == 0) speed =1;
 8002386:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <L6474_StepClockHandler+0x184>
 800238c:	2301      	movs	r3, #1
 800238e:	85fb      	strh	r3, [r7, #46]	; 0x2e
          devicePrm[deviceId].accu += acc / speed;
 8002390:	79fa      	ldrb	r2, [r7, #7]
 8002392:	4938      	ldr	r1, [pc, #224]	; (8002474 <L6474_StepClockHandler+0x268>)
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	79fa      	ldrb	r2, [r7, #7]
 80023aa:	4419      	add	r1, r3
 80023ac:	4831      	ldr	r0, [pc, #196]	; (8002474 <L6474_StepClockHandler+0x268>)
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4403      	add	r3, r0
 80023b8:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 80023ba:	e017      	b.n	80023ec <L6474_StepClockHandler+0x1e0>
            devicePrm[deviceId].accu -= (0X10000L);
 80023bc:	79fa      	ldrb	r2, [r7, #7]
 80023be:	492d      	ldr	r1, [pc, #180]	; (8002474 <L6474_StepClockHandler+0x268>)
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	79fa      	ldrb	r2, [r7, #7]
 80023ce:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 80023d2:	4828      	ldr	r0, [pc, #160]	; (8002474 <L6474_StepClockHandler+0x268>)
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4403      	add	r3, r0
 80023de:	6019      	str	r1, [r3, #0]
            speed +=1;
 80023e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023e2:	3301      	adds	r3, #1
 80023e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
            speedUpdated = TRUE;
 80023e6:	2301      	movs	r3, #1
 80023e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          while (devicePrm[deviceId].accu >= (0X10000L))
 80023ec:	79fa      	ldrb	r2, [r7, #7]
 80023ee:	4921      	ldr	r1, [pc, #132]	; (8002474 <L6474_StepClockHandler+0x268>)
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	440b      	add	r3, r1
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d2dc      	bcs.n	80023bc <L6474_StepClockHandler+0x1b0>
          if (speedUpdated)
 8002402:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 81d0 	beq.w	80027ac <L6474_StepClockHandler+0x5a0>
            if (speed > devicePrm[deviceId].maxSpeed)
 800240c:	79fa      	ldrb	r2, [r7, #7]
 800240e:	4919      	ldr	r1, [pc, #100]	; (8002474 <L6474_StepClockHandler+0x268>)
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	331c      	adds	r3, #28
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29b      	uxth	r3, r3
 8002420:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002422:	429a      	cmp	r2, r3
 8002424:	d909      	bls.n	800243a <L6474_StepClockHandler+0x22e>
              speed = devicePrm[deviceId].maxSpeed;
 8002426:	79fa      	ldrb	r2, [r7, #7]
 8002428:	4912      	ldr	r1, [pc, #72]	; (8002474 <L6474_StepClockHandler+0x268>)
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	440b      	add	r3, r1
 8002434:	331c      	adds	r3, #28
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	85fb      	strh	r3, [r7, #46]	; 0x2e
            devicePrm[deviceId].speed = speed;
 800243a:	79fa      	ldrb	r2, [r7, #7]
 800243c:	490d      	ldr	r1, [pc, #52]	; (8002474 <L6474_StepClockHandler+0x268>)
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	440b      	add	r3, r1
 8002448:	3320      	adds	r3, #32
 800244a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800244c:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 800244e:	79fa      	ldrb	r2, [r7, #7]
 8002450:	4908      	ldr	r1, [pc, #32]	; (8002474 <L6474_StepClockHandler+0x268>)
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	440b      	add	r3, r1
 800245c:	3320      	adds	r3, #32
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	b29a      	uxth	r2, r3
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fa28 	bl	80018bc <L6474_ApplySpeed>
        break;
 800246c:	e19e      	b.n	80027ac <L6474_StepClockHandler+0x5a0>
 800246e:	e19d      	b.n	80027ac <L6474_StepClockHandler+0x5a0>
 8002470:	200001e1 	.word	0x200001e1
 8002474:	200001e4 	.word	0x200001e4
      uint16_t maxSpeed = devicePrm[deviceId].maxSpeed;
 8002478:	79fa      	ldrb	r2, [r7, #7]
 800247a:	499c      	ldr	r1, [pc, #624]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	331c      	adds	r3, #28
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	84fb      	strh	r3, [r7, #38]	; 0x26
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 800248c:	79fa      	ldrb	r2, [r7, #7]
 800248e:	4997      	ldr	r1, [pc, #604]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	330c      	adds	r3, #12
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	623b      	str	r3, [r7, #32]
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 80024a0:	79fa      	ldrb	r2, [r7, #7]
 80024a2:	4992      	ldr	r1, [pc, #584]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	3322      	adds	r3, #34	; 0x22
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d030      	beq.n	800251a <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 80024b8:	79fa      	ldrb	r2, [r7, #7]
 80024ba:	498c      	ldr	r1, [pc, #560]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	440b      	add	r3, r1
 80024c6:	3322      	adds	r3, #34	; 0x22
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	b2db      	uxtb	r3, r3
      if  ((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)||
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00b      	beq.n	80024e8 <L6474_StepClockHandler+0x2dc>
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 80024d0:	79fa      	ldrb	r2, [r7, #7]
 80024d2:	4986      	ldr	r1, [pc, #536]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	3310      	adds	r3, #16
 80024e0:	681b      	ldr	r3, [r3, #0]
           ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 80024e2:	6a3a      	ldr	r2, [r7, #32]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d218      	bcs.n	800251a <L6474_StepClockHandler+0x30e>
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 80024e8:	79fa      	ldrb	r2, [r7, #7]
 80024ea:	4980      	ldr	r1, [pc, #512]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	3322      	adds	r3, #34	; 0x22
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
            (relativePos >= (devicePrm[deviceId].startDecPos))) ||
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d120      	bne.n	8002542 <L6474_StepClockHandler+0x336>
            (devicePrm[deviceId].speed > maxSpeed)))
 8002500:	79fa      	ldrb	r2, [r7, #7]
 8002502:	497a      	ldr	r1, [pc, #488]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	440b      	add	r3, r1
 800250e:	3320      	adds	r3, #32
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
           ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002514:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002516:	429a      	cmp	r2, r3
 8002518:	d213      	bcs.n	8002542 <L6474_StepClockHandler+0x336>
        devicePrm[deviceId].motionState = DECELERATING;
 800251a:	79fa      	ldrb	r2, [r7, #7]
 800251c:	4973      	ldr	r1, [pc, #460]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	440b      	add	r3, r1
 8002528:	3324      	adds	r3, #36	; 0x24
 800252a:	2202      	movs	r2, #2
 800252c:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 800252e:	79fa      	ldrb	r2, [r7, #7]
 8002530:	496e      	ldr	r1, [pc, #440]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	440b      	add	r3, r1
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
      break;
 8002540:	e136      	b.n	80027b0 <L6474_StepClockHandler+0x5a4>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002542:	79fa      	ldrb	r2, [r7, #7]
 8002544:	4969      	ldr	r1, [pc, #420]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	440b      	add	r3, r1
 8002550:	3322      	adds	r3, #34	; 0x22
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	f040 812a 	bne.w	80027b0 <L6474_StepClockHandler+0x5a4>
               (devicePrm[deviceId].speed < maxSpeed))
 800255c:	79fa      	ldrb	r2, [r7, #7]
 800255e:	4963      	ldr	r1, [pc, #396]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	440b      	add	r3, r1
 800256a:	3320      	adds	r3, #32
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002570:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002572:	429a      	cmp	r2, r3
 8002574:	f240 811c 	bls.w	80027b0 <L6474_StepClockHandler+0x5a4>
        devicePrm[deviceId].motionState = ACCELERATING;
 8002578:	79fa      	ldrb	r2, [r7, #7]
 800257a:	495c      	ldr	r1, [pc, #368]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	3324      	adds	r3, #36	; 0x24
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
        devicePrm[deviceId].accu = 0;
 800258c:	79fa      	ldrb	r2, [r7, #7]
 800258e:	4957      	ldr	r1, [pc, #348]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
      break;
 800259e:	e107      	b.n	80027b0 <L6474_StepClockHandler+0x5a4>
      uint32_t relativePos = devicePrm[deviceId].relativePos;
 80025a0:	79fa      	ldrb	r2, [r7, #7]
 80025a2:	4952      	ldr	r1, [pc, #328]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	330c      	adds	r3, #12
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	61fb      	str	r3, [r7, #28]
      uint16_t speed = devicePrm[deviceId].speed;
 80025b4:	79fa      	ldrb	r2, [r7, #7]
 80025b6:	494d      	ldr	r1, [pc, #308]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	3320      	adds	r3, #32
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	857b      	strh	r3, [r7, #42]	; 0x2a
      uint32_t deceleration = ((uint32_t)devicePrm[deviceId].deceleration << 16);
 80025c8:	79fa      	ldrb	r2, [r7, #7]
 80025ca:	4948      	ldr	r1, [pc, #288]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	331a      	adds	r3, #26
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	61bb      	str	r3, [r7, #24]
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 80025e0:	79fa      	ldrb	r2, [r7, #7]
 80025e2:	4942      	ldr	r1, [pc, #264]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	3322      	adds	r3, #34	; 0x22
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d10c      	bne.n	8002612 <L6474_StepClockHandler+0x406>
 80025f8:	79fa      	ldrb	r2, [r7, #7]
 80025fa:	493c      	ldr	r1, [pc, #240]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	440b      	add	r3, r1
 8002606:	331e      	adds	r3, #30
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800260e:	429a      	cmp	r2, r3
 8002610:	d917      	bls.n	8002642 <L6474_StepClockHandler+0x436>
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 8002612:	79fa      	ldrb	r2, [r7, #7]
 8002614:	4935      	ldr	r1, [pc, #212]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	440b      	add	r3, r1
 8002620:	3322      	adds	r3, #34	; 0x22
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
      if (((devicePrm[deviceId].commandExecuted == SOFT_STOP_CMD)&&(speed <=  devicePrm[deviceId].minSpeed))||
 8002626:	2b00      	cmp	r3, #0
 8002628:	d010      	beq.n	800264c <L6474_StepClockHandler+0x440>
           (relativePos >= devicePrm[deviceId].stepsToTake)))
 800262a:	79fa      	ldrb	r2, [r7, #7]
 800262c:	492f      	ldr	r1, [pc, #188]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	440b      	add	r3, r1
 8002638:	3314      	adds	r3, #20
 800263a:	681b      	ldr	r3, [r3, #0]
          ((devicePrm[deviceId].commandExecuted != RUN_CMD)&&
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	429a      	cmp	r2, r3
 8002640:	d304      	bcc.n	800264c <L6474_StepClockHandler+0x440>
        L6474_HardStop(deviceId);
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fc8d 	bl	8000f64 <L6474_HardStop>
 800264a:	e0ac      	b.n	80027a6 <L6474_StepClockHandler+0x59a>
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 800264c:	79fa      	ldrb	r2, [r7, #7]
 800264e:	4927      	ldr	r1, [pc, #156]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	440b      	add	r3, r1
 800265a:	3322      	adds	r3, #34	; 0x22
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d117      	bne.n	8002694 <L6474_StepClockHandler+0x488>
               (speed <= devicePrm[deviceId].maxSpeed))
 8002664:	79fa      	ldrb	r2, [r7, #7]
 8002666:	4921      	ldr	r1, [pc, #132]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	440b      	add	r3, r1
 8002672:	331c      	adds	r3, #28
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
      else if ((devicePrm[deviceId].commandExecuted == RUN_CMD)&&
 8002678:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800267a:	429a      	cmp	r2, r3
 800267c:	d80a      	bhi.n	8002694 <L6474_StepClockHandler+0x488>
        devicePrm[deviceId].motionState = STEADY;
 800267e:	79fa      	ldrb	r2, [r7, #7]
 8002680:	491a      	ldr	r1, [pc, #104]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	440b      	add	r3, r1
 800268c:	3324      	adds	r3, #36	; 0x24
 800268e:	2203      	movs	r2, #3
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e088      	b.n	80027a6 <L6474_StepClockHandler+0x59a>
        if (speed > devicePrm[deviceId].minSpeed)
 8002694:	79fa      	ldrb	r2, [r7, #7]
 8002696:	4915      	ldr	r1, [pc, #84]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	440b      	add	r3, r1
 80026a2:	331e      	adds	r3, #30
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80026aa:	429a      	cmp	r2, r3
 80026ac:	f240 8082 	bls.w	80027b4 <L6474_StepClockHandler+0x5a8>
          bool speedUpdated = FALSE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          if (speed == 0) speed =1;
 80026b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <L6474_StepClockHandler+0x4b4>
 80026bc:	2301      	movs	r3, #1
 80026be:	857b      	strh	r3, [r7, #42]	; 0x2a
          devicePrm[deviceId].accu += deceleration / speed;
 80026c0:	79fa      	ldrb	r2, [r7, #7]
 80026c2:	490a      	ldr	r1, [pc, #40]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	440b      	add	r3, r1
 80026ce:	6819      	ldr	r1, [r3, #0]
 80026d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	79fa      	ldrb	r2, [r7, #7]
 80026da:	4419      	add	r1, r3
 80026dc:	4803      	ldr	r0, [pc, #12]	; (80026ec <L6474_StepClockHandler+0x4e0>)
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4403      	add	r3, r0
 80026e8:	6019      	str	r1, [r3, #0]
          while (devicePrm[deviceId].accu >= (0X10000L))
 80026ea:	e01c      	b.n	8002726 <L6474_StepClockHandler+0x51a>
 80026ec:	200001e4 	.word	0x200001e4
            devicePrm[deviceId].accu -= (0X10000L);
 80026f0:	79fa      	ldrb	r2, [r7, #7]
 80026f2:	4934      	ldr	r1, [pc, #208]	; (80027c4 <L6474_StepClockHandler+0x5b8>)
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	440b      	add	r3, r1
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	79fa      	ldrb	r2, [r7, #7]
 8002702:	f5a3 3180 	sub.w	r1, r3, #65536	; 0x10000
 8002706:	482f      	ldr	r0, [pc, #188]	; (80027c4 <L6474_StepClockHandler+0x5b8>)
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4403      	add	r3, r0
 8002712:	6019      	str	r1, [r3, #0]
            if (speed > 1)
 8002714:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002716:	2b01      	cmp	r3, #1
 8002718:	d902      	bls.n	8002720 <L6474_StepClockHandler+0x514>
              speed -=1;
 800271a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800271c:	3b01      	subs	r3, #1
 800271e:	857b      	strh	r3, [r7, #42]	; 0x2a
            speedUpdated = TRUE;
 8002720:	2301      	movs	r3, #1
 8002722:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          while (devicePrm[deviceId].accu >= (0X10000L))
 8002726:	79fa      	ldrb	r2, [r7, #7]
 8002728:	4926      	ldr	r1, [pc, #152]	; (80027c4 <L6474_StepClockHandler+0x5b8>)
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273a:	d2d9      	bcs.n	80026f0 <L6474_StepClockHandler+0x4e4>
          if (speedUpdated)
 800273c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002740:	2b00      	cmp	r3, #0
 8002742:	d037      	beq.n	80027b4 <L6474_StepClockHandler+0x5a8>
            if (speed < devicePrm[deviceId].minSpeed)
 8002744:	79fa      	ldrb	r2, [r7, #7]
 8002746:	491f      	ldr	r1, [pc, #124]	; (80027c4 <L6474_StepClockHandler+0x5b8>)
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	440b      	add	r3, r1
 8002752:	331e      	adds	r3, #30
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800275a:	429a      	cmp	r2, r3
 800275c:	d209      	bcs.n	8002772 <L6474_StepClockHandler+0x566>
              speed = devicePrm[deviceId].minSpeed;
 800275e:	79fa      	ldrb	r2, [r7, #7]
 8002760:	4918      	ldr	r1, [pc, #96]	; (80027c4 <L6474_StepClockHandler+0x5b8>)
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	440b      	add	r3, r1
 800276c:	331e      	adds	r3, #30
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	857b      	strh	r3, [r7, #42]	; 0x2a
            devicePrm[deviceId].speed = speed;
 8002772:	79fa      	ldrb	r2, [r7, #7]
 8002774:	4913      	ldr	r1, [pc, #76]	; (80027c4 <L6474_StepClockHandler+0x5b8>)
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	440b      	add	r3, r1
 8002780:	3320      	adds	r3, #32
 8002782:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002784:	801a      	strh	r2, [r3, #0]
            L6474_ApplySpeed(deviceId, devicePrm[deviceId].speed);
 8002786:	79fa      	ldrb	r2, [r7, #7]
 8002788:	490e      	ldr	r1, [pc, #56]	; (80027c4 <L6474_StepClockHandler+0x5b8>)
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	3320      	adds	r3, #32
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b29a      	uxth	r2, r3
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff f88c 	bl	80018bc <L6474_ApplySpeed>
      break;
 80027a4:	e006      	b.n	80027b4 <L6474_StepClockHandler+0x5a8>
 80027a6:	e005      	b.n	80027b4 <L6474_StepClockHandler+0x5a8>
      break;
 80027a8:	bf00      	nop
 80027aa:	e004      	b.n	80027b6 <L6474_StepClockHandler+0x5aa>
        break;
 80027ac:	bf00      	nop
 80027ae:	e002      	b.n	80027b6 <L6474_StepClockHandler+0x5aa>
      break;
 80027b0:	bf00      	nop
 80027b2:	e000      	b.n	80027b6 <L6474_StepClockHandler+0x5aa>
      break;
 80027b4:	bf00      	nop
    }
  }  
  /* Set isr flag */
  isrFlag = FALSE;
 80027b6:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <L6474_StepClockHandler+0x5bc>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
}
 80027bc:	bf00      	nop
 80027be:	3730      	adds	r7, #48	; 0x30
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	200001e4 	.word	0x200001e4
 80027c8:	200001e1 	.word	0x200001e1

080027cc <L6474_Ocd_Th_to_Par>:
 * @brief Converts mA in compatible values for OCD_TH register
 * @param[in] Tval
 * @retval OCD_TH values
 **********************************************************/
inline uint8_t L6474_Ocd_Th_to_Par(float Tval)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 375)*0.002666f)+0.5f));
 80027d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80027da:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800280c <L6474_Ocd_Th_to_Par+0x40>
 80027de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027e2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002810 <L6474_Ocd_Th_to_Par+0x44>
 80027e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027f6:	edc7 7a00 	vstr	s15, [r7]
 80027fa:	783b      	ldrb	r3, [r7, #0]
 80027fc:	b2db      	uxtb	r3, r3
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	43bb8000 	.word	0x43bb8000
 8002810:	3b2eb80f 	.word	0x3b2eb80f

08002814 <L6474_Ocd_Par_to_Th>:
 * @brief Converts  OCD_TH register values in mA 
 * @param[in] Par OCD regiser value
 * @retval mA
 **********************************************************/
inline float L6474_Ocd_Par_to_Th(uint8_t Par)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1))*375.f);
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	3301      	adds	r3, #1
 8002822:	ee07 3a90 	vmov	s15, r3
 8002826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800282a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002840 <L6474_Ocd_Par_to_Th+0x2c>
 800282e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002832:	eeb0 0a67 	vmov.f32	s0, s15
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	43bb8000 	.word	0x43bb8000

08002844 <L6474_Tval_Current_to_Par>:
 * @brief Converts mA in compatible values for TVAL register 
 * @param[in] Tval
 * @retval TVAL values
 **********************************************************/
inline uint8_t L6474_Tval_Current_to_Par(float Tval)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tval - 31.25f)*0.032f)+0.5f));
 800284e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002852:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002884 <L6474_Tval_Current_to_Par+0x40>
 8002856:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800285a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002888 <L6474_Tval_Current_to_Par+0x44>
 800285e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002862:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002866:	ee77 7a87 	vadd.f32	s15, s15, s14
 800286a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286e:	edc7 7a00 	vstr	s15, [r7]
 8002872:	783b      	ldrb	r3, [r7, #0]
 8002874:	b2db      	uxtb	r3, r3
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	41fa0000 	.word	0x41fa0000
 8002888:	3d03126f 	.word	0x3d03126f

0800288c <L6474_Tval_Par_to_Current>:
 * @brief Converts  TVAL register values in mA 
 * @param[in] Par TVAL regiser value
 * @retval mA
 **********************************************************/
inline float L6474_Tval_Par_to_Current(uint8_t Par)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1))*31.25f);
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	3301      	adds	r3, #1
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80028b8 <L6474_Tval_Par_to_Current+0x2c>
 80028a6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80028aa:	eeb0 0a67 	vmov.f32	s0, s15
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	41fa0000 	.word	0x41fa0000

080028bc <L6474_Tmin_Par_to_Time>:
 * @brief Convert TON/TOFF values in time (us)
 * @param[in] Par Values from TON_MIN/TOFF_MIN 
 * @retval time in us
 **********************************************************/
inline float L6474_Tmin_Par_to_Time(uint8_t Par)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  return (((float)(Par + 1)) * 0.5f);
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	3301      	adds	r3, #1
 80028ca:	ee07 3a90 	vmov	s15, r3
 80028ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028d6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80028da:	eeb0 0a67 	vmov.f32	s0, s15
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <L6474_Tmin_Time_to_Par>:
 * for TON_MIN register
 * @param[in] Tmin
 * @retval TON_MIN values
 **********************************************************/
inline uint8_t L6474_Tmin_Time_to_Par(float Tmin)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	ed87 0a01 	vstr	s0, [r7, #4]
  return ((uint8_t)(((Tmin - 0.5f)*2.0f)+0.5f));
 80028f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002902:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002906:	ee77 7a87 	vadd.f32	s15, s15, s14
 800290a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800290e:	edc7 7a00 	vstr	s15, [r7]
 8002912:	783b      	ldrb	r3, [r7, #0]
 8002914:	b2db      	uxtb	r3, r3
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <L6474_WriteBytes>:
 * @param[in] pByteToTransmit pointer to the byte to transmit
 * @param[in] pReceivedByte pointer to the received byte
 * @retval None
 **********************************************************/
void L6474_WriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  if (L6474_Board_SpiWriteBytes(pByteToTransmit, pReceivedByte, numberOfDevices) != 0)
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <L6474_WriteBytes+0x40>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	6839      	ldr	r1, [r7, #0]
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fa95 	bl	8002e68 <L6474_Board_SpiWriteBytes>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <L6474_WriteBytes+0x28>
  {
    L6474_ErrorHandler(L6474_ERROR_1);
 8002944:	f248 0001 	movw	r0, #32769	; 0x8001
 8002948:	f7ff f8d6 	bl	8001af8 <L6474_ErrorHandler>
  }
  
  if (isrFlag)
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <L6474_WriteBytes+0x44>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <L6474_WriteBytes+0x38>
  {
    spiPreemtionByIsr = TRUE;
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <L6474_WriteBytes+0x48>)
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
  }
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	200001c4 	.word	0x200001c4
 8002968:	200001e1 	.word	0x200001e1
 800296c:	200001e0 	.word	0x200001e0

08002970 <L6474_Board_Delay>:
 * @brief This function provides an accurate delay in milliseconds
 * @param[in] delay  time length in milliseconds
 * @retval None
 **********************************************************/
void L6474_Board_Delay(uint32_t delay)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 feb3 	bl	80036e4 <HAL_Delay>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <L6474_Board_DisableIrq>:
/******************************************************//**
 * @brief This function disable the interruptions
  * @retval None
 **********************************************************/
void L6474_Board_DisableIrq(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800298a:	b672      	cpsid	i
}
 800298c:	bf00      	nop
  __disable_irq();
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <L6474_Board_EnableIrq>:
/******************************************************//**
 * @brief This function enable the interruptions
 * @retval None
 **********************************************************/
void L6474_Board_EnableIrq(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800299c:	b662      	cpsie	i
}
 800299e:	bf00      	nop
  __enable_irq();
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <L6474_Board_GpioInit>:
 * @brief  Initiliases the GPIOs used by the L6474s
 * @param[in] deviceId (from 0 to 2)
 * @retval None
  **********************************************************/
void L6474_Board_GpioInit(uint8_t deviceId)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  if (deviceId ==0)
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d165      	bne.n	8002a88 <L6474_Board_GpioInit+0xdc>
  {
    /* GPIO Ports Clock Enable */
    __GPIOC_CLK_ENABLE();
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	4b4f      	ldr	r3, [pc, #316]	; (8002b00 <L6474_Board_GpioInit+0x154>)
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	4a4e      	ldr	r2, [pc, #312]	; (8002b00 <L6474_Board_GpioInit+0x154>)
 80029c6:	f043 0304 	orr.w	r3, r3, #4
 80029ca:	6313      	str	r3, [r2, #48]	; 0x30
 80029cc:	4b4c      	ldr	r3, [pc, #304]	; (8002b00 <L6474_Board_GpioInit+0x154>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]
    __GPIOA_CLK_ENABLE();
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	4b48      	ldr	r3, [pc, #288]	; (8002b00 <L6474_Board_GpioInit+0x154>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	4a47      	ldr	r2, [pc, #284]	; (8002b00 <L6474_Board_GpioInit+0x154>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6313      	str	r3, [r2, #48]	; 0x30
 80029e8:	4b45      	ldr	r3, [pc, #276]	; (8002b00 <L6474_Board_GpioInit+0x154>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
    __GPIOB_CLK_ENABLE();
 80029f4:	2300      	movs	r3, #0
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <L6474_Board_GpioInit+0x154>)
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	4a40      	ldr	r2, [pc, #256]	; (8002b00 <L6474_Board_GpioInit+0x154>)
 80029fe:	f043 0302 	orr.w	r3, r3, #2
 8002a02:	6313      	str	r3, [r2, #48]	; 0x30
 8002a04:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <L6474_Board_GpioInit+0x154>)
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
    
    /* Configure L6474 - Flag pin -------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_FLAG_PIN;
 8002a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a16:	4b3b      	ldr	r3, [pc, #236]	; (8002b04 <L6474_Board_GpioInit+0x158>)
 8002a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_FLAG_PORT, &GPIO_InitStruct);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	4837      	ldr	r0, [pc, #220]	; (8002b08 <L6474_Board_GpioInit+0x15c>)
 8002a2a:	f001 fb05 	bl	8004038 <HAL_GPIO_Init>
    
   /* Set Priority of External Line Interrupt used for the Flag interrupt*/ 
    HAL_NVIC_SetPriority(EXTI_MCU_LINE_IRQn, 5, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2105      	movs	r1, #5
 8002a32:	2028      	movs	r0, #40	; 0x28
 8002a34:	f000 ff51 	bl	80038da <HAL_NVIC_SetPriority>
      
    /* Enable the External Line Interrupt used for the Flag interrupt*/
    HAL_NVIC_EnableIRQ(EXTI_MCU_LINE_IRQn);    
 8002a38:	2028      	movs	r0, #40	; 0x28
 8002a3a:	f000 ff6a 	bl	8003912 <HAL_NVIC_EnableIRQ>

    /* Configure L6474 - CS pin ---------------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_CS_PIN;
 8002a3e:	2340      	movs	r3, #64	; 0x40
 8002a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_CS_PORT, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	482d      	ldr	r0, [pc, #180]	; (8002b0c <L6474_Board_GpioInit+0x160>)
 8002a56:	f001 faef 	bl	8004038 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	2140      	movs	r1, #64	; 0x40
 8002a5e:	482b      	ldr	r0, [pc, #172]	; (8002b0c <L6474_Board_GpioInit+0x160>)
 8002a60:	f001 fc6e 	bl	8004340 <HAL_GPIO_WritePin>
    
    /* Configure L6474 - STBY/RESET pin -------------------------------------*/
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_RESET_PIN;
 8002a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002a72:	2301      	movs	r3, #1
 8002a74:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4822      	ldr	r0, [pc, #136]	; (8002b08 <L6474_Board_GpioInit+0x15c>)
 8002a7e:	f001 fadb 	bl	8004038 <HAL_GPIO_Init>
    L6474_Board_Reset(0);  
 8002a82:	2000      	movs	r0, #0
 8002a84:	f000 f976 	bl	8002d74 <L6474_Board_Reset>
  }
  
  switch (deviceId)
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d025      	beq.n	8002ada <L6474_Board_GpioInit+0x12e>
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	dc32      	bgt.n	8002af8 <L6474_Board_GpioInit+0x14c>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <L6474_Board_GpioInit+0xf0>
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d010      	beq.n	8002abc <L6474_Board_GpioInit+0x110>
      GPIO_InitStruct.Pull = GPIO_NOPULL;
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
        break;
  }
}
 8002a9a:	e02d      	b.n	8002af8 <L6474_Board_GpioInit+0x14c>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN;
 8002a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa0:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, &GPIO_InitStruct);
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4814      	ldr	r0, [pc, #80]	; (8002b08 <L6474_Board_GpioInit+0x15c>)
 8002ab6:	f001 fabf 	bl	8004038 <HAL_GPIO_Init>
      break;
 8002aba:	e01d      	b.n	8002af8 <L6474_Board_GpioInit+0x14c>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN;
 8002abc:	2320      	movs	r3, #32
 8002abe:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, &GPIO_InitStruct);
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	480e      	ldr	r0, [pc, #56]	; (8002b0c <L6474_Board_GpioInit+0x160>)
 8002ad4:	f001 fab0 	bl	8004038 <HAL_GPIO_Init>
      break;
 8002ad8:	e00e      	b.n	8002af8 <L6474_Board_GpioInit+0x14c>
      GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN;
 8002ada:	2310      	movs	r3, #16
 8002adc:	617b      	str	r3, [r7, #20]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	61bb      	str	r3, [r7, #24]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	623b      	str	r3, [r7, #32]
      HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, &GPIO_InitStruct);    
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	4806      	ldr	r0, [pc, #24]	; (8002b0c <L6474_Board_GpioInit+0x160>)
 8002af2:	f001 faa1 	bl	8004038 <HAL_GPIO_Init>
        break;
 8002af6:	bf00      	nop
}
 8002af8:	bf00      	nop
 8002afa:	3728      	adds	r7, #40	; 0x28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	10210000 	.word	0x10210000
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	40020400 	.word	0x40020400

08002b10 <L6474_Board_Pwm1GetCounter>:

/******************************************************//**
 * @brief  Returns the current value of the counter used by PWM1, used by device 0
 * @retval the counter value
 **********************************************************/
uint32_t L6474_Board_Pwm1GetCounter() {
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
	return hTimPwm1.Instance->CNT;
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <L6474_Board_Pwm1GetCounter+0x14>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	200002b4 	.word	0x200002b4

08002b28 <L6474_Board_Pwm1SetPeriod>:
 * @brief  Sets the period of PWM1 used by device 0
 * @param[in] period in counter increments
 * @retval None
 **********************************************************/
void L6474_Board_Pwm1SetPeriod(uint32_t period)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SetAutoreload(&hTimPwm1, period-1);
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <L6474_Board_Pwm1SetPeriod+0x34>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	3a01      	subs	r2, #1
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <L6474_Board_Pwm1SetPeriod+0x34>)
 8002b40:	60d3      	str	r3, [r2, #12]
//  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
  if (hTimPwm1.Instance->CCER == 0) { // Check if a capture compare channel has not been enabled yet
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <L6474_Board_Pwm1SetPeriod+0x34>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d103      	bne.n	8002b54 <L6474_Board_Pwm1SetPeriod+0x2c>
	  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 8002b4c:	2104      	movs	r1, #4
 8002b4e:	4803      	ldr	r0, [pc, #12]	; (8002b5c <L6474_Board_Pwm1SetPeriod+0x34>)
 8002b50:	f002 fbd0 	bl	80052f4 <HAL_TIM_PWM_Start_IT>
  }
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	200002b4 	.word	0x200002b4

08002b60 <L6474_Board_Pwm1SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm1SetFreq(uint16_t newFreq)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8002b6a:	f001 ff4d 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 8002b6e:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM1_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	029b      	lsls	r3, r3, #10
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm1, period);
 8002b7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <L6474_Board_Pwm1SetFreq+0x48>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <L6474_Board_Pwm1SetFreq+0x48>)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	60d3      	str	r3, [r2, #12]
//  __HAL_TIM_SetCompare(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1, period >> 1);
  if (hTimPwm1.Instance->CCER == 0) { // Check if a capture compare channel has not been enabled yet
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <L6474_Board_Pwm1SetFreq+0x48>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d103      	bne.n	8002b9e <L6474_Board_Pwm1SetFreq+0x3e>
	  HAL_TIM_PWM_Start_IT(&hTimPwm1, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 8002b96:	2104      	movs	r1, #4
 8002b98:	4803      	ldr	r0, [pc, #12]	; (8002ba8 <L6474_Board_Pwm1SetFreq+0x48>)
 8002b9a:	f002 fbab 	bl	80052f4 <HAL_TIM_PWM_Start_IT>
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	200002b4 	.word	0x200002b4

08002bac <L6474_Board_Pwm2SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm2SetFreq(uint16_t newFreq)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8002bb6:	f001 ff27 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 8002bba:	60f8      	str	r0, [r7, #12]
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM2_FREQ_RESCALER  * (uint32_t)newFreq)) - 1;
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	029b      	lsls	r3, r3, #10
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm2, period);
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <L6474_Board_Pwm2SetFreq+0x4c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bd2:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <L6474_Board_Pwm2SetFreq+0x4c>)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2, period >> 1);
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <L6474_Board_Pwm2SetFreq+0x4c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3334      	adds	r3, #52	; 0x34
 8002bde:	3304      	adds	r3, #4
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	0852      	lsrs	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm2, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8002be6:	2104      	movs	r1, #4
 8002be8:	4803      	ldr	r0, [pc, #12]	; (8002bf8 <L6474_Board_Pwm2SetFreq+0x4c>)
 8002bea:	f002 fb83 	bl	80052f4 <HAL_TIM_PWM_Start_IT>
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200002f0 	.word	0x200002f0

08002bfc <L6474_Board_Pwm3SetFreq>:
 * @param[in] newFreq in Hz
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6474_Board_Pwm3SetFreq(uint16_t newFreq)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	80fb      	strh	r3, [r7, #6]
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8002c06:	f001 feff 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 8002c0a:	60f8      	str	r0, [r7, #12]
  /* Double the frequency as the SW is generated by SW */
  uint32_t period = (sysFreq/ (TIMER_PRESCALER * BSP_MOTOR_CONTROL_BOARD_PWM3_FREQ_RESCALER * (uint32_t)newFreq)) - 1;
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	02db      	lsls	r3, r3, #11
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
  
  __HAL_TIM_SetAutoreload(&hTimPwm3, period);
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <L6474_Board_Pwm3SetFreq+0x4c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c22:	4a09      	ldr	r2, [pc, #36]	; (8002c48 <L6474_Board_Pwm3SetFreq+0x4c>)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_SetCompare(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3, period >> 1);
 8002c28:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <L6474_Board_Pwm3SetFreq+0x4c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3334      	adds	r3, #52	; 0x34
 8002c2e:	3308      	adds	r3, #8
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	0852      	lsrs	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start_IT(&hTimPwm3, BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);  
 8002c36:	2108      	movs	r1, #8
 8002c38:	4803      	ldr	r0, [pc, #12]	; (8002c48 <L6474_Board_Pwm3SetFreq+0x4c>)
 8002c3a:	f002 fb5b 	bl	80052f4 <HAL_TIM_PWM_Start_IT>
}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000032c 	.word	0x2000032c

08002c4c <L6474_Board_PwmInit>:
 * @note Device 0 uses PWM1 based on timer 1 
 * Device 1 uses PWM 2 based on timer 2
 * Device 2 uses PWM3 based timer 0
 **********************************************************/
void L6474_Board_PwmInit(uint8_t deviceId)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08e      	sub	sp, #56	; 0x38
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (deviceId)
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d00a      	beq.n	8002c72 <L6474_Board_PwmInit+0x26>
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d010      	beq.n	8002c82 <L6474_Board_PwmInit+0x36>
  {

  case 0:
  default:
      pHTim = &hTimPwm1;
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <L6474_Board_PwmInit+0x9c>)
 8002c62:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1;
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c6a:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1;
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30

      break;
 8002c70:	e00f      	b.n	8002c92 <L6474_Board_PwmInit+0x46>
    case  1:
      pHTim = &hTimPwm2;
 8002c72:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <L6474_Board_PwmInit+0xa0>)
 8002c74:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2;
 8002c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c78:	4a1d      	ldr	r2, [pc, #116]	; (8002cf0 <L6474_Board_PwmInit+0xa4>)
 8002c7a:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2;
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c80:	e007      	b.n	8002c92 <L6474_Board_PwmInit+0x46>


    case 2:
      pHTim = &hTimPwm3;
 8002c82:	4b1c      	ldr	r3, [pc, #112]	; (8002cf4 <L6474_Board_PwmInit+0xa8>)
 8002c84:	637b      	str	r3, [r7, #52]	; 0x34
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM3;
 8002c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c88:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <L6474_Board_PwmInit+0xac>)
 8002c8a:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3;
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c90:	bf00      	nop
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 8002c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c94:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002c98:	605a      	str	r2, [r3, #4]
  
  pHTim->Init.Period = 0;
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	60da      	str	r2, [r3, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]
  HAL_TIM_PWM_Init(pHTim);
 8002ca6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ca8:	f002 faac 	bl	8005204 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cac:	2360      	movs	r3, #96	; 0x60
 8002cae:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cc6:	f002 fd59 	bl	800577c <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cda:	f003 f87d 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
}
 8002cde:	bf00      	nop
 8002ce0:	3738      	adds	r7, #56	; 0x38
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200002b4 	.word	0x200002b4
 8002cec:	200002f0 	.word	0x200002f0
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	2000032c 	.word	0x2000032c
 8002cf8:	40000800 	.word	0x40000800

08002cfc <L6474_Board_PwmStop>:
 * @brief  Stops the PWM uses by the specified device
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_PwmStop(uint8_t deviceId)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
  switch (deviceId)
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d010      	beq.n	8002d2e <L6474_Board_PwmStop+0x32>
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	dc13      	bgt.n	8002d38 <L6474_Board_PwmStop+0x3c>
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <L6474_Board_PwmStop+0x1e>
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d005      	beq.n	8002d24 <L6474_Board_PwmStop+0x28>
    case 2:
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
      
      break;
    default:
      break;//ignore error
 8002d18:	e00e      	b.n	8002d38 <L6474_Board_PwmStop+0x3c>
       HAL_TIM_PWM_Stop(&hTimPwm1,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1);
 8002d1a:	2104      	movs	r1, #4
 8002d1c:	4809      	ldr	r0, [pc, #36]	; (8002d44 <L6474_Board_PwmStop+0x48>)
 8002d1e:	f002 fa9d 	bl	800525c <HAL_TIM_PWM_Stop>
      break;
 8002d22:	e00a      	b.n	8002d3a <L6474_Board_PwmStop+0x3e>
      HAL_TIM_PWM_Stop(&hTimPwm2,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2);
 8002d24:	2104      	movs	r1, #4
 8002d26:	4808      	ldr	r0, [pc, #32]	; (8002d48 <L6474_Board_PwmStop+0x4c>)
 8002d28:	f002 fa98 	bl	800525c <HAL_TIM_PWM_Stop>
      break;
 8002d2c:	e005      	b.n	8002d3a <L6474_Board_PwmStop+0x3e>
       HAL_TIM_PWM_Stop(&hTimPwm3,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM3);
 8002d2e:	2108      	movs	r1, #8
 8002d30:	4806      	ldr	r0, [pc, #24]	; (8002d4c <L6474_Board_PwmStop+0x50>)
 8002d32:	f002 fa93 	bl	800525c <HAL_TIM_PWM_Stop>
      break;
 8002d36:	e000      	b.n	8002d3a <L6474_Board_PwmStop+0x3e>
      break;//ignore error
 8002d38:	bf00      	nop
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	200002b4 	.word	0x200002b4
 8002d48:	200002f0 	.word	0x200002f0
 8002d4c:	2000032c 	.word	0x2000032c

08002d50 <L6474_Board_ReleaseReset>:
 * @brief  Releases the L6474 reset (pin set to High) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_ReleaseReset(uint8_t deviceId)
{ 
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_SET); 
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d60:	4803      	ldr	r0, [pc, #12]	; (8002d70 <L6474_Board_ReleaseReset+0x20>)
 8002d62:	f001 faed 	bl	8004340 <HAL_GPIO_WritePin>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40020000 	.word	0x40020000

08002d74 <L6474_Board_Reset>:
 * @brief  Resets the L6474 (reset pin set to low) of all devices
 * @param[in] deviceId (from 0 to 2)
 * @retval None
 **********************************************************/
void L6474_Board_Reset(uint8_t deviceId)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_RESET_PORT, BSP_MOTOR_CONTROL_BOARD_RESET_PIN, GPIO_PIN_RESET); 
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d84:	4803      	ldr	r0, [pc, #12]	; (8002d94 <L6474_Board_Reset+0x20>)
 8002d86:	f001 fadb 	bl	8004340 <HAL_GPIO_WritePin>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40020000 	.word	0x40020000

08002d98 <L6474_Board_SetDirectionGpio>:
 * @param[in] deviceId (from 0 to 2)
 * @param[in] gpioState state of the direction gpio (0 to reset, 1 to set)
 * @retval None
 **********************************************************/
void L6474_Board_SetDirectionGpio(uint8_t deviceId, uint8_t gpioState)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	460a      	mov	r2, r1
 8002da2:	71fb      	strb	r3, [r7, #7]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71bb      	strb	r3, [r7, #6]
  switch (deviceId)
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d006      	beq.n	8002dbc <L6474_Board_SetDirectionGpio+0x24>
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	dc1a      	bgt.n	8002de8 <L6474_Board_SetDirectionGpio+0x50>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d010      	beq.n	8002dd8 <L6474_Board_SetDirectionGpio+0x40>
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d007      	beq.n	8002dca <L6474_Board_SetDirectionGpio+0x32>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
      break;
    default:
      ;
  }
}
 8002dba:	e015      	b.n	8002de8 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_3_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_3_PIN, (GPIO_PinState)gpioState); 
 8002dbc:	79bb      	ldrb	r3, [r7, #6]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2110      	movs	r1, #16
 8002dc2:	480b      	ldr	r0, [pc, #44]	; (8002df0 <L6474_Board_SetDirectionGpio+0x58>)
 8002dc4:	f001 fabc 	bl	8004340 <HAL_GPIO_WritePin>
      break;
 8002dc8:	e00e      	b.n	8002de8 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_2_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_2_PIN, (GPIO_PinState)gpioState); 
 8002dca:	79bb      	ldrb	r3, [r7, #6]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2120      	movs	r1, #32
 8002dd0:	4807      	ldr	r0, [pc, #28]	; (8002df0 <L6474_Board_SetDirectionGpio+0x58>)
 8002dd2:	f001 fab5 	bl	8004340 <HAL_GPIO_WritePin>
      break;
 8002dd6:	e007      	b.n	8002de8 <L6474_Board_SetDirectionGpio+0x50>
      HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_DIR_1_PORT, BSP_MOTOR_CONTROL_BOARD_DIR_1_PIN, (GPIO_PinState)gpioState); 
 8002dd8:	79bb      	ldrb	r3, [r7, #6]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002de0:	4804      	ldr	r0, [pc, #16]	; (8002df4 <L6474_Board_SetDirectionGpio+0x5c>)
 8002de2:	f001 faad 	bl	8004340 <HAL_GPIO_WritePin>
      break;
 8002de6:	bf00      	nop
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40020400 	.word	0x40020400
 8002df4:	40020000 	.word	0x40020000

08002df8 <L6474_Board_SpiInit>:
/******************************************************//**
 * @brief  Initialise the SPI used by L6474
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else
 **********************************************************/
uint8_t L6474_Board_SpiInit(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  
  /* Initialises the SPI  --------------------------------------------------*/
  SpiHandle.Instance               = SPIx;
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <L6474_Board_SpiInit+0x68>)
 8002e00:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <L6474_Board_SpiInit+0x6c>)
 8002e02:	601a      	str	r2, [r3, #0]
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; 
 8002e04:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <L6474_Board_SpiInit+0x68>)
 8002e06:	2220      	movs	r2, #32
 8002e08:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <L6474_Board_SpiInit+0x68>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_2EDGE;    
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <L6474_Board_SpiInit+0x68>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8002e16:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <L6474_Board_SpiInit+0x68>)
 8002e18:	2202      	movs	r2, #2
 8002e1a:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLED;
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <L6474_Board_SpiInit+0x68>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <L6474_Board_SpiInit+0x68>)
 8002e24:	2207      	movs	r2, #7
 8002e26:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8002e28:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <L6474_Board_SpiInit+0x68>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8002e2e:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <L6474_Board_SpiInit+0x68>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <L6474_Board_SpiInit+0x68>)
 8002e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e3a:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLED;
 8002e3c:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <L6474_Board_SpiInit+0x68>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24
  
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <L6474_Board_SpiInit+0x68>)
 8002e44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e48:	605a      	str	r2, [r3, #4]
  
  status = HAL_SPI_Init(&SpiHandle);
 8002e4a:	4805      	ldr	r0, [pc, #20]	; (8002e60 <L6474_Board_SpiInit+0x68>)
 8002e4c:	f001 fed6 	bl	8004bfc <HAL_SPI_Init>
 8002e50:	4603      	mov	r3, r0
 8002e52:	71fb      	strb	r3, [r7, #7]
  
  return (uint8_t) status;
 8002e54:	79fb      	ldrb	r3, [r7, #7]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	2000025c 	.word	0x2000025c
 8002e64:	40013000 	.word	0x40013000

08002e68 <L6474_Board_SpiWriteBytes>:
 * @param[in] pReceivedByte pointer to the received byte
 * @param[in] nbDevices Number of device in the SPI chain
 * @retval HAL_OK if SPI transaction is OK, HAL_KO else 
 **********************************************************/
uint8_t L6474_Board_SpiWriteBytes(uint8_t *pByteToTransmit, uint8_t *pReceivedByte, uint8_t nbDevices)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	4613      	mov	r3, r2
 8002e74:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  uint32_t i;
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_RESET); 
 8002e76:	2200      	movs	r2, #0
 8002e78:	2140      	movs	r1, #64	; 0x40
 8002e7a:	4816      	ldr	r0, [pc, #88]	; (8002ed4 <L6474_Board_SpiWriteBytes+0x6c>)
 8002e7c:	f001 fa60 	bl	8004340 <HAL_GPIO_WritePin>
  for (i = 0; i < nbDevices; i++)
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	e016      	b.n	8002eb4 <L6474_Board_SpiWriteBytes+0x4c>
  {
    status = HAL_SPI_TransmitReceive(&SpiHandle, pByteToTransmit, pReceivedByte, 1, SPIx_TIMEOUT_MAX);
 8002e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	68f9      	ldr	r1, [r7, #12]
 8002e92:	4811      	ldr	r0, [pc, #68]	; (8002ed8 <L6474_Board_SpiWriteBytes+0x70>)
 8002e94:	f001 ff1d 	bl	8004cd2 <HAL_SPI_TransmitReceive>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10d      	bne.n	8002ebe <L6474_Board_SpiWriteBytes+0x56>
    {
      break;
    }
    pByteToTransmit++;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	60fb      	str	r3, [r7, #12]
    pReceivedByte++;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < nbDevices; i++)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d3e4      	bcc.n	8002e86 <L6474_Board_SpiWriteBytes+0x1e>
 8002ebc:	e000      	b.n	8002ec0 <L6474_Board_SpiWriteBytes+0x58>
      break;
 8002ebe:	bf00      	nop
  }
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_CS_PORT, BSP_MOTOR_CONTROL_BOARD_CS_PIN, GPIO_PIN_SET); 
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	2140      	movs	r1, #64	; 0x40
 8002ec4:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <L6474_Board_SpiWriteBytes+0x6c>)
 8002ec6:	f001 fa3b 	bl	8004340 <HAL_GPIO_WritePin>
  
  return (uint8_t) status;  
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	2000025c 	.word	0x2000025c

08002edc <l647x_GetMotorHandle>:
 * @{
 */
/// Get motor handle for L6474
__weak motorDrv_t* L6474_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for L647x
__weak motorDrv_t* l647x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <l648x_GetMotorHandle>:
/// Get motor handle for L648x
__weak motorDrv_t* l648x_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <Powerstep01_GetMotorHandle>:
/// Get motor handle for Powerstep
__weak motorDrv_t* Powerstep01_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	2300      	movs	r3, #0
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <L6206_GetMotorHandle>:
/// Get motor handle for L6206
__weak motorDrv_t* L6206_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	2300      	movs	r3, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <L6208_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	2300      	movs	r3, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <Stspin220_GetMotorHandle>:
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	2300      	movs	r3, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <Stspin240_250_GetMotorHandle>:
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	2300      	movs	r3, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <BSP_MotorControl_AttachErrorHandler>:
 * @param[in] callback Name of the callback to attach 
 * to the error Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachErrorHandler(void (*callback)(uint16_t))
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <BSP_MotorControl_AttachErrorHandler+0x26>
 8002f5c:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <BSP_MotorControl_AttachErrorHandler+0x26>
  {
    motorDrvHandle->AttachErrorHandler(callback);
 8002f66:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <BSP_MotorControl_AttachErrorHandler+0x38>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
 8002f70:	e004      	b.n	8002f7c <BSP_MotorControl_AttachErrorHandler+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8002f72:	f640 0002 	movw	r0, #2050	; 0x802
 8002f76:	f000 f825 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000368 	.word	0x20000368

08002f88 <BSP_MotorControl_AttachFlagInterrupt>:
 * @param[in] callback Name of the callback to attach 
 * to the Flag interrupt Hanlder
 * @retval None
 **********************************************************/
void BSP_MotorControl_AttachFlagInterrupt(void (*callback)(void))
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <BSP_MotorControl_AttachFlagInterrupt+0x26>
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <BSP_MotorControl_AttachFlagInterrupt+0x26>
  {
    motorDrvHandle->AttachFlagInterrupt(callback);
 8002fa2:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <BSP_MotorControl_AttachFlagInterrupt+0x38>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
 8002fac:	e004      	b.n	8002fb8 <BSP_MotorControl_AttachFlagInterrupt+0x30>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8002fae:	f640 0003 	movw	r0, #2051	; 0x803
 8002fb2:	f000 f807 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }  
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000368 	.word	0x20000368

08002fc4 <BSP_MotorControl_ErrorHandler>:
 * @brief Motor control error handler
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <BSP_MotorControl_ErrorHandler+0x38>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <BSP_MotorControl_ErrorHandler+0x2e>
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <BSP_MotorControl_ErrorHandler+0x38>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <BSP_MotorControl_ErrorHandler+0x2e>
  {
    motorDrvHandle->ErrorHandler(error);
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <BSP_MotorControl_ErrorHandler+0x38>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fea:	88fa      	ldrh	r2, [r7, #6]
 8002fec:	4610      	mov	r0, r2
 8002fee:	4798      	blx	r3
    while(1)
    {
      /* Infinite loop as Error handler must be defined*/
    }
  }
}
 8002ff0:	e000      	b.n	8002ff4 <BSP_MotorControl_ErrorHandler+0x30>
    while(1)
 8002ff2:	e7fe      	b.n	8002ff2 <BSP_MotorControl_ErrorHandler+0x2e>
}
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000368 	.word	0x20000368

08003000 <BSP_MotorControl_Init>:
 * @param[in] id Component Id (L6474, Powerstep01,...)
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	80fb      	strh	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <BSP_MotorControl_Init+0x3c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <BSP_MotorControl_Init+0x2a>
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <BSP_MotorControl_Init+0x3c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <BSP_MotorControl_Init+0x2a>
  {
    motorDrvHandle->Init(initDeviceParameters);
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <BSP_MotorControl_Init+0x3c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6838      	ldr	r0, [r7, #0]
 8003026:	4798      	blx	r3
 8003028:	e004      	b.n	8003034 <BSP_MotorControl_Init+0x34>
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 800302a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800302e:	f7ff ffc9 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003032:	bf00      	nop
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000368 	.word	0x20000368

08003040 <BSP_MotorControl_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void BSP_MotorControl_FlagInterruptHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  if ((motorDrvHandle != 0)&&(motorDrvHandle->FlagInterruptHandler != 0))
 8003044:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d009      	beq.n	8003060 <BSP_MotorControl_FlagInterruptHandler+0x20>
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <BSP_MotorControl_FlagInterruptHandler+0x20>
  {
    motorDrvHandle->FlagInterruptHandler();
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <BSP_MotorControl_FlagInterruptHandler+0x30>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	4798      	blx	r3
 800305e:	e004      	b.n	800306a <BSP_MotorControl_FlagInterruptHandler+0x2a>
  }    
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(5);
 8003060:	f640 0005 	movw	r0, #2053	; 0x805
 8003064:	f7ff ffae 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }  
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000368 	.word	0x20000368

08003074 <BSP_MotorControl_GetDeviceState>:
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval State ACCELERATING, DECELERATING, STEADY or INACTIVE for stepper motor,
                 STEADY or INACTIVE for Brush DC motor
 **********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
  motorState_t state = INACTIVE;
 800307e:	2308      	movs	r3, #8
 8003080:	73fb      	strb	r3, [r7, #15]

  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeviceState != 0))
 8003082:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <BSP_MotorControl_GetDeviceState+0x44>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <BSP_MotorControl_GetDeviceState+0x32>
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <BSP_MotorControl_GetDeviceState+0x44>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <BSP_MotorControl_GetDeviceState+0x32>
  {
    state = motorDrvHandle->GetDeviceState(deviceId);
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <BSP_MotorControl_GetDeviceState+0x44>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	79fa      	ldrb	r2, [r7, #7]
 800309c:	4610      	mov	r0, r2
 800309e:	4798      	blx	r3
 80030a0:	4603      	mov	r3, r0
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	e003      	b.n	80030ae <BSP_MotorControl_GetDeviceState+0x3a>
  }      
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
 80030a6:	f640 0009 	movw	r0, #2057	; 0x809
 80030aa:	f7ff ff8b 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }  
  return(state);   
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000368 	.word	0x20000368

080030bc <BSP_MotorControl_GetPosition>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval ABS_POSITION register value converted in a 32b signed integer
 **********************************************************/
int32_t BSP_MotorControl_GetPosition(uint8_t deviceId)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
  int32_t pos = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
  
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetPosition != 0))
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <BSP_MotorControl_GetPosition+0x44>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <BSP_MotorControl_GetPosition+0x30>
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <BSP_MotorControl_GetPosition+0x44>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <BSP_MotorControl_GetPosition+0x30>
  {
    pos = motorDrvHandle->GetPosition(deviceId);
 80030dc:	4b08      	ldr	r3, [pc, #32]	; (8003100 <BSP_MotorControl_GetPosition+0x44>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	79fa      	ldrb	r2, [r7, #7]
 80030e4:	4610      	mov	r0, r2
 80030e6:	4798      	blx	r3
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	e003      	b.n	80030f4 <BSP_MotorControl_GetPosition+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(14);
 80030ec:	f640 000e 	movw	r0, #2062	; 0x80e
 80030f0:	f7ff ff68 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }      
  return(pos);
 80030f4:	68fb      	ldr	r3, [r7, #12]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000368 	.word	0x20000368

08003104 <BSP_MotorControl_GoTo>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @param[in] targetPosition absolute position in steps
 * @retval None
 **********************************************************/
void BSP_MotorControl_GoTo(uint8_t deviceId, int32_t targetPosition)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	6039      	str	r1, [r7, #0]
 800310e:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GoTo != 0))
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <BSP_MotorControl_GoTo+0x40>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00c      	beq.n	8003132 <BSP_MotorControl_GoTo+0x2e>
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <BSP_MotorControl_GoTo+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <BSP_MotorControl_GoTo+0x2e>
  {
    motorDrvHandle->GoTo(deviceId, targetPosition);
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <BSP_MotorControl_GoTo+0x40>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	79fa      	ldrb	r2, [r7, #7]
 800312a:	6839      	ldr	r1, [r7, #0]
 800312c:	4610      	mov	r0, r2
 800312e:	4798      	blx	r3
 8003130:	e004      	b.n	800313c <BSP_MotorControl_GoTo+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(17);
 8003132:	f640 0011 	movw	r0, #2065	; 0x811
 8003136:	f7ff ff45 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }      
}
 800313a:	bf00      	nop
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20000368 	.word	0x20000368

08003148 <BSP_MotorControl_HardStop>:
 *            For L6208: dummy parameter for compatibility with motor.h
 *            motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval None
 **********************************************************/
void BSP_MotorControl_HardStop(uint8_t deviceId) 
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->HardStop != 0))
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <BSP_MotorControl_HardStop+0x3c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <BSP_MotorControl_HardStop+0x2a>
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <BSP_MotorControl_HardStop+0x3c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003160:	2b00      	cmp	r3, #0
 8003162:	d006      	beq.n	8003172 <BSP_MotorControl_HardStop+0x2a>
  {
    motorDrvHandle->HardStop(deviceId);
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <BSP_MotorControl_HardStop+0x3c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316a:	79fa      	ldrb	r2, [r7, #7]
 800316c:	4610      	mov	r0, r2
 800316e:	4798      	blx	r3
 8003170:	e004      	b.n	800317c <BSP_MotorControl_HardStop+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(18);
 8003172:	f640 0012 	movw	r0, #2066	; 0x812
 8003176:	f7ff ff25 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }      
}
 800317a:	bf00      	nop
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000368 	.word	0x20000368

08003188 <BSP_MotorControl_Move>:
 * @param[in] direction FORWARD or BACKWARD
 * @param[in] stepCount Number of steps to perform
 * @retval None
 **********************************************************/
void BSP_MotorControl_Move(uint8_t deviceId, motorDir_t direction, uint32_t stepCount)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	603a      	str	r2, [r7, #0]
 8003192:	71fb      	strb	r3, [r7, #7]
 8003194:	460b      	mov	r3, r1
 8003196:	71bb      	strb	r3, [r7, #6]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Move != 0))
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <BSP_MotorControl_Move+0x44>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00c      	beq.n	80031ba <BSP_MotorControl_Move+0x32>
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <BSP_MotorControl_Move+0x44>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d007      	beq.n	80031ba <BSP_MotorControl_Move+0x32>
  {
    motorDrvHandle->Move(deviceId, direction, stepCount);
 80031aa:	4b08      	ldr	r3, [pc, #32]	; (80031cc <BSP_MotorControl_Move+0x44>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b0:	79b9      	ldrb	r1, [r7, #6]
 80031b2:	79f8      	ldrb	r0, [r7, #7]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	4798      	blx	r3
 80031b8:	e004      	b.n	80031c4 <BSP_MotorControl_Move+0x3c>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(19);
 80031ba:	f640 0013 	movw	r0, #2067	; 0x813
 80031be:	f7ff ff01 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }      
}
 80031c2:	bf00      	nop
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000368 	.word	0x20000368

080031d0 <BSP_MotorControl_SetAcceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetAcceleration(uint8_t deviceId,uint16_t newAcc)
{                                                  
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	460a      	mov	r2, r1
 80031da:	71fb      	strb	r3, [r7, #7]
 80031dc:	4613      	mov	r3, r2
 80031de:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetAcceleration != 0))
 80031e4:	4b0d      	ldr	r3, [pc, #52]	; (800321c <BSP_MotorControl_SetAcceleration+0x4c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00e      	beq.n	800320a <BSP_MotorControl_SetAcceleration+0x3a>
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <BSP_MotorControl_SetAcceleration+0x4c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <BSP_MotorControl_SetAcceleration+0x3a>
  {
    status = motorDrvHandle->SetAcceleration(deviceId, newAcc);
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <BSP_MotorControl_SetAcceleration+0x4c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	88b9      	ldrh	r1, [r7, #4]
 80031fe:	79fa      	ldrb	r2, [r7, #7]
 8003200:	4610      	mov	r0, r2
 8003202:	4798      	blx	r3
 8003204:	4603      	mov	r3, r0
 8003206:	73fb      	strb	r3, [r7, #15]
 8003208:	e003      	b.n	8003212 <BSP_MotorControl_SetAcceleration+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(22);
 800320a:	f640 0016 	movw	r0, #2070	; 0x816
 800320e:	f7ff fed9 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 8003212:	7bfb      	ldrb	r3, [r7, #15]
}            
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000368 	.word	0x20000368

08003220 <BSP_MotorControl_SetDeceleration>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command)
 **********************************************************/
bool BSP_MotorControl_SetDeceleration(uint8_t deviceId, uint16_t newDec)
{                                                  
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	460a      	mov	r2, r1
 800322a:	71fb      	strb	r3, [r7, #7]
 800322c:	4613      	mov	r3, r2
 800322e:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetDeceleration != 0))
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <BSP_MotorControl_SetDeceleration+0x4c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00e      	beq.n	800325a <BSP_MotorControl_SetDeceleration+0x3a>
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <BSP_MotorControl_SetDeceleration+0x4c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <BSP_MotorControl_SetDeceleration+0x3a>
  {
    status = motorDrvHandle->SetDeceleration(deviceId, newDec);
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <BSP_MotorControl_SetDeceleration+0x4c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	88b9      	ldrh	r1, [r7, #4]
 800324e:	79fa      	ldrb	r2, [r7, #7]
 8003250:	4610      	mov	r0, r2
 8003252:	4798      	blx	r3
 8003254:	4603      	mov	r3, r0
 8003256:	73fb      	strb	r3, [r7, #15]
 8003258:	e003      	b.n	8003262 <BSP_MotorControl_SetDeceleration+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(23);
 800325a:	f640 0017 	movw	r0, #2071	; 0x817
 800325e:	f7ff feb1 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }        
  return (status);
 8003262:	7bfb      	ldrb	r3, [r7, #15]
}        
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000368 	.word	0x20000368

08003270 <BSP_MotorControl_SetHome>:
 * @param[in] homePosition new absolute home position 
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_SetHome(uint8_t deviceId, int32_t homePosition)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	6039      	str	r1, [r7, #0]
 800327a:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetHome != 0))
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <BSP_MotorControl_SetHome+0x40>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00c      	beq.n	800329e <BSP_MotorControl_SetHome+0x2e>
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <BSP_MotorControl_SetHome+0x40>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <BSP_MotorControl_SetHome+0x2e>
  {
    motorDrvHandle->SetHome(deviceId, homePosition);
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <BSP_MotorControl_SetHome+0x40>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003294:	79fa      	ldrb	r2, [r7, #7]
 8003296:	6839      	ldr	r1, [r7, #0]
 8003298:	4610      	mov	r0, r2
 800329a:	4798      	blx	r3
 800329c:	e004      	b.n	80032a8 <BSP_MotorControl_SetHome+0x38>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(24);
 800329e:	f640 0018 	movw	r0, #2072	; 0x818
 80032a2:	f7ff fe8f 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }        
}
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000368 	.word	0x20000368

080032b4 <BSP_MotorControl_SetMaxSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note For a stepper motor, the command is not performed if the device 
 * is executing a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	460a      	mov	r2, r1
 80032be:	71fb      	strb	r3, [r7, #7]
 80032c0:	4613      	mov	r3, r2
 80032c2:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 80032c8:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00e      	beq.n	80032ee <BSP_MotorControl_SetMaxSpeed+0x3a>
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d009      	beq.n	80032ee <BSP_MotorControl_SetMaxSpeed+0x3a>
  {
    status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <BSP_MotorControl_SetMaxSpeed+0x4c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032e0:	88b9      	ldrh	r1, [r7, #4]
 80032e2:	79fa      	ldrb	r2, [r7, #7]
 80032e4:	4610      	mov	r0, r2
 80032e6:	4798      	blx	r3
 80032e8:	4603      	mov	r3, r0
 80032ea:	73fb      	strb	r3, [r7, #15]
 80032ec:	e003      	b.n	80032f6 <BSP_MotorControl_SetMaxSpeed+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
 80032ee:	f640 001a 	movw	r0, #2074	; 0x81a
 80032f2:	f7ff fe67 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }     
  return (status);  
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
}                                                     
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000368 	.word	0x20000368

08003304 <BSP_MotorControl_SetMinSpeed>:
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is executing 
 * a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMinSpeed(uint8_t deviceId, uint16_t newMinSpeed)
{                                                  
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	460a      	mov	r2, r1
 800330e:	71fb      	strb	r3, [r7, #7]
 8003310:	4613      	mov	r3, r2
 8003312:	80bb      	strh	r3, [r7, #4]
  bool status = FALSE;
 8003314:	2300      	movs	r3, #0
 8003316:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMinSpeed != 0))
 8003318:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <BSP_MotorControl_SetMinSpeed+0x4c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00e      	beq.n	800333e <BSP_MotorControl_SetMinSpeed+0x3a>
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <BSP_MotorControl_SetMinSpeed+0x4c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d009      	beq.n	800333e <BSP_MotorControl_SetMinSpeed+0x3a>
  {
    status = motorDrvHandle->SetMinSpeed(deviceId, newMinSpeed);
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <BSP_MotorControl_SetMinSpeed+0x4c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003330:	88b9      	ldrh	r1, [r7, #4]
 8003332:	79fa      	ldrb	r2, [r7, #7]
 8003334:	4610      	mov	r0, r2
 8003336:	4798      	blx	r3
 8003338:	4603      	mov	r3, r0
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e003      	b.n	8003346 <BSP_MotorControl_SetMinSpeed+0x42>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(27);
 800333e:	f640 001b 	movw	r0, #2075	; 0x81b
 8003342:	f7ff fe3f 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }     
  
  return (status);  
 8003346:	7bfb      	ldrb	r3, [r7, #15]
}                 
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000368 	.word	0x20000368

08003354 <BSP_MotorControl_SoftStop>:
 *            motorId  from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS for Brush DC motor
 * @retval true if the command is successfully executed, else false
 * @note The command is not performed is the device is in INACTIVE state.
 **********************************************************/
bool BSP_MotorControl_SoftStop(uint8_t deviceId)
{	
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
  bool status = FALSE;
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SoftStop != 0))
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <BSP_MotorControl_SoftStop+0x44>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00d      	beq.n	8003386 <BSP_MotorControl_SoftStop+0x32>
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <BSP_MotorControl_SoftStop+0x44>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <BSP_MotorControl_SoftStop+0x32>
  {
    status = motorDrvHandle->SoftStop(deviceId);
 8003374:	4b08      	ldr	r3, [pc, #32]	; (8003398 <BSP_MotorControl_SoftStop+0x44>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	79fa      	ldrb	r2, [r7, #7]
 800337c:	4610      	mov	r0, r2
 800337e:	4798      	blx	r3
 8003380:	4603      	mov	r3, r0
 8003382:	73fb      	strb	r3, [r7, #15]
 8003384:	e003      	b.n	800338e <BSP_MotorControl_SoftStop+0x3a>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(28);
 8003386:	f640 001c 	movw	r0, #2076	; 0x81c
 800338a:	f7ff fe1b 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }    
  return (status);  
 800338e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20000368 	.word	0x20000368

0800339c <BSP_MotorControl_StepClockHandler>:
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 * @note Must only be called by the timer ISR
 **********************************************************/
void BSP_MotorControl_StepClockHandler(uint8_t deviceId)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->StepClockHandler != 0))
 80033a6:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <BSP_MotorControl_StepClockHandler+0x3c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <BSP_MotorControl_StepClockHandler+0x2a>
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <BSP_MotorControl_StepClockHandler+0x3c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d006      	beq.n	80033c6 <BSP_MotorControl_StepClockHandler+0x2a>
  {
    motorDrvHandle->StepClockHandler(deviceId);
 80033b8:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <BSP_MotorControl_StepClockHandler+0x3c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033be:	79fa      	ldrb	r2, [r7, #7]
 80033c0:	4610      	mov	r0, r2
 80033c2:	4798      	blx	r3
 80033c4:	e004      	b.n	80033d0 <BSP_MotorControl_StepClockHandler+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(29);
 80033c6:	f640 001d 	movw	r0, #2077	; 0x81d
 80033ca:	f7ff fdfb 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }   
}
 80033ce:	bf00      	nop
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	20000368 	.word	0x20000368

080033dc <BSP_MotorControl_WaitWhileActive>:
 * @param[in] deviceId (from 0 to MAX_NUMBER_OF_DEVICES - 1)
 * For L6208: dummy parameter for compatibility with motor.h
 * @retval None
 **********************************************************/
void BSP_MotorControl_WaitWhileActive(uint8_t deviceId)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->WaitWhileActive != 0))
 80033e6:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <BSP_MotorControl_WaitWhileActive+0x3c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <BSP_MotorControl_WaitWhileActive+0x2a>
 80033ee:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <BSP_MotorControl_WaitWhileActive+0x3c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d006      	beq.n	8003406 <BSP_MotorControl_WaitWhileActive+0x2a>
  {
    motorDrvHandle->WaitWhileActive(deviceId);
 80033f8:	4b07      	ldr	r3, [pc, #28]	; (8003418 <BSP_MotorControl_WaitWhileActive+0x3c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033fe:	79fa      	ldrb	r2, [r7, #7]
 8003400:	4610      	mov	r0, r2
 8003402:	4798      	blx	r3
 8003404:	e004      	b.n	8003410 <BSP_MotorControl_WaitWhileActive+0x34>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(30);
 8003406:	f640 001e 	movw	r0, #2078	; 0x81e
 800340a:	f7ff fddb 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }    
}
 800340e:	bf00      	nop
 8003410:	bf00      	nop
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000368 	.word	0x20000368

0800341c <BSP_MotorControl_CmdGetStatus>:
 * the flags of the status register are reset. 
 * This is not the case when the status register is read with the
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	71fb      	strb	r3, [r7, #7]
  uint16_t status = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	81fb      	strh	r3, [r7, #14]
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 800342a:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <BSP_MotorControl_CmdGetStatus+0x48>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00f      	beq.n	8003452 <BSP_MotorControl_CmdGetStatus+0x36>
 8003432:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <BSP_MotorControl_CmdGetStatus+0x36>
  {
    status = motorDrvHandle->CmdGetStatus(deviceId);
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <BSP_MotorControl_CmdGetStatus+0x48>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	79fa      	ldrb	r2, [r7, #7]
 8003448:	4610      	mov	r0, r2
 800344a:	4798      	blx	r3
 800344c:	4603      	mov	r3, r0
 800344e:	81fb      	strh	r3, [r7, #14]
 8003450:	e003      	b.n	800345a <BSP_MotorControl_CmdGetStatus+0x3e>
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8003452:	f640 0022 	movw	r0, #2082	; 0x822
 8003456:	f7ff fdb5 	bl	8002fc4 <BSP_MotorControl_ErrorHandler>
  }      
  return (status);
 800345a:	89fb      	ldrh	r3, [r7, #14]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000368 	.word	0x20000368

08003468 <BSP_MotorControl_SetNbDevices>:
 * from 1 to MAX_NUMBER_OF_DEVICES
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	460a      	mov	r2, r1
 8003472:	80fb      	strh	r3, [r7, #6]
 8003474:	4613      	mov	r3, r2
 8003476:	717b      	strb	r3, [r7, #5]
  MotorControlBoardId = id;
 8003478:	4a40      	ldr	r2, [pc, #256]	; (800357c <BSP_MotorControl_SetNbDevices+0x114>)
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	8013      	strh	r3, [r2, #0]
  bool status = FALSE;
 800347e:	2300      	movs	r3, #0
 8003480:	73fb      	strb	r3, [r7, #15]
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	f641 124a 	movw	r2, #6474	; 0x194a
 8003488:	4293      	cmp	r3, r2
 800348a:	d105      	bne.n	8003498 <BSP_MotorControl_SetNbDevices+0x30>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 800348c:	f7fd fc02 	bl	8000c94 <L6474_GetMotorHandle>
 8003490:	4603      	mov	r3, r0
 8003492:	4a3b      	ldr	r2, [pc, #236]	; (8003580 <BSP_MotorControl_SetNbDevices+0x118>)
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e055      	b.n	8003544 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d105      	bne.n	80034aa <BSP_MotorControl_SetNbDevices+0x42>
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 800349e:	f7ff fd2d 	bl	8002efc <Powerstep01_GetMotorHandle>
 80034a2:	4603      	mov	r3, r0
 80034a4:	4a36      	ldr	r2, [pc, #216]	; (8003580 <BSP_MotorControl_SetNbDevices+0x118>)
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	e04c      	b.n	8003544 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	f641 023e 	movw	r2, #6206	; 0x183e
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d105      	bne.n	80034c0 <BSP_MotorControl_SetNbDevices+0x58>
  {
    motorDrvHandle = L6206_GetMotorHandle();
 80034b4:	f7ff fd2a 	bl	8002f0c <L6206_GetMotorHandle>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4a31      	ldr	r2, [pc, #196]	; (8003580 <BSP_MotorControl_SetNbDevices+0x118>)
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e041      	b.n	8003544 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	f5b3 5fc2 	cmp.w	r3, #6208	; 0x1840
 80034c6:	d105      	bne.n	80034d4 <BSP_MotorControl_SetNbDevices+0x6c>
  {
    motorDrvHandle = L6208_GetMotorHandle();
 80034c8:	f7ff fd28 	bl	8002f1c <L6208_GetMotorHandle>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4a2c      	ldr	r2, [pc, #176]	; (8003580 <BSP_MotorControl_SetNbDevices+0x118>)
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e037      	b.n	8003544 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	2bdc      	cmp	r3, #220	; 0xdc
 80034d8:	d105      	bne.n	80034e6 <BSP_MotorControl_SetNbDevices+0x7e>
  {
    motorDrvHandle = Stspin220_GetMotorHandle();
 80034da:	f7ff fd27 	bl	8002f2c <Stspin220_GetMotorHandle>
 80034de:	4603      	mov	r3, r0
 80034e0:	4a27      	ldr	r2, [pc, #156]	; (8003580 <BSP_MotorControl_SetNbDevices+0x118>)
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	e02e      	b.n	8003544 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	f641 1246 	movw	r2, #6470	; 0x1946
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <BSP_MotorControl_SetNbDevices+0x92>
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	f641 1248 	movw	r2, #6472	; 0x1948
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d105      	bne.n	8003506 <BSP_MotorControl_SetNbDevices+0x9e>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6472) )
  {
    motorDrvHandle = l647x_GetMotorHandle();
 80034fa:	f7ff fcef 	bl	8002edc <l647x_GetMotorHandle>
 80034fe:	4603      	mov	r3, r0
 8003500:	4a1f      	ldr	r2, [pc, #124]	; (8003580 <BSP_MotorControl_SetNbDevices+0x118>)
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	e01e      	b.n	8003544 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	f641 1250 	movw	r2, #6480	; 0x1950
 800350c:	4293      	cmp	r3, r2
 800350e:	d004      	beq.n	800351a <BSP_MotorControl_SetNbDevices+0xb2>
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	f641 1252 	movw	r2, #6482	; 0x1952
 8003516:	4293      	cmp	r3, r2
 8003518:	d105      	bne.n	8003526 <BSP_MotorControl_SetNbDevices+0xbe>
		     (id == BSP_MOTOR_CONTROL_BOARD_ID_L6482) )
  {
    motorDrvHandle = l648x_GetMotorHandle();
 800351a:	f7ff fce7 	bl	8002eec <l648x_GetMotorHandle>
 800351e:	4603      	mov	r3, r0
 8003520:	4a17      	ldr	r2, [pc, #92]	; (8003580 <BSP_MotorControl_SetNbDevices+0x118>)
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	e00e      	b.n	8003544 <BSP_MotorControl_SetNbDevices+0xdc>
  }
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	2bf0      	cmp	r3, #240	; 0xf0
 800352a:	d002      	beq.n	8003532 <BSP_MotorControl_SetNbDevices+0xca>
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	2bfa      	cmp	r3, #250	; 0xfa
 8003530:	d105      	bne.n	800353e <BSP_MotorControl_SetNbDevices+0xd6>
            (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN250))
  {
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 8003532:	f7ff fd03 	bl	8002f3c <Stspin240_250_GetMotorHandle>
 8003536:	4603      	mov	r3, r0
 8003538:	4a11      	ldr	r2, [pc, #68]	; (8003580 <BSP_MotorControl_SetNbDevices+0x118>)
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	e002      	b.n	8003544 <BSP_MotorControl_SetNbDevices+0xdc>
  }  
  else
  {
    motorDrvHandle = 0;
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <BSP_MotorControl_SetNbDevices+0x118>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
  }
  if ((motorDrvHandle != 0)&&
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <BSP_MotorControl_SetNbDevices+0x118>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d011      	beq.n	8003570 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <BSP_MotorControl_SetNbDevices+0x118>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
  if ((motorDrvHandle != 0)&&
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00b      	beq.n	8003570 <BSP_MotorControl_SetNbDevices+0x108>
      (motorDrvHandle->SetNbDevices != 0)&&
 8003558:	797b      	ldrb	r3, [r7, #5]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <BSP_MotorControl_SetNbDevices+0x108>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 800355e:	4b08      	ldr	r3, [pc, #32]	; (8003580 <BSP_MotorControl_SetNbDevices+0x118>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8003566:	797a      	ldrb	r2, [r7, #5]
 8003568:	4610      	mov	r0, r2
 800356a:	4798      	blx	r3
 800356c:	4603      	mov	r3, r0
 800356e:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	2000036c 	.word	0x2000036c
 8003580:	20000368 	.word	0x20000368

08003584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003588:	4b16      	ldr	r3, [pc, #88]	; (80035e4 <SystemInit+0x60>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	4a15      	ldr	r2, [pc, #84]	; (80035e4 <SystemInit+0x60>)
 8003590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003598:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <SystemInit+0x64>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <SystemInit+0x64>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80035a4:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <SystemInit+0x64>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <SystemInit+0x64>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a0e      	ldr	r2, [pc, #56]	; (80035e8 <SystemInit+0x64>)
 80035b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80035b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <SystemInit+0x64>)
 80035bc:	4a0b      	ldr	r2, [pc, #44]	; (80035ec <SystemInit+0x68>)
 80035be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <SystemInit+0x64>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <SystemInit+0x64>)
 80035c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <SystemInit+0x64>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035d2:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <SystemInit+0x60>)
 80035d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035d8:	609a      	str	r2, [r3, #8]
#endif
}
 80035da:	bf00      	nop
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000ed00 	.word	0xe000ed00
 80035e8:	40023800 	.word	0x40023800
 80035ec:	24003010 	.word	0x24003010

080035f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035f4:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <HAL_Init+0x40>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a0d      	ldr	r2, [pc, #52]	; (8003630 <HAL_Init+0x40>)
 80035fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_Init+0x40>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <HAL_Init+0x40>)
 8003606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800360a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800360c:	4b08      	ldr	r3, [pc, #32]	; (8003630 <HAL_Init+0x40>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a07      	ldr	r2, [pc, #28]	; (8003630 <HAL_Init+0x40>)
 8003612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003618:	2003      	movs	r0, #3
 800361a:	f000 f953 	bl	80038c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800361e:	200f      	movs	r0, #15
 8003620:	f000 f810 	bl	8003644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003624:	f000 f806 	bl	8003634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023c00 	.word	0x40023c00

08003634 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800364c:	4b12      	ldr	r3, [pc, #72]	; (8003698 <HAL_InitTick+0x54>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4b12      	ldr	r3, [pc, #72]	; (800369c <HAL_InitTick+0x58>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	4619      	mov	r1, r3
 8003656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800365a:	fbb3 f3f1 	udiv	r3, r3, r1
 800365e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f963 	bl	800392e <HAL_SYSTICK_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e00e      	b.n	8003690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b0f      	cmp	r3, #15
 8003676:	d80a      	bhi.n	800368e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003678:	2200      	movs	r2, #0
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	f04f 30ff 	mov.w	r0, #4294967295
 8003680:	f000 f92b 	bl	80038da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003684:	4a06      	ldr	r2, [pc, #24]	; (80036a0 <HAL_InitTick+0x5c>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20000164 	.word	0x20000164
 800369c:	2000016c 	.word	0x2000016c
 80036a0:	20000168 	.word	0x20000168

080036a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_IncTick+0x20>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_IncTick+0x24>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4413      	add	r3, r2
 80036b4:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <HAL_IncTick+0x24>)
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	2000016c 	.word	0x2000016c
 80036c8:	20000370 	.word	0x20000370

080036cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return uwTick;
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <HAL_GetTick+0x14>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000370 	.word	0x20000370

080036e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7ff ffee 	bl	80036cc <HAL_GetTick>
 80036f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d005      	beq.n	800370a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_Delay+0x44>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4413      	add	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800370a:	bf00      	nop
 800370c:	f7ff ffde 	bl	80036cc <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	429a      	cmp	r2, r3
 800371a:	d8f7      	bhi.n	800370c <HAL_Delay+0x28>
  {
  }
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	2000016c 	.word	0x2000016c

0800372c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <NVIC_SetPriorityGrouping+0x44>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003748:	4013      	ands	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800375e:	4a04      	ldr	r2, [pc, #16]	; (8003770 <NVIC_SetPriorityGrouping+0x44>)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	60d3      	str	r3, [r2, #12]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <NVIC_GetPriorityGrouping+0x18>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	0a1b      	lsrs	r3, r3, #8
 800377e:	f003 0307 	and.w	r3, r3, #7
}
 8003782:	4618      	mov	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	f003 021f 	and.w	r2, r3, #31
 80037a0:	4907      	ldr	r1, [pc, #28]	; (80037c0 <NVIC_EnableIRQ+0x30>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	2001      	movs	r0, #1
 80037aa:	fa00 f202 	lsl.w	r2, r0, r2
 80037ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	e000e100 	.word	0xe000e100

080037c4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	6039      	str	r1, [r7, #0]
 80037ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80037d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	da0b      	bge.n	80037f0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	490c      	ldr	r1, [pc, #48]	; (8003810 <NVIC_SetPriority+0x4c>)
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	3b04      	subs	r3, #4
 80037e6:	0112      	lsls	r2, r2, #4
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	440b      	add	r3, r1
 80037ec:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037ee:	e009      	b.n	8003804 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	4907      	ldr	r1, [pc, #28]	; (8003814 <NVIC_SetPriority+0x50>)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	0112      	lsls	r2, r2, #4
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	440b      	add	r3, r1
 8003800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000ed00 	.word	0xe000ed00
 8003814:	e000e100 	.word	0xe000e100

08003818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003818:	b480      	push	{r7}
 800381a:	b089      	sub	sp, #36	; 0x24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f1c3 0307 	rsb	r3, r3, #7
 8003832:	2b04      	cmp	r3, #4
 8003834:	bf28      	it	cs
 8003836:	2304      	movcs	r3, #4
 8003838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3304      	adds	r3, #4
 800383e:	2b06      	cmp	r3, #6
 8003840:	d902      	bls.n	8003848 <NVIC_EncodePriority+0x30>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3b03      	subs	r3, #3
 8003846:	e000      	b.n	800384a <NVIC_EncodePriority+0x32>
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800384c:	f04f 32ff 	mov.w	r2, #4294967295
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43da      	mvns	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	401a      	ands	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003860:	f04f 31ff 	mov.w	r1, #4294967295
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	43d9      	mvns	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	4313      	orrs	r3, r2
         );
}
 8003872:	4618      	mov	r0, r3
 8003874:	3724      	adds	r7, #36	; 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3b01      	subs	r3, #1
 800388c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003890:	d301      	bcc.n	8003896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003892:	2301      	movs	r3, #1
 8003894:	e00f      	b.n	80038b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003896:	4a0a      	ldr	r2, [pc, #40]	; (80038c0 <SysTick_Config+0x40>)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800389e:	210f      	movs	r1, #15
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	f7ff ff8e 	bl	80037c4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <SysTick_Config+0x40>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ae:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <SysTick_Config+0x40>)
 80038b0:	2207      	movs	r2, #7
 80038b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	e000e010 	.word	0xe000e010

080038c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ff2d 	bl	800372c <NVIC_SetPriorityGrouping>
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	4603      	mov	r3, r0
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038ec:	f7ff ff42 	bl	8003774 <NVIC_GetPriorityGrouping>
 80038f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	6978      	ldr	r0, [r7, #20]
 80038f8:	f7ff ff8e 	bl	8003818 <NVIC_EncodePriority>
 80038fc:	4602      	mov	r2, r0
 80038fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff5d 	bl	80037c4 <NVIC_SetPriority>
}
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800391c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff35 	bl	8003790 <NVIC_EnableIRQ>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff ffa2 	bl	8003880 <SysTick_Config>
 800393c:	4603      	mov	r3, r0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003954:	f7ff feba 	bl	80036cc <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e099      	b.n	8003a98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003984:	e00f      	b.n	80039a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003986:	f7ff fea1 	bl	80036cc <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b05      	cmp	r3, #5
 8003992:	d908      	bls.n	80039a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2203      	movs	r2, #3
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e078      	b.n	8003a98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e8      	bne.n	8003986 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4b38      	ldr	r3, [pc, #224]	; (8003aa0 <HAL_DMA_Init+0x158>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d107      	bne.n	8003a10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f023 0307 	bic.w	r3, r3, #7
 8003a26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d117      	bne.n	8003a6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00e      	beq.n	8003a6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fa77 	bl	8003f40 <DMA_CheckFifoParam>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2240      	movs	r2, #64	; 0x40
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a66:	2301      	movs	r3, #1
 8003a68:	e016      	b.n	8003a98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fa2e 	bl	8003ed4 <DMA_CalcBaseAndBitshift>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a80:	223f      	movs	r2, #63	; 0x3f
 8003a82:	409a      	lsls	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	f010803f 	.word	0xf010803f

08003aa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_DMA_Start_IT+0x26>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e048      	b.n	8003b5c <HAL_DMA_Start_IT+0xb8>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d137      	bne.n	8003b4e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f9c0 	bl	8003e78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	223f      	movs	r2, #63	; 0x3f
 8003afe:	409a      	lsls	r2, r3
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0216 	orr.w	r2, r2, #22
 8003b12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b22:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0208 	orr.w	r2, r2, #8
 8003b3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	e005      	b.n	8003b5a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
 8003b58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b70:	4b8e      	ldr	r3, [pc, #568]	; (8003dac <HAL_DMA_IRQHandler+0x248>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a8e      	ldr	r2, [pc, #568]	; (8003db0 <HAL_DMA_IRQHandler+0x24c>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	0a9b      	lsrs	r3, r3, #10
 8003b7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8e:	2208      	movs	r2, #8
 8003b90:	409a      	lsls	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01a      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d013      	beq.n	8003bd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0204 	bic.w	r2, r2, #4
 8003bb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	f043 0201 	orr.w	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d012      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00b      	beq.n	8003c06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	409a      	lsls	r2, r3
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	f043 0202 	orr.w	r2, r3, #2
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d012      	beq.n	8003c3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c28:	2204      	movs	r2, #4
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	f043 0204 	orr.w	r2, r3, #4
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c40:	2210      	movs	r2, #16
 8003c42:	409a      	lsls	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d043      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d03c      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5e:	2210      	movs	r2, #16
 8003c60:	409a      	lsls	r2, r3
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d018      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d108      	bne.n	8003c94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d024      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
 8003c92:	e01f      	b.n	8003cd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01b      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	4798      	blx	r3
 8003ca4:	e016      	b.n	8003cd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d107      	bne.n	8003cc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0208 	bic.w	r2, r2, #8
 8003cc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd8:	2220      	movs	r2, #32
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 808f 	beq.w	8003e04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8087 	beq.w	8003e04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	d136      	bne.n	8003d7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0216 	bic.w	r2, r2, #22
 8003d1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <HAL_DMA_IRQHandler+0x1da>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0208 	bic.w	r2, r2, #8
 8003d4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d52:	223f      	movs	r2, #63	; 0x3f
 8003d54:	409a      	lsls	r2, r3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d07e      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	4798      	blx	r3
        }
        return;
 8003d7a:	e079      	b.n	8003e70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d01d      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10d      	bne.n	8003db4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d031      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
 8003da8:	e02c      	b.n	8003e04 <HAL_DMA_IRQHandler+0x2a0>
 8003daa:	bf00      	nop
 8003dac:	20000164 	.word	0x20000164
 8003db0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d023      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	4798      	blx	r3
 8003dc4:	e01e      	b.n	8003e04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10f      	bne.n	8003df4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0210 	bic.w	r2, r2, #16
 8003de2:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d032      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d022      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2205      	movs	r2, #5
 8003e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	3301      	adds	r3, #1
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d307      	bcc.n	8003e4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f2      	bne.n	8003e30 <HAL_DMA_IRQHandler+0x2cc>
 8003e4a:	e000      	b.n	8003e4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e4c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d005      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
 8003e6e:	e000      	b.n	8003e72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e70:	bf00      	nop
    }
  }
}
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d108      	bne.n	8003eb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003eb6:	e007      	b.n	8003ec8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	60da      	str	r2, [r3, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	3b10      	subs	r3, #16
 8003ee4:	4a14      	ldr	r2, [pc, #80]	; (8003f38 <DMA_CalcBaseAndBitshift+0x64>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eee:	4a13      	ldr	r2, [pc, #76]	; (8003f3c <DMA_CalcBaseAndBitshift+0x68>)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d909      	bls.n	8003f16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f0a:	f023 0303 	bic.w	r3, r3, #3
 8003f0e:	1d1a      	adds	r2, r3, #4
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	659a      	str	r2, [r3, #88]	; 0x58
 8003f14:	e007      	b.n	8003f26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f1e:	f023 0303 	bic.w	r3, r3, #3
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	aaaaaaab 	.word	0xaaaaaaab
 8003f3c:	08007ce0 	.word	0x08007ce0

08003f40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d11f      	bne.n	8003f9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d856      	bhi.n	800400e <DMA_CheckFifoParam+0xce>
 8003f60:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <DMA_CheckFifoParam+0x28>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003f79 	.word	0x08003f79
 8003f6c:	08003f8b 	.word	0x08003f8b
 8003f70:	08003f79 	.word	0x08003f79
 8003f74:	0800400f 	.word	0x0800400f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d046      	beq.n	8004012 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f88:	e043      	b.n	8004012 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f92:	d140      	bne.n	8004016 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f98:	e03d      	b.n	8004016 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa2:	d121      	bne.n	8003fe8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d837      	bhi.n	800401a <DMA_CheckFifoParam+0xda>
 8003faa:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <DMA_CheckFifoParam+0x70>)
 8003fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb0:	08003fc1 	.word	0x08003fc1
 8003fb4:	08003fc7 	.word	0x08003fc7
 8003fb8:	08003fc1 	.word	0x08003fc1
 8003fbc:	08003fd9 	.word	0x08003fd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc4:	e030      	b.n	8004028 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d025      	beq.n	800401e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd6:	e022      	b.n	800401e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fe0:	d11f      	bne.n	8004022 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fe6:	e01c      	b.n	8004022 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d903      	bls.n	8003ff6 <DMA_CheckFifoParam+0xb6>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d003      	beq.n	8003ffc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ff4:	e018      	b.n	8004028 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8003ffa:	e015      	b.n	8004028 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00e      	beq.n	8004026 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
      break;
 800400c:	e00b      	b.n	8004026 <DMA_CheckFifoParam+0xe6>
      break;
 800400e:	bf00      	nop
 8004010:	e00a      	b.n	8004028 <DMA_CheckFifoParam+0xe8>
      break;
 8004012:	bf00      	nop
 8004014:	e008      	b.n	8004028 <DMA_CheckFifoParam+0xe8>
      break;
 8004016:	bf00      	nop
 8004018:	e006      	b.n	8004028 <DMA_CheckFifoParam+0xe8>
      break;
 800401a:	bf00      	nop
 800401c:	e004      	b.n	8004028 <DMA_CheckFifoParam+0xe8>
      break;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <DMA_CheckFifoParam+0xe8>
      break;   
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <DMA_CheckFifoParam+0xe8>
      break;
 8004026:	bf00      	nop
    }
  } 
  
  return status; 
 8004028:	7bfb      	ldrb	r3, [r7, #15]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop

08004038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	; 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004042:	2300      	movs	r3, #0
 8004044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800404a:	2300      	movs	r3, #0
 800404c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e159      	b.n	8004308 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004054:	2201      	movs	r2, #1
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4013      	ands	r3, r2
 8004066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	429a      	cmp	r2, r3
 800406e:	f040 8148 	bne.w	8004302 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x4a>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b12      	cmp	r3, #18
 8004080:	d123      	bne.n	80040ca <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	08da      	lsrs	r2, r3, #3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3208      	adds	r2, #8
 800408a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	220f      	movs	r2, #15
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	08da      	lsrs	r2, r3, #3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3208      	adds	r2, #8
 80040c4:	69b9      	ldr	r1, [r7, #24]
 80040c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	2203      	movs	r2, #3
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43db      	mvns	r3, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4013      	ands	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 0203 	and.w	r2, r3, #3
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d00b      	beq.n	800411e <HAL_GPIO_Init+0xe6>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d007      	beq.n	800411e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004112:	2b11      	cmp	r3, #17
 8004114:	d003      	beq.n	800411e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b12      	cmp	r3, #18
 800411c:	d130      	bne.n	8004180 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	2203      	movs	r2, #3
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4013      	ands	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004154:	2201      	movs	r2, #1
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	091b      	lsrs	r3, r3, #4
 800416a:	f003 0201 	and.w	r2, r3, #1
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	2203      	movs	r2, #3
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80a2 	beq.w	8004302 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	4b57      	ldr	r3, [pc, #348]	; (8004320 <HAL_GPIO_Init+0x2e8>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	4a56      	ldr	r2, [pc, #344]	; (8004320 <HAL_GPIO_Init+0x2e8>)
 80041c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041cc:	6453      	str	r3, [r2, #68]	; 0x44
 80041ce:	4b54      	ldr	r3, [pc, #336]	; (8004320 <HAL_GPIO_Init+0x2e8>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041da:	4a52      	ldr	r2, [pc, #328]	; (8004324 <HAL_GPIO_Init+0x2ec>)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	089b      	lsrs	r3, r3, #2
 80041e0:	3302      	adds	r3, #2
 80041e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	220f      	movs	r2, #15
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a49      	ldr	r2, [pc, #292]	; (8004328 <HAL_GPIO_Init+0x2f0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d019      	beq.n	800423a <HAL_GPIO_Init+0x202>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a48      	ldr	r2, [pc, #288]	; (800432c <HAL_GPIO_Init+0x2f4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <HAL_GPIO_Init+0x1fe>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a47      	ldr	r2, [pc, #284]	; (8004330 <HAL_GPIO_Init+0x2f8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00d      	beq.n	8004232 <HAL_GPIO_Init+0x1fa>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a46      	ldr	r2, [pc, #280]	; (8004334 <HAL_GPIO_Init+0x2fc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d007      	beq.n	800422e <HAL_GPIO_Init+0x1f6>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a45      	ldr	r2, [pc, #276]	; (8004338 <HAL_GPIO_Init+0x300>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d101      	bne.n	800422a <HAL_GPIO_Init+0x1f2>
 8004226:	2304      	movs	r3, #4
 8004228:	e008      	b.n	800423c <HAL_GPIO_Init+0x204>
 800422a:	2307      	movs	r3, #7
 800422c:	e006      	b.n	800423c <HAL_GPIO_Init+0x204>
 800422e:	2303      	movs	r3, #3
 8004230:	e004      	b.n	800423c <HAL_GPIO_Init+0x204>
 8004232:	2302      	movs	r3, #2
 8004234:	e002      	b.n	800423c <HAL_GPIO_Init+0x204>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <HAL_GPIO_Init+0x204>
 800423a:	2300      	movs	r3, #0
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	f002 0203 	and.w	r2, r2, #3
 8004242:	0092      	lsls	r2, r2, #2
 8004244:	4093      	lsls	r3, r2
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	4313      	orrs	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800424c:	4935      	ldr	r1, [pc, #212]	; (8004324 <HAL_GPIO_Init+0x2ec>)
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	089b      	lsrs	r3, r3, #2
 8004252:	3302      	adds	r3, #2
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800425a:	4b38      	ldr	r3, [pc, #224]	; (800433c <HAL_GPIO_Init+0x304>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	43db      	mvns	r3, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4013      	ands	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800427e:	4a2f      	ldr	r2, [pc, #188]	; (800433c <HAL_GPIO_Init+0x304>)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004284:	4b2d      	ldr	r3, [pc, #180]	; (800433c <HAL_GPIO_Init+0x304>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	43db      	mvns	r3, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4013      	ands	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042a8:	4a24      	ldr	r2, [pc, #144]	; (800433c <HAL_GPIO_Init+0x304>)
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042ae:	4b23      	ldr	r3, [pc, #140]	; (800433c <HAL_GPIO_Init+0x304>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	43db      	mvns	r3, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4013      	ands	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042d2:	4a1a      	ldr	r2, [pc, #104]	; (800433c <HAL_GPIO_Init+0x304>)
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042d8:	4b18      	ldr	r3, [pc, #96]	; (800433c <HAL_GPIO_Init+0x304>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4013      	ands	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042fc:	4a0f      	ldr	r2, [pc, #60]	; (800433c <HAL_GPIO_Init+0x304>)
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3301      	adds	r3, #1
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	2b0f      	cmp	r3, #15
 800430c:	f67f aea2 	bls.w	8004054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	3724      	adds	r7, #36	; 0x24
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40023800 	.word	0x40023800
 8004324:	40013800 	.word	0x40013800
 8004328:	40020000 	.word	0x40020000
 800432c:	40020400 	.word	0x40020400
 8004330:	40020800 	.word	0x40020800
 8004334:	40020c00 	.word	0x40020c00
 8004338:	40021000 	.word	0x40021000
 800433c:	40013c00 	.word	0x40013c00

08004340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	807b      	strh	r3, [r7, #2]
 800434c:	4613      	mov	r3, r2
 800434e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004350:	787b      	ldrb	r3, [r7, #1]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004356:	887a      	ldrh	r2, [r7, #2]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800435c:	e003      	b.n	8004366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800435e:	887b      	ldrh	r3, [r7, #2]
 8004360:	041a      	lsls	r2, r3, #16
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	619a      	str	r2, [r3, #24]
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	887b      	ldrh	r3, [r7, #2]
 8004384:	405a      	eors	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	615a      	str	r2, [r3, #20]
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	88fb      	ldrh	r3, [r7, #6]
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d006      	beq.n	80043bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043ae:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f003 fb58 	bl	8007a6c <HAL_GPIO_EXTI_Callback>
  }
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40013c00 	.word	0x40013c00

080043c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e22a      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d075      	beq.n	80044d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043e6:	4b88      	ldr	r3, [pc, #544]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d00c      	beq.n	800440c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043f2:	4b85      	ldr	r3, [pc, #532]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d112      	bne.n	8004424 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043fe:	4b82      	ldr	r3, [pc, #520]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800440a:	d10b      	bne.n	8004424 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800440c:	4b7e      	ldr	r3, [pc, #504]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d05b      	beq.n	80044d0 <HAL_RCC_OscConfig+0x108>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d157      	bne.n	80044d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e205      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800442c:	d106      	bne.n	800443c <HAL_RCC_OscConfig+0x74>
 800442e:	4b76      	ldr	r3, [pc, #472]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a75      	ldr	r2, [pc, #468]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e01d      	b.n	8004478 <HAL_RCC_OscConfig+0xb0>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004444:	d10c      	bne.n	8004460 <HAL_RCC_OscConfig+0x98>
 8004446:	4b70      	ldr	r3, [pc, #448]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a6f      	ldr	r2, [pc, #444]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 800444c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	4b6d      	ldr	r3, [pc, #436]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a6c      	ldr	r2, [pc, #432]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 8004458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e00b      	b.n	8004478 <HAL_RCC_OscConfig+0xb0>
 8004460:	4b69      	ldr	r3, [pc, #420]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a68      	ldr	r2, [pc, #416]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 8004466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	4b66      	ldr	r3, [pc, #408]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a65      	ldr	r2, [pc, #404]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 8004472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d013      	beq.n	80044a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7ff f924 	bl	80036cc <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004488:	f7ff f920 	bl	80036cc <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	; 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e1ca      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449a:	4b5b      	ldr	r3, [pc, #364]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0xc0>
 80044a6:	e014      	b.n	80044d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7ff f910 	bl	80036cc <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b0:	f7ff f90c 	bl	80036cc <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	; 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e1b6      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c2:	4b51      	ldr	r3, [pc, #324]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0xe8>
 80044ce:	e000      	b.n	80044d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d063      	beq.n	80045a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044de:	4b4a      	ldr	r3, [pc, #296]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ea:	4b47      	ldr	r3, [pc, #284]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d11c      	bne.n	8004530 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044f6:	4b44      	ldr	r3, [pc, #272]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d116      	bne.n	8004530 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004502:	4b41      	ldr	r3, [pc, #260]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <HAL_RCC_OscConfig+0x152>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d001      	beq.n	800451a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e18a      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451a:	4b3b      	ldr	r3, [pc, #236]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	4937      	ldr	r1, [pc, #220]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 800452a:	4313      	orrs	r3, r2
 800452c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452e:	e03a      	b.n	80045a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d020      	beq.n	800457a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004538:	4b34      	ldr	r3, [pc, #208]	; (800460c <HAL_RCC_OscConfig+0x244>)
 800453a:	2201      	movs	r2, #1
 800453c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453e:	f7ff f8c5 	bl	80036cc <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004546:	f7ff f8c1 	bl	80036cc <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e16b      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004558:	4b2b      	ldr	r3, [pc, #172]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004564:	4b28      	ldr	r3, [pc, #160]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	4925      	ldr	r1, [pc, #148]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 8004574:	4313      	orrs	r3, r2
 8004576:	600b      	str	r3, [r1, #0]
 8004578:	e015      	b.n	80045a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800457a:	4b24      	ldr	r3, [pc, #144]	; (800460c <HAL_RCC_OscConfig+0x244>)
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004580:	f7ff f8a4 	bl	80036cc <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004588:	f7ff f8a0 	bl	80036cc <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e14a      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459a:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f0      	bne.n	8004588 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d036      	beq.n	8004620 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d016      	beq.n	80045e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ba:	4b15      	ldr	r3, [pc, #84]	; (8004610 <HAL_RCC_OscConfig+0x248>)
 80045bc:	2201      	movs	r2, #1
 80045be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c0:	f7ff f884 	bl	80036cc <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c8:	f7ff f880 	bl	80036cc <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e12a      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCC_OscConfig+0x240>)
 80045dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0x200>
 80045e6:	e01b      	b.n	8004620 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <HAL_RCC_OscConfig+0x248>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ee:	f7ff f86d 	bl	80036cc <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f4:	e00e      	b.n	8004614 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f6:	f7ff f869 	bl	80036cc <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d907      	bls.n	8004614 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e113      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
 8004608:	40023800 	.word	0x40023800
 800460c:	42470000 	.word	0x42470000
 8004610:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004614:	4b88      	ldr	r3, [pc, #544]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 8004616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1ea      	bne.n	80045f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8097 	beq.w	800475c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800462e:	2300      	movs	r3, #0
 8004630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004632:	4b81      	ldr	r3, [pc, #516]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10f      	bne.n	800465e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	4b7d      	ldr	r3, [pc, #500]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	4a7c      	ldr	r2, [pc, #496]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 8004648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464c:	6413      	str	r3, [r2, #64]	; 0x40
 800464e:	4b7a      	ldr	r3, [pc, #488]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800465a:	2301      	movs	r3, #1
 800465c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465e:	4b77      	ldr	r3, [pc, #476]	; (800483c <HAL_RCC_OscConfig+0x474>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d118      	bne.n	800469c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800466a:	4b74      	ldr	r3, [pc, #464]	; (800483c <HAL_RCC_OscConfig+0x474>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a73      	ldr	r2, [pc, #460]	; (800483c <HAL_RCC_OscConfig+0x474>)
 8004670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004676:	f7ff f829 	bl	80036cc <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467e:	f7ff f825 	bl	80036cc <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e0cf      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004690:	4b6a      	ldr	r3, [pc, #424]	; (800483c <HAL_RCC_OscConfig+0x474>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d106      	bne.n	80046b2 <HAL_RCC_OscConfig+0x2ea>
 80046a4:	4b64      	ldr	r3, [pc, #400]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	4a63      	ldr	r2, [pc, #396]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	6713      	str	r3, [r2, #112]	; 0x70
 80046b0:	e01c      	b.n	80046ec <HAL_RCC_OscConfig+0x324>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b05      	cmp	r3, #5
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCC_OscConfig+0x30c>
 80046ba:	4b5f      	ldr	r3, [pc, #380]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	4a5e      	ldr	r2, [pc, #376]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 80046c0:	f043 0304 	orr.w	r3, r3, #4
 80046c4:	6713      	str	r3, [r2, #112]	; 0x70
 80046c6:	4b5c      	ldr	r3, [pc, #368]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	4a5b      	ldr	r2, [pc, #364]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	6713      	str	r3, [r2, #112]	; 0x70
 80046d2:	e00b      	b.n	80046ec <HAL_RCC_OscConfig+0x324>
 80046d4:	4b58      	ldr	r3, [pc, #352]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	4a57      	ldr	r2, [pc, #348]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	6713      	str	r3, [r2, #112]	; 0x70
 80046e0:	4b55      	ldr	r3, [pc, #340]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 80046e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e4:	4a54      	ldr	r2, [pc, #336]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 80046e6:	f023 0304 	bic.w	r3, r3, #4
 80046ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d015      	beq.n	8004720 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f4:	f7fe ffea 	bl	80036cc <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fa:	e00a      	b.n	8004712 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046fc:	f7fe ffe6 	bl	80036cc <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	; 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e08e      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004712:	4b49      	ldr	r3, [pc, #292]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0ee      	beq.n	80046fc <HAL_RCC_OscConfig+0x334>
 800471e:	e014      	b.n	800474a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004720:	f7fe ffd4 	bl	80036cc <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004726:	e00a      	b.n	800473e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004728:	f7fe ffd0 	bl	80036cc <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f241 3288 	movw	r2, #5000	; 0x1388
 8004736:	4293      	cmp	r3, r2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e078      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800473e:	4b3e      	ldr	r3, [pc, #248]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1ee      	bne.n	8004728 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800474a:	7dfb      	ldrb	r3, [r7, #23]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d105      	bne.n	800475c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004750:	4b39      	ldr	r3, [pc, #228]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	4a38      	ldr	r2, [pc, #224]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 8004756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d064      	beq.n	800482e <HAL_RCC_OscConfig+0x466>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004764:	4b34      	ldr	r3, [pc, #208]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 030c 	and.w	r3, r3, #12
 800476c:	2b08      	cmp	r3, #8
 800476e:	d05c      	beq.n	800482a <HAL_RCC_OscConfig+0x462>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d141      	bne.n	80047fc <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004778:	4b31      	ldr	r3, [pc, #196]	; (8004840 <HAL_RCC_OscConfig+0x478>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fe ffa5 	bl	80036cc <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x3d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004786:	f7fe ffa1 	bl	80036cc <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x3d0>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e04b      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004798:	4b27      	ldr	r3, [pc, #156]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f0      	bne.n	8004786 <HAL_RCC_OscConfig+0x3be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	019b      	lsls	r3, r3, #6
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	085b      	lsrs	r3, r3, #1
 80047bc:	3b01      	subs	r3, #1
 80047be:	041b      	lsls	r3, r3, #16
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	061b      	lsls	r3, r3, #24
 80047c8:	491b      	ldr	r1, [pc, #108]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047ce:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <HAL_RCC_OscConfig+0x478>)
 80047d0:	2201      	movs	r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fe ff7a 	bl	80036cc <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fe ff76 	bl	80036cc <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e020      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0x414>
 80047fa:	e018      	b.n	800482e <HAL_RCC_OscConfig+0x466>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fc:	4b10      	ldr	r3, [pc, #64]	; (8004840 <HAL_RCC_OscConfig+0x478>)
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004802:	f7fe ff63 	bl	80036cc <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480a:	f7fe ff5f 	bl	80036cc <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e009      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_RCC_OscConfig+0x470>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f0      	bne.n	800480a <HAL_RCC_OscConfig+0x442>
 8004828:	e001      	b.n	800482e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_RCC_OscConfig+0x468>
    }
  }
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40023800 	.word	0x40023800
 800483c:	40007000 	.word	0x40007000
 8004840:	42470060 	.word	0x42470060

08004844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0ca      	b.n	80049ee <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004858:	4b67      	ldr	r3, [pc, #412]	; (80049f8 <HAL_RCC_ClockConfig+0x1b4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d90c      	bls.n	8004880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b64      	ldr	r3, [pc, #400]	; (80049f8 <HAL_RCC_ClockConfig+0x1b4>)
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b62      	ldr	r3, [pc, #392]	; (80049f8 <HAL_RCC_ClockConfig+0x1b4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e0b6      	b.n	80049ee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004898:	4b58      	ldr	r3, [pc, #352]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a57      	ldr	r2, [pc, #348]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 800489e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b0:	4b52      	ldr	r3, [pc, #328]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4a51      	ldr	r2, [pc, #324]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 80048b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048bc:	4b4f      	ldr	r3, [pc, #316]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	494c      	ldr	r1, [pc, #304]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d044      	beq.n	8004964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e2:	4b46      	ldr	r3, [pc, #280]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d119      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e07d      	b.n	80049ee <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d003      	beq.n	8004902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d107      	bne.n	8004912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004902:	4b3e      	ldr	r3, [pc, #248]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e06d      	b.n	80049ee <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004912:	4b3a      	ldr	r3, [pc, #232]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e065      	b.n	80049ee <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004922:	4b36      	ldr	r3, [pc, #216]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f023 0203 	bic.w	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4933      	ldr	r1, [pc, #204]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004930:	4313      	orrs	r3, r2
 8004932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004934:	f7fe feca 	bl	80036cc <HAL_GetTick>
 8004938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493a:	e00a      	b.n	8004952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800493c:	f7fe fec6 	bl	80036cc <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	f241 3288 	movw	r2, #5000	; 0x1388
 800494a:	4293      	cmp	r3, r2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e04d      	b.n	80049ee <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	4b2a      	ldr	r3, [pc, #168]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 020c 	and.w	r2, r3, #12
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	429a      	cmp	r2, r3
 8004962:	d1eb      	bne.n	800493c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004964:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <HAL_RCC_ClockConfig+0x1b4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d20c      	bcs.n	800498c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b21      	ldr	r3, [pc, #132]	; (80049f8 <HAL_RCC_ClockConfig+0x1b4>)
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b1f      	ldr	r3, [pc, #124]	; (80049f8 <HAL_RCC_ClockConfig+0x1b4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e030      	b.n	80049ee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004998:	4b18      	ldr	r3, [pc, #96]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4915      	ldr	r1, [pc, #84]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	490d      	ldr	r1, [pc, #52]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049ca:	f000 f81d 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 80049ce:	4602      	mov	r2, r0
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <HAL_RCC_ClockConfig+0x1b8>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	4909      	ldr	r1, [pc, #36]	; (8004a00 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	5ccb      	ldrb	r3, [r1, r3]
 80049de:	fa22 f303 	lsr.w	r3, r2, r3
 80049e2:	4a08      	ldr	r2, [pc, #32]	; (8004a04 <HAL_RCC_ClockConfig+0x1c0>)
 80049e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80049e6:	200f      	movs	r0, #15
 80049e8:	f7fe fe2c 	bl	8003644 <HAL_InitTick>

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023c00 	.word	0x40023c00
 80049fc:	40023800 	.word	0x40023800
 8004a00:	08007cc8 	.word	0x08007cc8
 8004a04:	20000164 	.word	0x20000164

08004a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a0c:	b090      	sub	sp, #64	; 0x40
 8004a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	637b      	str	r3, [r7, #52]	; 0x34
 8004a14:	2300      	movs	r3, #0
 8004a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a18:	2300      	movs	r3, #0
 8004a1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a20:	4b59      	ldr	r3, [pc, #356]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d00d      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0x40>
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	f200 80a1 	bhi.w	8004b74 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_RCC_GetSysClockFreq+0x34>
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d003      	beq.n	8004a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a3a:	e09b      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a3c:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x184>)
 8004a3e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a40:	e09b      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a42:	4b53      	ldr	r3, [pc, #332]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a46:	e098      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a48:	4b4f      	ldr	r3, [pc, #316]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a50:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a52:	4b4d      	ldr	r3, [pc, #308]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d028      	beq.n	8004ab0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a5e:	4b4a      	ldr	r3, [pc, #296]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	099b      	lsrs	r3, r3, #6
 8004a64:	2200      	movs	r2, #0
 8004a66:	623b      	str	r3, [r7, #32]
 8004a68:	627a      	str	r2, [r7, #36]	; 0x24
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a70:	2100      	movs	r1, #0
 8004a72:	4b47      	ldr	r3, [pc, #284]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a74:	fb03 f201 	mul.w	r2, r3, r1
 8004a78:	2300      	movs	r3, #0
 8004a7a:	fb00 f303 	mul.w	r3, r0, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	4a43      	ldr	r2, [pc, #268]	; (8004b90 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a82:	fba0 1202 	umull	r1, r2, r0, r2
 8004a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a88:	460a      	mov	r2, r1
 8004a8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a8e:	4413      	add	r3, r2
 8004a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a94:	2200      	movs	r2, #0
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	61fa      	str	r2, [r7, #28]
 8004a9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004aa2:	f7fb fb97 	bl	80001d4 <__aeabi_uldivmod>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4613      	mov	r3, r2
 8004aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aae:	e053      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ab0:	4b35      	ldr	r3, [pc, #212]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	099b      	lsrs	r3, r3, #6
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	617a      	str	r2, [r7, #20]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ac2:	f04f 0b00 	mov.w	fp, #0
 8004ac6:	4652      	mov	r2, sl
 8004ac8:	465b      	mov	r3, fp
 8004aca:	f04f 0000 	mov.w	r0, #0
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	0159      	lsls	r1, r3, #5
 8004ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad8:	0150      	lsls	r0, r2, #5
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	ebb2 080a 	subs.w	r8, r2, sl
 8004ae2:	eb63 090b 	sbc.w	r9, r3, fp
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004af2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004af6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004afa:	ebb2 0408 	subs.w	r4, r2, r8
 8004afe:	eb63 0509 	sbc.w	r5, r3, r9
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	00eb      	lsls	r3, r5, #3
 8004b0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b10:	00e2      	lsls	r2, r4, #3
 8004b12:	4614      	mov	r4, r2
 8004b14:	461d      	mov	r5, r3
 8004b16:	eb14 030a 	adds.w	r3, r4, sl
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	eb45 030b 	adc.w	r3, r5, fp
 8004b20:	607b      	str	r3, [r7, #4]
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b2e:	4629      	mov	r1, r5
 8004b30:	028b      	lsls	r3, r1, #10
 8004b32:	4621      	mov	r1, r4
 8004b34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b38:	4621      	mov	r1, r4
 8004b3a:	028a      	lsls	r2, r1, #10
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b42:	2200      	movs	r2, #0
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	60fa      	str	r2, [r7, #12]
 8004b48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b4c:	f7fb fb42 	bl	80001d4 <__aeabi_uldivmod>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4613      	mov	r3, r2
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b58:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	0c1b      	lsrs	r3, r3, #16
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	3301      	adds	r3, #1
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b72:	e002      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <HAL_RCC_GetSysClockFreq+0x184>)
 8004b76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3740      	adds	r7, #64	; 0x40
 8004b80:	46bd      	mov	sp, r7
 8004b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b86:	bf00      	nop
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	00f42400 	.word	0x00f42400
 8004b90:	017d7840 	.word	0x017d7840

08004b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b98:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000164 	.word	0x20000164

08004bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bb0:	f7ff fff0 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	0a9b      	lsrs	r3, r3, #10
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4903      	ldr	r1, [pc, #12]	; (8004bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	08007cd8 	.word	0x08007cd8

08004bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bd8:	f7ff ffdc 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	0b5b      	lsrs	r3, r3, #13
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	4903      	ldr	r1, [pc, #12]	; (8004bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bea:	5ccb      	ldrb	r3, [r1, r3]
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	08007cd8 	.word	0x08007cd8

08004bfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e05d      	b.n	8004cca <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f002 fde4 	bl	80077f0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	ea42 0103 	orr.w	r1, r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	f003 0104 	and.w	r1, r3, #4
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9e:	d104      	bne.n	8004caa <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ca8:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb8:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b08e      	sub	sp, #56	; 0x38
 8004cd6:	af02      	add	r7, sp, #8
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	623b      	str	r3, [r7, #32]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	837b      	strh	r3, [r7, #26]
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	61fb      	str	r3, [r7, #28]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_SPI_TransmitReceive+0x36>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e1f2      	b.n	80050ee <HAL_SPI_TransmitReceive+0x41c>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d10:	f7fe fcdc 	bl	80036cc <HAL_GetTick>
 8004d14:	61f8      	str	r0, [r7, #28]
  
  tmp  = hspi->State;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
  tmp1 = hspi->Init.Mode;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	623b      	str	r3, [r7, #32]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d00e      	beq.n	8004d4a <HAL_SPI_TransmitReceive+0x78>
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d32:	d106      	bne.n	8004d42 <HAL_SPI_TransmitReceive+0x70>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <HAL_SPI_TransmitReceive+0x70>
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d003      	beq.n	8004d4a <HAL_SPI_TransmitReceive+0x78>
  {
    errorcode = HAL_BUSY;
 8004d42:	2302      	movs	r3, #2
 8004d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d48:	e1c7      	b.n	80050da <HAL_SPI_TransmitReceive+0x408>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_SPI_TransmitReceive+0x8a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <HAL_SPI_TransmitReceive+0x8a>
 8004d56:	887b      	ldrh	r3, [r7, #2]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <HAL_SPI_TransmitReceive+0x92>
  {
    errorcode = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d62:	e1ba      	b.n	80050da <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d103      	bne.n	8004d78 <HAL_SPI_TransmitReceive+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2205      	movs	r2, #5
 8004d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	887a      	ldrh	r2, [r7, #2]
 8004d88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	887a      	ldrh	r2, [r7, #2]
 8004d8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	887a      	ldrh	r2, [r7, #2]
 8004d9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	887a      	ldrh	r2, [r7, #2]
 8004da0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db6:	d110      	bne.n	8004dda <HAL_SPI_TransmitReceive+0x108>
  {
    SPI_RESET_CRC(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6819      	ldr	r1, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8004dc6:	400b      	ands	r3, r1
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dd8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d007      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004df6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e00:	f040 8084 	bne.w	8004f0c <HAL_SPI_TransmitReceive+0x23a>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d004      	beq.n	8004e16 <HAL_SPI_TransmitReceive+0x144>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d16f      	bne.n	8004ef6 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	881a      	ldrh	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	3302      	adds	r3, #2
 8004e24:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e34:	e05f      	b.n	8004ef6 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02e      	beq.n	8004e9a <HAL_SPI_TransmitReceive+0x1c8>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d029      	beq.n	8004e9a <HAL_SPI_TransmitReceive+0x1c8>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d122      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x1c8>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	881a      	ldrh	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	3302      	adds	r3, #2
 8004e62:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10c      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x1c8>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e88:	d107      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x1c8>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e98:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d018      	beq.n	8004ed6 <HAL_SPI_TransmitReceive+0x204>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d111      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3302      	adds	r3, #2
 8004ec2:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d00b      	beq.n	8004ef6 <HAL_SPI_TransmitReceive+0x224>
 8004ede:	f7fe fbf5 	bl	80036cc <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d803      	bhi.n	8004ef6 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ef4:	e0f1      	b.n	80050da <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d19a      	bne.n	8004e36 <HAL_SPI_TransmitReceive+0x164>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d195      	bne.n	8004e36 <HAL_SPI_TransmitReceive+0x164>
 8004f0a:	e082      	b.n	8005012 <HAL_SPI_TransmitReceive+0x340>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d004      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0x24c>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d16f      	bne.n	8004ffe <HAL_SPI_TransmitReceive+0x32c>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	330c      	adds	r3, #12
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	7812      	ldrb	r2, [r2, #0]
 8004f28:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f3e:	e05e      	b.n	8004ffe <HAL_SPI_TransmitReceive+0x32c>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8004f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d02e      	beq.n	8004fa4 <HAL_SPI_TransmitReceive+0x2d2>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d029      	beq.n	8004fa4 <HAL_SPI_TransmitReceive+0x2d2>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d122      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x2d2>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	60ba      	str	r2, [r7, #8]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	320c      	adds	r2, #12
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10c      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x2d2>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f92:	d107      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x2d2>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fa2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d017      	beq.n	8004fde <HAL_SPI_TransmitReceive+0x30c>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d110      	bne.n	8004fde <HAL_SPI_TransmitReceive+0x30c>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68d9      	ldr	r1, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	b2ca      	uxtb	r2, r1
 8004fca:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe4:	d00b      	beq.n	8004ffe <HAL_SPI_TransmitReceive+0x32c>
 8004fe6:	f7fe fb71 	bl	80036cc <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d803      	bhi.n	8004ffe <HAL_SPI_TransmitReceive+0x32c>
      {
        errorcode = HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ffc:	e06d      	b.n	80050da <HAL_SPI_TransmitReceive+0x408>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d19b      	bne.n	8004f40 <HAL_SPI_TransmitReceive+0x26e>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d196      	bne.n	8004f40 <HAL_SPI_TransmitReceive+0x26e>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800501a:	d11a      	bne.n	8005052 <HAL_SPI_TransmitReceive+0x380>
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	2201      	movs	r2, #1
 8005024:	2101      	movs	r1, #1
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f865 	bl	80050f6 <SPI_WaitFlagStateUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_SPI_TransmitReceive+0x374>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005036:	f043 0202 	orr.w	r2, r3, #2
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8005044:	e049      	b.n	80050da <HAL_SPI_TransmitReceive+0x408>
    }
    /* Read CRC */
    tmpreg1 = hspi->Instance->DR;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	b29b      	uxth	r3, r3
 800504e:	837b      	strh	r3, [r7, #26]
    /* To avoid GCC warning */
    UNUSED(tmpreg1);
 8005050:	8b7b      	ldrh	r3, [r7, #26]
  }

  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b10      	cmp	r3, #16
 800505e:	d10d      	bne.n	800507c <HAL_SPI_TransmitReceive+0x3aa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005064:	f043 0202 	orr.w	r2, r3, #2
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005074:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	2201      	movs	r2, #1
 8005084:	2102      	movs	r1, #2
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f835 	bl	80050f6 <SPI_WaitFlagStateUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_SPI_TransmitReceive+0x3c8>
  {
    errorcode = HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005098:	e01f      	b.n	80050da <HAL_SPI_TransmitReceive+0x408>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f892 	bl	80051c8 <SPI_CheckFlag_BSY>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d006      	beq.n	80050b8 <HAL_SPI_TransmitReceive+0x3e6>
  {
    errorcode = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80050b6:	e010      	b.n	80050da <HAL_SPI_TransmitReceive+0x408>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10b      	bne.n	80050d8 <HAL_SPI_TransmitReceive+0x406>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050c0:	2300      	movs	r3, #0
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	e000      	b.n	80050da <HAL_SPI_TransmitReceive+0x408>
  }
  
error :
 80050d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3730      	adds	r7, #48	; 0x30
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
 8005102:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005104:	e04d      	b.n	80051a2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d049      	beq.n	80051a2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005114:	f7fe fada 	bl	80036cc <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d83e      	bhi.n	80051a2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005132:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800513c:	d111      	bne.n	8005162 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005146:	d004      	beq.n	8005152 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005150:	d107      	bne.n	8005162 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005160:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800516a:	d110      	bne.n	800518e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6819      	ldr	r1, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800517a:	400b      	ands	r3, r1
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800518c:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e00e      	b.n	80051c0 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4013      	ands	r3, r2
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d101      	bne.n	80051b6 <SPI_WaitFlagStateUntilTimeout+0xc0>
 80051b2:	2201      	movs	r2, #1
 80051b4:	e000      	b.n	80051b8 <SPI_WaitFlagStateUntilTimeout+0xc2>
 80051b6:	2200      	movs	r2, #0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d1a3      	bne.n	8005106 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2200      	movs	r2, #0
 80051dc:	2180      	movs	r1, #128	; 0x80
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff ff89 	bl	80050f6 <SPI_WaitFlagStateUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e000      	b.n	80051fc <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e01d      	b.n	8005252 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f002 fb50 	bl	80078d0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3304      	adds	r3, #4
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f000 fb88 	bl	8005958 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}  
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{ 
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2200      	movs	r2, #0
 800526c:	6839      	ldr	r1, [r7, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fc64 	bl	8005b3c <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1d      	ldr	r2, [pc, #116]	; (80052f0 <HAL_TIM_PWM_Stop+0x94>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d117      	bne.n	80052ae <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6a1a      	ldr	r2, [r3, #32]
 8005284:	f241 1311 	movw	r3, #4369	; 0x1111
 8005288:	4013      	ands	r3, r2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <HAL_TIM_PWM_Stop+0x52>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6a1a      	ldr	r2, [r3, #32]
 8005294:	f240 4344 	movw	r3, #1092	; 0x444
 8005298:	4013      	ands	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d107      	bne.n	80052ae <HAL_TIM_PWM_Stop+0x52>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052ac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6a1a      	ldr	r2, [r3, #32]
 80052b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80052b8:	4013      	ands	r3, r2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10f      	bne.n	80052de <HAL_TIM_PWM_Stop+0x82>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6a1a      	ldr	r2, [r3, #32]
 80052c4:	f240 4344 	movw	r3, #1092	; 0x444
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d107      	bne.n	80052de <HAL_TIM_PWM_Stop+0x82>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0201 	bic.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
} 
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40010000 	.word	0x40010000

080052f4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b0c      	cmp	r3, #12
 8005302:	d841      	bhi.n	8005388 <HAL_TIM_PWM_Start_IT+0x94>
 8005304:	a201      	add	r2, pc, #4	; (adr r2, 800530c <HAL_TIM_PWM_Start_IT+0x18>)
 8005306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530a:	bf00      	nop
 800530c:	08005341 	.word	0x08005341
 8005310:	08005389 	.word	0x08005389
 8005314:	08005389 	.word	0x08005389
 8005318:	08005389 	.word	0x08005389
 800531c:	08005353 	.word	0x08005353
 8005320:	08005389 	.word	0x08005389
 8005324:	08005389 	.word	0x08005389
 8005328:	08005389 	.word	0x08005389
 800532c:	08005365 	.word	0x08005365
 8005330:	08005389 	.word	0x08005389
 8005334:	08005389 	.word	0x08005389
 8005338:	08005389 	.word	0x08005389
 800533c:	08005377 	.word	0x08005377
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0202 	orr.w	r2, r2, #2
 800534e:	60da      	str	r2, [r3, #12]
    }
    break;
 8005350:	e01b      	b.n	800538a <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0204 	orr.w	r2, r2, #4
 8005360:	60da      	str	r2, [r3, #12]
    }
    break;
 8005362:	e012      	b.n	800538a <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0208 	orr.w	r2, r2, #8
 8005372:	60da      	str	r2, [r3, #12]
    }
    break;
 8005374:	e009      	b.n	800538a <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 0210 	orr.w	r2, r2, #16
 8005384:	60da      	str	r2, [r3, #12]
    }
    break;
 8005386:	e000      	b.n	800538a <HAL_TIM_PWM_Start_IT+0x96>
    
    default:
    break;
 8005388:	bf00      	nop
  } 
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2201      	movs	r2, #1
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fbd2 	bl	8005b3c <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a0b      	ldr	r2, [pc, #44]	; (80053cc <HAL_TIM_PWM_Start_IT+0xd8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d107      	bne.n	80053b2 <HAL_TIM_PWM_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0201 	orr.w	r2, r2, #1
 80053c0:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
} 
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40010000 	.word	0x40010000

080053d0 <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e081      	b.n	80054f4 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d106      	bne.n	800540a <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f002 fac5 	bl	8007994 <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2202      	movs	r2, #2
 800540e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0207 	bic.w	r2, r2, #7
 8005420:	609a      	str	r2, [r3, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f000 fa93 	bl	8005958 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800545a:	f023 0303 	bic.w	r3, r3, #3
 800545e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	4313      	orrs	r3, r2
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005478:	f023 030c 	bic.w	r3, r3, #12
 800547c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	4313      	orrs	r3, r2
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	011a      	lsls	r2, r3, #4
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	031b      	lsls	r3, r3, #12
 80054a8:	4313      	orrs	r3, r2
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80054b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80054be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	4313      	orrs	r3, r2
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_TIM_Encoder_Start+0x18>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b04      	cmp	r3, #4
 8005510:	d008      	beq.n	8005524 <HAL_TIM_Encoder_Start+0x28>
 8005512:	e00f      	b.n	8005534 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2201      	movs	r2, #1
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fb0d 	bl	8005b3c <TIM_CCxChannelCmd>
      break; 
 8005522:	e016      	b.n	8005552 <HAL_TIM_Encoder_Start+0x56>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2201      	movs	r2, #1
 800552a:	2104      	movs	r1, #4
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fb05 	bl	8005b3c <TIM_CCxChannelCmd>
      break;
 8005532:	e00e      	b.n	8005552 <HAL_TIM_Encoder_Start+0x56>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2201      	movs	r2, #1
 800553a:	2100      	movs	r1, #0
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fafd 	bl	8005b3c <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2201      	movs	r2, #1
 8005548:	2104      	movs	r1, #4
 800554a:	4618      	mov	r0, r3
 800554c:	f000 faf6 	bl	8005b3c <TIM_CCxChannelCmd>
     break; 
 8005550:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0201 	orr.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b02      	cmp	r3, #2
 8005580:	d122      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b02      	cmp	r3, #2
 800558e:	d11b      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0202 	mvn.w	r2, #2
 8005598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f9be 	bl	8005930 <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f9b0 	bl	800591c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f002 f9bd 	bl	800793c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d122      	bne.n	800561c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d11b      	bne.n	800561c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0204 	mvn.w	r2, #4
 80055ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f994 	bl	8005930 <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f986 	bl	800591c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f002 f993 	bl	800793c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b08      	cmp	r3, #8
 8005628:	d122      	bne.n	8005670 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b08      	cmp	r3, #8
 8005636:	d11b      	bne.n	8005670 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0208 	mvn.w	r2, #8
 8005640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2204      	movs	r2, #4
 8005646:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f96a 	bl	8005930 <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f95c 	bl	800591c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f002 f969 	bl	800793c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b10      	cmp	r3, #16
 800567c:	d122      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b10      	cmp	r3, #16
 800568a:	d11b      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0210 	mvn.w	r2, #16
 8005694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2208      	movs	r2, #8
 800569a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f940 	bl	8005930 <HAL_TIM_IC_CaptureCallback>
 80056b0:	e005      	b.n	80056be <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f932 	bl	800591c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f002 f93f 	bl	800793c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d10e      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d107      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0201 	mvn.w	r2, #1
 80056e8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f90c 	bl	8005908 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fa:	2b80      	cmp	r3, #128	; 0x80
 80056fc:	d10e      	bne.n	800571c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005708:	2b80      	cmp	r3, #128	; 0x80
 800570a:	d107      	bne.n	800571c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005714:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fbad 	bl	8005e76 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005726:	2b40      	cmp	r3, #64	; 0x40
 8005728:	d10e      	bne.n	8005748 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d107      	bne.n	8005748 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005740:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f8fe 	bl	8005944 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0320 	and.w	r3, r3, #32
 8005752:	2b20      	cmp	r3, #32
 8005754:	d10e      	bne.n	8005774 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b20      	cmp	r3, #32
 8005762:	d107      	bne.n	8005774 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0220 	mvn.w	r2, #32
 800576c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fb77 	bl	8005e62 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8005774:	bf00      	nop
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005792:	2302      	movs	r3, #2
 8005794:	e0b4      	b.n	8005900 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2202      	movs	r2, #2
 80057a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b0c      	cmp	r3, #12
 80057aa:	f200 809f 	bhi.w	80058ec <HAL_TIM_PWM_ConfigChannel+0x170>
 80057ae:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	080057e9 	.word	0x080057e9
 80057b8:	080058ed 	.word	0x080058ed
 80057bc:	080058ed 	.word	0x080058ed
 80057c0:	080058ed 	.word	0x080058ed
 80057c4:	08005829 	.word	0x08005829
 80057c8:	080058ed 	.word	0x080058ed
 80057cc:	080058ed 	.word	0x080058ed
 80057d0:	080058ed 	.word	0x080058ed
 80057d4:	0800586b 	.word	0x0800586b
 80057d8:	080058ed 	.word	0x080058ed
 80057dc:	080058ed 	.word	0x080058ed
 80057e0:	080058ed 	.word	0x080058ed
 80057e4:	080058ab 	.word	0x080058ab
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 f9c8 	bl	8005b84 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0208 	orr.w	r2, r2, #8
 8005802:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0204 	bic.w	r2, r2, #4
 8005812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6999      	ldr	r1, [r3, #24]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	619a      	str	r2, [r3, #24]
    }
    break;
 8005826:	e062      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	4618      	mov	r0, r3
 8005830:	f000 f916 	bl	8005a60 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005842:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6999      	ldr	r1, [r3, #24]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	021a      	lsls	r2, r3, #8
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	619a      	str	r2, [r3, #24]
    }
    break;
 8005868:	e041      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	4618      	mov	r0, r3
 8005872:	f000 f9ef 	bl	8005c54 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0208 	orr.w	r2, r2, #8
 8005884:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0204 	bic.w	r2, r2, #4
 8005894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69d9      	ldr	r1, [r3, #28]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	61da      	str	r2, [r3, #28]
    }
    break;
 80058a8:	e021      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fa3b 	bl	8005d2c <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69da      	ldr	r2, [r3, #28]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69d9      	ldr	r1, [r3, #28]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	021a      	lsls	r2, r3, #8
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	61da      	str	r2, [r3, #28]
    }
    break;
 80058ea:	e000      	b.n	80058ee <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 80058ec:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a35      	ldr	r2, [pc, #212]	; (8005a44 <TIM_Base_SetConfig+0xec>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00f      	beq.n	8005994 <TIM_Base_SetConfig+0x3c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597a:	d00b      	beq.n	8005994 <TIM_Base_SetConfig+0x3c>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a32      	ldr	r2, [pc, #200]	; (8005a48 <TIM_Base_SetConfig+0xf0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d007      	beq.n	8005994 <TIM_Base_SetConfig+0x3c>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a31      	ldr	r2, [pc, #196]	; (8005a4c <TIM_Base_SetConfig+0xf4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_Base_SetConfig+0x3c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a30      	ldr	r2, [pc, #192]	; (8005a50 <TIM_Base_SetConfig+0xf8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d101      	bne.n	8005998 <TIM_Base_SetConfig+0x40>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <TIM_Base_SetConfig+0x42>
 8005998:	2300      	movs	r3, #0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d008      	beq.n	80059b0 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a24      	ldr	r2, [pc, #144]	; (8005a44 <TIM_Base_SetConfig+0xec>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d01b      	beq.n	80059f0 <TIM_Base_SetConfig+0x98>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059be:	d017      	beq.n	80059f0 <TIM_Base_SetConfig+0x98>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a21      	ldr	r2, [pc, #132]	; (8005a48 <TIM_Base_SetConfig+0xf0>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <TIM_Base_SetConfig+0x98>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a20      	ldr	r2, [pc, #128]	; (8005a4c <TIM_Base_SetConfig+0xf4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00f      	beq.n	80059f0 <TIM_Base_SetConfig+0x98>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <TIM_Base_SetConfig+0xf8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00b      	beq.n	80059f0 <TIM_Base_SetConfig+0x98>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a1e      	ldr	r2, [pc, #120]	; (8005a54 <TIM_Base_SetConfig+0xfc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d007      	beq.n	80059f0 <TIM_Base_SetConfig+0x98>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a1d      	ldr	r2, [pc, #116]	; (8005a58 <TIM_Base_SetConfig+0x100>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_Base_SetConfig+0x98>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a1c      	ldr	r2, [pc, #112]	; (8005a5c <TIM_Base_SetConfig+0x104>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d101      	bne.n	80059f4 <TIM_Base_SetConfig+0x9c>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <TIM_Base_SetConfig+0x9e>
 80059f4:	2300      	movs	r3, #0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d008      	beq.n	8005a0c <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a07      	ldr	r2, [pc, #28]	; (8005a44 <TIM_Base_SetConfig+0xec>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d103      	bne.n	8005a32 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	691a      	ldr	r2, [r3, #16]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	615a      	str	r2, [r3, #20]
}
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	40010000 	.word	0x40010000
 8005a48:	40000400 	.word	0x40000400
 8005a4c:	40000800 	.word	0x40000800
 8005a50:	40000c00 	.word	0x40000c00
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800

08005a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0210 	bic.w	r2, r3, #16
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa2:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	021b      	lsls	r3, r3, #8
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f023 0320 	bic.w	r3, r3, #32
 8005ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <TIM_OC2_SetConfig+0xd8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d121      	bne.n	8005b10 <TIM_OC2_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae6:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	621a      	str	r2, [r3, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40010000 	.word	0x40010000

08005b3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a1a      	ldr	r2, [r3, #32]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	43db      	mvns	r3, r3
 8005b5e:	401a      	ands	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a1a      	ldr	r2, [r3, #32]
 8005b68:	6879      	ldr	r1, [r7, #4]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
	...

08005b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	f023 0201 	bic.w	r2, r3, #1
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0303 	bic.w	r3, r3, #3
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f023 0302 	bic.w	r3, r3, #2
 8005bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a1a      	ldr	r2, [pc, #104]	; (8005c50 <TIM_OC1_SetConfig+0xcc>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d11e      	bne.n	8005c2a <TIM_OC1_SetConfig+0xa6>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 0308 	bic.w	r3, r3, #8
 8005bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f023 0304 	bic.w	r3, r3, #4
 8005c04:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	621a      	str	r2, [r3, #32]
} 
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	40010000 	.word	0x40010000

08005c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 8005c66:	2300      	movs	r3, #0
 8005c68:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a1b      	ldr	r2, [pc, #108]	; (8005d28 <TIM_OC3_SetConfig+0xd4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d121      	bne.n	8005d02 <TIM_OC3_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cd8:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	621a      	str	r2, [r3, #32]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	40010000 	.word	0x40010000

08005d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d66:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6e:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	021b      	lsls	r3, r3, #8
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	031b      	lsls	r3, r3, #12
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a10      	ldr	r2, [pc, #64]	; (8005dd4 <TIM_OC4_SetConfig+0xa8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d109      	bne.n	8005dac <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	019b      	lsls	r3, r3, #6
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40010000 	.word	0x40010000

08005dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e032      	b.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005e0e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6859      	ldr	r1, [r3, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e30:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6899      	ldr	r1, [r3, #8]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
} 
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e03f      	b.n	8005f1c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 fda1 	bl	80079f8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2224      	movs	r2, #36	; 0x24
 8005eba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ecc:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fa6a 	bl	80063a8 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ee2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	695a      	ldr	r2, [r3, #20]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ef2:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f02:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2220      	movs	r2, #32
 8005f16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	603b      	str	r3, [r7, #0]
 8005f30:	4613      	mov	r3, r2
 8005f32:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	f040 8083 	bne.w	800604c <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0)) 
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_UART_Transmit+0x2e>
 8005f4c:	88fb      	ldrh	r3, [r7, #6]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e07b      	b.n	800604e <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_UART_Transmit+0x40>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e074      	b.n	800604e <HAL_UART_Transmit+0x12a>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2221      	movs	r2, #33	; 0x21
 8005f76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005f7a:	f7fd fba7 	bl	80036cc <HAL_GetTick>
 8005f7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	88fa      	ldrh	r2, [r7, #6]
 8005f84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	88fa      	ldrh	r2, [r7, #6]
 8005f8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8005f8c:	e042      	b.n	8006014 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa4:	d122      	bne.n	8005fec <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2200      	movs	r2, #0
 8005fae:	2180      	movs	r1, #128	; 0x80
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f97b 	bl	80062ac <UART_WaitOnFlagUntilTimeout>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e046      	b.n	800604e <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fd2:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d103      	bne.n	8005fe4 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	3302      	adds	r3, #2
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	e017      	b.n	8006014 <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	e013      	b.n	8006014 <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2180      	movs	r1, #128	; 0x80
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 f958 	bl	80062ac <UART_WaitOnFlagUntilTimeout>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e023      	b.n	800604e <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	60ba      	str	r2, [r7, #8]
 800600c:	781a      	ldrb	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1b7      	bne.n	8005f8e <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2200      	movs	r2, #0
 8006026:	2140      	movs	r1, #64	; 0x40
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f93f 	bl	80062ac <UART_WaitOnFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e00a      	b.n	800604e <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2220      	movs	r2, #32
 800603c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	e000      	b.n	800604e <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800604c:	2302      	movs	r3, #2
  }
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b20      	cmp	r3, #32
 8006070:	d166      	bne.n	8006140 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_UART_Receive_DMA+0x26>
 8006078:	88fb      	ldrh	r3, [r7, #6]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e05f      	b.n	8006142 <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_UART_Receive_DMA+0x38>
 800608c:	2302      	movs	r3, #2
 800608e:	e058      	b.n	8006142 <HAL_UART_Receive_DMA+0xea>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	88fa      	ldrh	r2, [r7, #6]
 80060a2:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2222      	movs	r2, #34	; 0x22
 80060ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b6:	4a25      	ldr	r2, [pc, #148]	; (800614c <HAL_UART_Receive_DMA+0xf4>)
 80060b8:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	4a24      	ldr	r2, [pc, #144]	; (8006150 <HAL_UART_Receive_DMA+0xf8>)
 80060c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c6:	4a23      	ldr	r2, [pc, #140]	; (8006154 <HAL_UART_Receive_DMA+0xfc>)
 80060c8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ce:	2200      	movs	r2, #0
 80060d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 80060d2:	f107 0308 	add.w	r3, r7, #8
 80060d6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3304      	adds	r3, #4
 80060e2:	4619      	mov	r1, r3
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	88fb      	ldrh	r3, [r7, #6]
 80060ea:	f7fd fcdb 	bl	8003aa4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80060ee:	2300      	movs	r3, #0
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800611a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695a      	ldr	r2, [r3, #20]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800613a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	e000      	b.n	8006142 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8006140:	2302      	movs	r3, #2
  }
}
 8006142:	4618      	mov	r0, r3
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	08006195 	.word	0x08006195
 8006150:	080061fd 	.word	0x080061fd
 8006154:	08006219 	.word	0x08006219

08006158 <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d11e      	bne.n	80061ee <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061c4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695a      	ldr	r2, [r3, #20]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0201 	bic.w	r2, r2, #1
 80061d4:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695a      	ldr	r2, [r3, #20]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061e4:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f7ff ffb2 	bl	8006158 <HAL_UART_RxCpltCallback>
}
 80061f4:	bf00      	nop
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <UART_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006208:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f7ff ffae 	bl	800616c <HAL_UART_RxHalfCpltCallback>
}
 8006210:	bf00      	nop
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006234:	2b00      	cmp	r3, #0
 8006236:	bf14      	ite	ne
 8006238:	2301      	movne	r3, #1
 800623a:	2300      	moveq	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b21      	cmp	r3, #33	; 0x21
 800624a:	d108      	bne.n	800625e <UART_DMAError+0x46>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d005      	beq.n	800625e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2200      	movs	r2, #0
 8006256:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006258:	68b8      	ldr	r0, [r7, #8]
 800625a:	f000 f871 	bl	8006340 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006268:	2b00      	cmp	r3, #0
 800626a:	bf14      	ite	ne
 800626c:	2301      	movne	r3, #1
 800626e:	2300      	moveq	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b22      	cmp	r3, #34	; 0x22
 800627e:	d108      	bne.n	8006292 <UART_DMAError+0x7a>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d005      	beq.n	8006292 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2200      	movs	r2, #0
 800628a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800628c:	68b8      	ldr	r0, [r7, #8]
 800628e:	f000 f86d 	bl	800636c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006296:	f043 0210 	orr.w	r2, r3, #16
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800629e:	68b8      	ldr	r0, [r7, #8]
 80062a0:	f7ff ff6e 	bl	8006180 <HAL_UART_ErrorCallback>
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	4613      	mov	r3, r2
 80062ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80062bc:	e02c      	b.n	8006318 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c4:	d028      	beq.n	8006318 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d007      	beq.n	80062dc <UART_WaitOnFlagUntilTimeout+0x30>
 80062cc:	f7fd f9fe 	bl	80036cc <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d21d      	bcs.n	8006318 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695a      	ldr	r2, [r3, #20]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0201 	bic.w	r2, r2, #1
 80062fa:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2220      	movs	r2, #32
 8006300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e00f      	b.n	8006338 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	4013      	ands	r3, r2
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	429a      	cmp	r2, r3
 8006326:	bf0c      	ite	eq
 8006328:	2301      	moveq	r3, #1
 800632a:	2300      	movne	r3, #0
 800632c:	b2db      	uxtb	r3, r3
 800632e:	461a      	mov	r2, r3
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	429a      	cmp	r2, r3
 8006334:	d0c3      	beq.n	80062be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006356:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006382:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695a      	ldr	r2, [r3, #20]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0201 	bic.w	r2, r2, #1
 8006392:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063a8:	b5b0      	push	{r4, r5, r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80063e4:	f023 030c 	bic.w	r3, r3, #12
 80063e8:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	431a      	orrs	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	4313      	orrs	r3, r2
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641c:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006438:	f040 80e4 	bne.w	8006604 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4aab      	ldr	r2, [pc, #684]	; (80066f0 <UART_SetConfig+0x348>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d004      	beq.n	8006450 <UART_SetConfig+0xa8>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4aaa      	ldr	r2, [pc, #680]	; (80066f4 <UART_SetConfig+0x34c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d16c      	bne.n	800652a <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006450:	f7fe fbc0 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8006454:	4602      	mov	r2, r0
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009a      	lsls	r2, r3, #2
 800645e:	441a      	add	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	fbb2 f3f3 	udiv	r3, r2, r3
 800646a:	4aa3      	ldr	r2, [pc, #652]	; (80066f8 <UART_SetConfig+0x350>)
 800646c:	fba2 2303 	umull	r2, r3, r2, r3
 8006470:	095b      	lsrs	r3, r3, #5
 8006472:	011c      	lsls	r4, r3, #4
 8006474:	f7fe fbae 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8006478:	4602      	mov	r2, r0
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	009a      	lsls	r2, r3, #2
 8006482:	441a      	add	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	fbb2 f5f3 	udiv	r5, r2, r3
 800648e:	f7fe fba1 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8006492:	4602      	mov	r2, r0
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009a      	lsls	r2, r3, #2
 800649c:	441a      	add	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a8:	4a93      	ldr	r2, [pc, #588]	; (80066f8 <UART_SetConfig+0x350>)
 80064aa:	fba2 2303 	umull	r2, r3, r2, r3
 80064ae:	095b      	lsrs	r3, r3, #5
 80064b0:	2264      	movs	r2, #100	; 0x64
 80064b2:	fb02 f303 	mul.w	r3, r2, r3
 80064b6:	1aeb      	subs	r3, r5, r3
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	3332      	adds	r3, #50	; 0x32
 80064bc:	4a8e      	ldr	r2, [pc, #568]	; (80066f8 <UART_SetConfig+0x350>)
 80064be:	fba2 2303 	umull	r2, r3, r2, r3
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064ca:	441c      	add	r4, r3
 80064cc:	f7fe fb82 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 80064d0:	4602      	mov	r2, r0
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009a      	lsls	r2, r3, #2
 80064da:	441a      	add	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	fbb2 f5f3 	udiv	r5, r2, r3
 80064e6:	f7fe fb75 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 80064ea:	4602      	mov	r2, r0
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	009a      	lsls	r2, r3, #2
 80064f4:	441a      	add	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006500:	4a7d      	ldr	r2, [pc, #500]	; (80066f8 <UART_SetConfig+0x350>)
 8006502:	fba2 2303 	umull	r2, r3, r2, r3
 8006506:	095b      	lsrs	r3, r3, #5
 8006508:	2264      	movs	r2, #100	; 0x64
 800650a:	fb02 f303 	mul.w	r3, r2, r3
 800650e:	1aeb      	subs	r3, r5, r3
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	3332      	adds	r3, #50	; 0x32
 8006514:	4a78      	ldr	r2, [pc, #480]	; (80066f8 <UART_SetConfig+0x350>)
 8006516:	fba2 2303 	umull	r2, r3, r2, r3
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	f003 0207 	and.w	r2, r3, #7
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4422      	add	r2, r4
 8006526:	609a      	str	r2, [r3, #8]
 8006528:	e154      	b.n	80067d4 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800652a:	f7fe fb3f 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 800652e:	4602      	mov	r2, r0
 8006530:	4613      	mov	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	009a      	lsls	r2, r3, #2
 8006538:	441a      	add	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	fbb2 f3f3 	udiv	r3, r2, r3
 8006544:	4a6c      	ldr	r2, [pc, #432]	; (80066f8 <UART_SetConfig+0x350>)
 8006546:	fba2 2303 	umull	r2, r3, r2, r3
 800654a:	095b      	lsrs	r3, r3, #5
 800654c:	011c      	lsls	r4, r3, #4
 800654e:	f7fe fb2d 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8006552:	4602      	mov	r2, r0
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	009a      	lsls	r2, r3, #2
 800655c:	441a      	add	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	fbb2 f5f3 	udiv	r5, r2, r3
 8006568:	f7fe fb20 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 800656c:	4602      	mov	r2, r0
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009a      	lsls	r2, r3, #2
 8006576:	441a      	add	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006582:	4a5d      	ldr	r2, [pc, #372]	; (80066f8 <UART_SetConfig+0x350>)
 8006584:	fba2 2303 	umull	r2, r3, r2, r3
 8006588:	095b      	lsrs	r3, r3, #5
 800658a:	2264      	movs	r2, #100	; 0x64
 800658c:	fb02 f303 	mul.w	r3, r2, r3
 8006590:	1aeb      	subs	r3, r5, r3
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	3332      	adds	r3, #50	; 0x32
 8006596:	4a58      	ldr	r2, [pc, #352]	; (80066f8 <UART_SetConfig+0x350>)
 8006598:	fba2 2303 	umull	r2, r3, r2, r3
 800659c:	095b      	lsrs	r3, r3, #5
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065a4:	441c      	add	r4, r3
 80065a6:	f7fe fb01 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 80065aa:	4602      	mov	r2, r0
 80065ac:	4613      	mov	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	009a      	lsls	r2, r3, #2
 80065b4:	441a      	add	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	fbb2 f5f3 	udiv	r5, r2, r3
 80065c0:	f7fe faf4 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 80065c4:	4602      	mov	r2, r0
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009a      	lsls	r2, r3, #2
 80065ce:	441a      	add	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065da:	4a47      	ldr	r2, [pc, #284]	; (80066f8 <UART_SetConfig+0x350>)
 80065dc:	fba2 2303 	umull	r2, r3, r2, r3
 80065e0:	095b      	lsrs	r3, r3, #5
 80065e2:	2264      	movs	r2, #100	; 0x64
 80065e4:	fb02 f303 	mul.w	r3, r2, r3
 80065e8:	1aeb      	subs	r3, r5, r3
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	3332      	adds	r3, #50	; 0x32
 80065ee:	4a42      	ldr	r2, [pc, #264]	; (80066f8 <UART_SetConfig+0x350>)
 80065f0:	fba2 2303 	umull	r2, r3, r2, r3
 80065f4:	095b      	lsrs	r3, r3, #5
 80065f6:	f003 0207 	and.w	r2, r3, #7
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4422      	add	r2, r4
 8006600:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006602:	e0e7      	b.n	80067d4 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a39      	ldr	r2, [pc, #228]	; (80066f0 <UART_SetConfig+0x348>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d004      	beq.n	8006618 <UART_SetConfig+0x270>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a38      	ldr	r2, [pc, #224]	; (80066f4 <UART_SetConfig+0x34c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d171      	bne.n	80066fc <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006618:	f7fe fadc 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 800661c:	4602      	mov	r2, r0
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009a      	lsls	r2, r3, #2
 8006626:	441a      	add	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006632:	4a31      	ldr	r2, [pc, #196]	; (80066f8 <UART_SetConfig+0x350>)
 8006634:	fba2 2303 	umull	r2, r3, r2, r3
 8006638:	095b      	lsrs	r3, r3, #5
 800663a:	011c      	lsls	r4, r3, #4
 800663c:	f7fe faca 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8006640:	4602      	mov	r2, r0
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	009a      	lsls	r2, r3, #2
 800664a:	441a      	add	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	fbb2 f5f3 	udiv	r5, r2, r3
 8006656:	f7fe fabd 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 800665a:	4602      	mov	r2, r0
 800665c:	4613      	mov	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	009a      	lsls	r2, r3, #2
 8006664:	441a      	add	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006670:	4a21      	ldr	r2, [pc, #132]	; (80066f8 <UART_SetConfig+0x350>)
 8006672:	fba2 2303 	umull	r2, r3, r2, r3
 8006676:	095b      	lsrs	r3, r3, #5
 8006678:	2264      	movs	r2, #100	; 0x64
 800667a:	fb02 f303 	mul.w	r3, r2, r3
 800667e:	1aeb      	subs	r3, r5, r3
 8006680:	011b      	lsls	r3, r3, #4
 8006682:	3332      	adds	r3, #50	; 0x32
 8006684:	4a1c      	ldr	r2, [pc, #112]	; (80066f8 <UART_SetConfig+0x350>)
 8006686:	fba2 2303 	umull	r2, r3, r2, r3
 800668a:	095b      	lsrs	r3, r3, #5
 800668c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006690:	441c      	add	r4, r3
 8006692:	f7fe fa9f 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8006696:	4602      	mov	r2, r0
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	009a      	lsls	r2, r3, #2
 80066a0:	441a      	add	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	fbb2 f5f3 	udiv	r5, r2, r3
 80066ac:	f7fe fa92 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 80066b0:	4602      	mov	r2, r0
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009a      	lsls	r2, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c6:	4a0c      	ldr	r2, [pc, #48]	; (80066f8 <UART_SetConfig+0x350>)
 80066c8:	fba2 2303 	umull	r2, r3, r2, r3
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	2264      	movs	r2, #100	; 0x64
 80066d0:	fb02 f303 	mul.w	r3, r2, r3
 80066d4:	1aeb      	subs	r3, r5, r3
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	3332      	adds	r3, #50	; 0x32
 80066da:	4a07      	ldr	r2, [pc, #28]	; (80066f8 <UART_SetConfig+0x350>)
 80066dc:	fba2 2303 	umull	r2, r3, r2, r3
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	f003 020f 	and.w	r2, r3, #15
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4422      	add	r2, r4
 80066ec:	609a      	str	r2, [r3, #8]
 80066ee:	e071      	b.n	80067d4 <UART_SetConfig+0x42c>
 80066f0:	40011000 	.word	0x40011000
 80066f4:	40011400 	.word	0x40011400
 80066f8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80066fc:	f7fe fa56 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8006700:	4602      	mov	r2, r0
 8006702:	4613      	mov	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	009a      	lsls	r2, r3, #2
 800670a:	441a      	add	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	fbb2 f3f3 	udiv	r3, r2, r3
 8006716:	4a31      	ldr	r2, [pc, #196]	; (80067dc <UART_SetConfig+0x434>)
 8006718:	fba2 2303 	umull	r2, r3, r2, r3
 800671c:	095b      	lsrs	r3, r3, #5
 800671e:	011c      	lsls	r4, r3, #4
 8006720:	f7fe fa44 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8006724:	4602      	mov	r2, r0
 8006726:	4613      	mov	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	009a      	lsls	r2, r3, #2
 800672e:	441a      	add	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	fbb2 f5f3 	udiv	r5, r2, r3
 800673a:	f7fe fa37 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 800673e:	4602      	mov	r2, r0
 8006740:	4613      	mov	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	009a      	lsls	r2, r3, #2
 8006748:	441a      	add	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	fbb2 f3f3 	udiv	r3, r2, r3
 8006754:	4a21      	ldr	r2, [pc, #132]	; (80067dc <UART_SetConfig+0x434>)
 8006756:	fba2 2303 	umull	r2, r3, r2, r3
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	2264      	movs	r2, #100	; 0x64
 800675e:	fb02 f303 	mul.w	r3, r2, r3
 8006762:	1aeb      	subs	r3, r5, r3
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	3332      	adds	r3, #50	; 0x32
 8006768:	4a1c      	ldr	r2, [pc, #112]	; (80067dc <UART_SetConfig+0x434>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006774:	441c      	add	r4, r3
 8006776:	f7fe fa19 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 800677a:	4602      	mov	r2, r0
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	009a      	lsls	r2, r3, #2
 8006784:	441a      	add	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006790:	f7fe fa0c 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8006794:	4602      	mov	r2, r0
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009a      	lsls	r2, r3, #2
 800679e:	441a      	add	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067aa:	4a0c      	ldr	r2, [pc, #48]	; (80067dc <UART_SetConfig+0x434>)
 80067ac:	fba2 2303 	umull	r2, r3, r2, r3
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	2264      	movs	r2, #100	; 0x64
 80067b4:	fb02 f303 	mul.w	r3, r2, r3
 80067b8:	1aeb      	subs	r3, r5, r3
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	3332      	adds	r3, #50	; 0x32
 80067be:	4a07      	ldr	r2, [pc, #28]	; (80067dc <UART_SetConfig+0x434>)
 80067c0:	fba2 2303 	umull	r2, r3, r2, r3
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	f003 020f 	and.w	r2, r3, #15
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4422      	add	r2, r4
 80067d0:	609a      	str	r2, [r3, #8]
}
 80067d2:	e7ff      	b.n	80067d4 <UART_SetConfig+0x42c>
 80067d4:	bf00      	nop
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bdb0      	pop	{r4, r5, r7, pc}
 80067dc:	51eb851f 	.word	0x51eb851f

080067e0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b094      	sub	sp, #80	; 0x50
 80067e4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 80067e6:	2300      	movs	r3, #0
 80067e8:	60bb      	str	r3, [r7, #8]
 80067ea:	4b2a      	ldr	r3, [pc, #168]	; (8006894 <SystemClock_Config+0xb4>)
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	4a29      	ldr	r2, [pc, #164]	; (8006894 <SystemClock_Config+0xb4>)
 80067f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f4:	6413      	str	r3, [r2, #64]	; 0x40
 80067f6:	4b27      	ldr	r3, [pc, #156]	; (8006894 <SystemClock_Config+0xb4>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fe:	60bb      	str	r3, [r7, #8]
 8006800:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8006802:	2300      	movs	r3, #0
 8006804:	607b      	str	r3, [r7, #4]
 8006806:	4b24      	ldr	r3, [pc, #144]	; (8006898 <SystemClock_Config+0xb8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800680e:	4a22      	ldr	r2, [pc, #136]	; (8006898 <SystemClock_Config+0xb8>)
 8006810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	4b20      	ldr	r3, [pc, #128]	; (8006898 <SystemClock_Config+0xb8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800681e:	607b      	str	r3, [r7, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006822:	2302      	movs	r3, #2
 8006824:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006826:	2301      	movs	r3, #1
 8006828:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800682a:	2310      	movs	r3, #16
 800682c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800682e:	2302      	movs	r3, #2
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006832:	2300      	movs	r3, #0
 8006834:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 8006836:	2310      	movs	r3, #16
 8006838:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800683a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800683e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8006840:	2304      	movs	r3, #4
 8006842:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006844:	2307      	movs	r3, #7
 8006846:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006848:	f107 030c 	add.w	r3, r7, #12
 800684c:	4618      	mov	r0, r3
 800684e:	f7fd fdbb 	bl	80043c8 <HAL_RCC_OscConfig>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <SystemClock_Config+0x7e>
  {
    Error_Handler(0);
 8006858:	2000      	movs	r0, #0
 800685a:	f000 fc0b 	bl	8007074 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800685e:	230f      	movs	r3, #15
 8006860:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006862:	2302      	movs	r3, #2
 8006864:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006866:	2300      	movs	r3, #0
 8006868:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 800686a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800686e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8006870:	2300      	movs	r3, #0
 8006872:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006874:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006878:	2102      	movs	r1, #2
 800687a:	4618      	mov	r0, r3
 800687c:	f7fd ffe2 	bl	8004844 <HAL_RCC_ClockConfig>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <SystemClock_Config+0xac>
  {
    Error_Handler(1);
 8006886:	2001      	movs	r0, #1
 8006888:	f000 fbf4 	bl	8007074 <Error_Handler>
  }
}
 800688c:	bf00      	nop
 800688e:	3750      	adds	r7, #80	; 0x50
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	40023800 	.word	0x40023800
 8006898:	40007000 	.word	0x40007000

0800689c <NVIC_SystemReset>:
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80068a0:	f3bf 8f4f 	dsb	sy
}
 80068a4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80068a6:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <NVIC_SystemReset+0x28>)
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80068ae:	4905      	ldr	r1, [pc, #20]	; (80068c4 <NVIC_SystemReset+0x28>)
 80068b0:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <NVIC_SystemReset+0x2c>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80068b6:	f3bf 8f4f 	dsb	sy
}
 80068ba:	bf00      	nop
  __ASM volatile ("nop");
 80068bc:	bf00      	nop
}
 80068be:	bf00      	nop
    __NOP();
 80068c0:	e7fc      	b.n	80068bc <NVIC_SystemReset+0x20>
 80068c2:	bf00      	nop
 80068c4:	e000ed00 	.word	0xe000ed00
 80068c8:	05fa0004 	.word	0x05fa0004

080068cc <Delay_Pulse>:
				"CMP R0, #0\n\t"\
				"BNE 1b \n\t" : : [loops] "r" (16*us) : "memory"\
		);\
} while(0)

int Delay_Pulse(){
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
	return desired_pwm_period == UINT32_MAX;
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <Delay_Pulse+0x20>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	bf0c      	ite	eq
 80068da:	2301      	moveq	r3, #1
 80068dc:	2300      	movne	r3, #0
 80068de:	b2db      	uxtb	r3, r3
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	200005e0 	.word	0x200005e0

080068f0 <Main_StepClockHandler>:

/*
 * PWM pulse (step) interrupt
 */
void Main_StepClockHandler() {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
	/*
	 *  Stepper motor acceleration, speed, direction and position control developed by Ryan Nemiroff
	 */

	uint32_t desired_pwm_period_local = desired_pwm_period;
 80068f6:	4b0a      	ldr	r3, [pc, #40]	; (8006920 <Main_StepClockHandler+0x30>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	607b      	str	r3, [r7, #4]

	/*
	 * Add time reporting
	 */

	clock_int_time = DWT->CYCCNT;
 80068fc:	4b09      	ldr	r3, [pc, #36]	; (8006924 <Main_StepClockHandler+0x34>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4a09      	ldr	r2, [pc, #36]	; (8006928 <Main_StepClockHandler+0x38>)
 8006902:	6013      	str	r3, [r2, #0]

	if (desired_pwm_period_local != 0) {
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d005      	beq.n	8006916 <Main_StepClockHandler+0x26>
		L6474_Board_Pwm1SetPeriod(desired_pwm_period_local);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fc f90c 	bl	8002b28 <L6474_Board_Pwm1SetPeriod>
		current_pwm_period = desired_pwm_period_local;
 8006910:	4a06      	ldr	r2, [pc, #24]	; (800692c <Main_StepClockHandler+0x3c>)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6013      	str	r3, [r2, #0]
	}
}
 8006916:	bf00      	nop
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	200005e0 	.word	0x200005e0
 8006924:	e0001000 	.word	0xe0001000
 8006928:	200005d8 	.word	0x200005d8
 800692c:	200005e4 	.word	0x200005e4

08006930 <initialize>:
//uint8_t  LOOP_BACK_gpioState;
//uint32_t LOOP_BACK_L6474_Board_Pwm1Period;
//uint8_t  LOOP_BACK_break_Control_Loop;


void initialize(){
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
	/* Initialize reset state indicating that reset has occurred */

	reset_state = 1;
 8006934:	4bb0      	ldr	r3, [pc, #704]	; (8006bf8 <initialize+0x2c8>)
 8006936:	2201      	movs	r2, #1
 8006938:	601a      	str	r2, [r3, #0]

	/* Initialize and enable cycle counter */
	ITM->LAR = 0xC5ACCE55; 	// at address 0xE0001FB0
 800693a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800693e:	4aaf      	ldr	r2, [pc, #700]	; (8006bfc <initialize+0x2cc>)
 8006940:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // at address 0xE000EDFC, CoreDebug_DEMCR_TRCENA_Msk = 0x01000000
 8006944:	4bae      	ldr	r3, [pc, #696]	; (8006c00 <initialize+0x2d0>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	4aad      	ldr	r2, [pc, #692]	; (8006c00 <initialize+0x2d0>)
 800694a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800694e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= 1; 		// at address 0xE0001000
 8006950:	4bac      	ldr	r3, [pc, #688]	; (8006c04 <initialize+0x2d4>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4aab      	ldr	r2, [pc, #684]	; (8006c04 <initialize+0x2d4>)
 8006956:	f043 0301 	orr.w	r3, r3, #1
 800695a:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0; 		// at address 0xE0001004
 800695c:	4ba9      	ldr	r3, [pc, #676]	; (8006c04 <initialize+0x2d4>)
 800695e:	2200      	movs	r2, #0
 8006960:	605a      	str	r2, [r3, #4]

	/* initialize Integrator Mode time variables */
	apply_acc_start_time = 0;
 8006962:	4ba9      	ldr	r3, [pc, #676]	; (8006c08 <initialize+0x2d8>)
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]
	clock_int_time = 0;
 8006968:	4ba8      	ldr	r3, [pc, #672]	; (8006c0c <initialize+0x2dc>)
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
	clock_int_tick = 0;
 800696e:	4ba8      	ldr	r3, [pc, #672]	; (8006c10 <initialize+0x2e0>)
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]

	/* Initialize PWM period variables used by step interrupt */
	desired_pwm_period = 0;
 8006974:	4ba7      	ldr	r3, [pc, #668]	; (8006c14 <initialize+0x2e4>)
 8006976:	2200      	movs	r2, #0
 8006978:	601a      	str	r2, [r3, #0]
	current_pwm_period = 0;
 800697a:	4ba7      	ldr	r3, [pc, #668]	; (8006c18 <initialize+0x2e8>)
 800697c:	2200      	movs	r2, #0
 800697e:	601a      	str	r2, [r3, #0]
	target_velocity_prescaled = 0;
 8006980:	4ba6      	ldr	r3, [pc, #664]	; (8006c1c <initialize+0x2ec>)
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	601a      	str	r2, [r3, #0]
//	LOOP_BACK_gpioState=0;
//	LOOP_BACK_L6474_Board_Pwm1Period=0;
//	LOOP_BACK_break_Control_Loop = 0;

	/* Initialize default start mode and reporting mode */
	mode_index = 1;
 8006988:	4ba5      	ldr	r3, [pc, #660]	; (8006c20 <initialize+0x2f0>)
 800698a:	2201      	movs	r2, #1
 800698c:	601a      	str	r2, [r3, #0]
	report_mode = 1;
 800698e:	4ba5      	ldr	r3, [pc, #660]	; (8006c24 <initialize+0x2f4>)
 8006990:	2201      	movs	r2, #1
 8006992:	601a      	str	r2, [r3, #0]

	/*Initialize serial read variables */
	RxBuffer_ReadIdx = 0;
 8006994:	4ba4      	ldr	r3, [pc, #656]	; (8006c28 <initialize+0x2f8>)
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]
	RxBuffer_WriteIdx = 0;
 800699a:	4ba4      	ldr	r3, [pc, #656]	; (8006c2c <initialize+0x2fc>)
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]
	readBytes = 0;
 80069a0:	4ba3      	ldr	r3, [pc, #652]	; (8006c30 <initialize+0x300>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]


	/*Initialize rotor control variables */
	rotor_control_target_steps = 0;
 80069a6:	4ba3      	ldr	r3, [pc, #652]	; (8006c34 <initialize+0x304>)
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	601a      	str	r2, [r3, #0]
	rotor_control_target_steps_curr = 0;
 80069ae:	4ba2      	ldr	r3, [pc, #648]	; (8006c38 <initialize+0x308>)
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
	rotor_control_target_steps_prev = 0;
 80069b6:	4ba1      	ldr	r3, [pc, #644]	; (8006c3c <initialize+0x30c>)
 80069b8:	f04f 0200 	mov.w	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]

	/*Initialize rotor plant design transfer function computation variables */
	rotor_control_target_steps_filter_prev_2 = 0.0;
 80069be:	4ba0      	ldr	r3, [pc, #640]	; (8006c40 <initialize+0x310>)
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
	rotor_control_target_steps_filter_prev_prev_2 = 0.0;
 80069c6:	4b9f      	ldr	r3, [pc, #636]	; (8006c44 <initialize+0x314>)
 80069c8:	f04f 0200 	mov.w	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]
	rotor_control_target_steps_prev_prev = 0.0;
 80069ce:	4b9e      	ldr	r3, [pc, #632]	; (8006c48 <initialize+0x318>)
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]

	/* Initialize LQR integral control variables */
	current_error_rotor_integral = 0;
 80069d6:	4b9d      	ldr	r3, [pc, #628]	; (8006c4c <initialize+0x31c>)
 80069d8:	f04f 0200 	mov.w	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]

	/*Initialize rotor tracking signal variables */
	enable_rotor_chirp = 0;
 80069de:	4b9c      	ldr	r3, [pc, #624]	; (8006c50 <initialize+0x320>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	601a      	str	r2, [r3, #0]
	rotor_chirp_start_freq = ROTOR_CHIRP_START_FREQ;
 80069e4:	4b9b      	ldr	r3, [pc, #620]	; (8006c54 <initialize+0x324>)
 80069e6:	4a9c      	ldr	r2, [pc, #624]	; (8006c58 <initialize+0x328>)
 80069e8:	601a      	str	r2, [r3, #0]
	rotor_chirp_end_freq = ROTOR_CHIRP_END_FREQ;
 80069ea:	4b9c      	ldr	r3, [pc, #624]	; (8006c5c <initialize+0x32c>)
 80069ec:	4a9c      	ldr	r2, [pc, #624]	; (8006c60 <initialize+0x330>)
 80069ee:	601a      	str	r2, [r3, #0]
	rotor_chirp_period = ROTOR_CHIRP_PERIOD;
 80069f0:	4b9c      	ldr	r3, [pc, #624]	; (8006c64 <initialize+0x334>)
 80069f2:	4a9d      	ldr	r2, [pc, #628]	; (8006c68 <initialize+0x338>)
 80069f4:	601a      	str	r2, [r3, #0]
	enable_mod_sin_rotor_tracking = ENABLE_MOD_SIN_ROTOR_TRACKING;
 80069f6:	4b9d      	ldr	r3, [pc, #628]	; (8006c6c <initialize+0x33c>)
 80069f8:	2201      	movs	r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
	enable_rotor_position_step_response_cycle = ENABLE_ROTOR_POSITION_STEP_RESPONSE_CYCLE;
 80069fc:	4b9c      	ldr	r3, [pc, #624]	; (8006c70 <initialize+0x340>)
 80069fe:	2201      	movs	r2, #1
 8006a00:	601a      	str	r2, [r3, #0]
	disable_mod_sin_rotor_tracking = 0;
 8006a02:	4b9c      	ldr	r3, [pc, #624]	; (8006c74 <initialize+0x344>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	601a      	str	r2, [r3, #0]
	sine_drive_transition = 0;
 8006a08:	4b9b      	ldr	r3, [pc, #620]	; (8006c78 <initialize+0x348>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	601a      	str	r2, [r3, #0]
	mod_sin_amplitude = MOD_SIN_AMPLITUDE;
 8006a0e:	4b9b      	ldr	r3, [pc, #620]	; (8006c7c <initialize+0x34c>)
 8006a10:	4a9b      	ldr	r2, [pc, #620]	; (8006c80 <initialize+0x350>)
 8006a12:	601a      	str	r2, [r3, #0]
	rotor_control_sin_amplitude = MOD_SIN_AMPLITUDE;
 8006a14:	4b9b      	ldr	r3, [pc, #620]	; (8006c84 <initialize+0x354>)
 8006a16:	4a9a      	ldr	r2, [pc, #616]	; (8006c80 <initialize+0x350>)
 8006a18:	601a      	str	r2, [r3, #0]

	/*Initialize sensitivity function selection variables */
	enable_disturbance_rejection_step = 0;
 8006a1a:	4b9b      	ldr	r3, [pc, #620]	; (8006c88 <initialize+0x358>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]
	enable_noise_rejection_step = 0;
 8006a20:	4b9a      	ldr	r3, [pc, #616]	; (8006c8c <initialize+0x35c>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
	enable_sensitivity_fnc_step = 0;
 8006a26:	4b9a      	ldr	r3, [pc, #616]	; (8006c90 <initialize+0x360>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]
	enable_pendulum_position_impulse_response_cycle = 0;
 8006a2c:	4b99      	ldr	r3, [pc, #612]	; (8006c94 <initialize+0x364>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]

	/*Initialize user adjustment variables */
	step_size = 0;
 8006a32:	4b99      	ldr	r3, [pc, #612]	; (8006c98 <initialize+0x368>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]
	adjust_increment = 0.5;
 8006a38:	4b98      	ldr	r3, [pc, #608]	; (8006c9c <initialize+0x36c>)
 8006a3a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8006a3e:	601a      	str	r2, [r3, #0]

	/*Initialize adaptive mode state variables */
	mode_transition_state = 0;
 8006a40:	4b97      	ldr	r3, [pc, #604]	; (8006ca0 <initialize+0x370>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
	transition_to_adaptive_mode = 0;
 8006a46:	4b97      	ldr	r3, [pc, #604]	; (8006ca4 <initialize+0x374>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]

	/* STM32xx HAL library initialization */
	HAL_Init();
 8006a4c:	f7fc fdd0 	bl	80035f0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8006a50:	f7ff fec6 	bl	80067e0 <SystemClock_Config>

	/* Default select_suspended_mode */
	select_suspended_mode = ENABLE_SUSPENDED_PENDULUM_CONTROL;
 8006a54:	4b94      	ldr	r3, [pc, #592]	; (8006ca8 <initialize+0x378>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]

	//----- Initialize Motor Control Library
	/* Set the L6474 library to use 1 device */
	BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_L6474, 1);
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	f641 104a 	movw	r0, #6474	; 0x194a
 8006a60:	f7fc fd02 	bl	8003468 <BSP_MotorControl_SetNbDevices>
	/* Uncomment the call to BSP_MotorControl_Init below to initialize the      */
	/* device with the structure gL6474InitParams declared in the the main.c file */
	/* and comment the subsequent call having the NULL pointer                   */
	//BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474, NULL);

	BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6474, &gL6474InitParams);
 8006a64:	4991      	ldr	r1, [pc, #580]	; (8006cac <initialize+0x37c>)
 8006a66:	f641 104a 	movw	r0, #6474	; 0x194a
 8006a6a:	f7fc fac9 	bl	8003000 <BSP_MotorControl_Init>

	/* Initialize Timer and UART */
	MX_TIM3_Init();
 8006a6e:	f000 fa3b 	bl	8006ee8 <MX_TIM3_Init>

	/* Initialize Pendulum Angle Encoder offset */
	HAL_Delay(10);
 8006a72:	200a      	movs	r0, #10
 8006a74:	f7fc fe36 	bl	80036e4 <HAL_Delay>
	/* Initialize UART communication port */
	MX_USART2_UART_Init();
 8006a78:	f000 fa7e 	bl	8006f78 <MX_USART2_UART_Init>

	/* Motor Range Initialization */
	HAL_Delay(1);
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	f7fc fe31 	bl	80036e4 <HAL_Delay>
	BSP_MotorControl_SetMaxSpeed(0, MAX_SPEED_UPPER_INIT);
 8006a82:	f242 7110 	movw	r1, #10000	; 0x2710
 8006a86:	2000      	movs	r0, #0
 8006a88:	f7fc fc14 	bl	80032b4 <BSP_MotorControl_SetMaxSpeed>
	HAL_Delay(1);
 8006a8c:	2001      	movs	r0, #1
 8006a8e:	f7fc fe29 	bl	80036e4 <HAL_Delay>
	BSP_MotorControl_SetMinSpeed(0, MIN_SPEED_UPPER_INIT);
 8006a92:	f242 7110 	movw	r1, #10000	; 0x2710
 8006a96:	2000      	movs	r0, #0
 8006a98:	f7fc fc34 	bl	8003304 <BSP_MotorControl_SetMinSpeed>
	HAL_Delay(1);
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	f7fc fe21 	bl	80036e4 <HAL_Delay>
	BSP_MotorControl_SetMaxSpeed(0, MAX_SPEED_LOWER_INIT);
 8006aa2:	211e      	movs	r1, #30
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	f7fc fc05 	bl	80032b4 <BSP_MotorControl_SetMaxSpeed>
	HAL_Delay(1);
 8006aaa:	2001      	movs	r0, #1
 8006aac:	f7fc fe1a 	bl	80036e4 <HAL_Delay>
	BSP_MotorControl_SetMinSpeed(0, MIN_SPEED_LOWER_INIT);
 8006ab0:	211e      	movs	r1, #30
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	f7fc fc26 	bl	8003304 <BSP_MotorControl_SetMinSpeed>
	HAL_Delay(1);
 8006ab8:	2001      	movs	r0, #1
 8006aba:	f7fc fe13 	bl	80036e4 <HAL_Delay>
	BSP_MotorControl_SetAcceleration(0, MAX_ACCEL_UPPER_INIT);
 8006abe:	f242 7110 	movw	r1, #10000	; 0x2710
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f7fc fb84 	bl	80031d0 <BSP_MotorControl_SetAcceleration>
	HAL_Delay(1);
 8006ac8:	2001      	movs	r0, #1
 8006aca:	f7fc fe0b 	bl	80036e4 <HAL_Delay>
	BSP_MotorControl_SetDeceleration(0, MAX_DECEL_UPPER_INIT);
 8006ace:	f242 7110 	movw	r1, #10000	; 0x2710
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	f7fc fba4 	bl	8003220 <BSP_MotorControl_SetDeceleration>
	HAL_Delay(1);
 8006ad8:	2001      	movs	r0, #1
 8006ada:	f7fc fe03 	bl	80036e4 <HAL_Delay>

	/* Default Starting Control Configuration */
	max_accel = MAX_ACCEL;
 8006ade:	4b74      	ldr	r3, [pc, #464]	; (8006cb0 <initialize+0x380>)
 8006ae0:	f241 7270 	movw	r2, #6000	; 0x1770
 8006ae4:	801a      	strh	r2, [r3, #0]
	max_decel = MAX_DECEL;
 8006ae6:	4b73      	ldr	r3, [pc, #460]	; (8006cb4 <initialize+0x384>)
 8006ae8:	f241 7270 	movw	r2, #6000	; 0x1770
 8006aec:	801a      	strh	r2, [r3, #0]
	max_speed = MAX_SPEED_MODE_1;
 8006aee:	4b72      	ldr	r3, [pc, #456]	; (8006cb8 <initialize+0x388>)
 8006af0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006af4:	801a      	strh	r2, [r3, #0]
	min_speed = MIN_SPEED_MODE_1;
 8006af6:	4b71      	ldr	r3, [pc, #452]	; (8006cbc <initialize+0x38c>)
 8006af8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006afc:	801a      	strh	r2, [r3, #0]
	HAL_Delay(1);
 8006afe:	2001      	movs	r0, #1
 8006b00:	f7fc fdf0 	bl	80036e4 <HAL_Delay>
	BSP_MotorControl_SetMaxSpeed(0, max_speed);
 8006b04:	4b6c      	ldr	r3, [pc, #432]	; (8006cb8 <initialize+0x388>)
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	f7fc fbd2 	bl	80032b4 <BSP_MotorControl_SetMaxSpeed>
	HAL_Delay(1);
 8006b10:	2001      	movs	r0, #1
 8006b12:	f7fc fde7 	bl	80036e4 <HAL_Delay>
	BSP_MotorControl_SetMinSpeed(0, min_speed);
 8006b16:	4b69      	ldr	r3, [pc, #420]	; (8006cbc <initialize+0x38c>)
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	f7fc fbf1 	bl	8003304 <BSP_MotorControl_SetMinSpeed>
	HAL_Delay(1);
 8006b22:	2001      	movs	r0, #1
 8006b24:	f7fc fdde 	bl	80036e4 <HAL_Delay>
	BSP_MotorControl_SetAcceleration(0, max_accel);
 8006b28:	4b61      	ldr	r3, [pc, #388]	; (8006cb0 <initialize+0x380>)
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	2000      	movs	r0, #0
 8006b30:	f7fc fb4e 	bl	80031d0 <BSP_MotorControl_SetAcceleration>
	HAL_Delay(1);
 8006b34:	2001      	movs	r0, #1
 8006b36:	f7fc fdd5 	bl	80036e4 <HAL_Delay>
	BSP_MotorControl_SetDeceleration(0, max_decel);
 8006b3a:	4b5e      	ldr	r3, [pc, #376]	; (8006cb4 <initialize+0x384>)
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	2000      	movs	r0, #0
 8006b42:	f7fc fb6d 	bl	8003220 <BSP_MotorControl_SetDeceleration>
	HAL_Delay(1);
 8006b46:	2001      	movs	r0, #1
 8006b48:	f7fc fdcc 	bl	80036e4 <HAL_Delay>

	/* Default torque current */
	torq_current_val = MAX_TORQUE_CONFIG;
 8006b4c:	4b5c      	ldr	r3, [pc, #368]	; (8006cc0 <initialize+0x390>)
 8006b4e:	4a5d      	ldr	r2, [pc, #372]	; (8006cc4 <initialize+0x394>)
 8006b50:	601a      	str	r2, [r3, #0]
	L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 8006b52:	4b5b      	ldr	r3, [pc, #364]	; (8006cc0 <initialize+0x390>)
 8006b54:	edd3 7a00 	vldr	s15, [r3]
 8006b58:	eeb0 0a67 	vmov.f32	s0, s15
 8006b5c:	2109      	movs	r1, #9
 8006b5e:	2000      	movs	r0, #0
 8006b60:	f7fa fbf0 	bl	8001344 <L6474_SetAnalogValue>


	/* Enable State Feedback mode and Integral Action Compensator by default and set
	 * precompensation factor to unity
	 */
	enable_state_feedback = 1;
 8006b64:	4b58      	ldr	r3, [pc, #352]	; (8006cc8 <initialize+0x398>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
	integral_compensator_gain = 0;
 8006b6a:	4b58      	ldr	r3, [pc, #352]	; (8006ccc <initialize+0x39c>)
 8006b6c:	f04f 0200 	mov.w	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]
	feedforward_gain = 1;
 8006b72:	4b57      	ldr	r3, [pc, #348]	; (8006cd0 <initialize+0x3a0>)
 8006b74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006b78:	601a      	str	r2, [r3, #0]

	/* Disable adaptive_mode by default */
	enable_adaptive_mode = 0;
 8006b7a:	4b56      	ldr	r3, [pc, #344]	; (8006cd4 <initialize+0x3a4>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	601a      	str	r2, [r3, #0]

	/* DMA Buffer declarations */
	/* Start DMA just once because it's configured in "circular" mode */
	HAL_UART_Receive_DMA(&huart2, RxBuffer, UART_RX_BUFFER_SIZE);
 8006b80:	22c6      	movs	r2, #198	; 0xc6
 8006b82:	4955      	ldr	r1, [pc, #340]	; (8006cd8 <initialize+0x3a8>)
 8006b84:	4855      	ldr	r0, [pc, #340]	; (8006cdc <initialize+0x3ac>)
 8006b86:	f7ff fa67 	bl	8006058 <HAL_UART_Receive_DMA>

	/* Motor Interface and Encoder initialization */
	/* Attach the function MyFlagInterruptHandler (defined below) to the flag interrupt */
	BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8006b8a:	4855      	ldr	r0, [pc, #340]	; (8006ce0 <initialize+0x3b0>)
 8006b8c:	f7fc f9fc 	bl	8002f88 <BSP_MotorControl_AttachFlagInterrupt>

	/* Attach the function Error_Handler (defined below) to the error Handler*/
	BSP_MotorControl_AttachErrorHandler(Error_Handler);
 8006b90:	4854      	ldr	r0, [pc, #336]	; (8006ce4 <initialize+0x3b4>)
 8006b92:	f7fc f9db 	bl	8002f4c <BSP_MotorControl_AttachErrorHandler>

	/* Encoder initialization */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8006b96:	2118      	movs	r1, #24
 8006b98:	4853      	ldr	r0, [pc, #332]	; (8006ce8 <initialize+0x3b8>)
 8006b9a:	f7fe fcaf 	bl	80054fc <HAL_TIM_Encoder_Start>

//
//	/* Configure controller filter and sample time parameters */
//	*deriv_lp_corner_f = DERIVATIVE_LOW_PASS_CORNER_FREQUENCY;
//	*deriv_lp_corner_f_rotor = DERIVATIVE_LOW_PASS_CORNER_FREQUENCY_ROTOR;
	t_sample_cpu_cycles = (uint32_t) round(T_SAMPLE_DEFAULT * RCC_HCLK_FREQ);
 8006b9e:	4b53      	ldr	r3, [pc, #332]	; (8006cec <initialize+0x3bc>)
 8006ba0:	4a53      	ldr	r2, [pc, #332]	; (8006cf0 <initialize+0x3c0>)
 8006ba2:	601a      	str	r2, [r3, #0]
	Tsample = (float) t_sample_cpu_cycles / RCC_HCLK_FREQ;
 8006ba4:	4b51      	ldr	r3, [pc, #324]	; (8006cec <initialize+0x3bc>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	ee07 3a90 	vmov	s15, r3
 8006bac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bb0:	eddf 6a50 	vldr	s13, [pc, #320]	; 8006cf4 <initialize+0x3c4>
 8006bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bb8:	4b4f      	ldr	r3, [pc, #316]	; (8006cf8 <initialize+0x3c8>)
 8006bba:	edc3 7a00 	vstr	s15, [r3]
	*sample_period = Tsample;
 8006bbe:	4b4f      	ldr	r3, [pc, #316]	; (8006cfc <initialize+0x3cc>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a4d      	ldr	r2, [pc, #308]	; (8006cf8 <initialize+0x3c8>)
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	601a      	str	r2, [r3, #0]
	Tsample_rotor = Tsample;
 8006bc8:	4b4b      	ldr	r3, [pc, #300]	; (8006cf8 <initialize+0x3c8>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a4c      	ldr	r2, [pc, #304]	; (8006d00 <initialize+0x3d0>)
 8006bce:	6013      	str	r3, [r2, #0]
	*sample_period_rotor = Tsample_rotor;
 8006bd0:	4b4c      	ldr	r3, [pc, #304]	; (8006d04 <initialize+0x3d4>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a4a      	ldr	r2, [pc, #296]	; (8006d00 <initialize+0x3d0>)
 8006bd6:	6812      	ldr	r2, [r2, #0]
 8006bd8:	601a      	str	r2, [r3, #0]


	enable_adaptive_mode = ENABLE_ADAPTIVE_MODE;
 8006bda:	4b3e      	ldr	r3, [pc, #248]	; (8006cd4 <initialize+0x3a4>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]
	adaptive_threshold_low = ADAPTIVE_THRESHOLD_LOW;
 8006be0:	4b49      	ldr	r3, [pc, #292]	; (8006d08 <initialize+0x3d8>)
 8006be2:	4a4a      	ldr	r2, [pc, #296]	; (8006d0c <initialize+0x3dc>)
 8006be4:	601a      	str	r2, [r3, #0]
	adaptive_threshold_high = ADAPTIVE_THRESHOLD_HIGH;
 8006be6:	4b4a      	ldr	r3, [pc, #296]	; (8006d10 <initialize+0x3e0>)
 8006be8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006bec:	601a      	str	r2, [r3, #0]
	adaptive_state = ADAPTIVE_STATE;
 8006bee:	4b49      	ldr	r3, [pc, #292]	; (8006d14 <initialize+0x3e4>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	e090      	b.n	8006d18 <initialize+0x3e8>
 8006bf6:	bf00      	nop
 8006bf8:	2000453c 	.word	0x2000453c
 8006bfc:	c5acce55 	.word	0xc5acce55
 8006c00:	e000edf0 	.word	0xe000edf0
 8006c04:	e0001000 	.word	0xe0001000
 8006c08:	200005d4 	.word	0x200005d4
 8006c0c:	200005d8 	.word	0x200005d8
 8006c10:	200005dc 	.word	0x200005dc
 8006c14:	200005e0 	.word	0x200005e0
 8006c18:	200005e4 	.word	0x200005e4
 8006c1c:	200005e8 	.word	0x200005e8
 8006c20:	200044c4 	.word	0x200044c4
 8006c24:	200044c8 	.word	0x200044c8
 8006c28:	20004548 	.word	0x20004548
 8006c2c:	2000454c 	.word	0x2000454c
 8006c30:	20004550 	.word	0x20004550
 8006c34:	200008ac 	.word	0x200008ac
 8006c38:	200008b0 	.word	0x200008b0
 8006c3c:	200008b4 	.word	0x200008b4
 8006c40:	20000968 	.word	0x20000968
 8006c44:	20000970 	.word	0x20000970
 8006c48:	2000096c 	.word	0x2000096c
 8006c4c:	20000908 	.word	0x20000908
 8006c50:	20004300 	.word	0x20004300
 8006c54:	20004310 	.word	0x20004310
 8006c58:	3c23d70a 	.word	0x3c23d70a
 8006c5c:	20004314 	.word	0x20004314
 8006c60:	41700000 	.word	0x41700000
 8006c64:	20004318 	.word	0x20004318
 8006c68:	469c4000 	.word	0x469c4000
 8006c6c:	2000432c 	.word	0x2000432c
 8006c70:	20004330 	.word	0x20004330
 8006c74:	20004334 	.word	0x20004334
 8006c78:	20004338 	.word	0x20004338
 8006c7c:	2000433c 	.word	0x2000433c
 8006c80:	43960000 	.word	0x43960000
 8006c84:	20004340 	.word	0x20004340
 8006c88:	20004480 	.word	0x20004480
 8006c8c:	20004484 	.word	0x20004484
 8006c90:	2000448c 	.word	0x2000448c
 8006c94:	20004354 	.word	0x20004354
 8006c98:	200044bc 	.word	0x200044bc
 8006c9c:	200044c0 	.word	0x200044c0
 8006ca0:	200044e8 	.word	0x200044e8
 8006ca4:	200044ec 	.word	0x200044ec
 8006ca8:	200042dc 	.word	0x200042dc
 8006cac:	20000170 	.word	0x20000170
 8006cb0:	20004544 	.word	0x20004544
 8006cb4:	20004546 	.word	0x20004546
 8006cb8:	20004542 	.word	0x20004542
 8006cbc:	20004540 	.word	0x20004540
 8006cc0:	200042fc 	.word	0x200042fc
 8006cc4:	44480000 	.word	0x44480000
 8006cc8:	200008fc 	.word	0x200008fc
 8006ccc:	20000900 	.word	0x20000900
 8006cd0:	20000904 	.word	0x20000904
 8006cd4:	200042b8 	.word	0x200042b8
 8006cd8:	200004d0 	.word	0x200004d0
 8006cdc:	200003c8 	.word	0x200003c8
 8006ce0:	0800705d 	.word	0x0800705d
 8006ce4:	08007075 	.word	0x08007075
 8006ce8:	20000870 	.word	0x20000870
 8006cec:	20000374 	.word	0x20000374
 8006cf0:	00029040 	.word	0x00029040
 8006cf4:	4ca037a0 	.word	0x4ca037a0
 8006cf8:	20004528 	.word	0x20004528
 8006cfc:	200008e8 	.word	0x200008e8
 8006d00:	2000452c 	.word	0x2000452c
 8006d04:	200008ec 	.word	0x200008ec
 8006d08:	20004298 	.word	0x20004298
 8006d0c:	41f00000 	.word	0x41f00000
 8006d10:	2000429c 	.word	0x2000429c
 8006d14:	200042bc 	.word	0x200042bc
	adaptive_state_change = 0;
 8006d18:	4b04      	ldr	r3, [pc, #16]	; (8006d2c <initialize+0x3fc>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
	adaptive_dwell_period = ADAPTIVE_DWELL_PERIOD;
 8006d1e:	4b04      	ldr	r3, [pc, #16]	; (8006d30 <initialize+0x400>)
 8006d20:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006d24:	601a      	str	r2, [r3, #0]

}
 8006d26:	bf00      	nop
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	200042c0 	.word	0x200042c0
 8006d30:	200042b4 	.word	0x200042b4

08006d34 <initialize_main_loop>:
void initialize_main_loop(){
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0

	prev_state = STATE_INITIALIZATION;
 8006d38:	4b3d      	ldr	r3, [pc, #244]	; (8006e30 <initialize_main_loop+0xfc>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
	state  = STATE_INITIALIZATION;
 8006d3e:	4b3d      	ldr	r3, [pc, #244]	; (8006e34 <initialize_main_loop+0x100>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	701a      	strb	r2, [r3, #0]

	LOOP_BACK_rotor_control_target_steps = 0;
 8006d44:	4b3c      	ldr	r3, [pc, #240]	; (8006e38 <initialize_main_loop+0x104>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
	LOOP_BACK_L6474_Board_Pwm1Period = 0;
 8006d4a:	4b3c      	ldr	r3, [pc, #240]	; (8006e3c <initialize_main_loop+0x108>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
	LOOP_BACK_gpioState = 0;
 8006d50:	4b3b      	ldr	r3, [pc, #236]	; (8006e40 <initialize_main_loop+0x10c>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	701a      	strb	r2, [r3, #0]
	LOOP_BACK_break_Control_Loop = 0;
 8006d56:	4b3b      	ldr	r3, [pc, #236]	; (8006e44 <initialize_main_loop+0x110>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	701a      	strb	r2, [r3, #0]
	LOOP_BACK_state = 0;
 8006d5c:	4b3a      	ldr	r3, [pc, #232]	; (8006e48 <initialize_main_loop+0x114>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	701a      	strb	r2, [r3, #0]

	mode_interactive = 0;
 8006d62:	4b3a      	ldr	r3, [pc, #232]	; (8006e4c <initialize_main_loop+0x118>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]

	/* Start timer for configuration command read loop */
	tick_read_cycle_start = HAL_GetTick();
 8006d68:	f7fc fcb0 	bl	80036cc <HAL_GetTick>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	4a38      	ldr	r2, [pc, #224]	; (8006e50 <initialize_main_loop+0x11c>)
 8006d70:	6013      	str	r3, [r2, #0]
	/* Configuration command read loop */
	set_default_configurations();
 8006d72:	f000 f9cf 	bl	8007114 <set_default_configurations>

	/* Set Motor Speed Profile and torque current */
	BSP_MotorControl_SoftStop(0);
 8006d76:	2000      	movs	r0, #0
 8006d78:	f7fc faec 	bl	8003354 <BSP_MotorControl_SoftStop>
	BSP_MotorControl_WaitWhileActive(0);
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	f7fc fb2d 	bl	80033dc <BSP_MotorControl_WaitWhileActive>
	L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 8006d82:	4b34      	ldr	r3, [pc, #208]	; (8006e54 <initialize_main_loop+0x120>)
 8006d84:	edd3 7a00 	vldr	s15, [r3]
 8006d88:	eeb0 0a67 	vmov.f32	s0, s15
 8006d8c:	2109      	movs	r1, #9
 8006d8e:	2000      	movs	r0, #0
 8006d90:	f7fa fad8 	bl	8001344 <L6474_SetAnalogValue>
	BSP_MotorControl_SetMaxSpeed(0, max_speed);
 8006d94:	4b30      	ldr	r3, [pc, #192]	; (8006e58 <initialize_main_loop+0x124>)
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	f7fc fa8a 	bl	80032b4 <BSP_MotorControl_SetMaxSpeed>
	BSP_MotorControl_SetMinSpeed(0, min_speed);
 8006da0:	4b2e      	ldr	r3, [pc, #184]	; (8006e5c <initialize_main_loop+0x128>)
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	4619      	mov	r1, r3
 8006da6:	2000      	movs	r0, #0
 8006da8:	f7fc faac 	bl	8003304 <BSP_MotorControl_SetMinSpeed>
	BSP_MotorControl_SetAcceleration(0, MAX_ACCEL);
 8006dac:	f241 7170 	movw	r1, #6000	; 0x1770
 8006db0:	2000      	movs	r0, #0
 8006db2:	f7fc fa0d 	bl	80031d0 <BSP_MotorControl_SetAcceleration>
	BSP_MotorControl_SetDeceleration(0, MAX_DECEL);
 8006db6:	f241 7170 	movw	r1, #6000	; 0x1770
 8006dba:	2000      	movs	r0, #0
 8006dbc:	f7fc fa30 	bl	8003220 <BSP_MotorControl_SetDeceleration>
	 *
	 * *************************************************************************************************
	 */

	/* Setting enable_control_action enables control loop */
	enable_control_action = ENABLE_CONTROL_ACTION;
 8006dc0:	4b27      	ldr	r3, [pc, #156]	; (8006e60 <initialize_main_loop+0x12c>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]
	/*
	 * Set Motor Position Zero occuring only once after reset and suppressed thereafter
	 * to maintain angle calibration
	 */

	if (reset_state == 1){
 8006dc6:	4b27      	ldr	r3, [pc, #156]	; (8006e64 <initialize_main_loop+0x130>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d101      	bne.n	8006dd2 <initialize_main_loop+0x9e>
		rotor_position_set();
 8006dce:	f000 f95d 	bl	800708c <rotor_position_set>
	}

	//######## Jawad ************** Modification ########################################

	ret = rotor_position_read(&rotor_position_steps);
 8006dd2:	4825      	ldr	r0, [pc, #148]	; (8006e68 <initialize_main_loop+0x134>)
 8006dd4:	f000 f96b 	bl	80070ae <rotor_position_read>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	4a24      	ldr	r2, [pc, #144]	; (8006e6c <initialize_main_loop+0x138>)
 8006ddc:	6013      	str	r3, [r2, #0]
	 *
	 * A small stimulus is applied to ensure Pendulum will fall to Suspended orientation
	 * in the event that it may be finely balanced in the vertical position
	 *
	 */
	BSP_MotorControl_GoTo(0, 3);
 8006dde:	2103      	movs	r1, #3
 8006de0:	2000      	movs	r0, #0
 8006de2:	f7fc f98f 	bl	8003104 <BSP_MotorControl_GoTo>
	BSP_MotorControl_WaitWhileActive(0);
 8006de6:	2000      	movs	r0, #0
 8006de8:	f7fc faf8 	bl	80033dc <BSP_MotorControl_WaitWhileActive>
	HAL_Delay(150);
 8006dec:	2096      	movs	r0, #150	; 0x96
 8006dee:	f7fc fc79 	bl	80036e4 <HAL_Delay>
	BSP_MotorControl_GoTo(0, -3);
 8006df2:	f06f 0102 	mvn.w	r1, #2
 8006df6:	2000      	movs	r0, #0
 8006df8:	f7fc f984 	bl	8003104 <BSP_MotorControl_GoTo>
	BSP_MotorControl_WaitWhileActive(0);
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	f7fc faed 	bl	80033dc <BSP_MotorControl_WaitWhileActive>
	HAL_Delay(150);
 8006e02:	2096      	movs	r0, #150	; 0x96
 8006e04:	f7fc fc6e 	bl	80036e4 <HAL_Delay>
	BSP_MotorControl_GoTo(0, 3);
 8006e08:	2103      	movs	r1, #3
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	f7fc f97a 	bl	8003104 <BSP_MotorControl_GoTo>
	BSP_MotorControl_WaitWhileActive(0);
 8006e10:	2000      	movs	r0, #0
 8006e12:	f7fc fae3 	bl	80033dc <BSP_MotorControl_WaitWhileActive>
	HAL_Delay(150);
 8006e16:	2096      	movs	r0, #150	; 0x96
 8006e18:	f7fc fc64 	bl	80036e4 <HAL_Delay>
	BSP_MotorControl_GoTo(0, 0);
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	2000      	movs	r0, #0
 8006e20:	f7fc f970 	bl	8003104 <BSP_MotorControl_GoTo>
	BSP_MotorControl_WaitWhileActive(0);
 8006e24:	2000      	movs	r0, #0
 8006e26:	f7fc fad9 	bl	80033dc <BSP_MotorControl_WaitWhileActive>

}
 8006e2a:	bf00      	nop
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	200005d0 	.word	0x200005d0
 8006e34:	200005d1 	.word	0x200005d1
 8006e38:	20000598 	.word	0x20000598
 8006e3c:	2000059c 	.word	0x2000059c
 8006e40:	200005a0 	.word	0x200005a0
 8006e44:	200005a1 	.word	0x200005a1
 8006e48:	200005a2 	.word	0x200005a2
 8006e4c:	200044d8 	.word	0x200044d8
 8006e50:	20004504 	.word	0x20004504
 8006e54:	200042fc 	.word	0x200042fc
 8006e58:	20004542 	.word	0x20004542
 8006e5c:	20004540 	.word	0x20004540
 8006e60:	20000378 	.word	0x20000378
 8006e64:	2000453c 	.word	0x2000453c
 8006e68:	20000910 	.word	0x20000910
 8006e6c:	200008d4 	.word	0x200008d4

08006e70 <main>:

int main(void) {
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
		 * data entry by Serial Interface
		 *
		 */


	initialize();
 8006e74:	f7ff fd5c 	bl	8006930 <initialize>

	while (1) {

		initialize_main_loop();
 8006e78:	f7ff ff5c 	bl	8006d34 <initialize_main_loop>
		 *
		 * Control Loop Start
		 *
		 * *************************************************************************************************
		 */
		Send_Output_Response();
 8006e7c:	f000 f9a2 	bl	80071c4 <Send_Output_Response>
		while (enable_control_action == 1) {
 8006e80:	e006      	b.n	8006e90 <main+0x20>

			//Check if a break loop command was received. if Yes, break
			if( Process_Input_Requests() == 0)
 8006e82:	f000 fc3f 	bl	8007704 <Process_Input_Requests>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d006      	beq.n	8006e9a <main+0x2a>
				break;

			Send_Output_Response( );
 8006e8c:	f000 f99a 	bl	80071c4 <Send_Output_Response>
		while (enable_control_action == 1) {
 8006e90:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <main+0x64>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d0f4      	beq.n	8006e82 <main+0x12>
 8006e98:	e000      	b.n	8006e9c <main+0x2c>
				break;
 8006e9a:	bf00      	nop

		/*
		 * Control System Exit Loop
		 */
		if (ACCEL_CONTROL == 1) {
			desired_pwm_period = 0;
 8006e9c:	4b0e      	ldr	r3, [pc, #56]	; (8006ed8 <main+0x68>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]
			current_pwm_period = 0;
 8006ea2:	4b0e      	ldr	r3, [pc, #56]	; (8006edc <main+0x6c>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
		}

		/*
		 * Restore rotor position at low speed profile
		 */
		ret = rotor_position_read(&rotor_position_steps);
 8006ea8:	480d      	ldr	r0, [pc, #52]	; (8006ee0 <main+0x70>)
 8006eaa:	f000 f900 	bl	80070ae <rotor_position_read>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	4a0c      	ldr	r2, [pc, #48]	; (8006ee4 <main+0x74>)
 8006eb2:	6013      	str	r3, [r2, #0]
		BSP_MotorControl_GoTo(0, 0);
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	f7fc f924 	bl	8003104 <BSP_MotorControl_GoTo>
		BSP_MotorControl_SoftStop(0);
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	f7fc fa49 	bl	8003354 <BSP_MotorControl_SoftStop>

		/*
		 * Terminate motor control
		 */

		ret = rotor_position_read(&rotor_position_steps);
 8006ec2:	4807      	ldr	r0, [pc, #28]	; (8006ee0 <main+0x70>)
 8006ec4:	f000 f8f3 	bl	80070ae <rotor_position_read>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	4a06      	ldr	r2, [pc, #24]	; (8006ee4 <main+0x74>)
 8006ecc:	6013      	str	r3, [r2, #0]

		/*
		 * System software reset
		 */

		NVIC_SystemReset();
 8006ece:	f7ff fce5 	bl	800689c <NVIC_SystemReset>
	while (1) {
 8006ed2:	e7d1      	b.n	8006e78 <main+0x8>
 8006ed4:	20000378 	.word	0x20000378
 8006ed8:	200005e0 	.word	0x200005e0
 8006edc:	200005e4 	.word	0x200005e4
 8006ee0:	20000910 	.word	0x20000910
 8006ee4:	200008d4 	.word	0x200008d4

08006ee8 <MX_TIM3_Init>:
	}
}


/* TIM3 init function */
void MX_TIM3_Init(void) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08c      	sub	sp, #48	; 0x30
 8006eec:	af00      	add	r7, sp, #0

	TIM_Encoder_InitTypeDef sConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim3.Instance = TIM3;
 8006eee:	4b20      	ldr	r3, [pc, #128]	; (8006f70 <MX_TIM3_Init+0x88>)
 8006ef0:	4a20      	ldr	r2, [pc, #128]	; (8006f74 <MX_TIM3_Init+0x8c>)
 8006ef2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8006ef4:	4b1e      	ldr	r3, [pc, #120]	; (8006f70 <MX_TIM3_Init+0x88>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006efa:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <MX_TIM3_Init+0x88>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8006f00:	4b1b      	ldr	r3, [pc, #108]	; (8006f70 <MX_TIM3_Init+0x88>)
 8006f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f06:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f08:	4b19      	ldr	r3, [pc, #100]	; (8006f70 <MX_TIM3_Init+0x88>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	611a      	str	r2, [r3, #16]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006f12:	2300      	movs	r3, #0
 8006f14:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006f16:	2301      	movs	r3, #1
 8006f18:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006f22:	2300      	movs	r3, #0
 8006f24:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006f26:	2301      	movs	r3, #1
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8006f32:	f107 030c 	add.w	r3, r7, #12
 8006f36:	4619      	mov	r1, r3
 8006f38:	480d      	ldr	r0, [pc, #52]	; (8006f70 <MX_TIM3_Init+0x88>)
 8006f3a:	f7fe fa49 	bl	80053d0 <HAL_TIM_Encoder_Init>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <MX_TIM3_Init+0x62>
		Error_Handler(0);
 8006f44:	2000      	movs	r0, #0
 8006f46:	f000 f895 	bl	8007074 <Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8006f52:	1d3b      	adds	r3, r7, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4806      	ldr	r0, [pc, #24]	; (8006f70 <MX_TIM3_Init+0x88>)
 8006f58:	f7fe ff3e 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <MX_TIM3_Init+0x80>
			!= HAL_OK) {
		Error_Handler(0);
 8006f62:	2000      	movs	r0, #0
 8006f64:	f000 f886 	bl	8007074 <Error_Handler>
	}

}
 8006f68:	bf00      	nop
 8006f6a:	3730      	adds	r7, #48	; 0x30
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20000870 	.word	0x20000870
 8006f74:	40000400 	.word	0x40000400

08006f78 <MX_USART2_UART_Init>:

/* USART2 init function */

void MX_USART2_UART_Init(void) {
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE()
 8006f7e:	2300      	movs	r3, #0
 8006f80:	607b      	str	r3, [r7, #4]
 8006f82:	4b31      	ldr	r3, [pc, #196]	; (8007048 <MX_USART2_UART_Init+0xd0>)
 8006f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f86:	4a30      	ldr	r2, [pc, #192]	; (8007048 <MX_USART2_UART_Init+0xd0>)
 8006f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f8e:	4b2e      	ldr	r3, [pc, #184]	; (8007048 <MX_USART2_UART_Init+0xd0>)
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f96:	607b      	str	r3, [r7, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
							;

	huart2.Instance = USART2;
 8006f9a:	4b2c      	ldr	r3, [pc, #176]	; (800704c <MX_USART2_UART_Init+0xd4>)
 8006f9c:	4a2c      	ldr	r2, [pc, #176]	; (8007050 <MX_USART2_UART_Init+0xd8>)
 8006f9e:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = SAMPLE_BAUD_RATE;
 8006fa0:	4b2a      	ldr	r3, [pc, #168]	; (800704c <MX_USART2_UART_Init+0xd4>)
 8006fa2:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8006fa6:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006fa8:	4b28      	ldr	r3, [pc, #160]	; (800704c <MX_USART2_UART_Init+0xd4>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8006fae:	4b27      	ldr	r3, [pc, #156]	; (800704c <MX_USART2_UART_Init+0xd4>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8006fb4:	4b25      	ldr	r3, [pc, #148]	; (800704c <MX_USART2_UART_Init+0xd4>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8006fba:	4b24      	ldr	r3, [pc, #144]	; (800704c <MX_USART2_UART_Init+0xd4>)
 8006fbc:	220c      	movs	r2, #12
 8006fbe:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fc0:	4b22      	ldr	r3, [pc, #136]	; (800704c <MX_USART2_UART_Init+0xd4>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fc6:	4b21      	ldr	r3, [pc, #132]	; (800704c <MX_USART2_UART_Init+0xd4>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8006fcc:	481f      	ldr	r0, [pc, #124]	; (800704c <MX_USART2_UART_Init+0xd4>)
 8006fce:	f7fe ff5c 	bl	8005e8a <HAL_UART_Init>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <MX_USART2_UART_Init+0x66>
		Error_Handler(0);
 8006fd8:	2000      	movs	r0, #0
 8006fda:	f000 f84b 	bl	8007074 <Error_Handler>
	}

	/* USART2 RX DMA Init */
	hdma_usart2_rx.Instance = DMA1_Stream5;
 8006fde:	4b1d      	ldr	r3, [pc, #116]	; (8007054 <MX_USART2_UART_Init+0xdc>)
 8006fe0:	4a1d      	ldr	r2, [pc, #116]	; (8007058 <MX_USART2_UART_Init+0xe0>)
 8006fe2:	601a      	str	r2, [r3, #0]
	hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006fe4:	4b1b      	ldr	r3, [pc, #108]	; (8007054 <MX_USART2_UART_Init+0xdc>)
 8006fe6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006fea:	605a      	str	r2, [r3, #4]
	hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006fec:	4b19      	ldr	r3, [pc, #100]	; (8007054 <MX_USART2_UART_Init+0xdc>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	609a      	str	r2, [r3, #8]
	hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ff2:	4b18      	ldr	r3, [pc, #96]	; (8007054 <MX_USART2_UART_Init+0xdc>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	60da      	str	r2, [r3, #12]
	hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006ff8:	4b16      	ldr	r3, [pc, #88]	; (8007054 <MX_USART2_UART_Init+0xdc>)
 8006ffa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ffe:	611a      	str	r2, [r3, #16]
	hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007000:	4b14      	ldr	r3, [pc, #80]	; (8007054 <MX_USART2_UART_Init+0xdc>)
 8007002:	2200      	movs	r2, #0
 8007004:	615a      	str	r2, [r3, #20]
	hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007006:	4b13      	ldr	r3, [pc, #76]	; (8007054 <MX_USART2_UART_Init+0xdc>)
 8007008:	2200      	movs	r2, #0
 800700a:	619a      	str	r2, [r3, #24]
	hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800700c:	4b11      	ldr	r3, [pc, #68]	; (8007054 <MX_USART2_UART_Init+0xdc>)
 800700e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007012:	61da      	str	r2, [r3, #28]
	hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007014:	4b0f      	ldr	r3, [pc, #60]	; (8007054 <MX_USART2_UART_Init+0xdc>)
 8007016:	2200      	movs	r2, #0
 8007018:	621a      	str	r2, [r3, #32]
	hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800701a:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <MX_USART2_UART_Init+0xdc>)
 800701c:	2200      	movs	r2, #0
 800701e:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK) {
 8007020:	480c      	ldr	r0, [pc, #48]	; (8007054 <MX_USART2_UART_Init+0xdc>)
 8007022:	f7fc fc91 	bl	8003948 <HAL_DMA_Init>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <MX_USART2_UART_Init+0xba>
		Error_Handler(0);
 800702c:	2000      	movs	r0, #0
 800702e:	f000 f821 	bl	8007074 <Error_Handler>
	}
	__HAL_LINKDMA(&huart2, hdmarx, hdma_usart2_rx);
 8007032:	4b06      	ldr	r3, [pc, #24]	; (800704c <MX_USART2_UART_Init+0xd4>)
 8007034:	4a07      	ldr	r2, [pc, #28]	; (8007054 <MX_USART2_UART_Init+0xdc>)
 8007036:	635a      	str	r2, [r3, #52]	; 0x34
 8007038:	4b06      	ldr	r3, [pc, #24]	; (8007054 <MX_USART2_UART_Init+0xdc>)
 800703a:	4a04      	ldr	r2, [pc, #16]	; (800704c <MX_USART2_UART_Init+0xd4>)
 800703c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800703e:	bf00      	nop
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	40023800 	.word	0x40023800
 800704c:	200003c8 	.word	0x200003c8
 8007050:	40004400 	.word	0x40004400
 8007054:	20000408 	.word	0x20000408
 8007058:	40026088 	.word	0x40026088

0800705c <MyFlagInterruptHandler>:
/**
 * @brief  This function is the User handler for the flag interrupt
 * @param  None
 * @retval None
 */
void MyFlagInterruptHandler(void) {
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
	/* Get the value of the status register via the L6474 command GET_STATUS */
	uint16_t statusRegister = BSP_MotorControl_CmdGetStatus(0);
 8007062:	2000      	movs	r0, #0
 8007064:	f7fc f9da 	bl	800341c <BSP_MotorControl_CmdGetStatus>
 8007068:	4603      	mov	r3, r0
 800706a:	80fb      	strh	r3, [r7, #6]
	if ((statusRegister & L6474_STATUS_OCD) == 0) {
		//overcurrent detection
		// Action to be customized
	}

}
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <Error_Handler>:
/**
 * @brief  This function is executed in event of error occurrence.
 * @param  error number of the error event
 * @retval None
 */
void Error_Handler(uint16_t error) {
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	80fb      	strh	r3, [r7, #6]
	/* Backup error number */
	gLastError = error;
 800707e:	4a02      	ldr	r2, [pc, #8]	; (8007088 <Error_Handler+0x14>)
 8007080:	88fb      	ldrh	r3, [r7, #6]
 8007082:	8013      	strh	r3, [r2, #0]

	/* Infinite loop */
	while (1) {
 8007084:	e7fe      	b.n	8007084 <Error_Handler+0x10>
 8007086:	bf00      	nop
 8007088:	200003c4 	.word	0x200003c4

0800708c <rotor_position_set>:

/*
 * Rotor position set
 */

void rotor_position_set(void) {
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
	uint32_t rotor_position_u;
	rotor_position_u = BSP_MotorControl_GetPosition(0);
 8007092:	2000      	movs	r0, #0
 8007094:	f7fc f812 	bl	80030bc <BSP_MotorControl_GetPosition>
 8007098:	4603      	mov	r3, r0
 800709a:	607b      	str	r3, [r7, #4]
	BSP_MotorControl_SetHome(0, rotor_position_u);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4619      	mov	r1, r3
 80070a0:	2000      	movs	r0, #0
 80070a2:	f7fc f8e5 	bl	8003270 <BSP_MotorControl_SetHome>
}
 80070a6:	bf00      	nop
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <rotor_position_read>:
 *
 * Returns error if overflow detected
 *
 */

__INLINE int rotor_position_read(int *rotor_position) {
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
	uint32_t rotor_position_u;
	int range_error;
	rotor_position_u = BSP_MotorControl_GetPosition(0);
 80070b6:	2000      	movs	r0, #0
 80070b8:	f7fc f800 	bl	80030bc <BSP_MotorControl_GetPosition>
 80070bc:	4603      	mov	r3, r0
 80070be:	60bb      	str	r3, [r7, #8]

	if (rotor_position_u > 2147483648) {
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070c6:	d903      	bls.n	80070d0 <rotor_position_read+0x22>
		*rotor_position = (int) (rotor_position_u) - 4294967296;
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	e002      	b.n	80070d6 <rotor_position_read+0x28>
	} else {
		*rotor_position = (int) (rotor_position_u);
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	601a      	str	r2, [r3, #0]
	}
	range_error = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
	if (*rotor_position <= -2147483648) {
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070e2:	d106      	bne.n	80070f2 <rotor_position_read+0x44>
		range_error = -1;
 80070e4:	f04f 33ff 	mov.w	r3, #4294967295
 80070e8:	60fb      	str	r3, [r7, #12]
		*rotor_position = -2147483648;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070f0:	601a      	str	r2, [r3, #0]
	}
	if (*rotor_position >= 2147483647) {
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d105      	bne.n	800710a <rotor_position_read+0x5c>
		range_error = 1;
 80070fe:	2301      	movs	r3, #1
 8007100:	60fb      	str	r3, [r7, #12]
		*rotor_position = 2147483647;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007108:	601a      	str	r2, [r3, #0]
	}
	return range_error;
 800710a:	68fb      	ldr	r3, [r7, #12]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <set_default_configurations>:

/*
 * Configure system based on user selection
 */

void set_default_configurations(void){
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0

	enable_rotor_tracking_comb_signal = 0;
 8007118:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <set_default_configurations+0x70>)
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]
	rotor_track_comb_amplitude = 0;
 800711e:	4b1a      	ldr	r3, [pc, #104]	; (8007188 <set_default_configurations+0x74>)
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	601a      	str	r2, [r3, #0]
	enable_disturbance_rejection_step = 0;
 8007126:	4b19      	ldr	r3, [pc, #100]	; (800718c <set_default_configurations+0x78>)
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]
	enable_noise_rejection_step = 0;
 800712c:	4b18      	ldr	r3, [pc, #96]	; (8007190 <set_default_configurations+0x7c>)
 800712e:	2200      	movs	r2, #0
 8007130:	601a      	str	r2, [r3, #0]
	enable_sensitivity_fnc_step = 0;
 8007132:	4b18      	ldr	r3, [pc, #96]	; (8007194 <set_default_configurations+0x80>)
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]

//############## Jawad Modification  -->> ###############################
	enable_state_feedback = 0;
 8007138:	4b17      	ldr	r3, [pc, #92]	; (8007198 <set_default_configurations+0x84>)
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]
	select_suspended_mode = 0;
 800713e:	4b17      	ldr	r3, [pc, #92]	; (800719c <set_default_configurations+0x88>)
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]

	enable_rotor_plant_design = 0;
 8007144:	4b16      	ldr	r3, [pc, #88]	; (80071a0 <set_default_configurations+0x8c>)
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]
	enable_rotor_plant_gain_design = 0;
 800714a:	4b16      	ldr	r3, [pc, #88]	; (80071a4 <set_default_configurations+0x90>)
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]
	enable_rotor_position_step_response_cycle = 0;
 8007150:	4b15      	ldr	r3, [pc, #84]	; (80071a8 <set_default_configurations+0x94>)
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
	enable_pendulum_position_impulse_response_cycle = 0;
 8007156:	4b15      	ldr	r3, [pc, #84]	; (80071ac <set_default_configurations+0x98>)
 8007158:	2200      	movs	r2, #0
 800715a:	601a      	str	r2, [r3, #0]
	enable_rotor_chirp = 0;
 800715c:	4b14      	ldr	r3, [pc, #80]	; (80071b0 <set_default_configurations+0x9c>)
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]
	enable_mod_sin_rotor_tracking = 1;
 8007162:	4b14      	ldr	r3, [pc, #80]	; (80071b4 <set_default_configurations+0xa0>)
 8007164:	2201      	movs	r2, #1
 8007166:	601a      	str	r2, [r3, #0]
	enable_angle_cal = 1;
 8007168:	4b13      	ldr	r3, [pc, #76]	; (80071b8 <set_default_configurations+0xa4>)
 800716a:	2201      	movs	r2, #1
 800716c:	601a      	str	r2, [r3, #0]
	enable_swing_up = 1;
 800716e:	4b13      	ldr	r3, [pc, #76]	; (80071bc <set_default_configurations+0xa8>)
 8007170:	2201      	movs	r2, #1
 8007172:	601a      	str	r2, [r3, #0]
	L6474_SetAnalogValue(0, L6474_TVAL, TORQ_CURRENT_DEFAULT);
 8007174:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80071c0 <set_default_configurations+0xac>
 8007178:	2109      	movs	r1, #9
 800717a:	2000      	movs	r0, #0
 800717c:	f7fa f8e2 	bl	8001344 <L6474_SetAnalogValue>
	return;
 8007180:	bf00      	nop
//#######################################################################

}
 8007182:	bd80      	pop	{r7, pc}
 8007184:	20004470 	.word	0x20004470
 8007188:	2000447c 	.word	0x2000447c
 800718c:	20004480 	.word	0x20004480
 8007190:	20004484 	.word	0x20004484
 8007194:	2000448c 	.word	0x2000448c
 8007198:	200008fc 	.word	0x200008fc
 800719c:	200042dc 	.word	0x200042dc
 80071a0:	20000948 	.word	0x20000948
 80071a4:	2000094c 	.word	0x2000094c
 80071a8:	20004330 	.word	0x20004330
 80071ac:	20004354 	.word	0x20004354
 80071b0:	20004300 	.word	0x20004300
 80071b4:	2000432c 	.word	0x2000432c
 80071b8:	200009b8 	.word	0x200009b8
 80071bc:	20004234 	.word	0x20004234
 80071c0:	44480000 	.word	0x44480000

080071c4 <Send_Output_Response>:

/*
 *Jawad Modification ======== ########################
 * Read input frame and decode it
 */
void Send_Output_Response(  ){
 80071c4:	b598      	push	{r3, r4, r7, lr}
 80071c6:	af00      	add	r7, sp, #0
	ret = rotor_position_read(&rotor_position_steps);
 80071c8:	4815      	ldr	r0, [pc, #84]	; (8007220 <Send_Output_Response+0x5c>)
 80071ca:	f7ff ff70 	bl	80070ae <rotor_position_read>
 80071ce:	4603      	mov	r3, r0
 80071d0:	4a14      	ldr	r2, [pc, #80]	; (8007224 <Send_Output_Response+0x60>)
 80071d2:	6013      	str	r3, [r2, #0]
//	tx_frame.LOOP_BACK_break_Control_Loop = 0;
//	tx_frame.LOOP_BACK_state = 4;

//#################VALIDATION ###########################

	tx_frame.positionRotor = rotor_position_steps;
 80071d4:	4b12      	ldr	r3, [pc, #72]	; (8007220 <Send_Output_Response+0x5c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a13      	ldr	r2, [pc, #76]	; (8007228 <Send_Output_Response+0x64>)
 80071da:	6013      	str	r3, [r2, #0]
	tx_frame.encoder_counter =  __HAL_TIM_GET_COUNTER( (TIM_HandleTypeDef*) &htim3);
 80071dc:	4b13      	ldr	r3, [pc, #76]	; (800722c <Send_Output_Response+0x68>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e2:	4a11      	ldr	r2, [pc, #68]	; (8007228 <Send_Output_Response+0x64>)
 80071e4:	6053      	str	r3, [r2, #4]
	tx_frame.Pwm1Counter = L6474_Board_Pwm1GetCounter();
 80071e6:	f7fb fc93 	bl	8002b10 <L6474_Board_Pwm1GetCounter>
 80071ea:	4603      	mov	r3, r0
 80071ec:	4a0e      	ldr	r2, [pc, #56]	; (8007228 <Send_Output_Response+0x64>)
 80071ee:	6093      	str	r3, [r2, #8]
//	tx_frame.LOOP_BACK_gpioState = LOOP_BACK_gpioState;
//	tx_frame.LOOP_BACK_L6474_Board_Pwm1Period = LOOP_BACK_L6474_Board_Pwm1Period;
//	tx_frame.LOOP_BACK_break_Control_Loop = LOOP_BACK_break_Control_Loop;
//	tx_frame.LOOP_BACK_state = LOOP_BACK_state;

	memcpy(msg_cmd, &SYNC_BYTES, sizeof(SYNC_BYTES) );
 80071f0:	4a0f      	ldr	r2, [pc, #60]	; (8007230 <Send_Output_Response+0x6c>)
 80071f2:	4b10      	ldr	r3, [pc, #64]	; (8007234 <Send_Output_Response+0x70>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6013      	str	r3, [r2, #0]
	memcpy(msg_cmd+sizeof(SYNC_BYTES), &tx_frame, DataFrameSend_SIZE );
 80071f8:	4a0f      	ldr	r2, [pc, #60]	; (8007238 <Send_Output_Response+0x74>)
 80071fa:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <Send_Output_Response+0x64>)
 80071fc:	4614      	mov	r4, r2
 80071fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007200:	6020      	str	r0, [r4, #0]
 8007202:	6061      	str	r1, [r4, #4]
 8007204:	60a2      	str	r2, [r4, #8]

	ret = HAL_UART_Transmit(&huart2, (uint8_t*) msg_cmd, DataFrameSend_SIZE+sizeof(SYNC_BYTES), HAL_MAX_DELAY);
 8007206:	f04f 33ff 	mov.w	r3, #4294967295
 800720a:	2210      	movs	r2, #16
 800720c:	4908      	ldr	r1, [pc, #32]	; (8007230 <Send_Output_Response+0x6c>)
 800720e:	480b      	ldr	r0, [pc, #44]	; (800723c <Send_Output_Response+0x78>)
 8007210:	f7fe fe88 	bl	8005f24 <HAL_UART_Transmit>
 8007214:	4603      	mov	r3, r0
 8007216:	461a      	mov	r2, r3
 8007218:	4b02      	ldr	r3, [pc, #8]	; (8007224 <Send_Output_Response+0x60>)
 800721a:	601a      	str	r2, [r3, #0]

}
 800721c:	bf00      	nop
 800721e:	bd98      	pop	{r3, r4, r7, pc}
 8007220:	20000910 	.word	0x20000910
 8007224:	200008d4 	.word	0x200008d4
 8007228:	200005a8 	.word	0x200005a8
 800722c:	20000870 	.word	0x20000870
 8007230:	200005c0 	.word	0x200005c0
 8007234:	08007ce8 	.word	0x08007ce8
 8007238:	200005c4 	.word	0x200005c4
 800723c:	200003c8 	.word	0x200003c8

08007240 <STATE_Pendulum_Stablisation_Postprocessing>:


void STATE_Pendulum_Stablisation_Postprocessing(){
 8007240:	b580      	push	{r7, lr}
 8007242:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8007244:	2064      	movs	r0, #100	; 0x64
 8007246:	f7fc fa4d 	bl	80036e4 <HAL_Delay>

		/* Initialize control system variables */

		cycle_count = CYCLE_LIMIT;
 800724a:	4b97      	ldr	r3, [pc, #604]	; (80074a8 <STATE_Pendulum_Stablisation_Postprocessing+0x268>)
 800724c:	4a97      	ldr	r2, [pc, #604]	; (80074ac <STATE_Pendulum_Stablisation_Postprocessing+0x26c>)
 800724e:	601a      	str	r2, [r3, #0]
		i = 0;
 8007250:	4b97      	ldr	r3, [pc, #604]	; (80074b0 <STATE_Pendulum_Stablisation_Postprocessing+0x270>)
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
		rotor_position_steps = 0;
 8007256:	4b97      	ldr	r3, [pc, #604]	; (80074b4 <STATE_Pendulum_Stablisation_Postprocessing+0x274>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]
		rotor_position_steps_prev = 0;
 800725c:	4b96      	ldr	r3, [pc, #600]	; (80074b8 <STATE_Pendulum_Stablisation_Postprocessing+0x278>)
 800725e:	f04f 0200 	mov.w	r2, #0
 8007262:	601a      	str	r2, [r3, #0]
		rotor_position_filter_steps = 0;
 8007264:	4b95      	ldr	r3, [pc, #596]	; (80074bc <STATE_Pendulum_Stablisation_Postprocessing+0x27c>)
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	601a      	str	r2, [r3, #0]
		rotor_position_filter_steps_prev = 0;
 800726c:	4b94      	ldr	r3, [pc, #592]	; (80074c0 <STATE_Pendulum_Stablisation_Postprocessing+0x280>)
 800726e:	f04f 0200 	mov.w	r2, #0
 8007272:	601a      	str	r2, [r3, #0]
		rotor_position_command_steps = 0;
 8007274:	4b93      	ldr	r3, [pc, #588]	; (80074c4 <STATE_Pendulum_Stablisation_Postprocessing+0x284>)
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	601a      	str	r2, [r3, #0]
		rotor_position_diff = 0;
 800727c:	4b92      	ldr	r3, [pc, #584]	; (80074c8 <STATE_Pendulum_Stablisation_Postprocessing+0x288>)
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	601a      	str	r2, [r3, #0]
		rotor_position_diff_prev = 0;
 8007284:	4b91      	ldr	r3, [pc, #580]	; (80074cc <STATE_Pendulum_Stablisation_Postprocessing+0x28c>)
 8007286:	f04f 0200 	mov.w	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
		rotor_position_diff_filter = 0;
 800728c:	4b90      	ldr	r3, [pc, #576]	; (80074d0 <STATE_Pendulum_Stablisation_Postprocessing+0x290>)
 800728e:	f04f 0200 	mov.w	r2, #0
 8007292:	601a      	str	r2, [r3, #0]
		rotor_position_diff_filter_prev = 0;
 8007294:	4b8f      	ldr	r3, [pc, #572]	; (80074d4 <STATE_Pendulum_Stablisation_Postprocessing+0x294>)
 8007296:	f04f 0200 	mov.w	r2, #0
 800729a:	601a      	str	r2, [r3, #0]
		rotor_position_step_polarity = 1;
 800729c:	4b8e      	ldr	r3, [pc, #568]	; (80074d8 <STATE_Pendulum_Stablisation_Postprocessing+0x298>)
 800729e:	2201      	movs	r2, #1
 80072a0:	601a      	str	r2, [r3, #0]
		encoder_angle_slope_corr_steps = 0;
 80072a2:	4b8e      	ldr	r3, [pc, #568]	; (80074dc <STATE_Pendulum_Stablisation_Postprocessing+0x29c>)
 80072a4:	f04f 0200 	mov.w	r2, #0
 80072a8:	601a      	str	r2, [r3, #0]
		rotor_sine_drive = 0;
 80072aa:	4b8d      	ldr	r3, [pc, #564]	; (80074e0 <STATE_Pendulum_Stablisation_Postprocessing+0x2a0>)
 80072ac:	f04f 0200 	mov.w	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]
		sine_drive_transition = 0;
 80072b2:	4b8c      	ldr	r3, [pc, #560]	; (80074e4 <STATE_Pendulum_Stablisation_Postprocessing+0x2a4>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]
		rotor_mod_control = 1.0;
 80072b8:	4b8b      	ldr	r3, [pc, #556]	; (80074e8 <STATE_Pendulum_Stablisation_Postprocessing+0x2a8>)
 80072ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80072be:	601a      	str	r2, [r3, #0]
		enable_adaptive_mode = 0;
 80072c0:	4b8a      	ldr	r3, [pc, #552]	; (80074ec <STATE_Pendulum_Stablisation_Postprocessing+0x2ac>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
		tick_cycle_start = HAL_GetTick();
 80072c6:	f7fc fa01 	bl	80036cc <HAL_GetTick>
 80072ca:	4603      	mov	r3, r0
 80072cc:	4a88      	ldr	r2, [pc, #544]	; (80074f0 <STATE_Pendulum_Stablisation_Postprocessing+0x2b0>)
 80072ce:	6013      	str	r3, [r2, #0]
		tick_cycle_previous = tick_cycle_start;
 80072d0:	4b87      	ldr	r3, [pc, #540]	; (80074f0 <STATE_Pendulum_Stablisation_Postprocessing+0x2b0>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a87      	ldr	r2, [pc, #540]	; (80074f4 <STATE_Pendulum_Stablisation_Postprocessing+0x2b4>)
 80072d6:	6013      	str	r3, [r2, #0]
		tick_cycle_current =  tick_cycle_start;
 80072d8:	4b85      	ldr	r3, [pc, #532]	; (80074f0 <STATE_Pendulum_Stablisation_Postprocessing+0x2b0>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a86      	ldr	r2, [pc, #536]	; (80074f8 <STATE_Pendulum_Stablisation_Postprocessing+0x2b8>)
 80072de:	6013      	str	r3, [r2, #0]
		enable_cycle_delay_warning = ENABLE_CYCLE_DELAY_WARNING;
 80072e0:	4b86      	ldr	r3, [pc, #536]	; (80074fc <STATE_Pendulum_Stablisation_Postprocessing+0x2bc>)
 80072e2:	2201      	movs	r2, #1
 80072e4:	601a      	str	r2, [r3, #0]
		chirp_cycle = 0;
 80072e6:	4b86      	ldr	r3, [pc, #536]	; (8007500 <STATE_Pendulum_Stablisation_Postprocessing+0x2c0>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
		chirp_dwell_cycle = 0;
 80072ec:	4b85      	ldr	r3, [pc, #532]	; (8007504 <STATE_Pendulum_Stablisation_Postprocessing+0x2c4>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
		pendulum_position_command_steps = 0;
 80072f2:	4b85      	ldr	r3, [pc, #532]	; (8007508 <STATE_Pendulum_Stablisation_Postprocessing+0x2c8>)
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]
		impulse_start_index = 0;
 80072fa:	4b84      	ldr	r3, [pc, #528]	; (800750c <STATE_Pendulum_Stablisation_Postprocessing+0x2cc>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	601a      	str	r2, [r3, #0]
		mode_transition_state = 0;
 8007300:	4b83      	ldr	r3, [pc, #524]	; (8007510 <STATE_Pendulum_Stablisation_Postprocessing+0x2d0>)
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]
		transition_to_adaptive_mode = 0;
 8007306:	4b83      	ldr	r3, [pc, #524]	; (8007514 <STATE_Pendulum_Stablisation_Postprocessing+0x2d4>)
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]
		error_sum_prev = 0;
 800730c:	4b82      	ldr	r3, [pc, #520]	; (8007518 <STATE_Pendulum_Stablisation_Postprocessing+0x2d8>)
 800730e:	f04f 0200 	mov.w	r2, #0
 8007312:	601a      	str	r2, [r3, #0]
		error_sum_filter_prev = 0;
 8007314:	4b81      	ldr	r3, [pc, #516]	; (800751c <STATE_Pendulum_Stablisation_Postprocessing+0x2dc>)
 8007316:	f04f 0200 	mov.w	r2, #0
 800731a:	601a      	str	r2, [r3, #0]
		adaptive_state = 4;
 800731c:	4b80      	ldr	r3, [pc, #512]	; (8007520 <STATE_Pendulum_Stablisation_Postprocessing+0x2e0>)
 800731e:	2204      	movs	r2, #4
 8007320:	601a      	str	r2, [r3, #0]
		rotor_control_target_steps_prev = 0;
 8007322:	4b80      	ldr	r3, [pc, #512]	; (8007524 <STATE_Pendulum_Stablisation_Postprocessing+0x2e4>)
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
		rotor_position_command_steps_prev = 0;
 800732a:	4b7f      	ldr	r3, [pc, #508]	; (8007528 <STATE_Pendulum_Stablisation_Postprocessing+0x2e8>)
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	601a      	str	r2, [r3, #0]
		rotor_position_command_steps_pf_prev = 0;
 8007332:	4b7e      	ldr	r3, [pc, #504]	; (800752c <STATE_Pendulum_Stablisation_Postprocessing+0x2ec>)
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	601a      	str	r2, [r3, #0]
		enable_high_speed_sampling = ENABLE_HIGH_SPEED_SAMPLING_MODE;
 800733a:	4b7d      	ldr	r3, [pc, #500]	; (8007530 <STATE_Pendulum_Stablisation_Postprocessing+0x2f0>)
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
		slope_prev = 0;
 8007340:	4b7c      	ldr	r3, [pc, #496]	; (8007534 <STATE_Pendulum_Stablisation_Postprocessing+0x2f4>)
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
		rotor_track_comb_command = 0;
 8007346:	4b7c      	ldr	r3, [pc, #496]	; (8007538 <STATE_Pendulum_Stablisation_Postprocessing+0x2f8>)
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	601a      	str	r2, [r3, #0]
		noise_rej_signal_prev = 0;
 800734e:	4b7b      	ldr	r3, [pc, #492]	; (800753c <STATE_Pendulum_Stablisation_Postprocessing+0x2fc>)
 8007350:	f04f 0200 	mov.w	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
		noise_rej_signal_filter_prev = 0;
 8007356:	4b7a      	ldr	r3, [pc, #488]	; (8007540 <STATE_Pendulum_Stablisation_Postprocessing+0x300>)
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	601a      	str	r2, [r3, #0]
		current_cpu_cycle = 0;
 800735e:	4b79      	ldr	r3, [pc, #484]	; (8007544 <STATE_Pendulum_Stablisation_Postprocessing+0x304>)
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
		speed_scale = DATA_REPORT_SPEED_SCALE;
 8007364:	4b78      	ldr	r3, [pc, #480]	; (8007548 <STATE_Pendulum_Stablisation_Postprocessing+0x308>)
 8007366:	2214      	movs	r2, #20
 8007368:	601a      	str	r2, [r3, #0]
		speed_governor = 0;
 800736a:	4b78      	ldr	r3, [pc, #480]	; (800754c <STATE_Pendulum_Stablisation_Postprocessing+0x30c>)
 800736c:	2200      	movs	r2, #0
 800736e:	601a      	str	r2, [r3, #0]
		encoder_position_offset = 0;
 8007370:	4b77      	ldr	r3, [pc, #476]	; (8007550 <STATE_Pendulum_Stablisation_Postprocessing+0x310>)
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	601a      	str	r2, [r3, #0]
		encoder_position_offset_zero = 0;
 8007378:	4b76      	ldr	r3, [pc, #472]	; (8007554 <STATE_Pendulum_Stablisation_Postprocessing+0x314>)
 800737a:	f04f 0200 	mov.w	r2, #0
 800737e:	601a      	str	r2, [r3, #0]

		for (m = 0; m < ANGLE_CAL_OFFSET_STEP_COUNT + 1; m++){
 8007380:	4b75      	ldr	r3, [pc, #468]	; (8007558 <STATE_Pendulum_Stablisation_Postprocessing+0x318>)
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	e00a      	b.n	800739e <STATE_Pendulum_Stablisation_Postprocessing+0x15e>
			offset_angle[m] = 0;
 8007388:	4b73      	ldr	r3, [pc, #460]	; (8007558 <STATE_Pendulum_Stablisation_Postprocessing+0x318>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a73      	ldr	r2, [pc, #460]	; (800755c <STATE_Pendulum_Stablisation_Postprocessing+0x31c>)
 800738e:	2100      	movs	r1, #0
 8007390:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (m = 0; m < ANGLE_CAL_OFFSET_STEP_COUNT + 1; m++){
 8007394:	4b70      	ldr	r3, [pc, #448]	; (8007558 <STATE_Pendulum_Stablisation_Postprocessing+0x318>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3301      	adds	r3, #1
 800739a:	4a6f      	ldr	r2, [pc, #444]	; (8007558 <STATE_Pendulum_Stablisation_Postprocessing+0x318>)
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	4b6e      	ldr	r3, [pc, #440]	; (8007558 <STATE_Pendulum_Stablisation_Postprocessing+0x318>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f240 7209 	movw	r2, #1801	; 0x709
 80073a6:	4293      	cmp	r3, r2
 80073a8:	ddee      	ble.n	8007388 <STATE_Pendulum_Stablisation_Postprocessing+0x148>
		}

		/* Initialize UART receive system */
		__HAL_DMA_RESET_HANDLE_STATE(&hdma_usart2_rx);
 80073aa:	4b6d      	ldr	r3, [pc, #436]	; (8007560 <STATE_Pendulum_Stablisation_Postprocessing+0x320>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		 * restored after Swing Up completion or after Angle Calibration
		 * completion
		 */

		/* Initial control state parameter storage */
		init_enable_state_feedback = enable_state_feedback;
 80073b2:	4b6c      	ldr	r3, [pc, #432]	; (8007564 <STATE_Pendulum_Stablisation_Postprocessing+0x324>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a6c      	ldr	r2, [pc, #432]	; (8007568 <STATE_Pendulum_Stablisation_Postprocessing+0x328>)
 80073b8:	6013      	str	r3, [r2, #0]
		init_integral_compensator_gain = integral_compensator_gain;
 80073ba:	4b6c      	ldr	r3, [pc, #432]	; (800756c <STATE_Pendulum_Stablisation_Postprocessing+0x32c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a6c      	ldr	r2, [pc, #432]	; (8007570 <STATE_Pendulum_Stablisation_Postprocessing+0x330>)
 80073c0:	6013      	str	r3, [r2, #0]
		init_feedforward_gain = feedforward_gain;
 80073c2:	4b6c      	ldr	r3, [pc, #432]	; (8007574 <STATE_Pendulum_Stablisation_Postprocessing+0x334>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a6c      	ldr	r2, [pc, #432]	; (8007578 <STATE_Pendulum_Stablisation_Postprocessing+0x338>)
 80073c8:	6013      	str	r3, [r2, #0]
		init_enable_state_feedback = enable_state_feedback;
 80073ca:	4b66      	ldr	r3, [pc, #408]	; (8007564 <STATE_Pendulum_Stablisation_Postprocessing+0x324>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a66      	ldr	r2, [pc, #408]	; (8007568 <STATE_Pendulum_Stablisation_Postprocessing+0x328>)
 80073d0:	6013      	str	r3, [r2, #0]
		init_enable_disturbance_rejection_step = enable_disturbance_rejection_step;
 80073d2:	4b6a      	ldr	r3, [pc, #424]	; (800757c <STATE_Pendulum_Stablisation_Postprocessing+0x33c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a6a      	ldr	r2, [pc, #424]	; (8007580 <STATE_Pendulum_Stablisation_Postprocessing+0x340>)
 80073d8:	6013      	str	r3, [r2, #0]
		init_enable_sensitivity_fnc_step = enable_sensitivity_fnc_step;
 80073da:	4b6a      	ldr	r3, [pc, #424]	; (8007584 <STATE_Pendulum_Stablisation_Postprocessing+0x344>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a6a      	ldr	r2, [pc, #424]	; (8007588 <STATE_Pendulum_Stablisation_Postprocessing+0x348>)
 80073e0:	6013      	str	r3, [r2, #0]
		init_enable_noise_rejection_step = enable_noise_rejection_step;
 80073e2:	4b6a      	ldr	r3, [pc, #424]	; (800758c <STATE_Pendulum_Stablisation_Postprocessing+0x34c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a6a      	ldr	r2, [pc, #424]	; (8007590 <STATE_Pendulum_Stablisation_Postprocessing+0x350>)
 80073e8:	6013      	str	r3, [r2, #0]
		init_enable_rotor_plant_design = enable_rotor_plant_design;
 80073ea:	4b6a      	ldr	r3, [pc, #424]	; (8007594 <STATE_Pendulum_Stablisation_Postprocessing+0x354>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a6a      	ldr	r2, [pc, #424]	; (8007598 <STATE_Pendulum_Stablisation_Postprocessing+0x358>)
 80073f0:	6013      	str	r3, [r2, #0]
		init_enable_rotor_plant_gain_design = enable_rotor_plant_gain_design;
 80073f2:	4b6a      	ldr	r3, [pc, #424]	; (800759c <STATE_Pendulum_Stablisation_Postprocessing+0x35c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a6a      	ldr	r2, [pc, #424]	; (80075a0 <STATE_Pendulum_Stablisation_Postprocessing+0x360>)
 80073f8:	6013      	str	r3, [r2, #0]

		if(select_suspended_mode == 1){
 80073fa:	4b6a      	ldr	r3, [pc, #424]	; (80075a4 <STATE_Pendulum_Stablisation_Postprocessing+0x364>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d103      	bne.n	800740a <STATE_Pendulum_Stablisation_Postprocessing+0x1ca>
			load_disturbance_sensitivity_scale = 1.0;
 8007402:	4b69      	ldr	r3, [pc, #420]	; (80075a8 <STATE_Pendulum_Stablisation_Postprocessing+0x368>)
 8007404:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007408:	601a      	str	r2, [r3, #0]
		}
		if(select_suspended_mode == 0){
 800740a:	4b66      	ldr	r3, [pc, #408]	; (80075a4 <STATE_Pendulum_Stablisation_Postprocessing+0x364>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d102      	bne.n	8007418 <STATE_Pendulum_Stablisation_Postprocessing+0x1d8>
			load_disturbance_sensitivity_scale = LOAD_DISTURBANCE_SENSITIVITY_SCALE;
 8007412:	4b65      	ldr	r3, [pc, #404]	; (80075a8 <STATE_Pendulum_Stablisation_Postprocessing+0x368>)
 8007414:	4a65      	ldr	r2, [pc, #404]	; (80075ac <STATE_Pendulum_Stablisation_Postprocessing+0x36c>)
 8007416:	601a      	str	r2, [r3, #0]
		 * https://github.com/OevreFlataeker/steval_edukit_swingup
		 *
		 */


		if (enable_swing_up == 1 && select_suspended_mode == 0){
 8007418:	4b65      	ldr	r3, [pc, #404]	; (80075b0 <STATE_Pendulum_Stablisation_Postprocessing+0x370>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d140      	bne.n	80074a2 <STATE_Pendulum_Stablisation_Postprocessing+0x262>
 8007420:	4b60      	ldr	r3, [pc, #384]	; (80075a4 <STATE_Pendulum_Stablisation_Postprocessing+0x364>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d13c      	bne.n	80074a2 <STATE_Pendulum_Stablisation_Postprocessing+0x262>

			/*
			 * Apply controller parameters for initial operation at completion of
			 * Swing Up
			 */
			enable_state_feedback = 0;
 8007428:	4b4e      	ldr	r3, [pc, #312]	; (8007564 <STATE_Pendulum_Stablisation_Postprocessing+0x324>)
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
			integral_compensator_gain = 0;
 800742e:	4b4f      	ldr	r3, [pc, #316]	; (800756c <STATE_Pendulum_Stablisation_Postprocessing+0x32c>)
 8007430:	f04f 0200 	mov.w	r2, #0
 8007434:	601a      	str	r2, [r3, #0]
			feedforward_gain = 1;
 8007436:	4b4f      	ldr	r3, [pc, #316]	; (8007574 <STATE_Pendulum_Stablisation_Postprocessing+0x334>)
 8007438:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800743c:	601a      	str	r2, [r3, #0]
			rotor_position_command_steps = 0;
 800743e:	4b21      	ldr	r3, [pc, #132]	; (80074c4 <STATE_Pendulum_Stablisation_Postprocessing+0x284>)
 8007440:	f04f 0200 	mov.w	r2, #0
 8007444:	601a      	str	r2, [r3, #0]
			enable_state_feedback = 0;
 8007446:	4b47      	ldr	r3, [pc, #284]	; (8007564 <STATE_Pendulum_Stablisation_Postprocessing+0x324>)
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]
			enable_disturbance_rejection_step = 0;
 800744c:	4b4b      	ldr	r3, [pc, #300]	; (800757c <STATE_Pendulum_Stablisation_Postprocessing+0x33c>)
 800744e:	2200      	movs	r2, #0
 8007450:	601a      	str	r2, [r3, #0]
			enable_sensitivity_fnc_step = 0;
 8007452:	4b4c      	ldr	r3, [pc, #304]	; (8007584 <STATE_Pendulum_Stablisation_Postprocessing+0x344>)
 8007454:	2200      	movs	r2, #0
 8007456:	601a      	str	r2, [r3, #0]
			enable_noise_rejection_step = 0;
 8007458:	4b4c      	ldr	r3, [pc, #304]	; (800758c <STATE_Pendulum_Stablisation_Postprocessing+0x34c>)
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
			enable_rotor_plant_design = 0;
 800745e:	4b4d      	ldr	r3, [pc, #308]	; (8007594 <STATE_Pendulum_Stablisation_Postprocessing+0x354>)
 8007460:	2200      	movs	r2, #0
 8007462:	601a      	str	r2, [r3, #0]
			enable_rotor_plant_gain_design = 0;
 8007464:	4b4d      	ldr	r3, [pc, #308]	; (800759c <STATE_Pendulum_Stablisation_Postprocessing+0x35c>)
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]

			/* Set Torque Current value to 800 mA (normal operation will revert to 400 mA */
			torq_current_val = MAX_TORQUE_SWING_UP;
 800746a:	4b52      	ldr	r3, [pc, #328]	; (80075b4 <STATE_Pendulum_Stablisation_Postprocessing+0x374>)
 800746c:	4a52      	ldr	r2, [pc, #328]	; (80075b8 <STATE_Pendulum_Stablisation_Postprocessing+0x378>)
 800746e:	601a      	str	r2, [r3, #0]
			L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 8007470:	4b50      	ldr	r3, [pc, #320]	; (80075b4 <STATE_Pendulum_Stablisation_Postprocessing+0x374>)
 8007472:	edd3 7a00 	vldr	s15, [r3]
 8007476:	eeb0 0a67 	vmov.f32	s0, s15
 800747a:	2109      	movs	r1, #9
 800747c:	2000      	movs	r0, #0
 800747e:	f7f9 ff61 	bl	8001344 <L6474_SetAnalogValue>

			//******Pendulum Swing Up Starting

			/* Initialize position and motion variables */
			/* Select initial amplitude for rotor impulse */
			stage_amp = STAGE_0_AMP;
 8007482:	4b4e      	ldr	r3, [pc, #312]	; (80075bc <STATE_Pendulum_Stablisation_Postprocessing+0x37c>)
 8007484:	22c8      	movs	r2, #200	; 0xc8
 8007486:	601a      	str	r2, [r3, #0]


			/* Initiate first swing */
			swing_up_direction = FORWARD;
 8007488:	4b4d      	ldr	r3, [pc, #308]	; (80075c0 <STATE_Pendulum_Stablisation_Postprocessing+0x380>)
 800748a:	2201      	movs	r2, #1
 800748c:	701a      	strb	r2, [r3, #0]
			BSP_MotorControl_Move(0, swing_up_direction, 150);
 800748e:	4b4c      	ldr	r3, [pc, #304]	; (80075c0 <STATE_Pendulum_Stablisation_Postprocessing+0x380>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2296      	movs	r2, #150	; 0x96
 8007494:	4619      	mov	r1, r3
 8007496:	2000      	movs	r0, #0
 8007498:	f7fb fe76 	bl	8003188 <BSP_MotorControl_Move>
			BSP_MotorControl_WaitWhileActive(0);
 800749c:	2000      	movs	r0, #0
 800749e:	f7fb ff9d 	bl	80033dc <BSP_MotorControl_WaitWhileActive>

		}

}
 80074a2:	bf00      	nop
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	200008c0 	.word	0x200008c0
 80074ac:	000186a0 	.word	0x000186a0
 80074b0:	200008c4 	.word	0x200008c4
 80074b4:	20000910 	.word	0x20000910
 80074b8:	20000924 	.word	0x20000924
 80074bc:	20000928 	.word	0x20000928
 80074c0:	2000092c 	.word	0x2000092c
 80074c4:	20000914 	.word	0x20000914
 80074c8:	20000930 	.word	0x20000930
 80074cc:	20000934 	.word	0x20000934
 80074d0:	20000938 	.word	0x20000938
 80074d4:	2000093c 	.word	0x2000093c
 80074d8:	200042c8 	.word	0x200042c8
 80074dc:	20004290 	.word	0x20004290
 80074e0:	20004344 	.word	0x20004344
 80074e4:	20004338 	.word	0x20004338
 80074e8:	2000434c 	.word	0x2000434c
 80074ec:	200042b8 	.word	0x200042b8
 80074f0:	200044fc 	.word	0x200044fc
 80074f4:	200044f8 	.word	0x200044f8
 80074f8:	200044f4 	.word	0x200044f4
 80074fc:	200008f8 	.word	0x200008f8
 8007500:	20004304 	.word	0x20004304
 8007504:	20004308 	.word	0x20004308
 8007508:	20004328 	.word	0x20004328
 800750c:	200042cc 	.word	0x200042cc
 8007510:	200044e8 	.word	0x200044e8
 8007514:	200044ec 	.word	0x200044ec
 8007518:	200042a0 	.word	0x200042a0
 800751c:	200042a8 	.word	0x200042a8
 8007520:	200042bc 	.word	0x200042bc
 8007524:	200008b4 	.word	0x200008b4
 8007528:	200042c4 	.word	0x200042c4
 800752c:	2000091c 	.word	0x2000091c
 8007530:	20004538 	.word	0x20004538
 8007534:	2000428c 	.word	0x2000428c
 8007538:	20004478 	.word	0x20004478
 800753c:	2000449c 	.word	0x2000449c
 8007540:	200044a0 	.word	0x200044a0
 8007544:	20004510 	.word	0x20004510
 8007548:	200044cc 	.word	0x200044cc
 800754c:	200044d0 	.word	0x200044d0
 8007550:	200009b0 	.word	0x200009b0
 8007554:	200009b4 	.word	0x200009b4
 8007558:	200008d0 	.word	0x200008d0
 800755c:	200009d4 	.word	0x200009d4
 8007560:	20000408 	.word	0x20000408
 8007564:	200008fc 	.word	0x200008fc
 8007568:	20004268 	.word	0x20004268
 800756c:	20000900 	.word	0x20000900
 8007570:	2000426c 	.word	0x2000426c
 8007574:	20000904 	.word	0x20000904
 8007578:	20004270 	.word	0x20004270
 800757c:	20004480 	.word	0x20004480
 8007580:	20004274 	.word	0x20004274
 8007584:	2000448c 	.word	0x2000448c
 8007588:	20004278 	.word	0x20004278
 800758c:	20004484 	.word	0x20004484
 8007590:	2000427c 	.word	0x2000427c
 8007594:	20000948 	.word	0x20000948
 8007598:	20004280 	.word	0x20004280
 800759c:	2000094c 	.word	0x2000094c
 80075a0:	20004284 	.word	0x20004284
 80075a4:	200042dc 	.word	0x200042dc
 80075a8:	20004490 	.word	0x20004490
 80075ac:	41a00000 	.word	0x41a00000
 80075b0:	20004234 	.word	0x20004234
 80075b4:	200042fc 	.word	0x200042fc
 80075b8:	44480000 	.word	0x44480000
 80075bc:	2000424c 	.word	0x2000424c
 80075c0:	2000423c 	.word	0x2000423c

080075c4 <STATE_Swinp_Up_Postprocessing>:
void STATE_Swinp_Up_Postprocessing(){
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0

	enable_control_action = 1;
 80075c8:	4b13      	ldr	r3, [pc, #76]	; (8007618 <STATE_Swinp_Up_Postprocessing+0x54>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	601a      	str	r2, [r3, #0]

	if (ACCEL_CONTROL == 1) {
		BSP_MotorControl_HardStop(0);
 80075ce:	2000      	movs	r0, #0
 80075d0:	f7fb fdba 	bl	8003148 <BSP_MotorControl_HardStop>
		L6474_CmdEnable(0);
 80075d4:	2000      	movs	r0, #0
 80075d6:	f7f8 ffa9 	bl	800052c <L6474_CmdEnable>
		target_velocity_prescaled = 0;
 80075da:	4b10      	ldr	r3, [pc, #64]	; (800761c <STATE_Swinp_Up_Postprocessing+0x58>)
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]
		L6474_Board_SetDirectionGpio(0, BACKWARD);
 80075e2:	2100      	movs	r1, #0
 80075e4:	2000      	movs	r0, #0
 80075e6:	f7fb fbd7 	bl	8002d98 <L6474_Board_SetDirectionGpio>
	}

	/*
	 * Set Torque Current to value for normal operation
	 */
	torq_current_val = MAX_TORQUE_CONFIG;
 80075ea:	4b0d      	ldr	r3, [pc, #52]	; (8007620 <STATE_Swinp_Up_Postprocessing+0x5c>)
 80075ec:	4a0d      	ldr	r2, [pc, #52]	; (8007624 <STATE_Swinp_Up_Postprocessing+0x60>)
 80075ee:	601a      	str	r2, [r3, #0]
	L6474_SetAnalogValue(0, L6474_TVAL, torq_current_val);
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <STATE_Swinp_Up_Postprocessing+0x5c>)
 80075f2:	edd3 7a00 	vldr	s15, [r3]
 80075f6:	eeb0 0a67 	vmov.f32	s0, s15
 80075fa:	2109      	movs	r1, #9
 80075fc:	2000      	movs	r0, #0
 80075fe:	f7f9 fea1 	bl	8001344 <L6474_SetAnalogValue>

	target_cpu_cycle = DWT->CYCCNT;
 8007602:	4b09      	ldr	r3, [pc, #36]	; (8007628 <STATE_Swinp_Up_Postprocessing+0x64>)
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	4a09      	ldr	r2, [pc, #36]	; (800762c <STATE_Swinp_Up_Postprocessing+0x68>)
 8007608:	6013      	str	r3, [r2, #0]
	prev_cpu_cycle = DWT->CYCCNT;
 800760a:	4b07      	ldr	r3, [pc, #28]	; (8007628 <STATE_Swinp_Up_Postprocessing+0x64>)
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	4a08      	ldr	r2, [pc, #32]	; (8007630 <STATE_Swinp_Up_Postprocessing+0x6c>)
 8007610:	6013      	str	r3, [r2, #0]

	//HAL_Delay(INITIAL_PENDULUM_MOTION_TEST_DELAY);
}
 8007612:	bf00      	nop
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20000378 	.word	0x20000378
 800761c:	200005e8 	.word	0x200005e8
 8007620:	200042fc 	.word	0x200042fc
 8007624:	44480000 	.word	0x44480000
 8007628:	e0001000 	.word	0xe0001000
 800762c:	2000451c 	.word	0x2000451c
 8007630:	20004514 	.word	0x20004514

08007634 <read_Frame>:

/*
 *Jawad Modification ======== ########################
 * Read input frame and decode it
 */
int read_Frame() {
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0

	int k;

	/* Number of bytes to be analyzed */
	uint16_t NumNewByte = 0;
 800763a:	2300      	movs	r3, #0
 800763c:	81fb      	strh	r3, [r7, #14]

	RxBuffer_WriteIdx = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 800763e:	4b2a      	ldr	r3, [pc, #168]	; (80076e8 <read_Frame+0xb4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f1c3 03c6 	rsb	r3, r3, #198	; 0xc6
 8007648:	4a28      	ldr	r2, [pc, #160]	; (80076ec <read_Frame+0xb8>)
 800764a:	6013      	str	r3, [r2, #0]
	uint16_t LastPos  = RxBuffer_WriteIdx;
 800764c:	4b27      	ldr	r3, [pc, #156]	; (80076ec <read_Frame+0xb8>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	813b      	strh	r3, [r7, #8]
	uint16_t StartPos = RxBuffer_ReadIdx;
 8007652:	4b27      	ldr	r3, [pc, #156]	; (80076f0 <read_Frame+0xbc>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	80fb      	strh	r3, [r7, #6]

	/* Two index for ByteStuffing process  */
	uint16_t BuffIdx;
	/* Circular buffer index */
	uint16_t MsgIdx;
	if (LastPos >= StartPos) {
 8007658:	893a      	ldrh	r2, [r7, #8]
 800765a:	88fb      	ldrh	r3, [r7, #6]
 800765c:	429a      	cmp	r2, r3
 800765e:	d304      	bcc.n	800766a <read_Frame+0x36>
		NumNewByte = LastPos - StartPos;
 8007660:	893a      	ldrh	r2, [r7, #8]
 8007662:	88fb      	ldrh	r3, [r7, #6]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	81fb      	strh	r3, [r7, #14]
 8007668:	e005      	b.n	8007676 <read_Frame+0x42>
	} else {
		NumNewByte = UART_RX_BUFFER_SIZE + LastPos - StartPos;
 800766a:	893a      	ldrh	r2, [r7, #8]
 800766c:	88fb      	ldrh	r3, [r7, #6]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	b29b      	uxth	r3, r3
 8007672:	33c6      	adds	r3, #198	; 0xc6
 8007674:	81fb      	strh	r3, [r7, #14]
	}

	if( NumNewByte < DataFrameReceive_SIZE ) return 0;
 8007676:	89fb      	ldrh	r3, [r7, #14]
 8007678:	2b0a      	cmp	r3, #10
 800767a:	d801      	bhi.n	8007680 <read_Frame+0x4c>
 800767c:	2300      	movs	r3, #0
 800767e:	e02d      	b.n	80076dc <read_Frame+0xa8>

	NumNewByte = DataFrameReceive_SIZE;
 8007680:	230b      	movs	r3, #11
 8007682:	81fb      	strh	r3, [r7, #14]

	BuffIdx = StartPos;
 8007684:	88fb      	ldrh	r3, [r7, #6]
 8007686:	81bb      	strh	r3, [r7, #12]
//							   0x01, 0x00, 0x00, 0x00,  0x03, 0x00, 0x00, 0x00, 0x02, 0x04, 0x05,  //1, 3, 2, 4, 5
//							   0x01, 0x00, 0x00, 0x00,  0x03, 0x00, 0x00, 0x00, 0x02, 0x04, 0x05   //1, 3, 2, 4, 5
//	};
	//############Validation End #########################################################################

	for (MsgIdx = 0; MsgIdx < NumNewByte; MsgIdx++) {
 8007688:	2300      	movs	r3, #0
 800768a:	817b      	strh	r3, [r7, #10]
 800768c:	e010      	b.n	80076b0 <read_Frame+0x7c>
		rx_frameBuffer[MsgIdx] = RxBuffer[BuffIdx];
 800768e:	89ba      	ldrh	r2, [r7, #12]
 8007690:	897b      	ldrh	r3, [r7, #10]
 8007692:	4918      	ldr	r1, [pc, #96]	; (80076f4 <read_Frame+0xc0>)
 8007694:	5c89      	ldrb	r1, [r1, r2]
 8007696:	4a18      	ldr	r2, [pc, #96]	; (80076f8 <read_Frame+0xc4>)
 8007698:	54d1      	strb	r1, [r2, r3]
		BuffIdx++;
 800769a:	89bb      	ldrh	r3, [r7, #12]
 800769c:	3301      	adds	r3, #1
 800769e:	81bb      	strh	r3, [r7, #12]
		if (BuffIdx >= UART_RX_BUFFER_SIZE) {
 80076a0:	89bb      	ldrh	r3, [r7, #12]
 80076a2:	2bc5      	cmp	r3, #197	; 0xc5
 80076a4:	d901      	bls.n	80076aa <read_Frame+0x76>
			BuffIdx = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	81bb      	strh	r3, [r7, #12]
	for (MsgIdx = 0; MsgIdx < NumNewByte; MsgIdx++) {
 80076aa:	897b      	ldrh	r3, [r7, #10]
 80076ac:	3301      	adds	r3, #1
 80076ae:	817b      	strh	r3, [r7, #10]
 80076b0:	897a      	ldrh	r2, [r7, #10]
 80076b2:	89fb      	ldrh	r3, [r7, #14]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d3ea      	bcc.n	800768e <read_Frame+0x5a>
		}
	}
	//memcpy(rx_frameBuffer, RxBuffer+StartPos, NumNewByte );
	rx_frame = (DataFrameReceive)rx_frameBuffer;
 80076b8:	4b10      	ldr	r3, [pc, #64]	; (80076fc <read_Frame+0xc8>)
 80076ba:	4a0f      	ldr	r2, [pc, #60]	; (80076f8 <read_Frame+0xc4>)
 80076bc:	601a      	str	r2, [r3, #0]

	RxBuffer_ReadIdx = (RxBuffer_ReadIdx + NumNewByte) % UART_RX_BUFFER_SIZE;
 80076be:	89fa      	ldrh	r2, [r7, #14]
 80076c0:	4b0b      	ldr	r3, [pc, #44]	; (80076f0 <read_Frame+0xbc>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	441a      	add	r2, r3
 80076c6:	4b0e      	ldr	r3, [pc, #56]	; (8007700 <read_Frame+0xcc>)
 80076c8:	fba3 1302 	umull	r1, r3, r3, r2
 80076cc:	09db      	lsrs	r3, r3, #7
 80076ce:	21c6      	movs	r1, #198	; 0xc6
 80076d0:	fb01 f303 	mul.w	r3, r1, r3
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	4a06      	ldr	r2, [pc, #24]	; (80076f0 <read_Frame+0xbc>)
 80076d8:	6013      	str	r3, [r2, #0]

	return 1;
 80076da:	2301      	movs	r3, #1



}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	20000408 	.word	0x20000408
 80076ec:	2000454c 	.word	0x2000454c
 80076f0:	20004548 	.word	0x20004548
 80076f4:	200004d0 	.word	0x200004d0
 80076f8:	200005b4 	.word	0x200005b4
 80076fc:	200005a4 	.word	0x200005a4
 8007700:	a57eb503 	.word	0xa57eb503

08007704 <Process_Input_Requests>:

/*
 *Jawad Modification ======== ########################
 *Command processor
 */
int Process_Input_Requests(  ){
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0


	if ( read_Frame() ) // Message found
 8007708:	f7ff ff94 	bl	8007634 <read_Frame>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d061      	beq.n	80077d6 <Process_Input_Requests+0xd2>
//		LOOP_BACK_gpioState = rx_frame->gpioState;
//		LOOP_BACK_break_Control_Loop = rx_frame->break_Control_Loop;
//		LOOP_BACK_state = rx_frame->state;


		prev_state = state;
 8007712:	4b32      	ldr	r3, [pc, #200]	; (80077dc <Process_Input_Requests+0xd8>)
 8007714:	781a      	ldrb	r2, [r3, #0]
 8007716:	4b32      	ldr	r3, [pc, #200]	; (80077e0 <Process_Input_Requests+0xdc>)
 8007718:	701a      	strb	r2, [r3, #0]
		state = rx_frame->state;
 800771a:	4b32      	ldr	r3, [pc, #200]	; (80077e4 <Process_Input_Requests+0xe0>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	7a9a      	ldrb	r2, [r3, #10]
 8007720:	4b2e      	ldr	r3, [pc, #184]	; (80077dc <Process_Input_Requests+0xd8>)
 8007722:	701a      	strb	r2, [r3, #0]

		if( prev_state==STATE_PENDULUM_STABLIZATION &&  state == STATE_SWING_UP ){
 8007724:	4b2e      	ldr	r3, [pc, #184]	; (80077e0 <Process_Input_Requests+0xdc>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d105      	bne.n	8007738 <Process_Input_Requests+0x34>
 800772c:	4b2b      	ldr	r3, [pc, #172]	; (80077dc <Process_Input_Requests+0xd8>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b02      	cmp	r3, #2
 8007732:	d101      	bne.n	8007738 <Process_Input_Requests+0x34>
			STATE_Pendulum_Stablisation_Postprocessing();
 8007734:	f7ff fd84 	bl	8007240 <STATE_Pendulum_Stablisation_Postprocessing>
		}
		if( prev_state==STATE_SWING_UP &&  state == STATE_MAIN){ //transitioning to Main from switng-up
 8007738:	4b29      	ldr	r3, [pc, #164]	; (80077e0 <Process_Input_Requests+0xdc>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b02      	cmp	r3, #2
 800773e:	d105      	bne.n	800774c <Process_Input_Requests+0x48>
 8007740:	4b26      	ldr	r3, [pc, #152]	; (80077dc <Process_Input_Requests+0xd8>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b03      	cmp	r3, #3
 8007746:	d101      	bne.n	800774c <Process_Input_Requests+0x48>
			STATE_Swinp_Up_Postprocessing();
 8007748:	f7ff ff3c 	bl	80075c4 <STATE_Swinp_Up_Postprocessing>
		}

		if( state == STATE_PENDULUM_STABLIZATION){//do nothing just delay and wait
 800774c:	4b23      	ldr	r3, [pc, #140]	; (80077dc <Process_Input_Requests+0xd8>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d104      	bne.n	800775e <Process_Input_Requests+0x5a>
			HAL_Delay(INITIAL_PENDULUM_MOTION_TEST_DELAY);
 8007754:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007758:	f7fb ffc4 	bl	80036e4 <HAL_Delay>
 800775c:	e034      	b.n	80077c8 <Process_Input_Requests+0xc4>
		}else if( state == STATE_SWING_UP){//swing up state
 800775e:	4b1f      	ldr	r3, [pc, #124]	; (80077dc <Process_Input_Requests+0xd8>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b02      	cmp	r3, #2
 8007764:	d119      	bne.n	800779a <Process_Input_Requests+0x96>

			swing_up_direction = rx_frame->gpioState;
 8007766:	4b1f      	ldr	r3, [pc, #124]	; (80077e4 <Process_Input_Requests+0xe0>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	7a1a      	ldrb	r2, [r3, #8]
 800776c:	4b1e      	ldr	r3, [pc, #120]	; (80077e8 <Process_Input_Requests+0xe4>)
 800776e:	701a      	strb	r2, [r3, #0]
			stage_amp = rx_frame->control_target_steps;
 8007770:	4b1c      	ldr	r3, [pc, #112]	; (80077e4 <Process_Input_Requests+0xe0>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a1d      	ldr	r2, [pc, #116]	; (80077ec <Process_Input_Requests+0xe8>)
 8007778:	6013      	str	r3, [r2, #0]
			if( stage_amp > 0){
 800777a:	4b1c      	ldr	r3, [pc, #112]	; (80077ec <Process_Input_Requests+0xe8>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	dd22      	ble.n	80077c8 <Process_Input_Requests+0xc4>
				BSP_MotorControl_Move(0, swing_up_direction, stage_amp);
 8007782:	4b19      	ldr	r3, [pc, #100]	; (80077e8 <Process_Input_Requests+0xe4>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	4a19      	ldr	r2, [pc, #100]	; (80077ec <Process_Input_Requests+0xe8>)
 8007788:	6812      	ldr	r2, [r2, #0]
 800778a:	4619      	mov	r1, r3
 800778c:	2000      	movs	r0, #0
 800778e:	f7fb fcfb 	bl	8003188 <BSP_MotorControl_Move>
				BSP_MotorControl_WaitWhileActive(0);
 8007792:	2000      	movs	r0, #0
 8007794:	f7fb fe22 	bl	80033dc <BSP_MotorControl_WaitWhileActive>
 8007798:	e016      	b.n	80077c8 <Process_Input_Requests+0xc4>
			}
		}else{
			if( rx_frame->gpioState != UNKNOW_DIR )
 800779a:	4b12      	ldr	r3, [pc, #72]	; (80077e4 <Process_Input_Requests+0xe0>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	7a1b      	ldrb	r3, [r3, #8]
 80077a0:	2bff      	cmp	r3, #255	; 0xff
 80077a2:	d006      	beq.n	80077b2 <Process_Input_Requests+0xae>
				L6474_Board_SetDirectionGpio(0, rx_frame->gpioState);
 80077a4:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <Process_Input_Requests+0xe0>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	7a1b      	ldrb	r3, [r3, #8]
 80077aa:	4619      	mov	r1, r3
 80077ac:	2000      	movs	r0, #0
 80077ae:	f7fb faf3 	bl	8002d98 <L6474_Board_SetDirectionGpio>

			if( rx_frame->Pwm1Period != 0 )
 80077b2:	4b0c      	ldr	r3, [pc, #48]	; (80077e4 <Process_Input_Requests+0xe0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d005      	beq.n	80077c8 <Process_Input_Requests+0xc4>
				L6474_Board_Pwm1SetPeriod(rx_frame->Pwm1Period);
 80077bc:	4b09      	ldr	r3, [pc, #36]	; (80077e4 <Process_Input_Requests+0xe0>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fb f9b0 	bl	8002b28 <L6474_Board_Pwm1SetPeriod>
			//else
			//	BSP_MotorControl_GoTo(0,rx_frame->control_target_steps );
		}

		if( rx_frame->break_Control_Loop == 1){
 80077c8:	4b06      	ldr	r3, [pc, #24]	; (80077e4 <Process_Input_Requests+0xe0>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	7a5b      	ldrb	r3, [r3, #9]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <Process_Input_Requests+0xd2>
			return 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	e000      	b.n	80077d8 <Process_Input_Requests+0xd4>
		}



	}
	return 1;
 80077d6:	2301      	movs	r3, #1
}
 80077d8:	4618      	mov	r0, r3
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	200005d1 	.word	0x200005d1
 80077e0:	200005d0 	.word	0x200005d0
 80077e4:	200005a4 	.word	0x200005a4
 80077e8:	2000423c 	.word	0x2000423c
 80077ec:	2000424c 	.word	0x2000424c

080077f0 <HAL_SPI_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param[in] hspi SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08c      	sub	sp, #48	; 0x30
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hspi->Instance == SPIx)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a31      	ldr	r2, [pc, #196]	; (80078c4 <HAL_SPI_MspInit+0xd4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d15b      	bne.n	80078ba <HAL_SPI_MspInit+0xca>
  {  
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    SPIx_SCK_GPIO_CLK_ENABLE();
 8007802:	2300      	movs	r3, #0
 8007804:	61bb      	str	r3, [r7, #24]
 8007806:	4b30      	ldr	r3, [pc, #192]	; (80078c8 <HAL_SPI_MspInit+0xd8>)
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	4a2f      	ldr	r2, [pc, #188]	; (80078c8 <HAL_SPI_MspInit+0xd8>)
 800780c:	f043 0301 	orr.w	r3, r3, #1
 8007810:	6313      	str	r3, [r2, #48]	; 0x30
 8007812:	4b2d      	ldr	r3, [pc, #180]	; (80078c8 <HAL_SPI_MspInit+0xd8>)
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	61bb      	str	r3, [r7, #24]
 800781c:	69bb      	ldr	r3, [r7, #24]
    SPIx_MISO_GPIO_CLK_ENABLE();
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]
 8007822:	4b29      	ldr	r3, [pc, #164]	; (80078c8 <HAL_SPI_MspInit+0xd8>)
 8007824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007826:	4a28      	ldr	r2, [pc, #160]	; (80078c8 <HAL_SPI_MspInit+0xd8>)
 8007828:	f043 0301 	orr.w	r3, r3, #1
 800782c:	6313      	str	r3, [r2, #48]	; 0x30
 800782e:	4b26      	ldr	r3, [pc, #152]	; (80078c8 <HAL_SPI_MspInit+0xd8>)
 8007830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	697b      	ldr	r3, [r7, #20]
    SPIx_MOSI_GPIO_CLK_ENABLE();
 800783a:	2300      	movs	r3, #0
 800783c:	613b      	str	r3, [r7, #16]
 800783e:	4b22      	ldr	r3, [pc, #136]	; (80078c8 <HAL_SPI_MspInit+0xd8>)
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	4a21      	ldr	r2, [pc, #132]	; (80078c8 <HAL_SPI_MspInit+0xd8>)
 8007844:	f043 0301 	orr.w	r3, r3, #1
 8007848:	6313      	str	r3, [r2, #48]	; 0x30
 800784a:	4b1f      	ldr	r3, [pc, #124]	; (80078c8 <HAL_SPI_MspInit+0xd8>)
 800784c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	693b      	ldr	r3, [r7, #16]
    /* Enable SPI clock */
    SPIx_CLK_ENABLE(); 
 8007856:	2300      	movs	r3, #0
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	4b1b      	ldr	r3, [pc, #108]	; (80078c8 <HAL_SPI_MspInit+0xd8>)
 800785c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785e:	4a1a      	ldr	r2, [pc, #104]	; (80078c8 <HAL_SPI_MspInit+0xd8>)
 8007860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007864:	6453      	str	r3, [r2, #68]	; 0x44
 8007866:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <HAL_SPI_MspInit+0xd8>)
 8007868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	68fb      	ldr	r3, [r7, #12]
    
    /*##-2- Configure peripheral GPIO ##########################################*/  
    /* SPI SCK GPIO pin configuration  */
    GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 8007872:	2320      	movs	r3, #32
 8007874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007876:	2302      	movs	r3, #2
 8007878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800787a:	2300      	movs	r3, #0
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed     = GPIO_SPEED_MEDIUM;
 800787e:	2301      	movs	r3, #1
 8007880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8007882:	2305      	movs	r3, #5
 8007884:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8007886:	f107 031c 	add.w	r3, r7, #28
 800788a:	4619      	mov	r1, r3
 800788c:	480f      	ldr	r0, [pc, #60]	; (80078cc <HAL_SPI_MspInit+0xdc>)
 800788e:	f7fc fbd3 	bl	8004038 <HAL_GPIO_Init>
      
    /* SPI MISO GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8007892:	2340      	movs	r3, #64	; 0x40
 8007894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8007896:	2305      	movs	r3, #5
 8007898:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 800789a:	f107 031c 	add.w	r3, r7, #28
 800789e:	4619      	mov	r1, r3
 80078a0:	480a      	ldr	r0, [pc, #40]	; (80078cc <HAL_SPI_MspInit+0xdc>)
 80078a2:	f7fc fbc9 	bl	8004038 <HAL_GPIO_Init>
    
    /* SPI MOSI GPIO pin configuration  */
    GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 80078a6:	2380      	movs	r3, #128	; 0x80
 80078a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 80078aa:	2305      	movs	r3, #5
 80078ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      
    HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);   
 80078ae:	f107 031c 	add.w	r3, r7, #28
 80078b2:	4619      	mov	r1, r3
 80078b4:	4805      	ldr	r0, [pc, #20]	; (80078cc <HAL_SPI_MspInit+0xdc>)
 80078b6:	f7fc fbbf 	bl	8004038 <HAL_GPIO_Init>
  }
}
 80078ba:	bf00      	nop
 80078bc:	3730      	adds	r7, #48	; 0x30
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	40013000 	.word	0x40013000
 80078c8:	40023800 	.word	0x40023800
 80078cc:	40020000 	.word	0x40020000

080078d0 <HAL_TIM_PWM_MspInit>:
  * @brief PWM MSP Initialization 
  * @param[in] htim_pwm PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b088      	sub	sp, #32
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e0:	d123      	bne.n	800792a <HAL_TIM_PWM_MspInit+0x5a>
	  {
			GPIO_InitTypeDef GPIO_InitStruct;
			/* Peripheral clock enable */
			__BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1_CLCK_ENABLE();
 80078e2:	2300      	movs	r3, #0
 80078e4:	60bb      	str	r3, [r7, #8]
 80078e6:	4b13      	ldr	r3, [pc, #76]	; (8007934 <HAL_TIM_PWM_MspInit+0x64>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	4a12      	ldr	r2, [pc, #72]	; (8007934 <HAL_TIM_PWM_MspInit+0x64>)
 80078ec:	f043 0301 	orr.w	r3, r3, #1
 80078f0:	6413      	str	r3, [r2, #64]	; 0x40
 80078f2:	4b10      	ldr	r3, [pc, #64]	; (8007934 <HAL_TIM_PWM_MspInit+0x64>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	60bb      	str	r3, [r7, #8]
 80078fc:	68bb      	ldr	r3, [r7, #8]

			/* GPIO configuration */
			GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_1_PIN;
 80078fe:	2380      	movs	r3, #128	; 0x80
 8007900:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;//GPIO_MODE_AF_PP;
 8007902:	2301      	movs	r3, #1
 8007904:	613b      	str	r3, [r7, #16]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007906:	2300      	movs	r3, #0
 8007908:	617b      	str	r3, [r7, #20]
			GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800790a:	2300      	movs	r3, #0
 800790c:	61bb      	str	r3, [r7, #24]
			//GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AFx_TIMx_PWM1;
			HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PWM_1_PORT, &GPIO_InitStruct);
 800790e:	f107 030c 	add.w	r3, r7, #12
 8007912:	4619      	mov	r1, r3
 8007914:	4808      	ldr	r0, [pc, #32]	; (8007938 <HAL_TIM_PWM_MspInit+0x68>)
 8007916:	f7fc fb8f 	bl	8004038 <HAL_GPIO_Init>

			/* Set Interrupt Group Priority of Timer Interrupt*/
			HAL_NVIC_SetPriority(BSP_MOTOR_CONTROL_BOARD_PWM1_IRQn, 4, 0);
 800791a:	2200      	movs	r2, #0
 800791c:	2104      	movs	r1, #4
 800791e:	201c      	movs	r0, #28
 8007920:	f7fb ffdb 	bl	80038da <HAL_NVIC_SetPriority>

			/* Enable the timer global Interrupt */
			HAL_NVIC_EnableIRQ(BSP_MOTOR_CONTROL_BOARD_PWM1_IRQn);
 8007924:	201c      	movs	r0, #28
 8007926:	f7fb fff4 	bl	8003912 <HAL_NVIC_EnableIRQ>
	  }
}
 800792a:	bf00      	nop
 800792c:	3720      	adds	r7, #32
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40023800 	.word	0x40023800
 8007938:	40020800 	.word	0x40020800

0800793c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief PWM Callback
  * @param[in] htim PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  if ((htim->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1)&& (htim->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794c:	d11c      	bne.n	8007988 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7e1b      	ldrb	r3, [r3, #24]
 8007952:	2b02      	cmp	r3, #2
 8007954:	d118      	bne.n	8007988 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>
  {
	int delay_pulse = Delay_Pulse();
 8007956:	f7fe ffb9 	bl	80068cc <Delay_Pulse>
 800795a:	60f8      	str	r0, [r7, #12]
	if (delay_pulse == 0){
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d107      	bne.n	8007972 <HAL_TIM_PWM_PulseFinishedCallback+0x36>
		HAL_GPIO_TogglePin(BSP_MOTOR_CONTROL_BOARD_PWM_1_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_1_PIN);
 8007962:	2180      	movs	r1, #128	; 0x80
 8007964:	480a      	ldr	r0, [pc, #40]	; (8007990 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 8007966:	f7fc fd04 	bl	8004372 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BSP_MOTOR_CONTROL_BOARD_PWM_1_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_1_PIN);
 800796a:	2180      	movs	r1, #128	; 0x80
 800796c:	4808      	ldr	r0, [pc, #32]	; (8007990 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 800796e:	f7fc fd00 	bl	8004372 <HAL_GPIO_TogglePin>
	}
    if (BSP_MotorControl_GetDeviceState(0) != INACTIVE)
 8007972:	2000      	movs	r0, #0
 8007974:	f7fb fb7e 	bl	8003074 <BSP_MotorControl_GetDeviceState>
 8007978:	4603      	mov	r3, r0
 800797a:	2b08      	cmp	r3, #8
 800797c:	d002      	beq.n	8007984 <HAL_TIM_PWM_PulseFinishedCallback+0x48>
    {
    	BSP_MotorControl_StepClockHandler(0);
 800797e:	2000      	movs	r0, #0
 8007980:	f7fb fd0c 	bl	800339c <BSP_MotorControl_StepClockHandler>
    }
    Main_StepClockHandler();
 8007984:	f7fe ffb4 	bl	80068f0 <Main_StepClockHandler>
  }
}
 8007988:	bf00      	nop
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	40020800 	.word	0x40020800

08007994 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM3)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a12      	ldr	r2, [pc, #72]	; (80079ec <HAL_TIM_Encoder_MspInit+0x58>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d11d      	bne.n	80079e2 <HAL_TIM_Encoder_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80079a6:	2300      	movs	r3, #0
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <HAL_TIM_Encoder_MspInit+0x5c>)
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	4a10      	ldr	r2, [pc, #64]	; (80079f0 <HAL_TIM_Encoder_MspInit+0x5c>)
 80079b0:	f043 0302 	orr.w	r3, r3, #2
 80079b4:	6413      	str	r3, [r2, #64]	; 0x40
 80079b6:	4b0e      	ldr	r3, [pc, #56]	; (80079f0 <HAL_TIM_Encoder_MspInit+0x5c>)
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	60bb      	str	r3, [r7, #8]
 80079c0:	68bb      	ldr	r3, [r7, #8]

    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80079c2:	2330      	movs	r3, #48	; 0x30
 80079c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079c6:	2302      	movs	r3, #2
 80079c8:	613b      	str	r3, [r7, #16]
    // GPIO_InitStruct.Pull = GPIO_NOPULL;
       /*
        * Pull Up Set for Encoder with Open Collector Output
        */
       GPIO_InitStruct.Pull = GPIO_PULLUP;
 80079ca:	2301      	movs	r3, #1
 80079cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079ce:	2303      	movs	r3, #3
 80079d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80079d2:	2302      	movs	r3, #2
 80079d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079d6:	f107 030c 	add.w	r3, r7, #12
 80079da:	4619      	mov	r1, r3
 80079dc:	4805      	ldr	r0, [pc, #20]	; (80079f4 <HAL_TIM_Encoder_MspInit+0x60>)
 80079de:	f7fc fb2b 	bl	8004038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80079e2:	bf00      	nop
 80079e4:	3720      	adds	r7, #32
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	40000400 	.word	0x40000400
 80079f0:	40023800 	.word	0x40023800
 80079f4:	40020400 	.word	0x40020400

080079f8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a16      	ldr	r2, [pc, #88]	; (8007a60 <HAL_UART_MspInit+0x68>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d125      	bne.n	8007a56 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	60bb      	str	r3, [r7, #8]
 8007a0e:	4b15      	ldr	r3, [pc, #84]	; (8007a64 <HAL_UART_MspInit+0x6c>)
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	4a14      	ldr	r2, [pc, #80]	; (8007a64 <HAL_UART_MspInit+0x6c>)
 8007a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a18:	6413      	str	r3, [r2, #64]	; 0x40
 8007a1a:	4b12      	ldr	r3, [pc, #72]	; (8007a64 <HAL_UART_MspInit+0x6c>)
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a22:	60bb      	str	r3, [r7, #8]
 8007a24:	68bb      	ldr	r3, [r7, #8]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007a26:	230c      	movs	r3, #12
 8007a28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a32:	2302      	movs	r3, #2
 8007a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007a36:	2307      	movs	r3, #7
 8007a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a3a:	f107 030c 	add.w	r3, r7, #12
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4809      	ldr	r0, [pc, #36]	; (8007a68 <HAL_UART_MspInit+0x70>)
 8007a42:	f7fc faf9 	bl	8004038 <HAL_GPIO_Init>

    /* Configure the NVIC for UART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8007a46:	2201      	movs	r2, #1
 8007a48:	2100      	movs	r1, #0
 8007a4a:	2026      	movs	r0, #38	; 0x26
 8007a4c:	f7fb ff45 	bl	80038da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007a50:	2026      	movs	r0, #38	; 0x26
 8007a52:	f7fb ff5e 	bl	8003912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007a56:	bf00      	nop
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	40004400 	.word	0x40004400
 8007a64:	40023800 	.word	0x40023800
 8007a68:	40020000 	.word	0x40020000

08007a6c <HAL_GPIO_EXTI_Callback>:
  * @brief External Line Callback 
  * @param[in] GPIO_Pin pin number
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	4603      	mov	r3, r0
 8007a74:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BSP_MOTOR_CONTROL_BOARD_FLAG_PIN)
 8007a76:	88fb      	ldrh	r3, [r7, #6]
 8007a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a7c:	d101      	bne.n	8007a82 <HAL_GPIO_EXTI_Callback+0x16>
  {
    BSP_MotorControl_FlagInterruptHandler();
 8007a7e:	f7fb fadf 	bl	8003040 <BSP_MotorControl_FlagInterruptHandler>
  }
 }
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	af00      	add	r7, sp, #0
}
 8007a8e:	bf00      	nop
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8007a9c:	e7fe      	b.n	8007a9c <HardFault_Handler+0x4>

08007a9e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8007aa2:	e7fe      	b.n	8007aa2 <MemManage_Handler+0x4>

08007aa4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8007aa8:	e7fe      	b.n	8007aa8 <BusFault_Handler+0x4>

08007aaa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8007aae:	e7fe      	b.n	8007aae <UsageFault_Handler+0x4>

08007ab0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
}
 8007ab4:	bf00      	nop
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	af00      	add	r7, sp, #0
}
 8007ac2:	bf00      	nop
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8007acc:	b480      	push	{r7}
 8007ace:	af00      	add	r7, sp, #0
}
 8007ad0:	bf00      	nop
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8007ade:	f7fb fde1 	bl	80036a4 <HAL_IncTick>
}
 8007ae2:	bf00      	nop
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <EXTI15_10_IRQHandler>:
  * @brief  This function handles interrupt for External lines 10 to 15
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8007aea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007aee:	f7fc fc53 	bl	8004398 <HAL_GPIO_EXTI_IRQHandler>
}
 8007af2:	bf00      	nop
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <TIM2_IRQHandler>:
  * @brief  This function handles TIM2 interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm1);
 8007afc:	4802      	ldr	r0, [pc, #8]	; (8007b08 <TIM2_IRQHandler+0x10>)
 8007afe:	f7fd fd35 	bl	800556c <HAL_TIM_IRQHandler>
}
 8007b02:	bf00      	nop
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	200002b4 	.word	0x200002b4

08007b0c <TIM3_IRQHandler>:
  * @brief  This function handles TIM3 interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm2);
 8007b10:	4802      	ldr	r0, [pc, #8]	; (8007b1c <TIM3_IRQHandler+0x10>)
 8007b12:	f7fd fd2b 	bl	800556c <HAL_TIM_IRQHandler>
}
 8007b16:	bf00      	nop
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	200002f0 	.word	0x200002f0

08007b20 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hTimPwm3);
 8007b24:	4802      	ldr	r0, [pc, #8]	; (8007b30 <TIM4_IRQHandler+0x10>)
 8007b26:	f7fd fd21 	bl	800556c <HAL_TIM_IRQHandler>
}
 8007b2a:	bf00      	nop
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	2000032c 	.word	0x2000032c

08007b34 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007b38:	4802      	ldr	r0, [pc, #8]	; (8007b44 <DMA1_Stream5_IRQHandler+0x10>)
 8007b3a:	f7fc f813 	bl	8003b64 <HAL_DMA_IRQHandler>
}
 8007b3e:	bf00      	nop
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	20000408 	.word	0x20000408

08007b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007b4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007b4e:	e003      	b.n	8007b58 <LoopCopyDataInit>

08007b50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007b50:	4b0c      	ldr	r3, [pc, #48]	; (8007b84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007b52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007b54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007b56:	3104      	adds	r1, #4

08007b58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007b58:	480b      	ldr	r0, [pc, #44]	; (8007b88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007b5a:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007b5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007b5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007b60:	d3f6      	bcc.n	8007b50 <CopyDataInit>
  ldr  r2, =_sbss
 8007b62:	4a0b      	ldr	r2, [pc, #44]	; (8007b90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007b64:	e002      	b.n	8007b6c <LoopFillZerobss>

08007b66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007b66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007b68:	f842 3b04 	str.w	r3, [r2], #4

08007b6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007b6c:	4b09      	ldr	r3, [pc, #36]	; (8007b94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007b6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007b70:	d3f9      	bcc.n	8007b66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007b72:	f7fb fd07 	bl	8003584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b76:	f000 f811 	bl	8007b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b7a:	f7ff f979 	bl	8006e70 <main>
  bx  lr    
 8007b7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007b80:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8007b84:	08007d00 	.word	0x08007d00
  ldr  r0, =_sdata
 8007b88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007b8c:	200001a0 	.word	0x200001a0
  ldr  r2, =_sbss
 8007b90:	200001a0 	.word	0x200001a0
  ldr  r3, = _ebss
 8007b94:	200046ec 	.word	0x200046ec

08007b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007b98:	e7fe      	b.n	8007b98 <ADC_IRQHandler>
	...

08007b9c <__libc_init_array>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	4d0d      	ldr	r5, [pc, #52]	; (8007bd4 <__libc_init_array+0x38>)
 8007ba0:	4c0d      	ldr	r4, [pc, #52]	; (8007bd8 <__libc_init_array+0x3c>)
 8007ba2:	1b64      	subs	r4, r4, r5
 8007ba4:	10a4      	asrs	r4, r4, #2
 8007ba6:	2600      	movs	r6, #0
 8007ba8:	42a6      	cmp	r6, r4
 8007baa:	d109      	bne.n	8007bc0 <__libc_init_array+0x24>
 8007bac:	4d0b      	ldr	r5, [pc, #44]	; (8007bdc <__libc_init_array+0x40>)
 8007bae:	4c0c      	ldr	r4, [pc, #48]	; (8007be0 <__libc_init_array+0x44>)
 8007bb0:	f000 f87e 	bl	8007cb0 <_init>
 8007bb4:	1b64      	subs	r4, r4, r5
 8007bb6:	10a4      	asrs	r4, r4, #2
 8007bb8:	2600      	movs	r6, #0
 8007bba:	42a6      	cmp	r6, r4
 8007bbc:	d105      	bne.n	8007bca <__libc_init_array+0x2e>
 8007bbe:	bd70      	pop	{r4, r5, r6, pc}
 8007bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc4:	4798      	blx	r3
 8007bc6:	3601      	adds	r6, #1
 8007bc8:	e7ee      	b.n	8007ba8 <__libc_init_array+0xc>
 8007bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bce:	4798      	blx	r3
 8007bd0:	3601      	adds	r6, #1
 8007bd2:	e7f2      	b.n	8007bba <__libc_init_array+0x1e>
 8007bd4:	08007cf4 	.word	0x08007cf4
 8007bd8:	08007cf4 	.word	0x08007cf4
 8007bdc:	08007cf4 	.word	0x08007cf4
 8007be0:	08007cfc 	.word	0x08007cfc

08007be4 <__retarget_lock_acquire_recursive>:
 8007be4:	4770      	bx	lr

08007be6 <__retarget_lock_release_recursive>:
 8007be6:	4770      	bx	lr

08007be8 <register_fini>:
 8007be8:	4b02      	ldr	r3, [pc, #8]	; (8007bf4 <register_fini+0xc>)
 8007bea:	b113      	cbz	r3, 8007bf2 <register_fini+0xa>
 8007bec:	4802      	ldr	r0, [pc, #8]	; (8007bf8 <register_fini+0x10>)
 8007bee:	f000 b805 	b.w	8007bfc <atexit>
 8007bf2:	4770      	bx	lr
 8007bf4:	00000000 	.word	0x00000000
 8007bf8:	08007c09 	.word	0x08007c09

08007bfc <atexit>:
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4601      	mov	r1, r0
 8007c00:	461a      	mov	r2, r3
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 b814 	b.w	8007c30 <__register_exitproc>

08007c08 <__libc_fini_array>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4d07      	ldr	r5, [pc, #28]	; (8007c28 <__libc_fini_array+0x20>)
 8007c0c:	4c07      	ldr	r4, [pc, #28]	; (8007c2c <__libc_fini_array+0x24>)
 8007c0e:	1b64      	subs	r4, r4, r5
 8007c10:	10a4      	asrs	r4, r4, #2
 8007c12:	b91c      	cbnz	r4, 8007c1c <__libc_fini_array+0x14>
 8007c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c18:	f000 b850 	b.w	8007cbc <_fini>
 8007c1c:	3c01      	subs	r4, #1
 8007c1e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007c22:	4798      	blx	r3
 8007c24:	e7f5      	b.n	8007c12 <__libc_fini_array+0xa>
 8007c26:	bf00      	nop
 8007c28:	08007cfc 	.word	0x08007cfc
 8007c2c:	08007d00 	.word	0x08007d00

08007c30 <__register_exitproc>:
 8007c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c34:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007cac <__register_exitproc+0x7c>
 8007c38:	4606      	mov	r6, r0
 8007c3a:	f8da 0000 	ldr.w	r0, [sl]
 8007c3e:	4698      	mov	r8, r3
 8007c40:	460f      	mov	r7, r1
 8007c42:	4691      	mov	r9, r2
 8007c44:	f7ff ffce 	bl	8007be4 <__retarget_lock_acquire_recursive>
 8007c48:	4b16      	ldr	r3, [pc, #88]	; (8007ca4 <__register_exitproc+0x74>)
 8007c4a:	681c      	ldr	r4, [r3, #0]
 8007c4c:	b90c      	cbnz	r4, 8007c52 <__register_exitproc+0x22>
 8007c4e:	4c16      	ldr	r4, [pc, #88]	; (8007ca8 <__register_exitproc+0x78>)
 8007c50:	601c      	str	r4, [r3, #0]
 8007c52:	6865      	ldr	r5, [r4, #4]
 8007c54:	f8da 0000 	ldr.w	r0, [sl]
 8007c58:	2d1f      	cmp	r5, #31
 8007c5a:	dd05      	ble.n	8007c68 <__register_exitproc+0x38>
 8007c5c:	f7ff ffc3 	bl	8007be6 <__retarget_lock_release_recursive>
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c68:	b19e      	cbz	r6, 8007c92 <__register_exitproc+0x62>
 8007c6a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8007c74:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8007c78:	40aa      	lsls	r2, r5
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8007c80:	2e02      	cmp	r6, #2
 8007c82:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8007c86:	bf02      	ittt	eq
 8007c88:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8007c8c:	4313      	orreq	r3, r2
 8007c8e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8007c92:	1c6b      	adds	r3, r5, #1
 8007c94:	3502      	adds	r5, #2
 8007c96:	6063      	str	r3, [r4, #4]
 8007c98:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8007c9c:	f7ff ffa3 	bl	8007be6 <__retarget_lock_release_recursive>
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	e7df      	b.n	8007c64 <__register_exitproc+0x34>
 8007ca4:	20004558 	.word	0x20004558
 8007ca8:	2000455c 	.word	0x2000455c
 8007cac:	2000019c 	.word	0x2000019c

08007cb0 <_init>:
 8007cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb2:	bf00      	nop
 8007cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb6:	bc08      	pop	{r3}
 8007cb8:	469e      	mov	lr, r3
 8007cba:	4770      	bx	lr

08007cbc <_fini>:
 8007cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbe:	bf00      	nop
 8007cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc2:	bc08      	pop	{r3}
 8007cc4:	469e      	mov	lr, r3
 8007cc6:	4770      	bx	lr
